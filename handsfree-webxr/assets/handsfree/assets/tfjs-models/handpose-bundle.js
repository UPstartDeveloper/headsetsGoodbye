/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.tf = global.tf || {}));
}(this, (function (exports) { 'use strict';

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  function __awaiter(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.
  var TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';
  /**
   * The environment contains evaluated flags as well as the registered platform.
   * This is always used as a global singleton and can be retrieved with
   * `tf.env()`.
   */
  /** @doc {heading: 'Environment'} */
  var Environment = /** @class */ (function () {
      // tslint:disable-next-line: no-any
      function Environment(global) {
          this.global = global;
          this.flags = {};
          this.flagRegistry = {};
          this.urlFlags = {};
          this.populateURLFlags();
      }
      Environment.prototype.setPlatform = function (platformName, platform) {
          if (this.platform != null) {
              console.warn("Platform " + this.platformName + " has already been set. " +
                  ("Overwriting the platform with " + platform + "."));
          }
          this.platformName = platformName;
          this.platform = platform;
      };
      Environment.prototype.registerFlag = function (flagName, evaluationFn, setHook) {
          this.flagRegistry[flagName] = { evaluationFn: evaluationFn, setHook: setHook };
          // Override the flag value from the URL. This has to happen here because the
          // environment is initialized before flags get registered.
          if (this.urlFlags[flagName] != null) {
              var flagValue = this.urlFlags[flagName];
              console.warn("Setting feature override from URL " + flagName + ": " + flagValue + ".");
              this.set(flagName, flagValue);
          }
      };
      Environment.prototype.getAsync = function (flagName) {
          return __awaiter(this, void 0, void 0, function () {
              var _a, _b;
              return __generator(this, function (_c) {
                  switch (_c.label) {
                      case 0:
                          if (flagName in this.flags) {
                              return [2 /*return*/, this.flags[flagName]];
                          }
                          _a = this.flags;
                          _b = flagName;
                          return [4 /*yield*/, this.evaluateFlag(flagName)];
                      case 1:
                          _a[_b] = _c.sent();
                          return [2 /*return*/, this.flags[flagName]];
                  }
              });
          });
      };
      Environment.prototype.get = function (flagName) {
          if (flagName in this.flags) {
              return this.flags[flagName];
          }
          var flagValue = this.evaluateFlag(flagName);
          if (flagValue instanceof Promise) {
              throw new Error("Flag " + flagName + " cannot be synchronously evaluated. " +
                  "Please use getAsync() instead.");
          }
          this.flags[flagName] = flagValue;
          return this.flags[flagName];
      };
      Environment.prototype.getNumber = function (flagName) {
          return this.get(flagName);
      };
      Environment.prototype.getBool = function (flagName) {
          return this.get(flagName);
      };
      Environment.prototype.getFlags = function () {
          return this.flags;
      };
      Object.defineProperty(Environment.prototype, "features", {
          // For backwards compatibility.
          get: function () {
              return this.flags;
          },
          enumerable: true,
          configurable: true
      });
      Environment.prototype.set = function (flagName, value) {
          if (this.flagRegistry[flagName] == null) {
              throw new Error("Cannot set flag " + flagName + " as it has not been registered.");
          }
          this.flags[flagName] = value;
          if (this.flagRegistry[flagName].setHook != null) {
              this.flagRegistry[flagName].setHook(value);
          }
      };
      Environment.prototype.evaluateFlag = function (flagName) {
          if (this.flagRegistry[flagName] == null) {
              throw new Error("Cannot evaluate flag '" + flagName + "': no evaluation function found.");
          }
          return this.flagRegistry[flagName].evaluationFn();
      };
      Environment.prototype.setFlags = function (flags) {
          this.flags = Object.assign({}, flags);
      };
      Environment.prototype.reset = function () {
          this.flags = {};
          this.urlFlags = {};
          this.populateURLFlags();
      };
      Environment.prototype.populateURLFlags = function () {
          var _this = this;
          if (typeof this.global === 'undefined' ||
              typeof this.global.location === 'undefined' ||
              typeof this.global.location.search === 'undefined') {
              return;
          }
          var urlParams = getQueryParams(this.global.location.search);
          if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {
              var keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');
              keyValues.forEach(function (keyValue) {
                  var _a = keyValue.split(':'), key = _a[0], value = _a[1];
                  _this.urlFlags[key] = parseValue(key, value);
              });
          }
      };
      return Environment;
  }());
  function getQueryParams(queryString) {
      var params = {};
      queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (s) {
          var t = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              t[_i - 1] = arguments[_i];
          }
          decodeParam(params, t[0], t[1]);
          return t.join('=');
      });
      return params;
  }
  function decodeParam(params, name, value) {
      params[decodeURIComponent(name)] = decodeURIComponent(value || '');
  }
  function parseValue(flagName, value) {
      value = value.toLowerCase();
      if (value === 'true' || value === 'false') {
          return value === 'true';
      }
      else if ("" + +value === value) {
          return +value;
      }
      throw new Error("Could not parse value flag value " + value + " for flag " + flagName + ".");
  }
  /**
   * Returns the current environment (a global singleton).
   *
   * The environment object contains the evaluated feature values as well as the
   * active platform.
   */
  /** @doc {heading: 'Environment'} */
  function env() {
      return exports.ENV;
  }
  exports.ENV = null;
  function setEnvironmentGlobal(environment) {
      exports.ENV = environment;
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // Note that the identifier globalNameSpace is scoped to this module, but will
  // always resolve to the same global object regardless of how the module is
  // resolved.
  // tslint:disable-next-line:no-any
  var globalNameSpace;
  // tslint:disable-next-line:no-any
  function getGlobalNamespace() {
      if (globalNameSpace == null) {
          // tslint:disable-next-line:no-any
          var ns = void 0;
          if (typeof (window) !== 'undefined') {
              ns = window;
          }
          else if (typeof (global) !== 'undefined') {
              ns = global;
          }
          else if (typeof (process) !== 'undefined') {
              ns = process;
          }
          else if (typeof (self) !== 'undefined') {
              ns = self;
          }
          else {
              throw new Error('Could not find a global object');
          }
          globalNameSpace = ns;
      }
      return globalNameSpace;
  }
  // tslint:disable-next-line:no-any
  function getGlobalMap() {
      var ns = getGlobalNamespace();
      if (ns._tfGlobals == null) {
          ns._tfGlobals = new Map();
      }
      return ns._tfGlobals;
  }
  /**
   * Returns a globally accessible 'singleton' object.
   *
   * @param key the name of the object
   * @param init a function to initialize to initialize this object
   *             the first time it is fetched.
   */
  function getGlobal(key, init) {
      var globalMap = getGlobalMap();
      if (globalMap.has(key)) {
          return globalMap.get(key);
      }
      else {
          var singleton = init();
          globalMap.set(key, singleton);
          return globalMap.get(key);
      }
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var kernelRegistry = getGlobal('kernelRegistry', function () { return new Map(); });
  var gradRegistry = getGlobal('gradRegistry', function () { return new Map(); });
  /**
   * Returns the kernel function (code) associated with the provided names.
   *
   * @param kernelName The official name of the kernel.
   * @param backendName The official name of the backend.
   */
  function getKernel(kernelName, backendName) {
      var key = makeKey(kernelName, backendName);
      return kernelRegistry.get(key);
  }
  /**
   * Returns the registered gradient info associated with the provided kernel.
   * @param kernelName The official TF kernel name.
   */
  function getGradient(kernelName) {
      return gradRegistry.get(kernelName);
  }
  function getKernelsForBackend(backendName) {
      var it = kernelRegistry.entries();
      var result = [];
      while (true) {
          var _a = it.next(), done = _a.done, value = _a.value;
          if (done) {
              break;
          }
          var key = value[0], config = value[1];
          var backend = key.split('_')[0];
          if (backend === backendName) {
              result.push(config);
          }
      }
      return result;
  }
  /**
   * Registers the function (forward pass) for the kernel in a global registry.
   *
   * @param config A config object with the following properties:
   * - `kernelName` The official name of the kernel.
   * - `backendName` The official name of the backend.
   * - `kernelFunc` The function to run during the forward pass of the kernel.
   * - `setupFunc` Optional. Gets called once, after the backend initializes.
   * - `disposeFunc` Optional. Gets called once, right before the backend is
   * disposed.
   */
  function registerKernel(config) {
      var kernelName = config.kernelName, backendName = config.backendName;
      var key = makeKey(kernelName, backendName);
      if (kernelRegistry.has(key)) {
          console.warn("The kernel '" + kernelName + "' for backend " +
              ("'" + backendName + "' is already registered"));
      }
      kernelRegistry.set(key, config);
  }
  /**
   * Registers a gradient function for a given kernel in the global registry,
   * to be used during the back-propagation of that kernel.
   *
   * @param config An object with the following properties:
   * - `kernelName` The name of the kernel that the gradient function is for.
   * - `gradFunc` The function to run during back-propagation.
   */
  function registerGradient(config) {
      var kernelName = config.kernelName;
      if (gradRegistry.has(kernelName)) {
          // TODO (yassogba) after 3.0 assess whether we need to keep this gated
          // to debug mode.
          if (env().getBool('DEBUG')) {
              console.warn("Overriding the gradient for '" + kernelName + "'");
          }
      }
      gradRegistry.set(kernelName, config);
  }
  /**
   * Removes the kernel function from the registry.
   *
   * @param kernelName The official name of the kernel.
   * @param backendName The official name of the backend.
   *
   */
  function unregisterKernel(kernelName, backendName) {
      var key = makeKey(kernelName, backendName);
      if (!kernelRegistry.has(key)) {
          throw new Error("The kernel '" + kernelName + "' for backend " +
              ("'" + backendName + "' is not registered"));
      }
      kernelRegistry.delete(key);
  }
  /** Removes the registered gradient from the global registry. */
  function unregisterGradient(kernelName) {
      if (!gradRegistry.has(kernelName)) {
          throw new Error("The gradient '" + kernelName + "' for backend is not registered");
      }
      gradRegistry.delete(kernelName);
  }
  function makeKey(kernelName, backendName) {
      return backendName + "_" + kernelName;
  }

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Shuffles the array in-place using Fisher-Yates algorithm.
   *
   * ```js
   * const a = [1, 2, 3, 4, 5];
   * tf.util.shuffle(a);
   * console.log(a);
   * ```
   *
   * @param array The array to shuffle in-place.
   */
  /** @doc {heading: 'Util', namespace: 'util'} */
  // tslint:disable-next-line:no-any
  function shuffle(array) {
      var counter = array.length;
      var temp = 0;
      var index = 0;
      // While there are elements in the array
      while (counter > 0) {
          // Pick a random index
          index = (Math.random() * counter) | 0;
          // Decrease counter by 1
          counter--;
          // And swap the last element with it
          temp = array[counter];
          array[counter] = array[index];
          array[index] = temp;
      }
  }
  /** Clamps a value to a specified range. */
  function clamp(min, x, max) {
      return Math.max(min, Math.min(x, max));
  }
  function nearestLargerEven(val) {
      return val % 2 === 0 ? val : val + 1;
  }
  function sum(arr) {
      var sum = 0;
      for (var i = 0; i < arr.length; i++) {
          sum += arr[i];
      }
      return sum;
  }
  /**
   * Returns a sample from a uniform [a, b) distribution.
   *
   * @param a The minimum support (inclusive).
   * @param b The maximum support (exclusive).
   * @return A pseudorandom number on the half-open interval [a,b).
   */
  function randUniform(a, b) {
      var r = Math.random();
      return (b * r) + (1 - r) * a;
  }
  /** Returns the squared Euclidean distance between two vectors. */
  function distSquared(a, b) {
      var result = 0;
      for (var i = 0; i < a.length; i++) {
          var diff = Number(a[i]) - Number(b[i]);
          result += diff * diff;
      }
      return result;
  }
  /**
   * Asserts that the expression is true. Otherwise throws an error with the
   * provided message.
   *
   * ```js
   * const x = 2;
   * tf.util.assert(x === 2, 'x is not 2');
   * ```
   *
   * @param expr The expression to assert (as a boolean).
   * @param msg A function that returns the message to report when throwing an
   *     error. We use a function for performance reasons.
   */
  /** @doc {heading: 'Util', namespace: 'util'} */
  function assert(expr, msg) {
      if (!expr) {
          throw new Error(typeof msg === 'string' ? msg : msg());
      }
  }
  function assertShapesMatch(shapeA, shapeB, errorMessagePrefix) {
      if (errorMessagePrefix === void 0) { errorMessagePrefix = ''; }
      assert(arraysEqual(shapeA, shapeB), function () { return errorMessagePrefix + (" Shapes " + shapeA + " and " + shapeB + " must match"); });
  }
  function assertNonNull(a) {
      assert(a != null, function () { return "The input to the tensor constructor must be a non-null value."; });
  }
  // NOTE: We explicitly type out what T extends instead of any so that
  // util.flatten on a nested array of number doesn't try to infer T as a
  // number[][], causing us to explicitly type util.flatten<number>().
  /**
   *  Flattens an arbitrarily nested array.
   *
   * ```js
   * const a = [[1, 2], [3, 4], [5, [6, [7]]]];
   * const flat = tf.util.flatten(a);
   * console.log(flat);
   * ```
   *
   *  @param arr The nested array to flatten.
   *  @param result The destination array which holds the elements.
   *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults
   *      to false.
   */
  /** @doc {heading: 'Util', namespace: 'util'} */
  function flatten(arr, result, skipTypedArray) {
      if (result === void 0) { result = []; }
      if (skipTypedArray === void 0) { skipTypedArray = false; }
      if (result == null) {
          result = [];
      }
      if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {
          for (var i = 0; i < arr.length; ++i) {
              flatten(arr[i], result, skipTypedArray);
          }
      }
      else {
          result.push(arr);
      }
      return result;
  }
  /**
   * Returns the size (number of elements) of the tensor given its shape.
   *
   * ```js
   * const shape = [3, 4, 2];
   * const size = tf.util.sizeFromShape(shape);
   * console.log(size);
   * ```
   */
  /** @doc {heading: 'Util', namespace: 'util'} */
  function sizeFromShape(shape) {
      if (shape.length === 0) {
          // Scalar.
          return 1;
      }
      var size = shape[0];
      for (var i = 1; i < shape.length; i++) {
          size *= shape[i];
      }
      return size;
  }
  function isScalarShape(shape) {
      return shape.length === 0;
  }
  function arraysEqual(n1, n2) {
      if (n1 === n2) {
          return true;
      }
      if (n1 == null || n2 == null) {
          return false;
      }
      if (n1.length !== n2.length) {
          return false;
      }
      for (var i = 0; i < n1.length; i++) {
          if (n1[i] !== n2[i]) {
              return false;
          }
      }
      return true;
  }
  function isInt(a) {
      return a % 1 === 0;
  }
  function tanh(x) {
      // tslint:disable-next-line:no-any
      if (Math.tanh != null) {
          // tslint:disable-next-line:no-any
          return Math.tanh(x);
      }
      if (x === Infinity) {
          return 1;
      }
      else if (x === -Infinity) {
          return -1;
      }
      else {
          var e2x = Math.exp(2 * x);
          return (e2x - 1) / (e2x + 1);
      }
  }
  function sizeToSquarishShape(size) {
      var width = Math.ceil(Math.sqrt(size));
      return [width, Math.ceil(size / width)];
  }
  /**
   * Creates a new array with randomized indicies to a given quantity.
   *
   * ```js
   * const randomTen = tf.util.createShuffledIndices(10);
   * console.log(randomTen);
   * ```
   *
   * @param number Quantity of how many shuffled indicies to create.
   */
  /** @doc {heading: 'Util', namespace: 'util'} */
  function createShuffledIndices(n) {
      var shuffledIndices = new Uint32Array(n);
      for (var i = 0; i < n; ++i) {
          shuffledIndices[i] = i;
      }
      shuffle(shuffledIndices);
      return shuffledIndices;
  }
  function rightPad(a, size) {
      if (size <= a.length) {
          return a;
      }
      return a + ' '.repeat(size - a.length);
  }
  function repeatedTry(checkFn, delayFn, maxCounter) {
      if (delayFn === void 0) { delayFn = function (counter) { return 0; }; }
      return new Promise(function (resolve, reject) {
          var tryCount = 0;
          var tryFn = function () {
              if (checkFn()) {
                  resolve();
                  return;
              }
              tryCount++;
              var nextBackoff = delayFn(tryCount);
              if (maxCounter != null && tryCount >= maxCounter) {
                  reject();
                  return;
              }
              setTimeout(tryFn, nextBackoff);
          };
          tryFn();
      });
  }
  /**
   * Given the full size of the array and a shape that may contain -1 as the
   * implicit dimension, returns the inferred shape where -1 is replaced.
   * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].
   *
   * @param shape The shape, which may contain -1 in some dimension.
   * @param size The full size (number of elements) of the array.
   * @return The inferred shape where -1 is replaced with the inferred size.
   */
  function inferFromImplicitShape(shape, size) {
      var shapeProd = 1;
      var implicitIdx = -1;
      for (var i = 0; i < shape.length; ++i) {
          if (shape[i] >= 0) {
              shapeProd *= shape[i];
          }
          else if (shape[i] === -1) {
              if (implicitIdx !== -1) {
                  throw Error("Shapes can only have 1 implicit size. " +
                      ("Found -1 at dim " + implicitIdx + " and dim " + i));
              }
              implicitIdx = i;
          }
          else if (shape[i] < 0) {
              throw Error("Shapes can not be < 0. Found " + shape[i] + " at dim " + i);
          }
      }
      if (implicitIdx === -1) {
          if (size > 0 && size !== shapeProd) {
              throw Error("Size(" + size + ") must match the product of shape " + shape);
          }
          return shape;
      }
      if (shapeProd === 0) {
          throw Error("Cannot infer the missing size in [" + shape + "] when " +
              "there are 0 elements");
      }
      if (size % shapeProd !== 0) {
          throw Error("The implicit shape can't be a fractional number. " +
              ("Got " + size + " / " + shapeProd));
      }
      var newShape = shape.slice();
      newShape[implicitIdx] = size / shapeProd;
      return newShape;
  }
  function parseAxisParam(axis, shape) {
      var rank = shape.length;
      // Normalize input
      axis = axis == null ? shape.map(function (s, i) { return i; }) : [].concat(axis);
      // Check for valid range
      assert(axis.every(function (ax) { return ax >= -rank && ax < rank; }), function () {
          return "All values in axis param must be in range [-" + rank + ", " + rank + ") but " +
              ("got axis " + axis);
      });
      // Check for only integers
      assert(axis.every(function (ax) { return isInt(ax); }), function () { return "All values in axis param must be integers but " +
          ("got axis " + axis); });
      // Handle negative axis.
      return axis.map(function (a) { return a < 0 ? rank + a : a; });
  }
  /** Reduces the shape by removing all dimensions of shape 1. */
  function squeezeShape(shape, axis) {
      var newShape = [];
      var keptDims = [];
      var isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;
      var axes = (axis == null || isEmptyArray) ?
          null :
          parseAxisParam(axis, shape).sort();
      var j = 0;
      for (var i = 0; i < shape.length; ++i) {
          if (axes != null) {
              if (axes[j] === i && shape[i] !== 1) {
                  throw new Error("Can't squeeze axis " + i + " since its dim '" + shape[i] + "' is not 1");
              }
              if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {
                  newShape.push(shape[i]);
                  keptDims.push(i);
              }
              if (axes[j] <= i) {
                  j++;
              }
          }
          if (shape[i] !== 1) {
              newShape.push(shape[i]);
              keptDims.push(i);
          }
      }
      return { newShape: newShape, keptDims: keptDims };
  }
  function getTypedArrayFromDType(dtype, size) {
      var values = null;
      if (dtype == null || dtype === 'float32') {
          values = new Float32Array(size);
      }
      else if (dtype === 'int32') {
          values = new Int32Array(size);
      }
      else if (dtype === 'bool') {
          values = new Uint8Array(size);
      }
      else {
          throw new Error("Unknown data type " + dtype);
      }
      return values;
  }
  function getArrayFromDType(dtype, size) {
      var values = null;
      if (dtype == null || dtype === 'float32') {
          values = new Float32Array(size);
      }
      else if (dtype === 'int32') {
          values = new Int32Array(size);
      }
      else if (dtype === 'bool') {
          values = new Uint8Array(size);
      }
      else if (dtype === 'string') {
          values = new Array(size);
      }
      else {
          throw new Error("Unknown data type " + dtype);
      }
      return values;
  }
  function checkConversionForErrors(vals, dtype) {
      for (var i = 0; i < vals.length; i++) {
          var num = vals[i];
          if (isNaN(num) || !isFinite(num)) {
              throw Error("A tensor of type " + dtype + " being uploaded contains " + num + ".");
          }
      }
  }
  /** Returns true if the dtype is valid. */
  function isValidDtype(dtype) {
      return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||
          dtype === 'int32' || dtype === 'string';
  }
  /**
   * Returns true if the new type can't encode the old type without loss of
   * precision.
   */
  function hasEncodingLoss(oldType, newType) {
      if (newType === 'complex64') {
          return false;
      }
      if (newType === 'float32' && oldType !== 'complex64') {
          return false;
      }
      if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {
          return false;
      }
      if (newType === 'bool' && oldType === 'bool') {
          return false;
      }
      return true;
  }
  function isTypedArray(a) {
      return a instanceof Float32Array || a instanceof Int32Array ||
          a instanceof Uint8Array;
  }
  function bytesPerElement(dtype) {
      if (dtype === 'float32' || dtype === 'int32') {
          return 4;
      }
      else if (dtype === 'complex64') {
          return 8;
      }
      else if (dtype === 'bool') {
          return 1;
      }
      else {
          throw new Error("Unknown dtype " + dtype);
      }
  }
  /**
   * Returns the approximate number of bytes allocated in the string array - 2
   * bytes per character. Computing the exact bytes for a native string in JS is
   * not possible since it depends on the encoding of the html page that serves
   * the website.
   */
  function bytesFromStringArray(arr) {
      if (arr == null) {
          return 0;
      }
      var bytes = 0;
      arr.forEach(function (x) { return bytes += x.length; });
      return bytes;
  }
  /** Returns true if the value is a string. */
  function isString(value) {
      return typeof value === 'string' || value instanceof String;
  }
  function isBoolean(value) {
      return typeof value === 'boolean';
  }
  function isNumber(value) {
      return typeof value === 'number';
  }
  function inferDtype(values) {
      if (Array.isArray(values)) {
          return inferDtype(values[0]);
      }
      if (values instanceof Float32Array) {
          return 'float32';
      }
      else if (values instanceof Int32Array || values instanceof Uint8Array) {
          return 'int32';
      }
      else if (isNumber(values)) {
          return 'float32';
      }
      else if (isString(values)) {
          return 'string';
      }
      else if (isBoolean(values)) {
          return 'bool';
      }
      return 'float32';
  }
  function isFunction(f) {
      return !!(f && f.constructor && f.call && f.apply);
  }
  function nearestDivisor(size, start) {
      for (var i = start; i < size; ++i) {
          if (size % i === 0) {
              return i;
          }
      }
      return size;
  }
  function computeStrides(shape) {
      var rank = shape.length;
      if (rank < 2) {
          return [];
      }
      // Last dimension has implicit stride of 1, thus having D-1 (instead of D)
      // strides.
      var strides = new Array(rank - 1);
      strides[rank - 2] = shape[rank - 1];
      for (var i = rank - 3; i >= 0; --i) {
          strides[i] = strides[i + 1] * shape[i + 1];
      }
      return strides;
  }
  function toTypedArray(a, dtype) {
      if (dtype === 'string') {
          throw new Error('Cannot convert a string[] to a TypedArray');
      }
      if (Array.isArray(a)) {
          a = flatten(a);
      }
      if (env().getBool('DEBUG')) {
          checkConversionForErrors(a, dtype);
      }
      if (noConversionNeeded(a, dtype)) {
          return a;
      }
      if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
          return new Float32Array(a);
      }
      else if (dtype === 'int32') {
          return new Int32Array(a);
      }
      else if (dtype === 'bool') {
          var bool = new Uint8Array(a.length);
          for (var i = 0; i < bool.length; ++i) {
              if (Math.round(a[i]) !== 0) {
                  bool[i] = 1;
              }
          }
          return bool;
      }
      else {
          throw new Error("Unknown data type " + dtype);
      }
  }
  function createNestedArray(offset, shape, a) {
      var ret = new Array();
      if (shape.length === 1) {
          var d = shape[0];
          for (var i = 0; i < d; i++) {
              ret[i] = a[offset + i];
          }
      }
      else {
          var d = shape[0];
          var rest = shape.slice(1);
          var len = rest.reduce(function (acc, c) { return acc * c; });
          for (var i = 0; i < d; i++) {
              ret[i] = createNestedArray(offset + i * len, rest, a);
          }
      }
      return ret;
  }
  // Provide a nested array of TypedArray in given shape.
  function toNestedArray(shape, a) {
      if (shape.length === 0) {
          // Scalar type should return a single number.
          return a[0];
      }
      var size = shape.reduce(function (acc, c) { return acc * c; });
      if (size === 0) {
          // A tensor with shape zero should be turned into empty list.
          return [];
      }
      if (size !== a.length) {
          throw new Error("[" + shape + "] does not match the input size " + a.length + ".");
      }
      return createNestedArray(0, shape, a);
  }
  function noConversionNeeded(a, dtype) {
      return (a instanceof Float32Array && dtype === 'float32') ||
          (a instanceof Int32Array && dtype === 'int32') ||
          (a instanceof Uint8Array && dtype === 'bool');
  }
  function makeOnesTypedArray(size, dtype) {
      var array = makeZerosTypedArray(size, dtype);
      for (var i = 0; i < array.length; i++) {
          array[i] = 1;
      }
      return array;
  }
  function makeZerosTypedArray(size, dtype) {
      if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
          return new Float32Array(size);
      }
      else if (dtype === 'int32') {
          return new Int32Array(size);
      }
      else if (dtype === 'bool') {
          return new Uint8Array(size);
      }
      else {
          throw new Error("Unknown data type " + dtype);
      }
  }
  /**
   * Make nested `TypedArray` filled with zeros.
   * @param shape The shape information for the nested array.
   * @param dtype dtype of the array element.
   */
  function makeZerosNestedTypedArray(shape, dtype) {
      var size = shape.reduce(function (prev, curr) { return prev * curr; }, 1);
      if (dtype == null || dtype === 'float32') {
          return toNestedArray(shape, new Float32Array(size));
      }
      else if (dtype === 'int32') {
          return toNestedArray(shape, new Int32Array(size));
      }
      else if (dtype === 'bool') {
          return toNestedArray(shape, new Uint8Array(size));
      }
      else {
          throw new Error("Unknown data type " + dtype);
      }
  }
  /**
   * Returns the current high-resolution time in milliseconds relative to an
   * arbitrary time in the past. It works across different platforms (node.js,
   * browsers).
   *
   * ```js
   * console.log(tf.util.now());
   * ```
   */
  /** @doc {heading: 'Util', namespace: 'util'} */
  function now() {
      return env().platform.now();
  }
  function assertNonNegativeIntegerDimensions(shape) {
      shape.forEach(function (dimSize) {
          assert(Number.isInteger(dimSize) && dimSize >= 0, function () {
              return "Tensor must have a shape comprised of positive integers but got " +
                  ("shape [" + shape + "].");
          });
      });
  }
  /**
   * Returns a platform-specific implementation of
   * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
   *
   * If `fetch` is defined on the global object (`window`, `process`, etc.),
   * `tf.util.fetch` returns that function.
   *
   * If not, `tf.util.fetch` returns a platform-specific solution.
   *
   * ```js
   * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');
   * // handle response
   * ```
   */
  /** @doc {heading: 'Util'} */
  function fetch$1(path, requestInits) {
      return env().platform.fetch(path, requestInits);
  }
  /**
   * Encodes the provided string into bytes using the provided encoding scheme.
   *
   * @param s The string to encode.
   * @param encoding The encoding scheme. Defaults to utf-8.
   *
   */
  /** @doc {heading: 'Util'} */
  function encodeString(s, encoding) {
      if (encoding === void 0) { encoding = 'utf-8'; }
      encoding = encoding || 'utf-8';
      return env().platform.encode(s, encoding);
  }
  /**
   * Decodes the provided bytes into a string using the provided encoding scheme.
   * @param bytes The bytes to decode.
   *
   * @param encoding The encoding scheme. Defaults to utf-8.
   */
  /** @doc {heading: 'Util'} */
  function decodeString(bytes, encoding) {
      if (encoding === void 0) { encoding = 'utf-8'; }
      encoding = encoding || 'utf-8';
      return env().platform.decode(bytes, encoding);
  }
  /**
   * Computes flat index for a given location (multidimentionsal index) in a
   * Tensor/multidimensional array.
   *
   * @param locs Location in the tensor.
   * @param rank Rank of the tensor.
   * @param strides Tensor strides.
   */
  function locToIndex(locs, rank, strides) {
      if (rank === 0) {
          return 0;
      }
      else if (rank === 1) {
          return locs[0];
      }
      var index = locs[locs.length - 1];
      for (var i = 0; i < locs.length - 1; ++i) {
          index += strides[i] * locs[i];
      }
      return index;
  }
  /**
   * Computes the location (multidimensional index) in a tensor/multidimentional
   * array for a given flat index.
   *
   * @param index Index in flat array.
   * @param rank Rank of tensor.
   * @param strides Strides of tensor.
   */
  function indexToLoc(index, rank, strides) {
      if (rank === 0) {
          return [];
      }
      else if (rank === 1) {
          return [index];
      }
      var locs = new Array(rank);
      for (var i = 0; i < locs.length - 1; ++i) {
          locs[i] = Math.floor(index / strides[i]);
          index -= locs[i] * strides[i];
      }
      locs[locs.length - 1] = index;
      return locs;
  }

  var util = {
      __proto__: null,
      shuffle: shuffle,
      clamp: clamp,
      nearestLargerEven: nearestLargerEven,
      sum: sum,
      randUniform: randUniform,
      distSquared: distSquared,
      assert: assert,
      assertShapesMatch: assertShapesMatch,
      assertNonNull: assertNonNull,
      flatten: flatten,
      sizeFromShape: sizeFromShape,
      isScalarShape: isScalarShape,
      arraysEqual: arraysEqual,
      isInt: isInt,
      tanh: tanh,
      sizeToSquarishShape: sizeToSquarishShape,
      createShuffledIndices: createShuffledIndices,
      rightPad: rightPad,
      repeatedTry: repeatedTry,
      inferFromImplicitShape: inferFromImplicitShape,
      parseAxisParam: parseAxisParam,
      squeezeShape: squeezeShape,
      getTypedArrayFromDType: getTypedArrayFromDType,
      getArrayFromDType: getArrayFromDType,
      checkConversionForErrors: checkConversionForErrors,
      isValidDtype: isValidDtype,
      hasEncodingLoss: hasEncodingLoss,
      isTypedArray: isTypedArray,
      bytesPerElement: bytesPerElement,
      bytesFromStringArray: bytesFromStringArray,
      isString: isString,
      isBoolean: isBoolean,
      isNumber: isNumber,
      inferDtype: inferDtype,
      isFunction: isFunction,
      nearestDivisor: nearestDivisor,
      computeStrides: computeStrides,
      toTypedArray: toTypedArray,
      toNestedArray: toNestedArray,
      makeOnesTypedArray: makeOnesTypedArray,
      makeZerosTypedArray: makeZerosTypedArray,
      makeZerosNestedTypedArray: makeZerosNestedTypedArray,
      now: now,
      assertNonNegativeIntegerDimensions: assertNonNegativeIntegerDimensions,
      fetch: fetch$1,
      encodeString: encodeString,
      decodeString: decodeString,
      locToIndex: locToIndex,
      indexToLoc: indexToLoc
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var Profiler = /** @class */ (function () {
      function Profiler(backendTimer, logger) {
          this.backendTimer = backendTimer;
          this.logger = logger;
          if (logger == null) {
              this.logger = new Logger();
          }
      }
      Profiler.prototype.profileKernel = function (kernelName, inputs, f) {
          var outputs;
          var holdResultWrapperFn = function () {
              outputs = f();
          };
          var timer = this.backendTimer.time(holdResultWrapperFn);
          outputs.map(function (r) {
              // Dangling promise here because we don't want to propagate up
              // asynchronicity.
              r.data().then(function (tensorVals) {
                  checkComputationForErrors(tensorVals, r.dtype, kernelName);
              });
          });
          var kernelProfile = {
              kernelName: kernelName,
              outputs: outputs,
              inputs: inputs,
              timeMs: timer.then(function (timing) { return timing.kernelMs; }),
              extraInfo: timer.then(function (timing) { return timing.getExtraProfileInfo != null ?
                  timing.getExtraProfileInfo() :
                  ''; })
          };
          return kernelProfile;
      };
      Profiler.prototype.logKernelProfile = function (kernelProfile) {
          var _this = this;
          var kernelName = kernelProfile.kernelName, outputs = kernelProfile.outputs, timeMs = kernelProfile.timeMs, inputs = kernelProfile.inputs, extraInfo = kernelProfile.extraInfo;
          outputs.forEach(function (result) {
              Promise.all([result.data(), timeMs, extraInfo]).then(function (valueContainer) {
                  _this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);
              });
          });
      };
      return Profiler;
  }());
  function checkComputationForErrors(vals, dtype, kernelName) {
      if (dtype !== 'float32') {
          // Only floating point computations will generate NaN values
          return false;
      }
      for (var i = 0; i < vals.length; i++) {
          var num = vals[i];
          if (isNaN(num) || !isFinite(num)) {
              // Throwing custom exception so behavior is testable.
              console.warn("Found " + num + " in the result of '" + kernelName + "'");
              return true;
          }
      }
      return false;
  }
  var Logger = /** @class */ (function () {
      function Logger() {
      }
      Logger.prototype.logKernelProfile = function (name, result, vals, timeMs, inputs, extraInfo) {
          var time = typeof timeMs === 'number' ? rightPad(timeMs + "ms", 9) :
              timeMs['error'];
          var paddedName = rightPad(name, 25);
          var rank = result.rank;
          var size = result.size;
          var shape = rightPad(result.shape.toString(), 14);
          var inputShapesDescription = '';
          for (var name_1 in inputs) {
              var input = inputs[name_1];
              // The input might be a non-tensor (e.g HTMLImageElement), in which case
              // we claim the output shape as input shape.
              var inputShape = input.shape || result.shape;
              var inputRank = inputShape.length;
              inputShapesDescription +=
                  name_1 + ": " + inputRank + "D " + (inputRank > 0 ? inputShape : '') + " ";
          }
          console.log("%c" + paddedName + "\t%c" + time + "\t%c" + rank + "D " + shape + "\t%c" + size + "\t%c" + inputShapesDescription + "\t%c" + extraInfo, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');
      };
      return Logger;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes a list of TapeNodes that connect x to y, filtering everything else
   * out and preserving the order of the original tape elements.
   *
   * @param tape The tape elements to filter.
   * @param xs The input Tensors.
   * @param y The output Tensor.
   */
  function getFilteredNodesXToY(tape, xs, y) {
      // Forward pass to compute all the nodes and Tensors that are transitively a
      // function of x.
      var tensorsFromX = {};
      var nodesFromX = {};
      for (var i = 0; i < xs.length; i++) {
          tensorsFromX[xs[i].id] = true;
      }
      for (var i = 0; i < tape.length; i++) {
          var node = tape[i];
          var nodeInputs = node.inputs;
          for (var inputName in nodeInputs) {
              var input = nodeInputs[inputName];
              var anyInputFromX = false;
              for (var j = 0; j < xs.length; j++) {
                  if (tensorsFromX[input.id]) {
                      node.outputs.forEach(function (output) { return tensorsFromX[output.id] = true; });
                      anyInputFromX = true;
                      nodesFromX[node.id] = true;
                      break;
                  }
              }
              if (anyInputFromX) {
                  break;
              }
          }
      }
      // Backward pass to find all of the nodes and Tensors that lead to y.
      var tensorsLeadToY = {};
      tensorsLeadToY[y.id] = true;
      var nodesToY = {};
      for (var i = tape.length - 1; i >= 0; i--) {
          var node = tape[i];
          var nodeInputs = node.inputs;
          // If any of the outputs lead to y, mark all of the inputs as leading to y.
          for (var j = 0; j < node.outputs.length; j++) {
              if (tensorsLeadToY[node.outputs[j].id]) {
                  for (var inputName in nodeInputs) {
                      tensorsLeadToY[nodeInputs[inputName].id] = true;
                      nodesToY[node.id] = true;
                  }
                  break;
              }
          }
      }
      // Return the paths that come from x and lead to y.
      var filteredTape = [];
      for (var i = 0; i < tape.length; i++) {
          var node = tape[i];
          if (nodesFromX[node.id] && nodesToY[node.id]) {
              // Prune the inputs from the node that aren't a function of x.
              var prunedInputs = {};
              for (var inputName in node.inputs) {
                  var nodeInput = node.inputs[inputName];
                  if (tensorsFromX[nodeInput.id]) {
                      prunedInputs[inputName] = nodeInput;
                  }
              }
              // Copy the node and overwrite inputsAndArgs to the pruned version.
              var prunedNode = Object.assign({}, node);
              prunedNode.inputs = prunedInputs;
              prunedNode.outputs = node.outputs;
              filteredTape.push(prunedNode);
          }
      }
      return filteredTape;
  }
  /**
   * Backpropagate gradients through the filtered TapeNodes.
   *
   * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map
   * is mutated by this method.
   * @param filteredTape The filtered TapeNodes to backprop through.
   */
  function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy) {
      var _loop_1 = function (i) {
          var node = filteredTape[i];
          var dys = [];
          node.outputs.forEach(function (o) {
              var gradTensor = tensorAccumulatedGradientMap[o.id];
              if (gradTensor != null) {
                  dys.push(gradTensor);
              }
              else {
                  // This particular output is not in the back-propagation subgraph, so it
                  // does not affect the final output, thus we put null for its dy.
                  dys.push(null);
              }
          });
          if (node.gradient == null) {
              throw new Error("Cannot compute gradient: gradient function not found " +
                  ("for " + node.kernelName + "."));
          }
          // Backprop dy through this node and accumulate gradients over the inputs.
          var inputGradients = node.gradient(dys);
          var _loop_2 = function (inputName) {
              if (!(inputName in inputGradients)) {
                  throw new Error("Cannot backprop through input " + inputName + ". " +
                      ("Available gradients found: " + Object.keys(inputGradients) + "."));
              }
              // Call the gradient function.
              var dx = tidy(function () { return inputGradients[inputName](); });
              if (dx.dtype !== 'float32') {
                  throw new Error("Error in gradient for op " + node.kernelName + ". The gradient of input " +
                      (inputName + " must have 'float32' dtype, but has '" + dx.dtype + "'"));
              }
              var x = node.inputs[inputName];
              if (!arraysEqual(dx.shape, x.shape)) {
                  throw new Error("Error in gradient for op " + node.kernelName + ". The gradient of input " +
                      ("'" + inputName + "' has shape '" + dx.shape + "', which does not match ") +
                      ("the shape of the input '" + x.shape + "'"));
              }
              if (tensorAccumulatedGradientMap[x.id] == null) {
                  tensorAccumulatedGradientMap[x.id] = dx;
              }
              else {
                  var curGradient = tensorAccumulatedGradientMap[x.id];
                  tensorAccumulatedGradientMap[x.id] = curGradient.add(dx);
                  curGradient.dispose();
              }
          };
          for (var inputName in node.inputs) {
              _loop_2(inputName);
          }
      };
      // Walk the tape backward and keep a map of Tensor to its gradient.
      for (var i = filteredTape.length - 1; i >= 0; i--) {
          _loop_1(i);
      }
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // Maximum number of values before we decide to show ellipsis.
  var FORMAT_LIMIT_NUM_VALS = 20;
  // Number of first and last values to show when displaying a, b,...,y, z.
  var FORMAT_NUM_FIRST_LAST_VALS = 3;
  // Number of significant digits to show.
  var FORMAT_NUM_SIG_DIGITS = 7;
  function tensorToString(vals, shape, dtype, verbose) {
      var strides = computeStrides(shape);
      var padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);
      var rank = shape.length;
      var valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);
      var lines = ['Tensor'];
      if (verbose) {
          lines.push("  dtype: " + dtype);
          lines.push("  rank: " + rank);
          lines.push("  shape: [" + shape + "]");
          lines.push("  values:");
      }
      lines.push(valsLines.map(function (l) { return '    ' + l; }).join('\n'));
      return lines.join('\n');
  }
  function computeMaxSizePerColumn(vals, shape, dtype, strides) {
      var n = sizeFromShape(shape);
      var numCols = strides[strides.length - 1];
      var padPerCol = new Array(numCols).fill(0);
      var rank = shape.length;
      var valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;
      if (rank > 1) {
          for (var row = 0; row < n / numCols; row++) {
              var offset = row * numCols;
              for (var j = 0; j < numCols; j++) {
                  padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);
              }
          }
      }
      return padPerCol;
  }
  function valToString(val, pad, dtype) {
      var valStr;
      if (Array.isArray(val)) {
          valStr = parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS)) + " + " +
              (parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS)) + "j");
      }
      else if (isString(val)) {
          valStr = "'" + val + "'";
      }
      else if (dtype === 'bool') {
          valStr = boolNumToString(val);
      }
      else {
          valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();
      }
      return rightPad(valStr, pad);
  }
  function boolNumToString(v) {
      return v === 0 ? 'false' : 'true';
  }
  function subTensorToString(vals, shape, dtype, strides, padPerCol, isLast) {
      if (isLast === void 0) { isLast = true; }
      var storagePerElement = dtype === 'complex64' ? 2 : 1;
      var size = shape[0];
      var rank = shape.length;
      if (rank === 0) {
          if (dtype === 'complex64') {
              var complexTuple = createComplexTuples(vals);
              return [valToString(complexTuple[0], 0, dtype)];
          }
          if (dtype === 'bool') {
              return [boolNumToString(vals[0])];
          }
          return [vals[0].toString()];
      }
      if (rank === 1) {
          if (size > FORMAT_LIMIT_NUM_VALS) {
              var firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;
              var firstVals = Array.from(vals.slice(0, firstValsSize));
              var lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));
              if (dtype === 'complex64') {
                  firstVals = createComplexTuples(firstVals);
                  lastVals = createComplexTuples(lastVals);
              }
              return [
                  '[' +
                      firstVals.map(function (x, i) { return valToString(x, padPerCol[i], dtype); })
                          .join(', ') +
                      ', ..., ' +
                      lastVals
                          .map(function (x, i) { return valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype); })
                          .join(', ') +
                      ']'
              ];
          }
          var displayVals = dtype === 'complex64' ? createComplexTuples(vals) :
              Array.from(vals);
          return [
              '[' +
                  displayVals.map(function (x, i) { return valToString(x, padPerCol[i], dtype); })
                      .join(', ') +
                  ']'
          ];
      }
      // The array is rank 2 or more.
      var subshape = shape.slice(1);
      var substrides = strides.slice(1);
      var stride = strides[0] * storagePerElement;
      var lines = [];
      if (size > FORMAT_LIMIT_NUM_VALS) {
          for (var i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {
              var start = i * stride;
              var end = start + stride;
              lines.push.apply(lines, subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false /* isLast */));
          }
          lines.push('...');
          for (var i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {
              var start = i * stride;
              var end = start + stride;
              lines.push.apply(lines, subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));
          }
      }
      else {
          for (var i = 0; i < size; i++) {
              var start = i * stride;
              var end = start + stride;
              lines.push.apply(lines, subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));
          }
      }
      var sep = rank === 2 ? ',' : '';
      lines[0] = '[' + lines[0] + sep;
      for (var i = 1; i < lines.length - 1; i++) {
          lines[i] = ' ' + lines[i] + sep;
      }
      var newLineSep = ',\n';
      for (var i = 2; i < rank; i++) {
          newLineSep += '\n';
      }
      lines[lines.length - 1] =
          ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);
      return lines;
  }
  function createComplexTuples(vals) {
      var complexTuples = [];
      for (var i = 0; i < vals.length; i += 2) {
          complexTuples.push([vals[i], vals[i + 1]]);
      }
      return complexTuples;
  }

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * A mutable object, similar to `tf.Tensor`, that allows users to set values
   * at locations before converting to an immutable `tf.Tensor`.
   *
   * See `tf.buffer` for creating a tensor buffer.
   */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  var TensorBuffer = /** @class */ (function () {
      function TensorBuffer(shape, dtype, values) {
          var _this = this;
          this.dtype = dtype;
          this.shape = shape.slice();
          this.size = sizeFromShape(shape);
          if (values != null) {
              var n_1 = values.length;
              assert(n_1 === this.size, function () { return "Length of values '" + n_1 + "' does not match the size " +
                  ("inferred by the shape '" + _this.size + "'."); });
          }
          if (dtype === 'complex64') {
              throw new Error("complex64 dtype TensorBuffers are not supported. Please create " +
                  "a TensorBuffer for the real and imaginary parts separately and " +
                  "call tf.complex(real, imag).");
          }
          this.values = values || getArrayFromDType(dtype, this.size);
          this.strides = computeStrides(shape);
      }
      /**
       * Sets a value in the buffer at a given location.
       *
       * @param value The value to set.
       * @param locs  The location indices.
       */
      /** @doc {heading: 'Tensors', subheading: 'Creation'} */
      TensorBuffer.prototype.set = function (value) {
          var _this = this;
          var locs = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              locs[_i - 1] = arguments[_i];
          }
          if (locs.length === 0) {
              locs = [0];
          }
          assert(locs.length === this.rank, function () { return "The number of provided coordinates (" + locs.length + ") must " +
              ("match the rank (" + _this.rank + ")"); });
          var index = this.locToIndex(locs);
          this.values[index] = value;
      };
      /**
       * Returns the value in the buffer at the provided location.
       *
       * @param locs The location indices.
       */
      /** @doc {heading: 'Tensors', subheading: 'Creation'} */
      TensorBuffer.prototype.get = function () {
          var locs = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              locs[_i] = arguments[_i];
          }
          if (locs.length === 0) {
              locs = [0];
          }
          var i = 0;
          for (var _a = 0, locs_1 = locs; _a < locs_1.length; _a++) {
              var loc = locs_1[_a];
              if (loc < 0 || loc >= this.shape[i]) {
                  var msg = "Requested out of range element at " + locs + ". " +
                      ("  Buffer shape=" + this.shape);
                  throw new Error(msg);
              }
              i++;
          }
          var index = locs[locs.length - 1];
          for (var i_1 = 0; i_1 < locs.length - 1; ++i_1) {
              index += this.strides[i_1] * locs[i_1];
          }
          return this.values[index];
      };
      TensorBuffer.prototype.locToIndex = function (locs) {
          if (this.rank === 0) {
              return 0;
          }
          else if (this.rank === 1) {
              return locs[0];
          }
          var index = locs[locs.length - 1];
          for (var i = 0; i < locs.length - 1; ++i) {
              index += this.strides[i] * locs[i];
          }
          return index;
      };
      TensorBuffer.prototype.indexToLoc = function (index) {
          if (this.rank === 0) {
              return [];
          }
          else if (this.rank === 1) {
              return [index];
          }
          var locs = new Array(this.shape.length);
          for (var i = 0; i < locs.length - 1; ++i) {
              locs[i] = Math.floor(index / this.strides[i]);
              index -= locs[i] * this.strides[i];
          }
          locs[locs.length - 1] = index;
          return locs;
      };
      Object.defineProperty(TensorBuffer.prototype, "rank", {
          get: function () {
              return this.shape.length;
          },
          enumerable: true,
          configurable: true
      });
      /**
       * Creates an immutable `tf.Tensor` object from the buffer.
       */
      /** @doc {heading: 'Tensors', subheading: 'Creation'} */
      TensorBuffer.prototype.toTensor = function () {
          return trackerFn().makeTensor(this.values, this.shape, this.dtype);
      };
      return TensorBuffer;
  }());
  // For tracking tensor creation and disposal.
  var trackerFn = null;
  // Used by chaining methods to call into ops.
  var opHandler = null;
  /**
   * An external consumer can register itself as the tensor tracker. This way
   * the Tensor class can notify the tracker for every tensor created and
   * disposed.
   */
  function setTensorTracker(fn) {
      trackerFn = fn;
  }
  /**
   * An external consumer can register itself as the op handler. This way the
   * Tensor class can have chaining methods that call into ops via the op
   * handler.
   */
  function setOpHandler(handler) {
      opHandler = handler;
  }
  /**
   * A `tf.Tensor` object represents an immutable, multidimensional array of
   * numbers that has a shape and a data type.
   *
   * See `tf.tensor` for details on how to create a `tf.Tensor`.
   */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  var Tensor = /** @class */ (function () {
      function Tensor(shape, dtype, dataId, id) {
          /** Whether this tensor has been globally kept. */
          this.kept = false;
          this.isDisposedInternal = false;
          this.shape = shape.slice();
          this.dtype = dtype || 'float32';
          this.size = sizeFromShape(shape);
          this.strides = computeStrides(shape);
          this.dataId = dataId;
          this.id = id;
          this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');
      }
      Object.defineProperty(Tensor.prototype, "rank", {
          get: function () {
              return this.shape.length;
          },
          enumerable: true,
          configurable: true
      });
      /**
       * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
       */
      /** @doc {heading: 'Tensors', subheading: 'Classes'} */
      Tensor.prototype.buffer = function () {
          return __awaiter(this, void 0, void 0, function () {
              var vals;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.data()];
                      case 1:
                          vals = _a.sent();
                          return [2 /*return*/, opHandler.buffer(this.shape, this.dtype, vals)];
                  }
              });
          });
      };
      /** Returns a `tf.TensorBuffer` that holds the underlying data. */
      /** @doc {heading: 'Tensors', subheading: 'Classes'} */
      Tensor.prototype.bufferSync = function () {
          return opHandler.buffer(this.shape, this.dtype, this.dataSync());
      };
      /**
       * Returns the tensor data as a nested array. The transfer of data is done
       * asynchronously.
       */
      /** @doc {heading: 'Tensors', subheading: 'Classes'} */
      Tensor.prototype.array = function () {
          return __awaiter(this, void 0, void 0, function () {
              var vals;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.data()];
                      case 1:
                          vals = _a.sent();
                          return [2 /*return*/, toNestedArray(this.shape, vals)];
                  }
              });
          });
      };
      /**
       * Returns the tensor data as a nested array. The transfer of data is done
       * synchronously.
       */
      /** @doc {heading: 'Tensors', subheading: 'Classes'} */
      Tensor.prototype.arraySync = function () {
          return toNestedArray(this.shape, this.dataSync());
      };
      /**
       * Asynchronously downloads the values from the `tf.Tensor`. Returns a
       * promise of `TypedArray` that resolves when the computation has finished.
       */
      /** @doc {heading: 'Tensors', subheading: 'Classes'} */
      Tensor.prototype.data = function () {
          return __awaiter(this, void 0, void 0, function () {
              var data, bytes;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          this.throwIfDisposed();
                          data = trackerFn().read(this.dataId);
                          if (!(this.dtype === 'string')) return [3 /*break*/, 2];
                          return [4 /*yield*/, data];
                      case 1:
                          bytes = _a.sent();
                          try {
                              return [2 /*return*/, bytes.map(function (b) { return decodeString(b); })];
                          }
                          catch (_b) {
                              throw new Error('Failed to decode the string bytes into utf-8. ' +
                                  'To get the original bytes, call tensor.bytes().');
                          }
                          _a.label = 2;
                      case 2: return [2 /*return*/, data];
                  }
              });
          });
      };
      /**
       * Synchronously downloads the values from the `tf.Tensor`. This blocks the
       * UI thread until the values are ready, which can cause performance issues.
       */
      /** @doc {heading: 'Tensors', subheading: 'Classes'} */
      Tensor.prototype.dataSync = function () {
          this.throwIfDisposed();
          var data = trackerFn().readSync(this.dataId);
          if (this.dtype === 'string') {
              try {
                  return data.map(function (b) { return decodeString(b); });
              }
              catch (_a) {
                  throw new Error('Failed to decode the string bytes into utf-8. ' +
                      'To get the original bytes, call tensor.bytes().');
              }
          }
          return data;
      };
      /** Returns the underlying bytes of the tensor's data. */
      Tensor.prototype.bytes = function () {
          return __awaiter(this, void 0, void 0, function () {
              var data;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          this.throwIfDisposed();
                          return [4 /*yield*/, trackerFn().read(this.dataId)];
                      case 1:
                          data = _a.sent();
                          if (this.dtype === 'string') {
                              return [2 /*return*/, data];
                          }
                          else {
                              return [2 /*return*/, new Uint8Array(data.buffer)];
                          }
                  }
              });
          });
      };
      /**
       * Disposes `tf.Tensor` from memory.
       */
      /** @doc {heading: 'Tensors', subheading: 'Classes'} */
      Tensor.prototype.dispose = function () {
          if (this.isDisposed) {
              return;
          }
          trackerFn().disposeTensor(this);
          this.isDisposedInternal = true;
      };
      Object.defineProperty(Tensor.prototype, "isDisposed", {
          get: function () {
              return this.isDisposedInternal;
          },
          enumerable: true,
          configurable: true
      });
      Tensor.prototype.throwIfDisposed = function () {
          if (this.isDisposed) {
              throw new Error("Tensor is disposed.");
          }
      };
      /**
       * Prints the `tf.Tensor`. See `tf.print` for details.
       *
       * @param verbose Whether to print verbose information about the tensor,
       *    including dtype and size.
       */
      /** @doc {heading: 'Tensors', subheading: 'Classes'} */
      Tensor.prototype.print = function (verbose) {
          if (verbose === void 0) { verbose = false; }
          return opHandler.print(this, verbose);
      };
      /** Returns a copy of the tensor. See `tf.clone` for details. */
      /** @doc {heading: 'Tensors', subheading: 'Classes'} */
      Tensor.prototype.clone = function () {
          this.throwIfDisposed();
          return opHandler.clone(this);
      };
      /**
       * Returns a human-readable description of the tensor. Useful for logging.
       */
      /** @doc {heading: 'Tensors', subheading: 'Classes'} */
      Tensor.prototype.toString = function (verbose) {
          if (verbose === void 0) { verbose = false; }
          var vals = this.dataSync();
          return tensorToString(vals, this.shape, this.dtype, verbose);
      };
      Tensor.prototype.cast = function (dtype) {
          this.throwIfDisposed();
          return opHandler.cast(this, dtype);
      };
      Tensor.prototype.variable = function (trainable, name, dtype) {
          if (trainable === void 0) { trainable = true; }
          this.throwIfDisposed();
          return trackerFn().makeVariable(this, trainable, name, dtype);
      };
      return Tensor;
  }());
  Object.defineProperty(Tensor, Symbol.hasInstance, {
      value: function (instance) {
          return !!instance && instance.dataId != null && instance.shape != null &&
              instance.dtype != null;
      }
  });
  /**
   * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.
   */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  var Variable = /** @class */ (function (_super) {
      __extends(Variable, _super);
      function Variable(initialValue, trainable, name, tensorId) {
          var _this = _super.call(this, initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId) || this;
          _this.trainable = trainable;
          _this.name = name;
          return _this;
      }
      /**
       * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
       * the same shape and dtype as the old `tf.Tensor`.
       *
       * @param newValue New tensor to be assigned to this variable.
       */
      /** @doc {heading: 'Tensors', subheading: 'Classes'} */
      Variable.prototype.assign = function (newValue) {
          if (newValue.dtype !== this.dtype) {
              throw new Error("dtype of the new value (" + newValue.dtype + ") and " +
                  ("previous value (" + this.dtype + ") must match"));
          }
          if (!arraysEqual(newValue.shape, this.shape)) {
              throw new Error("shape of the new value (" + newValue.shape + ") and " +
                  ("previous value (" + this.shape + ") must match"));
          }
          trackerFn().disposeTensor(this);
          this.dataId = newValue.dataId;
          trackerFn().incRef(this, null /* backend */);
      };
      Variable.prototype.dispose = function () {
          trackerFn().disposeVariable(this);
          this.isDisposedInternal = true;
      };
      return Variable;
  }(Tensor));
  Object.defineProperty(Variable, Symbol.hasInstance, {
      value: function (instance) {
          return instance instanceof Tensor && instance.assign != null &&
              instance.assign instanceof Function;
      }
  });

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  (function (Rank) {
      Rank["R0"] = "R0";
      Rank["R1"] = "R1";
      Rank["R2"] = "R2";
      Rank["R3"] = "R3";
      Rank["R4"] = "R4";
      Rank["R5"] = "R5";
      Rank["R6"] = "R6";
  })(exports.Rank || (exports.Rank = {}));
  // Looks for upcasting types. Used, for example, in operations with mixed dtype
  // inputs.
  var UpcastInt32AndMap;
  (function (UpcastInt32AndMap) {
      UpcastInt32AndMap["float32"] = "float32";
      UpcastInt32AndMap["int32"] = "int32";
      UpcastInt32AndMap["bool"] = "int32";
      UpcastInt32AndMap["complex64"] = "complex64";
  })(UpcastInt32AndMap || (UpcastInt32AndMap = {}));
  var UpcastBoolAndMap;
  (function (UpcastBoolAndMap) {
      UpcastBoolAndMap["float32"] = "float32";
      UpcastBoolAndMap["int32"] = "int32";
      UpcastBoolAndMap["bool"] = "bool";
      UpcastBoolAndMap["complex64"] = "complex64";
  })(UpcastBoolAndMap || (UpcastBoolAndMap = {}));
  var UpcastFloat32AndMap;
  (function (UpcastFloat32AndMap) {
      UpcastFloat32AndMap["float32"] = "float32";
      UpcastFloat32AndMap["int32"] = "float32";
      UpcastFloat32AndMap["bool"] = "float32";
      UpcastFloat32AndMap["complex64"] = "complex64";
  })(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));
  var UpcastComplex64AndMap;
  (function (UpcastComplex64AndMap) {
      UpcastComplex64AndMap["float32"] = "complex64";
      UpcastComplex64AndMap["int32"] = "complex64";
      UpcastComplex64AndMap["bool"] = "complex64";
      UpcastComplex64AndMap["complex64"] = "complex64";
  })(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));
  var upcastTypeMap = {
      'float32': UpcastFloat32AndMap,
      'int32': UpcastInt32AndMap,
      'bool': UpcastBoolAndMap,
      'complex64': UpcastComplex64AndMap
  };
  function upcastType(typeA, typeB) {
      if (typeA === 'string' || typeB === 'string') {
          if (typeA === 'string' && typeB === 'string') {
              return 'string';
          }
          throw new Error("Can not upcast " + typeA + " with " + typeB);
      }
      return upcastTypeMap[typeA][typeB];
  }
  /** Returns the output type after summation. */
  function sumOutType(type) {
      return upcastType(type, 'int32');
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function makeTypesMatch(a, b) {
      if (a.dtype === b.dtype) {
          return [a, b];
      }
      var dtype = upcastType(a.dtype, b.dtype);
      return [a.cast(dtype), b.cast(dtype)];
  }
  function assertTypesMatch(a, b) {
      assert(a.dtype === b.dtype, function () { return "The dtypes of the first(" + a.dtype + ") and" +
          (" second(" + b.dtype + ") input must match"); });
  }
  function isTensorInList(tensor, tensorList) {
      return tensorList.some(function (x) { return x.id === tensor.id; });
  }
  /**
   * Extracts any `Tensor`s found within the provided object.
   *
   * @param container an object that may be a `Tensor` or may directly contain
   *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it
   *   is safe to pass any object here, except that `Promise`s are not
   *   supported.
   * @returns An array of `Tensors` found within the passed object. If the
   *   argument is simply a `Tensor', a list containing that `Tensor` is
   *   returned. If the object is not a `Tensor` or does not
   *   contain `Tensors`, an empty list is returned.
   */
  function getTensorsInContainer(result) {
      var list = [];
      var seen = new Set();
      walkTensorContainer(result, list, seen);
      return list;
  }
  function walkTensorContainer(container, list, seen) {
      if (container == null) {
          return;
      }
      if (container instanceof Tensor) {
          list.push(container);
          return;
      }
      if (!isIterable(container)) {
          return;
      }
      // Iteration over keys works also for arrays.
      var iterable = container;
      for (var k in iterable) {
          var val = iterable[k];
          if (!seen.has(val)) {
              seen.add(val);
              walkTensorContainer(val, list, seen);
          }
      }
  }
  // tslint:disable-next-line:no-any
  function isIterable(obj) {
      return Array.isArray(obj) || typeof obj === 'object';
  }

  var tensor_util = {
      __proto__: null,
      makeTypesMatch: makeTypesMatch,
      assertTypesMatch: assertTypesMatch,
      isTensorInList: isTensorInList,
      getTensorsInContainer: getTensorsInContainer
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var EngineState = /** @class */ (function () {
      function EngineState() {
          // Public since optimizers will use it.
          this.registeredVariables = {};
          this.nextTapeNodeId = 0;
          this.numBytes = 0;
          this.numTensors = 0;
          this.numStringTensors = 0;
          this.numDataBuffers = 0;
          // Number of nested tf.grad() statements when computing higher-order
          // gradients. E.g. `1` for first-order gradients and `2` for second-order
          // gradients. Used to track if the tape should be removed after a backprop.
          this.gradientDepth = 0;
          // Number of nested kernel calls. When kernel depth is greater than 1, we turn
          // off the tape.
          this.kernelDepth = 0;
          this.scopeStack = [];
          /**
           * Keeps track of the number of data moves during a kernel execution. We
           * maintain a stack since kernels can call other kernels, recursively.
           */
          this.numDataMovesStack = [];
          this.nextScopeId = 0;
          this.tensorInfo = new WeakMap();
          this.profiling = false;
          this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null };
      }
      EngineState.prototype.dispose = function () {
          for (var variableName in this.registeredVariables) {
              this.registeredVariables[variableName].dispose();
          }
      };
      return EngineState;
  }());
  var Engine = /** @class */ (function () {
      function Engine(ENV) {
          this.ENV = ENV;
          this.registry = {};
          this.registryFactory = {};
          this.pendingBackendInitId = 0;
          this.state = new EngineState();
      }
      Engine.prototype.ready = function () {
          return __awaiter(this, void 0, void 0, function () {
              var sortedBackends, i, backendName, success;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          if (this.pendingBackendInit != null) {
                              return [2 /*return*/, this.pendingBackendInit.then(function () { })];
                          }
                          if (this.backendInstance != null) {
                              return [2 /*return*/];
                          }
                          sortedBackends = this.getSortedBackends();
                          i = 0;
                          _a.label = 1;
                      case 1:
                          if (!(i < sortedBackends.length)) return [3 /*break*/, 5];
                          backendName = sortedBackends[i];
                          return [4 /*yield*/, this.initializeBackend(backendName).success];
                      case 2:
                          success = _a.sent();
                          if (!success) return [3 /*break*/, 4];
                          return [4 /*yield*/, this.setBackend(backendName)];
                      case 3:
                          _a.sent();
                          return [2 /*return*/];
                      case 4:
                          i++;
                          return [3 /*break*/, 1];
                      case 5: throw new Error("Could not initialize any backends, all backend initializations " +
                          "failed.");
                  }
              });
          });
      };
      Object.defineProperty(Engine.prototype, "backend", {
          get: function () {
              if (this.pendingBackendInit != null) {
                  throw new Error("Backend '" + this.backendName + "' has not yet been initialized. Make " +
                      "sure to await tf.ready() or await tf.setBackend() before calling " +
                      "other methods");
              }
              if (this.backendInstance == null) {
                  var _a = this.initializeBackendsAndReturnBest(), name_1 = _a.name, asyncInit = _a.asyncInit;
                  if (asyncInit) {
                      throw new Error("The highest priority backend '" + name_1 + "' has not yet been " +
                          "initialized. Make sure to await tf.ready() or " +
                          "await tf.setBackend() before calling other methods");
                  }
                  this.setBackend(name_1);
              }
              return this.backendInstance;
          },
          enumerable: true,
          configurable: true
      });
      Engine.prototype.backendNames = function () {
          return Object.keys(this.registryFactory);
      };
      Engine.prototype.findBackend = function (backendName) {
          if (!(backendName in this.registry)) {
              // If the backend hasn't been initialized but we have a registry entry for
              // it, initialize it and return it.
              if (backendName in this.registryFactory) {
                  var asyncInit = this.initializeBackend(backendName).asyncInit;
                  if (asyncInit) {
                      // Backend is not ready yet.
                      return null;
                  }
              }
              else {
                  return null;
              }
          }
          return this.registry[backendName];
      };
      Engine.prototype.findBackendFactory = function (backendName) {
          if (!(backendName in this.registryFactory)) {
              return null;
          }
          return this.registryFactory[backendName].factory;
      };
      Engine.prototype.registerBackend = function (backendName, factory, priority) {
          if (priority === void 0) { priority = 1; }
          if (backendName in this.registryFactory) {
              console.warn(backendName + " backend was already registered. " +
                  "Reusing existing backend factory.");
              return false;
          }
          this.registryFactory[backendName] = { factory: factory, priority: priority };
          return true;
      };
      Engine.prototype.setBackend = function (backendName) {
          return __awaiter(this, void 0, void 0, function () {
              var _a, success, asyncInit, result, _b;
              return __generator(this, function (_c) {
                  switch (_c.label) {
                      case 0:
                          if (this.registryFactory[backendName] == null) {
                              throw new Error("Backend name '" + backendName + "' not found in registry");
                          }
                          this.backendName = backendName;
                          if (!(this.registry[backendName] == null)) return [3 /*break*/, 4];
                          this.backendInstance = null;
                          _a = this.initializeBackend(backendName), success = _a.success, asyncInit = _a.asyncInit;
                          if (!asyncInit) return [3 /*break*/, 2];
                          return [4 /*yield*/, success];
                      case 1:
                          _b = _c.sent();
                          return [3 /*break*/, 3];
                      case 2:
                          _b = success;
                          _c.label = 3;
                      case 3:
                          result = _b;
                          if (!result) {
                              return [2 /*return*/, false];
                          }
                          _c.label = 4;
                      case 4:
                          this.backendInstance = this.registry[backendName];
                          this.setupRegisteredKernels();
                          // Reset the profiler.
                          this.profiler = new Profiler(this.backendInstance);
                          return [2 /*return*/, true];
                  }
              });
          });
      };
      Engine.prototype.setupRegisteredKernels = function () {
          var _this = this;
          var kernels = getKernelsForBackend(this.backendName);
          kernels.forEach(function (kernel) {
              if (kernel.setupFunc != null) {
                  kernel.setupFunc(_this.backendInstance);
              }
          });
      };
      Engine.prototype.disposeRegisteredKernels = function (backendName) {
          var _this = this;
          var kernels = getKernelsForBackend(backendName);
          kernels.forEach(function (kernel) {
              if (kernel.disposeFunc != null) {
                  kernel.disposeFunc(_this.registry[backendName]);
              }
          });
      };
      /**
       * Initializes a backend by looking up the backend name in the factory
       * registry and calling the factory method. Returns a boolean representing
       * whether the initialization of the backend suceeded. Throws an error if
       * there is no backend in the factory registry.
       */
      Engine.prototype.initializeBackend = function (backendName) {
          var _this = this;
          var registryFactoryEntry = this.registryFactory[backendName];
          if (registryFactoryEntry == null) {
              throw new Error("Cannot initialize backend " + backendName + ", no registration found.");
          }
          try {
              var backend = registryFactoryEntry.factory();
              // Test if the factory returns a promise.
              if (Promise.resolve(backend) === backend) {
                  var promiseId_1 = ++this.pendingBackendInitId;
                  var success = backend
                      .then(function (backendInstance) {
                      // Outdated promise. Another backend was set in the meantime.
                      if (promiseId_1 < _this.pendingBackendInitId) {
                          return false;
                      }
                      _this.registry[backendName] = backendInstance;
                      _this.pendingBackendInit = null;
                      return true;
                  })
                      .catch(function (err) {
                      // Outdated promise. Another backend was set in the meantime.
                      if (promiseId_1 < _this.pendingBackendInitId) {
                          return false;
                      }
                      _this.pendingBackendInit = null;
                      console.warn("Initialization of backend " + backendName + " failed");
                      console.warn(err.stack || err.message);
                      return false;
                  });
                  this.pendingBackendInit = success;
                  return { success: success, asyncInit: true };
              }
              else {
                  this.registry[backendName] = backend;
                  return { success: true, asyncInit: false };
              }
          }
          catch (err) {
              console.warn("Initialization of backend " + backendName + " failed");
              console.warn(err.stack || err.message);
              return { success: false, asyncInit: false };
          }
      };
      Engine.prototype.removeBackend = function (backendName) {
          if (!(backendName in this.registryFactory)) {
              throw new Error(backendName + " backend not found in registry");
          }
          if (this.backendName === backendName && this.pendingBackendInit != null) {
              // There is a pending promise of the backend we want to remove. Make it
              // obsolete.
              this.pendingBackendInitId++;
          }
          if (backendName in this.registry) {
              this.disposeRegisteredKernels(backendName);
              this.registry[backendName].dispose();
              delete this.registry[backendName];
          }
          delete this.registryFactory[backendName];
          // Unset the backend if it is active.
          if (this.backendName === backendName) {
              this.pendingBackendInit = null;
              this.backendName = null;
              this.backendInstance = null;
          }
      };
      Engine.prototype.getSortedBackends = function () {
          var _this = this;
          if (Object.keys(this.registryFactory).length === 0) {
              throw new Error('No backend found in registry.');
          }
          return Object.keys(this.registryFactory).sort(function (a, b) {
              // Highest priority comes first.
              return _this.registryFactory[b].priority -
                  _this.registryFactory[a].priority;
          });
      };
      Engine.prototype.initializeBackendsAndReturnBest = function () {
          var sortedBackends = this.getSortedBackends();
          for (var i = 0; i < sortedBackends.length; i++) {
              var backendName = sortedBackends[i];
              var _a = this.initializeBackend(backendName), success = _a.success, asyncInit = _a.asyncInit;
              if (asyncInit || success) {
                  return { name: backendName, asyncInit: asyncInit };
              }
          }
          throw new Error("Could not initialize any backends, all backend initializations " +
              "failed.");
      };
      Engine.prototype.moveData = function (backend, dataId) {
          var info = this.state.tensorInfo.get(dataId);
          var srcBackend = info.backend;
          var values = this.readSync(dataId);
          // Delete the tensor from the old backend and move it to the new
          // backend.
          srcBackend.disposeData(dataId);
          info.backend = backend;
          backend.move(dataId, values, info.shape, info.dtype);
          if (this.shouldCheckForMemLeaks()) {
              // Track the number of moves during a kernel execution to correctly
              // detect memory leaks.
              this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
          }
      };
      Engine.prototype.tidy = function (nameOrFn, fn) {
          var _this = this;
          var name = null;
          if (fn == null) {
              // Called with only 1 argument.
              if (typeof nameOrFn !== 'function') {
                  throw new Error('Please provide a function to tidy()');
              }
              fn = nameOrFn;
          }
          else {
              // Called with 2 arguments.
              if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {
                  throw new Error('When calling with two arguments, the first argument ' +
                      'to tidy() must be a string');
              }
              if (typeof fn !== 'function') {
                  throw new Error('When calling with two arguments, the 2nd argument ' +
                      'to tidy() must be a function');
              }
              name = nameOrFn;
              // TODO(nsthorat,smilkov): Do operation logging and performance
              // profiling.
          }
          var result;
          return this.scopedRun(function () { return _this.startScope(name); }, function () { return _this.endScope(result); }, function () {
              result = fn();
              if (result instanceof Promise) {
                  console.error('Cannot return a Promise inside of tidy.');
              }
              return result;
          });
      };
      Engine.prototype.scopedRun = function (start, end, f) {
          start();
          try {
              var res = f();
              end();
              return res;
          }
          catch (ex) {
              end();
              throw ex;
          }
      };
      Engine.prototype.nextTensorId = function () {
          return Engine.nextTensorId++;
      };
      Engine.prototype.nextVariableId = function () {
          return Engine.nextVariableId++;
      };
      /**
       * This method is called instead of the public-facing tensor.clone() when
       * saving a tensor for backwards pass. It makes sure to add the clone
       * operation to the tape regardless of being called inside a kernel
       * execution.
       *
       * This method will go away once all kernels are modularized since we won't
       * need to turn off the tape inside runKernel().
       */
      Engine.prototype.clone = function (x) {
          var y = this.makeTensorFromDataId(x.dataId, x.shape, x.dtype);
          var inputs = { x: x };
          var grad = function (dy) { return ({ x: function () { return dy.toFloat(); } }); };
          var saved = [];
          this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});
          return y;
      };
      /**
       * Execute a kernel with the given name and return the output tensor.
       *
       * @param kernelName The name of the kernel to execute.
       * @param inputs A map of input names to tensors.
       * @param attrs A map of attribute names to their values. An attribute is a
       *     primitive (non-tensor) input to the kernel.
       * @param inputsToSave A list of tensors, inputs to save for the backprop
       *     computation.
       * @param outputsToSave A list of booleans, specifying which output to save
       *     for the backprop computation. These are booleans since the output
       * tensors are not visible to the user.
       */
      Engine.prototype.runKernel = function (kernelName, inputs, attrs, inputsToSave, outputsToSave) {
          var forwardFunc = null;
          var backwardsFunc = null;
          // Call runKernel as a stop-gap until we modularize all kernels.
          // Once we modularize all kernels, we will remove the existing
          // `runKernelFunc`.
          return this.runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave);
      };
      Engine.prototype.shouldCheckForMemLeaks = function () {
          return this.ENV.getBool('IS_TEST');
      };
      Engine.prototype.checkKernelForMemLeak = function (kernelName, numDataIdsBefore, outInfos) {
          var numDataIdsAfter = this.backend.numDataIds();
          // Count the number of data ids associated with the result of the kernel.
          var numOutputDataIds = 0;
          outInfos.forEach(function (info) {
              // Complex numbers allocate 3 data ids, one for 'real', one for
              // 'imaginary', and one for the container that holds the former two.
              numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);
          });
          // Account for the number of moves during kernel execution. A "data move"
          // can happen in the middle of a kernel execution, placing a new (key,value)
          // pair in the data storage. Since data moves have net zero effect (we
          // always remove the data from the old backend), we have to cancel them out
          // when detecting memory leaks.
          var numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];
          var dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;
          if (dataIdsLeaked > 0) {
              throw new Error("Backend '" + this.backendName + "' has an internal memory leak " +
                  ("(" + dataIdsLeaked + " data ids) after running '" + kernelName + "'"));
          }
      };
      /**
       * @deprecated Use `runKernel` for newly added kernels. Keep using this method
       *     only for kernels that are not yet fully modularized.
       */
      Engine.prototype.runKernelFunc = function (forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave) {
          var _this = this;
          var outputs;
          var saved = [];
          var isTapeOn = this.isTapeOn();
          if (kernelName == null) {
              kernelName =
                  this.state.activeScope != null ? this.state.activeScope.name : '';
          }
          var startingBytecount = this.state.numBytes;
          var startingNumTensors = this.state.numTensors;
          if (this.shouldCheckForMemLeaks()) {
              this.state.numDataMovesStack.push(0);
          }
          var kernelFunc;
          var kernel = getKernel(kernelName, this.backendName);
          var out;
          if (kernel != null) {
              kernelFunc = function () {
                  var numDataIdsBefore = _this.backend.numDataIds();
                  out = kernel.kernelFunc({ inputs: inputs, attrs: attrs, backend: _this.backend });
                  var outInfos = Array.isArray(out) ? out : [out];
                  if (_this.shouldCheckForMemLeaks()) {
                      _this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);
                  }
                  var outTensors = outInfos.map(function (_a) {
                      var dataId = _a.dataId, shape = _a.shape, dtype = _a.dtype;
                      return _this.makeTensorFromDataId(dataId, shape, dtype);
                  });
                  // Save the inputs and outputs.
                  // Do not save unless we are recording to the tape. Otherwise it would
                  // cause a mem leak since we would never run backprop, which disposes
                  // the kept tensors.
                  if (isTapeOn) {
                      var tensorsToSave = _this.getTensorsForGradient(kernelName, inputs, outTensors);
                      if (tensorsToSave == null) {
                          // Fallback for ops that call runKernelFunc and pass in
                          // inputsToSave and outputsToSave. Currently this is the set of ops
                          // with kernel support in the WASM backend. Once those ops and
                          // respective gradients are modularised we can remove this path.
                          if (outputsToSave == null) {
                              outputsToSave = [];
                          }
                          var outsToSave = outTensors.filter(function (_, i) { return outputsToSave[i]; });
                          tensorsToSave = (inputsToSave || []).slice().concat(outsToSave);
                      }
                      saved = _this.saveTensorsForBackwardMode(tensorsToSave);
                  }
                  return outTensors;
              };
          }
          else {
              var saveFunc_1 = function (tensors) {
                  // Do not save unless we are recording to the tape. Otherwise it would
                  // cause a mem leak since we would never run backprop, which disposes
                  // the kept tensors.
                  if (!isTapeOn) {
                      return;
                  }
                  saved = tensors.map(function (tensor) { return _this.keep(_this.clone(tensor)); });
              };
              kernelFunc = function () {
                  var numDataIdsBefore = _this.backend.numDataIds();
                  out = _this.tidy(function () { return forwardFunc(_this.backend, saveFunc_1); });
                  var outs = (Array.isArray(out) ? out : [out]);
                  if (_this.shouldCheckForMemLeaks()) {
                      _this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outs);
                  }
                  return outs;
              };
          }
          // Stop recording to a tape when running a kernel.
          this.scopedRun(function () { return _this.state.kernelDepth++; }, function () { return _this.state.kernelDepth--; }, function () {
              if (!_this.ENV.getBool('DEBUG')) {
                  outputs = kernelFunc();
              }
              else {
                  var kernelProfile = void 0;
                  kernelProfile = _this.profiler.profileKernel(kernelName, inputs, function () { return kernelFunc(); });
                  _this.profiler.logKernelProfile(kernelProfile);
                  outputs = kernelProfile.outputs;
              }
          });
          if (isTapeOn) {
              this.addTapeNode(kernelName, inputs, outputs, backwardsFunc, saved, attrs);
          }
          if (this.state.profiling) {
              this.state.activeProfile.kernels.push({
                  name: kernelName,
                  bytesAdded: this.state.numBytes - startingBytecount,
                  totalBytesSnapshot: this.state.numBytes,
                  tensorsAdded: this.state.numTensors - startingNumTensors,
                  totalTensorsSnapshot: this.state.numTensors,
                  inputShapes: Object.keys(inputs).map(function (key) { return inputs[key] != null ? inputs[key].shape : null; }),
                  outputShapes: outputs.map(function (item) { return item.shape; })
              });
          }
          return (Array.isArray(out) ? outputs : outputs[0]);
      };
      /**
       * Saves tensors used in forward mode for use in backward mode.
       *
       * @param tensors the list of tensors to save.
       */
      Engine.prototype.saveTensorsForBackwardMode = function (tensors) {
          var _this = this;
          var saved = tensors.map(function (tensor) { return _this.keep(_this.clone(tensor)); });
          return saved;
      };
      /**
       * Returns a list of tensors to save for a given gradient calculation.
       *
       * Returns undefined if their is no registered gradient for this kernel in the
       * gradient registry.
       *
       * @param kernelName name of kernel to look up gradient for.
       * @param inputs a map of input tensors.
       * @param outputs an array of output tensors from forward mode of kernel.
       */
      Engine.prototype.getTensorsForGradient = function (kernelName, inputs, outputs) {
          var gradConfig = getGradient(kernelName);
          if (gradConfig != null) {
              var inputsToSave = gradConfig.inputsToSave || [];
              var outputsToSave_1 = gradConfig.outputsToSave || [];
              // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs
              // specified in inputsToSave will be saved.
              var inputTensorsToSave = void 0;
              if (gradConfig.saveAllInputs) {
                  assert(Array.isArray(inputs), function () { return 'saveAllInputs is true, expected inputs to be an array.'; });
                  inputTensorsToSave = Object.keys(inputs).map(function (key) { return inputs[key]; });
              }
              else {
                  inputTensorsToSave = inputsToSave.map(function (inputName) { return inputs[inputName]; });
              }
              var outputTensorsToSave = outputs.filter(function (_, i) { return outputsToSave_1[i]; });
              return inputTensorsToSave.concat(outputTensorsToSave);
          }
          // TODO(yassogba) throw exception here once all runkernelFunc calls with
          // inputsToSave/outputsToSave are removed
          return null;
      };
      /**
       * Internal method used by public APIs for tensor creation. Makes a new
       * tensor with the provided shape, dtype and values. It always
       * creates a new data id and writes the values to the underlying backend.
       */
      Engine.prototype.makeTensor = function (values, shape, dtype, backend) {
          if (values == null) {
              throw new Error('Values passed to engine.makeTensor() are null');
          }
          dtype = dtype || 'float32';
          backend = backend || this.backend;
          var backendVals = values;
          if (dtype === 'string' && isString(values[0])) {
              backendVals = values.map(function (d) { return encodeString(d); });
          }
          var dataId = backend.write(backendVals, shape, dtype);
          var t = new Tensor(shape, dtype, dataId, this.nextTensorId());
          this.incRef(t, backend);
          // Count bytes for string tensors.
          if (dtype === 'string') {
              var info = this.state.tensorInfo.get(dataId);
              var newBytes = bytesFromStringArray(backendVals);
              this.state.numBytes += newBytes - info.bytes;
              info.bytes = newBytes;
          }
          return t;
      };
      /**
       * Internal method used by backends. Makes a new tensor
       * that is a wrapper around an existing data id. It doesn't create
       * a new data id, only increments the ref count used in memory tracking.
       */
      Engine.prototype.makeTensorFromDataId = function (dataId, shape, dtype, backend) {
          dtype = dtype || 'float32';
          var t = new Tensor(shape, dtype, dataId, this.nextTensorId());
          this.incRef(t, backend);
          return t;
      };
      Engine.prototype.makeVariable = function (initialValue, trainable, name, dtype) {
          if (trainable === void 0) { trainable = true; }
          name = name || this.nextVariableId().toString();
          if (dtype != null && dtype !== initialValue.dtype) {
              initialValue = initialValue.cast(dtype);
          }
          var v = new Variable(initialValue, trainable, name, this.nextTensorId());
          if (this.state.registeredVariables[v.name] != null) {
              throw new Error("Variable with name " + v.name + " was already registered");
          }
          this.state.registeredVariables[v.name] = v;
          this.incRef(v, this.backend);
          return v;
      };
      Engine.prototype.incRef = function (a, backend) {
          var refCount = this.state.tensorInfo.has(a.dataId) ?
              this.state.tensorInfo.get(a.dataId).refCount :
              0;
          this.state.numTensors++;
          if (a.dtype === 'string') {
              this.state.numStringTensors++;
          }
          if (refCount === 0) {
              this.state.numDataBuffers++;
              // Bytes for complex numbers are counted by their components. Bytes for
              // string tensors are counted when writing values.
              var bytes = 0;
              if (a.dtype !== 'complex64' && a.dtype !== 'string') {
                  bytes = a.size * bytesPerElement(a.dtype);
              }
              this.state.tensorInfo.set(a.dataId, {
                  backend: backend || this.backend,
                  dtype: a.dtype,
                  shape: a.shape,
                  bytes: bytes,
                  refCount: 0
              });
              this.state.numBytes += bytes;
          }
          this.state.tensorInfo.get(a.dataId).refCount++;
          if (!(a instanceof Variable)) {
              this.track(a);
          }
      };
      Engine.prototype.disposeTensor = function (a) {
          if (!this.state.tensorInfo.has(a.dataId)) {
              return;
          }
          this.state.numTensors--;
          if (a.dtype === 'string') {
              this.state.numStringTensors--;
          }
          var info = this.state.tensorInfo.get(a.dataId);
          var refCount = info.refCount;
          if (refCount <= 1) {
              // Don't count bytes for complex numbers as they are counted by their
              // components.
              if (a.dtype !== 'complex64') {
                  this.state.numBytes -= info.bytes;
              }
              this.state.numDataBuffers--;
              info.backend.disposeData(a.dataId);
              this.state.tensorInfo.delete(a.dataId);
          }
          else {
              this.state.tensorInfo.get(a.dataId).refCount--;
          }
          // TODO(nsthorat): Construct an error and save the stack trace for
          // debugging when in debug mode. Creating a stack trace is too expensive
          // to do unconditionally.
      };
      Engine.prototype.disposeVariables = function () {
          for (var varName in this.state.registeredVariables) {
              var v = this.state.registeredVariables[varName];
              this.disposeVariable(v);
          }
      };
      Engine.prototype.disposeVariable = function (v) {
          this.disposeTensor(v);
          if (this.state.registeredVariables[v.name] != null) {
              delete this.state.registeredVariables[v.name];
          }
      };
      Engine.prototype.memory = function () {
          var info = this.backend.memory();
          info.numTensors = this.state.numTensors;
          info.numDataBuffers = this.state.numDataBuffers;
          info.numBytes = this.state.numBytes;
          if (this.state.numStringTensors > 0) {
              info.unreliable = true;
              if (info.reasons == null) {
                  info.reasons = [];
              }
              info.reasons.push('Memory usage by string tensors is approximate ' +
                  '(2 bytes per character)');
          }
          return info;
      };
      Engine.prototype.profile = function (query) {
          return __awaiter(this, void 0, void 0, function () {
              var startBytes, startNumTensors, _a;
              return __generator(this, function (_b) {
                  switch (_b.label) {
                      case 0:
                          this.state.profiling = true;
                          startBytes = this.state.numBytes;
                          startNumTensors = this.state.numTensors;
                          this.state.activeProfile.kernels = [];
                          _a = this.state.activeProfile;
                          return [4 /*yield*/, query()];
                      case 1:
                          _a.result = _b.sent();
                          this.state.profiling = false;
                          this.state.activeProfile.peakBytes = Math.max.apply(Math, this.state.activeProfile.kernels.map(function (d) { return d.totalBytesSnapshot; }));
                          this.state.activeProfile.newBytes = this.state.numBytes - startBytes;
                          this.state.activeProfile.newTensors =
                              this.state.numTensors - startNumTensors;
                          return [2 /*return*/, this.state.activeProfile];
                  }
              });
          });
      };
      Engine.prototype.isTapeOn = function () {
          return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
      };
      Engine.prototype.addTapeNode = function (kernelName, inputs, outputs, gradientsFunc, saved, attrs) {
          var _this = this;
          var tapeNode = { id: this.state.nextTapeNodeId++, kernelName: kernelName, inputs: inputs, outputs: outputs, saved: saved };
          var gradConfig = getGradient(kernelName);
          if (gradConfig != null) {
              gradientsFunc = gradConfig.gradFunc;
          }
          if (gradientsFunc != null) {
              tapeNode.gradient = function (dys) {
                  // TODO(smilkov): To optimize back-prop, pass dys that are not used in
                  // the backprop graph to the user as null instead of zeros
                  dys = dys.map(function (dy, i) {
                      if (dy == null) {
                          var output = outputs[i];
                          var vals = makeZerosTypedArray(output.size, output.dtype);
                          return _this.makeTensor(vals, output.shape, output.dtype);
                      }
                      return dy;
                  });
                  // Grad functions of ops with single outputs expect a dy, while ops
                  // with multiple outputs expect dys (array of dy).
                  return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);
              };
          }
          this.state.activeTape.push(tapeNode);
      };
      Engine.prototype.keep = function (result) {
          result.kept = true;
          return result;
      };
      Engine.prototype.startTape = function () {
          if (this.state.gradientDepth === 0) {
              this.state.activeTape = [];
          }
          this.state.gradientDepth++;
      };
      Engine.prototype.endTape = function () {
          this.state.gradientDepth--;
      };
      /**
       * Start a scope. Use this with endScope() to achieve the same functionality
       * as scope() without the need for a function closure.
       */
      Engine.prototype.startScope = function (name) {
          var scopeInfo = {
              track: [],
              name: 'unnamed scope',
              id: this.state.nextScopeId++
          };
          if (name) {
              scopeInfo.name = name;
          }
          this.state.scopeStack.push(scopeInfo);
          this.state.activeScope = scopeInfo;
      };
      /**
       * End a scope. Use this with startScope() to achieve the same functionality
       * as scope() without the need for a function closure.
       */
      Engine.prototype.endScope = function (result) {
          var _this = this;
          var tensorsToTrackInParent = getTensorsInContainer(result);
          var tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(function (t) { return t.id; }));
          // Dispose the arrays tracked in this scope.
          for (var i = 0; i < this.state.activeScope.track.length; i++) {
              var tensor = this.state.activeScope.track[i];
              if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {
                  tensor.dispose();
              }
          }
          var oldScope = this.state.scopeStack.pop();
          this.state.activeScope = this.state.scopeStack.length === 0 ?
              null :
              this.state.scopeStack[this.state.scopeStack.length - 1];
          // Track the current result in the parent scope.
          tensorsToTrackInParent.forEach(function (tensor) {
              // Only track the tensor if was allocated in the inner scope and is not
              // globally kept.
              if (!tensor.kept && tensor.scopeId === oldScope.id) {
                  _this.track(tensor);
              }
          });
      };
      /**
       * Returns gradients of `f` with respect to each of the `xs`. The gradients
       * returned are of the same length as `xs`, but some might be null if `f`
       * was not a function of that `x`. It also takes optional dy to multiply the
       * gradient, which defaults to `1`.
       */
      Engine.prototype.gradients = function (f, xs, dy, allowNoGradients) {
          var _this = this;
          if (allowNoGradients === void 0) { allowNoGradients = false; }
          assert(xs.length > 0, function () { return 'gradients() received an empty list of xs.'; });
          if (dy != null && dy.dtype !== 'float32') {
              throw new Error("dy must have 'float32' dtype, but has '" + dy.dtype + "'");
          }
          var y = this.scopedRun(function () { return _this.startTape(); }, function () { return _this.endTape(); }, function () { return _this.tidy('forward', f); });
          assert(y instanceof Tensor, function () { return 'The result y returned by f() must be a tensor.'; });
          // Filter out the nodes that don't connect x => y.
          var filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);
          if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {
              throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +
                  'that the f you passed encloses all operations that lead from x ' +
                  'to y.');
          }
          return this.tidy('backward', function () {
              var accumulatedGradientMap = {};
              accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;
              // Backprop gradients through the filtered nodes.
              backpropagateGradients(accumulatedGradientMap, filteredTape, 
              // Pass the tidy function to avoid circular dep with `tape.ts`.
              function (f) { return _this.tidy(f); });
              var grads = xs.map(function (x) { return accumulatedGradientMap[x.id]; });
              if (_this.state.gradientDepth === 0) {
                  // This means that we are not computing higher-order gradients
                  // and can clean up the tape.
                  _this.state.activeTape.forEach(function (node) {
                      for (var _i = 0, _a = node.saved; _i < _a.length; _i++) {
                          var tensor = _a[_i];
                          tensor.dispose();
                      }
                  });
                  _this.state.activeTape = null;
              }
              return { value: y, grads: grads };
          });
      };
      Engine.prototype.customGrad = function (f) {
          var _this = this;
          assert(isFunction(f), function () { return 'The f passed in customGrad(f) must be a function.'; });
          return function () {
              var inputs = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                  inputs[_i] = arguments[_i];
              }
              assert(inputs.every(function (t) { return t instanceof Tensor; }), function () { return 'The args passed in customGrad(f)(x1, x2,...) must all be ' +
                  'tensors'; });
              var res;
              var inputMap = {};
              inputs.forEach(function (input, i) {
                  inputMap[i] = input;
              });
              return _this.runKernelFunc(function (_, save) {
                  res = f.apply(void 0, inputs.concat([save]));
                  assert(res.value instanceof Tensor, function () { return 'The function f passed in customGrad(f) must return an ' +
                      'object where `obj.value` is a tensor'; });
                  assert(isFunction(res.gradFunc), function () { return 'The function f passed in customGrad(f) must return an ' +
                      'object where `obj.gradFunc` is a function.'; });
                  return res.value;
              }, inputMap, function (dy, saved) {
                  var gradRes = res.gradFunc(dy, saved);
                  var grads = Array.isArray(gradRes) ? gradRes : [gradRes];
                  assert(grads.length === inputs.length, function () { return 'The function f passed in customGrad(f) must return an ' +
                      'object where `obj.gradFunc` is a function that returns ' +
                      'the same number of tensors as inputs passed to f(...).'; });
                  assert(grads.every(function (t) { return t instanceof Tensor; }), function () { return 'The function f passed in customGrad(f) must return an ' +
                      'object where `obj.gradFunc` is a function that returns ' +
                      'a list of only tensors.'; });
                  var gradMap = {};
                  grads.forEach(function (grad, i) {
                      gradMap[i] = function () { return grad; };
                  });
                  return gradMap;
              });
          };
      };
      Engine.prototype.readSync = function (dataId) {
          // Route the read to the correct backend.
          var info = this.state.tensorInfo.get(dataId);
          return info.backend.readSync(dataId);
      };
      Engine.prototype.read = function (dataId) {
          // Route the read to the correct backend.
          var info = this.state.tensorInfo.get(dataId);
          return info.backend.read(dataId);
      };
      Engine.prototype.time = function (query) {
          return __awaiter(this, void 0, void 0, function () {
              var start, timingInfo;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          start = now();
                          return [4 /*yield*/, this.backend.time(query)];
                      case 1:
                          timingInfo = _a.sent();
                          timingInfo.wallMs = now() - start;
                          return [2 /*return*/, timingInfo];
                  }
              });
          });
      };
      /**
       * Tracks a Tensor in the current scope to be automatically cleaned up
       * when the current scope ends, and returns the value.
       *
       * @param result The Tensor to track in the current scope.
       */
      Engine.prototype.track = function (result) {
          if (this.state.activeScope != null) {
              result.scopeId = this.state.activeScope.id;
              this.state.activeScope.track.push(result);
          }
          return result;
      };
      Object.defineProperty(Engine.prototype, "registeredVariables", {
          get: function () {
              return this.state.registeredVariables;
          },
          enumerable: true,
          configurable: true
      });
      /**
       * Resets the engine state. Removes all backends but does not remove
       * registered backend factories.
       */
      Engine.prototype.reset = function () {
          // Make any pending promise obsolete.
          this.pendingBackendInitId++;
          this.state.dispose();
          this.ENV.reset();
          this.state = new EngineState();
          for (var backendName in this.registry) {
              this.disposeRegisteredKernels(backendName);
              this.registry[backendName].dispose();
              delete this.registry[backendName];
          }
          this.backendName = null;
          this.backendInstance = null;
          this.pendingBackendInit = null;
      };
      Engine.nextTensorId = 0;
      Engine.nextVariableId = 0;
      return Engine;
  }());
  function ones(shape) {
      var values = makeOnesTypedArray(sizeFromShape(shape), 'float32');
      return ENGINE.makeTensor(values, shape, 'float32');
  }
  function getOrMakeEngine() {
      var ns = getGlobalNamespace();
      if (ns._tfengine == null) {
          var environment = new Environment(ns);
          ns._tfengine = new Engine(environment);
      }
      setEnvironmentGlobal(ns._tfengine.ENV);
      // Tell the current tensor interface that the global engine is responsible
      // for tracking.
      setTensorTracker(function () { return ns._tfengine; });
      return ns._tfengine;
  }
  var ENGINE = getOrMakeEngine();

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // tslint:disable-next-line:no-any
  function _isNavigatorDefined() {
      return typeof navigator !== 'undefined' && navigator != null;
  }
  function isMobile() {
      if (_isNavigatorDefined()) {
          // tslint:disable-next-line:no-any
          var a = navigator.userAgent || navigator.vendor || window.opera;
          // tslint:disable-next-line:max-line-length
          return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i
              .test(a) ||
              // tslint:disable-next-line:max-line-length
              /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i
                  .test(a.substr(0, 4));
      }
      return false;
  }
  function isBrowser() {
      return (typeof window !== 'undefined' && window.document != null) ||
          //@ts-ignore
          (typeof WorkerGlobalScope !== 'undefined');
  }

  var device_util = {
      __proto__: null,
      isMobile: isMobile,
      isBrowser: isBrowser
  };

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ENV = env();
  /**
   * This file contains environment-related flag registrations.
   */
  /** Whether to enable debug mode. */
  ENV.registerFlag('DEBUG', function () { return false; }, function (debugValue) {
      if (debugValue) {
          console.warn('Debugging mode is ON. The output of every math call will ' +
              'be downloaded to CPU and checked for NaNs. ' +
              'This significantly impacts performance.');
      }
  });
  /** Whether we are in a browser (as versus, say, node.js) environment. */
  ENV.registerFlag('IS_BROWSER', function () { return isBrowser(); });
  /** Whether we are in a browser (as versus, say, node.js) environment. */
  ENV.registerFlag('IS_NODE', function () { return (typeof process !== 'undefined') &&
      (typeof process.versions !== 'undefined') &&
      (typeof process.versions.node !== 'undefined'); });
  /** Whether this browser is Chrome. */
  ENV.registerFlag('IS_CHROME', function () { return typeof navigator !== 'undefined' && navigator != null &&
      navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&
      /Google Inc/.test(navigator.vendor); });
  /**
   * True when the environment is "production" where we disable safety checks
   * to gain performance.
   */
  ENV.registerFlag('PROD', function () { return false; });
  /**
   * Whether to do sanity checks when inferring a shape from user-provided
   * values, used when creating a new tensor.
   */
  ENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', function () { return ENV.getBool('DEBUG'); });
  /** Whether deprecation warnings are enabled. */
  ENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', function () { return true; });
  /** True if running unit tests. */
  ENV.registerFlag('IS_TEST', function () { return false; });

  var Abs = 'Abs';
  var Acos = 'Acos';
  var Acosh = 'Acosh';
  var Add = 'Add';
  var AddN = 'AddN';
  var All = 'All';
  var Any = 'Any';
  var ArgMax = 'ArgMax';
  var ArgMin = 'ArgMin';
  var Asin = 'Asin';
  var Asinh = 'Asinh';
  var Atan = 'Atan';
  var Atanh = 'Atanh';
  var Atan2 = 'Atan2';
  var AvgPool = 'AvgPool';
  var AvgPoolBackprop = 'AvgPoolBackprop';
  var AvgPool3D = 'AvgPool3D';
  var AvgPool3DBackprop = 'AvgPool3DBackprop';
  var BatchMatMul = 'BatchMatMul';
  var BatchToSpaceND = 'BatchToSpaceND';
  var BroadcastTo = 'BroadcastTo';
  var Cast = 'Cast';
  var Ceil = 'Ceil';
  var ClipByValue = 'ClipByValue';
  var Complex = 'Complex';
  var Concat = 'Concat';
  var Conv2D = 'Conv2D';
  var Conv2DBackpropFilter = 'Conv2DBackpropFilter';
  var Conv2DBackpropInput = 'Conv2DBackpropInput';
  var Conv3D = 'Conv3D';
  var Conv3DBackpropFilterV2 = 'Conv3DBackpropFilterV2';
  var Conv3DBackpropInputV2 = 'Conv3DBackpropInputV2';
  var Cos = 'Cos';
  var Cosh = 'Cosh';
  var Cumsum = 'Cumsum';
  var CropAndResize = 'CropAndResize';
  var DepthToSpace = 'DepthToSpace';
  var DepthwiseConv2dNative = 'DepthwiseConv2dNative';
  var DepthwiseConv2dNativeBackpropFilter = 'DepthwiseConv2dNativeBackpropFilter';
  var DepthwiseConv2dNativeBackpropInput = 'DepthwiseConv2dNativeBackpropInput';
  var Diag = 'Diag';
  var Dilation2D = 'Dilation2D';
  var Dilation2DBackpropInput = 'Dilation2DBackpropInput';
  var Dilation2DBackpropFilter = 'Dilation2DBackpropFilter';
  var Div = 'Div';
  var Elu = 'Elu';
  var EluGrad = 'EluGrad';
  var Erf = 'Erf';
  var Equal = 'Equal';
  var Exp = 'Exp';
  var Expm1 = 'Expm1';
  var FFT = 'FFT';
  var Floor = 'Floor';
  var FloorDiv = 'FloorDiv';
  var Fill = 'Fill';
  var FusedBatchNorm = 'FusedBatchNorm';
  var GatherV2 = 'GatherV2';
  var GatherNd = 'GatherNd';
  var Greater = 'Greater';
  var GreaterEqual = 'GreaterEqual';
  var Identity = 'Identity';
  var IFFT = 'IFFT';
  var Imag = 'Imag';
  var IsFinite = 'IsFinite';
  var IsInf = 'IsInf';
  var IsNan = 'IsNan';
  var Less = 'Less';
  var LessEqual = 'LessEqual';
  var LinSpace = 'LinSpace';
  var Log = 'Log';
  var Log1p = 'Log1p';
  var LogicalAnd = 'LogicalAnd';
  var LogicalNot = 'LogicalNot';
  var LogicalOr = 'LogicalOr';
  var LogSoftmax = 'LogSoftmax';
  var LRN = 'LRN';
  var LRNBackprop = 'LRNBackprop';
  var Max = 'Max';
  var Maximum = 'Maximum';
  var MaxPool = 'MaxPool';
  var MaxPoolBackprop = 'MaxPoolBackprop';
  var MaxPool3D = 'MaxPool3D';
  var MaxPool3DBackprop = 'MaxPool3DBackprop';
  var MaxPoolWithArgmax = 'MaxPoolWithArgmax';
  var Mean = 'Mean';
  var Min = 'Min';
  var Minimum = 'Minimum';
  var Mod = 'Mod';
  var Multiply = 'Multiply';
  var Negate = 'Negate';
  var NotEqual = 'NotEqual';
  var NonMaxSuppressionV3 = 'NonMaxSuppressionV3';
  var NonMaxSuppressionV4 = 'NonMaxSuppressionV4';
  var NonMaxSuppressionV5 = 'NonMaxSuppressionV5';
  var OnesLike = 'OnesLike';
  var OneHot = 'OneHot';
  var PadV2 = 'PadV2';
  var Pool = 'Pool';
  var Pow = 'Pow';
  var Prelu = 'Prelu';
  var Prod = 'Prod';
  var Range = 'Range';
  var Real = 'Real';
  var Reciprocal = 'Reciprocal';
  var Relu = 'Relu';
  var Reshape = 'Reshape';
  var ResizeNearestNeighbor = 'ResizeNearestNeighbor';
  var ResizeNearestNeighborGrad = 'ResizeNearestNeighborGrad';
  var ResizeBilinear = 'ResizeBilinear';
  var ResizeBilinearGrad = 'ResizeBilinearGrad';
  var Relu6 = 'Relu6';
  var Reverse = 'Reverse';
  var Round = 'Round';
  var Rsqrt = 'Rsqrt';
  var ScatterNd = 'ScatterNd';
  var SelectV2 = 'SelectV2';
  var Selu = 'Selu';
  var Slice = 'Slice';
  var Sin = 'Sin';
  var Sinh = 'Sinh';
  var Sign = 'Sign';
  var Sigmoid = 'Sigmoid';
  var Softplus = 'Softplus';
  var Sqrt = 'Sqrt';
  var Sum = 'Sum';
  var SpaceToBatchND = 'SpaceToBatchND';
  var SplitV = 'SplitV';
  var Softmax = 'Softmax';
  var SquaredDifference = 'SquaredDifference';
  var Square = 'Square';
  var Sub = 'Sub';
  var SparseToDense = 'SparseToDense';
  var StridedSlice = 'StridedSlice';
  var Tan = 'Tan';
  var Tanh = 'Tanh';
  var Tile = 'Tile';
  var TopK = 'TopK';
  var Transpose = 'Transpose';
  var Unpack = 'Unpack';
  var UnsortedSegmentSum = 'UnsortedSegmentSum';
  var ZerosLike = 'ZerosLike';
  /**
   * TensorFlow.js-only kernels
   */
  var Step = 'Step';
  var FromPixels = 'FromPixels';
  var RotateWithOffset = 'RotateWithOffset';
  var _FusedMatMul = '_FusedMatMul';
  var FusedConv2D = 'FusedConv2D';
  var FusedDepthwiseConv2D = 'FusedDepthwiseConv2D';

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function inferShape(val, dtype) {
      var firstElem = val;
      if (isTypedArray(val)) {
          return dtype === 'string' ? [] : [val.length];
      }
      if (!Array.isArray(val)) {
          return []; // Scalar.
      }
      var shape = [];
      while (Array.isArray(firstElem) ||
          isTypedArray(firstElem) && dtype !== 'string') {
          shape.push(firstElem.length);
          firstElem = firstElem[0];
      }
      if (Array.isArray(val) &&
          env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {
          deepAssertShapeConsistency(val, shape, []);
      }
      return shape;
  }
  function deepAssertShapeConsistency(val, shape, indices) {
      indices = indices || [];
      if (!(Array.isArray(val)) && !isTypedArray(val)) {
          assert(shape.length === 0, function () { return "Element arr[" + indices.join('][') + "] is a primitive, " +
              ("but should be an array/TypedArray of " + shape[0] + " elements"); });
          return;
      }
      assert(shape.length > 0, function () { return "Element arr[" + indices.join('][') + "] should be a primitive, " +
          ("but is an array of " + val.length + " elements"); });
      assert(val.length === shape[0], function () { return "Element arr[" + indices.join('][') + "] should have " + shape[0] + " " +
          ("elements, but has " + val.length + " elements"); });
      var subShape = shape.slice(1);
      for (var i = 0; i < val.length; ++i) {
          deepAssertShapeConsistency(val[i], subShape, indices.concat(i));
      }
  }
  function assertDtype(expectedDtype, actualDType, argName, functionName) {
      if (expectedDtype == null) {
          return;
      }
      if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||
          expectedDtype === 'numeric' && actualDType === 'string') {
          throw new Error("Argument '" + argName + "' passed to '" + functionName + "' must " +
              ("be " + expectedDtype + " tensor, but got " + actualDType + " tensor"));
      }
  }
  function convertToTensor(x, argName, functionName, parseAsDtype) {
      if (parseAsDtype === void 0) { parseAsDtype = 'numeric'; }
      if (x instanceof Tensor) {
          assertDtype(parseAsDtype, x.dtype, argName, functionName);
          return x;
      }
      var inferredDtype = inferDtype(x);
      // If the user expects a bool/int/float, use that info to update the
      // inferredDtype when it is not a string.
      if (inferredDtype !== 'string' &&
          ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {
          inferredDtype = parseAsDtype;
      }
      assertDtype(parseAsDtype, inferredDtype, argName, functionName);
      if ((x == null) ||
          (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&
              typeof x !== 'boolean' && typeof x !== 'string')) {
          var type = x == null ? 'null' : x.constructor.name;
          throw new Error("Argument '" + argName + "' passed to '" + functionName + "' must be a " +
              ("Tensor or TensorLike, but got '" + type + "'"));
      }
      var inferredShape = inferShape(x, inferredDtype);
      if (!isTypedArray(x) && !Array.isArray(x)) {
          x = [x];
      }
      var skipTypedArray = true;
      var values = inferredDtype !== 'string' ?
          toTypedArray(x, inferredDtype) :
          flatten(x, [], skipTypedArray);
      return ENGINE.makeTensor(values, inferredShape, inferredDtype);
  }
  function convertToTensorArray(arg, argName, functionName, parseAsDtype) {
      if (parseAsDtype === void 0) { parseAsDtype = 'numeric'; }
      if (!Array.isArray(arg)) {
          throw new Error("Argument " + argName + " passed to " + functionName + " must be a " +
              '`Tensor[]` or `TensorLike[]`');
      }
      var tensors = arg;
      return tensors.map(function (t, i) { return convertToTensor(t, argName + "[" + i + "]", functionName); }, parseAsDtype);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Used for wrapping functions that perform math operations on
   * Tensors. The function will be wrapped in a named scope that cleans all
   * memory usage after the function is done.
   */
  function op(f) {
      var keys = Object.keys(f);
      if (keys.length !== 1) {
          throw new Error("Please provide an object with a single key " +
              "(operation name) mapping to a function. Got an object with " +
              (keys.length + " keys."));
      }
      var opName = keys[0];
      var fn = f[opName];
      // Strip the underscore from the end of the function name.
      if (opName.endsWith('_')) {
          opName = opName.substring(0, opName.length - 1);
      }
      // tslint:disable-next-line:no-any
      var f2 = function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          ENGINE.startScope(opName);
          try {
              var result = fn.apply(void 0, args);
              if (result instanceof Promise) {
                  console.error('Cannot return a Promise inside of tidy.');
              }
              ENGINE.endScope(result);
              return result;
          }
          catch (ex) {
              ENGINE.endScope(null);
              throw ex;
          }
      };
      Object.defineProperty(f2, 'name', { value: opName, configurable: true });
      // tslint:disable-next-line:no-any
      return f2;
  }

  /**
   * @license
   * Copyright 2020 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Casts a `tf.Tensor` to a new dtype.
   *
   * ```js
   * const x = tf.tensor1d([1.5, 2.5, 3]);
   * tf.cast(x, 'int32').print();
   * ```
   * @param x The input tensor to be casted.
   * @param dtype The dtype to cast the input tensor to.
   */
  /** @doc {heading: 'Tensors', subheading: 'Transformations'} */
  function cast_(x, dtype) {
      var $x = convertToTensor(x, 'x', 'cast');
      // Sanity checks.
      if (!isValidDtype(dtype)) {
          throw new Error("Failed to cast to unknown dtype " + dtype);
      }
      if (dtype === 'string' && $x.dtype !== 'string' ||
          dtype !== 'string' && $x.dtype === 'string') {
          throw new Error('Only strings can be casted to strings');
      }
      var inputs = { x: $x };
      var attrs = { dtype: dtype };
      return ENGINE.runKernelFunc(function (backend) { return backend.cast($x, dtype); }, inputs, null /* grad */, Cast, attrs);
  }
  var cast = op({ cast_: cast_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.
   *
   * We also expose `tf.mulStrict` which has the same signature as this op and
   * asserts that `a` and `b` are the same shape (does not broadcast).
   *
   * ```js
   * const a = tf.tensor1d([1, 2, 3, 4]);
   * const b = tf.tensor1d([2, 3, 4, 5]);
   *
   * a.mul(b).print();  // or tf.mul(a, b)
   * ```
   *
   * ```js
   * // Broadcast mul a with b.
   * const a = tf.tensor1d([1, 2, 3, 4]);
   * const b = tf.scalar(5);
   *
   * a.mul(b).print();  // or tf.mul(a, b)
   * ```
   * @param a The first tensor to multiply.
   * @param b The second tensor to multiply. Must have the same dtype as `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */
  function mul_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'mul');
      var $b = convertToTensor(b, 'b', 'mul');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      var forward = function (backend, save) {
          var res = backend.multiply($a, $b);
          save([$a, $b]);
          return res;
      };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Multiply);
  }
  var mul = op({ mul_: mul_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`
   *
   * ```js
   * const x = tf.tensor1d([0, 2, -1, -3]);
   *
   * x.step(.5).print();  // or tf.step(x, .5)
   * ```
   * @param x The input tensor.
   * @param alpha The gradient when input is negative.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function step_(x, alpha) {
      if (alpha === void 0) { alpha = 0.0; }
      var $x = convertToTensor(x, 'x', 'step');
      var inputs = { x: $x };
      var attrs = { alpha: alpha };
      return ENGINE.runKernelFunc(function (backend) { return backend.step($x, alpha); }, inputs, null /* grad */, Step, attrs);
  }
  var step = op({ step_: step_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var absGradConfig = {
      kernelName: Abs,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return mul(dy, step(cast(x, 'float32'), -1)); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
   * The result is rounded with floor function.
   *
   *
   * ```js
   * const a = tf.tensor1d([1, 4, 9, 16]);
   * const b = tf.tensor1d([1, 2, 3, 4]);
   *
   * a.floorDiv(b).print();  // or tf.div(a, b)
   * ```
   *
   * ```js
   * // Broadcast div a with b.
   * const a = tf.tensor1d([2, 4, 6, 8]);
   * const b = tf.scalar(2);
   *
   * a.floorDiv(b).print();  // or tf.floorDiv(a, b)
   * ```
   *
   * @param a The first tensor as the numerator.
   * @param b The second tensor as the denominator. Must have the same dtype as
   * `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */
  function floorDiv_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'floorDiv');
      var $b = convertToTensor(b, 'b', 'floorDiv');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      var forward = function (backend, save) {
          var res = backend.floorDiv($a, $b);
          save([$a, $b]);
          return res;
      };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, FloorDiv);
  }
  var floorDiv = op({ floorDiv_: floorDiv_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([1, 4, 9, 16]);
   * const b = tf.tensor1d([1, 2, 3, 4]);
   *
   * a.div(b).print();  // or tf.div(a, b)
   * ```
   *
   * ```js
   * // Broadcast div a with b.
   * const a = tf.tensor1d([2, 4, 6, 8]);
   * const b = tf.scalar(2);
   *
   * a.div(b).print();  // or tf.div(a, b)
   * ```
   *
   * @param a The first tensor as the numerator.
   * @param b The second tensor as the denominator. Must have the same dtype as
   * `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */
  function div_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'div');
      var $b = convertToTensor(b, 'b', 'div');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      if ($a.dtype === 'int32' && $b.dtype === 'int32') {
          return floorDiv($a, $b);
      }
      var forward = function (backend, save) {
          var res = backend.realDivide($a, $b);
          save([$a, $b]);
          return res;
      };
      var inputs = { a: $a, b: $b };
      var attrs = {};
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Div, attrs);
  }
  var div = op({ div_: div_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes `-1 * x` element-wise.
   *
   * ```js
   * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);
   *
   * x.neg().print();  // or tf.neg(x)
   * ```
   *
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function neg_(x) {
      var $x = convertToTensor(x, 'x', 'neg');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend) { return backend.neg($x); }, inputs, null /* grad */, Negate);
  }
  var neg = op({ neg_: neg_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** This is shared code across all tensor creation methods. */
  function makeTensor(values, shape, inferredShape, dtype) {
      if (dtype == null) {
          dtype = inferDtype(values);
      }
      if (dtype === 'complex64') {
          throw new Error("Cannot construct a complex64 tensor directly. " +
              "Please use tf.complex(real, imag).");
      }
      if (!isTypedArray(values) && !Array.isArray(values) &&
          typeof values !== 'number' && typeof values !== 'boolean' &&
          typeof values !== 'string') {
          throw new Error('values passed to tensor(values) must be a number/boolean/string or ' +
              'an array of numbers/booleans/strings, or a TypedArray');
      }
      if (shape != null) {
          assertNonNegativeIntegerDimensions(shape);
          var providedSize_1 = sizeFromShape(shape);
          var inferredSize_1 = sizeFromShape(inferredShape);
          assert(providedSize_1 === inferredSize_1, function () {
              return "Based on the provided shape, [" + shape + "], the tensor should have " +
                  (providedSize_1 + " values but has " + inferredSize_1);
          });
          for (var i = 0; i < inferredShape.length; ++i) {
              var inferred = inferredShape[i];
              var flatDimsDontMatch = i === inferredShape.length - 1 ?
                  inferred !== sizeFromShape(shape.slice(i)) :
                  true;
              assert(inferredShape[i] === shape[i] || !flatDimsDontMatch, function () { return "Error creating a new Tensor. Inferred shape " +
                  ("(" + inferredShape + ") does not match the provided ") +
                  ("shape (" + shape + "). "); });
          }
      }
      if (!isTypedArray(values) && !Array.isArray(values)) {
          values = [values];
      }
      shape = shape || inferredShape;
      values = dtype !== 'string' ?
          toTypedArray(values, dtype) :
          flatten(values, [], true);
      return ENGINE.makeTensor(values, shape, dtype);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.
   *
   * The same functionality can be achieved with `tf.tensor`, but in general
   * we recommend using `tf.scalar` as it makes the code more readable.
   *
   * ```js
   * tf.scalar(3.14).print();
   * ```
   *
   * @param value The value of the scalar.
   * @param dtype The data type.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function scalar(value, dtype) {
      if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&
          dtype !== 'complex64') {
          throw new Error('Error creating a new Scalar: value must be a primitive ' +
              '(number|boolean|string)');
      }
      if (dtype === 'string' && isTypedArray(value) &&
          !(value instanceof Uint8Array)) {
          throw new Error('When making a scalar from encoded string, ' +
              'the value must be `Uint8Array`.');
      }
      var shape = [];
      var inferredShape = [];
      return makeTensor(value, shape, inferredShape, dtype);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 4, -1]);
   *
   * x.sqrt().print();  // or tf.sqrt(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function sqrt_(x) {
      var $x = convertToTensor(x, 'x', 'sqrt');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.sqrt($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Sqrt);
  }
  var sqrt = op({ sqrt_: sqrt_ });

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes square of `x` element-wise: `x ^ 2`
   *
   * ```js
   * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);
   *
   * x.square().print();  // or tf.square(x)
   * ```
   * @param x The input Tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function square_(x) {
      var $x = convertToTensor(x, 'x', 'square');
      var attrs = {};
      var inputsToSave = [$x];
      var outputsToSave = [];
      return ENGINE.runKernelFunc(function (backend, save) {
          save([$x]);
          return backend.square($x);
      }, { x: $x }, null /* grad */, 'Square', attrs, inputsToSave, outputsToSave);
  }
  var square = op({ square_: square_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([10, 20, 30, 40]);
   * const b = tf.tensor1d([1, 2, 3, 4]);
   *
   * a.sub(b).print();  // or tf.sub(a, b)
   * ```
   *
   * ```js
   * // Broadcast subtract a with b.
   * const a = tf.tensor1d([10, 20, 30, 40]);
   * const b = tf.scalar(5);
   *
   * a.sub(b).print();  // or tf.sub(a, b)
   * ```
   * @param a The first `tf.Tensor` to subtract from.
   * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as
   * `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */
  function sub_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'sub');
      var $b = convertToTensor(b, 'b', 'sub');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      var forward = function (backend, save) {
          var res = backend.subtract($a, $b);
          save([$a, $b]);
          return res;
      };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Sub);
  }
  var sub = op({ sub_: sub_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var acosGradConfig = {
      kernelName: Acos,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return {
              x: function () {
                  var a = square(cast(x, 'float32'));
                  var b = sqrt(sub(scalar(1), a));
                  return neg(div(dy, b));
              }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var acoshGradConfig = {
      kernelName: Acosh,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return {
              x: function () {
                  var a = sqrt(sub(square(cast(x, 'float32')), 1));
                  return div(dy, a);
              }
          };
      }
  };

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the dimensions in the input shape that are broadcasted to
   * produce the provided output shape.
   *
   * The returned dimensions are 0-indexed and sorted. An example:
   * inShape = [4, 1, 3]
   * outShape = [5, 4, 3, 3]
   * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.
   */
  function getBroadcastDims(inShape, outShape) {
      var inRank = inShape.length;
      var dims = [];
      for (var i = 0; i < inRank; i++) {
          var dim = inRank - 1 - i;
          var a = inShape[dim] || 1;
          var b = outShape[outShape.length - 1 - i] || 1;
          if (b > 1 && a === 1) {
              dims.unshift(dim);
          }
      }
      return dims;
  }
  /**
   * Returns the axes in the output space that should be reduced to produce
   * the input space.
   */
  function getReductionAxes(inShape, outShape) {
      var result = [];
      for (var i = 0; i < outShape.length; i++) {
          var inDim = inShape[inShape.length - i - 1];
          var outAxis = outShape.length - i - 1;
          var outDim = outShape[outAxis];
          if (inDim == null || (inDim === 1 && outDim > 1)) {
              result.unshift(outAxis);
          }
      }
      return result;
  }
  function assertAndGetBroadcastShape(shapeA, shapeB) {
      var result = [];
      var l = Math.max(shapeA.length, shapeB.length);
      for (var i = 0; i < l; i++) {
          var a = shapeA[shapeA.length - i - 1];
          if (a == null) {
              a = 1;
          }
          var b = shapeB[shapeB.length - i - 1];
          if (b == null) {
              b = 1;
          }
          if (a === 1) {
              result.unshift(b);
          }
          else if (b === 1) {
              result.unshift(a);
          }
          else if (a !== b) {
              var errMsg = "Operands could not be broadcast together with shapes " +
                  (shapeA + " and " + shapeB + ".");
              throw Error(errMsg);
          }
          else {
              result.unshift(a);
          }
      }
      return result;
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var addGradConfig = {
      kernelName: Add,
      inputsToSave: ['a', 'b'],
      gradFunc: function (dy, saved) {
          var a = saved[0], b = saved[1];
          var outShape = assertAndGetBroadcastShape(a.shape, b.shape);
          var derA = function () {
              var res = dy;
              var reduceAxes = getReductionAxes(a.shape, outShape);
              if (reduceAxes.length > 0) {
                  res = res.sum(reduceAxes);
              }
              return res.reshape(a.shape);
          };
          var derB = function () {
              var res = dy;
              var reduceAxes = getReductionAxes(b.shape, outShape);
              if (reduceAxes.length > 0) {
                  res = res.sum(reduceAxes);
              }
              return res.reshape(b.shape);
          };
          return { a: derA, b: derB };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var addNGradConfig = {
      kernelName: AddN,
      saveAllInputs: true,
      gradFunc: function (dy, saved) {
          var ders = {};
          saved.forEach(function (_, i) {
              ders[i] = function () { return dy.clone(); };
          });
          return ders;
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the
   * given tensor.
   *
   * ```js
   * const x = tf.tensor([1, 2]);
   * tf.zerosLike(x).print();
   * ```
   *
   * @param x The tensor of required shape.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function zerosLike_(x) {
      var $x = convertToTensor(x, 'x', 'zerosLike');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend) { return backend.zerosLike($x); }, inputs, null /* grad */, ZerosLike);
  }
  var zerosLike = op({ zerosLike_: zerosLike_ });

  /**
   * @license
   * Copyright 2020 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var argMaxGradConfig = {
      kernelName: ArgMax,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return zerosLike(x); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var argMinGradConfig = {
      kernelName: ArgMin,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return zerosLike(x); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var asinGradConfig = {
      kernelName: Asin,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return div(dy, sqrt(sub(scalar(1), square(cast(x, 'float32'))))); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.
   *
   *
   * ```js
   * const a = tf.tensor1d([1, 2, 3, 4]);
   * const b = tf.tensor1d([10, 20, 30, 40]);
   *
   * a.add(b).print();  // or tf.add(a, b)
   * ```
   *
   * ```js
   * // Broadcast add a with b.
   * const a = tf.scalar(5);
   * const b = tf.tensor1d([10, 20, 30, 40]);
   *
   * a.add(b).print();  // or tf.add(a, b)
   * ```
   * @param a The first `tf.Tensor` to add.
   * @param b The second `tf.Tensor` to add. Must have the same type as `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */
  function add_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'add');
      var $b = convertToTensor(b, 'b', 'add');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      var forward = function (backend, save) {
          var res = backend.add($a, $b);
          save([$a, $b]);
          return res;
      };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Add);
  }
  var add = op({ add_: add_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var asinhGradConfig = {
      kernelName: Asinh,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return {
              x: function () {
                  var a = sqrt(add(scalar(1), square(cast(x, 'float32'))));
                  return div(dy, a);
              }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Reshapes a `tf.Tensor` to a given shape.
   *
   * Given an input tensor, returns a new tensor with the same values as the
   * input tensor with shape `shape`.
   *
   * If one component of shape is the special value -1, the size of that
   * dimension is computed so that the total size remains constant. In
   * particular, a shape of [-1] flattens into 1-D. At most one component of
   * shape can be -1.
   *
   * If shape is 1-D or higher, then the operation returns a tensor with shape
   * shape filled with the values of tensor. In this case, the number of
   * elements implied by shape must be the same as the number of elements in
   * tensor.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3, 4]);
   * x.reshape([2, 2]).print();
   * ```
   *
   * @param x The input tensor to be reshaped.
   * @param shape An array of integers defining the output tensor shape.
   */
  /** @doc {heading: 'Tensors', subheading: 'Transformations'} */
  function reshape_(x, shape) {
      var $x = convertToTensor(x, 'x', 'reshape', null);
      shape = inferFromImplicitShape(shape, $x.size);
      assert($x.size === sizeFromShape(shape), function () { return 'new shape and old shape must have the same number of elements.'; });
      var inputs = { x: $x };
      var attrs = { shape: shape };
      var forward = function (backend, save) {
          save([$x]);
          return backend.reshape($x, shape);
      };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Reshape, attrs);
  }
  var reshape = op({ reshape_: reshape_ });

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns true if the axis specifies the inner most dimensions of the
   * array.
   */
  function axesAreInnerMostDims(axes, rank) {
      for (var i = 0; i < axes.length; ++i) {
          if (axes[axes.length - i - 1] !== rank - 1 - i) {
              return false;
          }
      }
      return true;
  }
  function combineLocations(outputLoc, reduceLoc, axes) {
      var rank = outputLoc.length + reduceLoc.length;
      var loc = [];
      var outIdx = 0;
      var reduceIdx = 0;
      for (var dim = 0; dim < rank; dim++) {
          if (axes.indexOf(dim) === -1) {
              loc.push(outputLoc[outIdx++]);
          }
          else {
              loc.push(reduceLoc[reduceIdx++]);
          }
      }
      return loc;
  }
  function computeOutAndReduceShapes(aShape, axes) {
      var outShape = [];
      var rank = aShape.length;
      for (var dim = 0; dim < rank; dim++) {
          if (axes.indexOf(dim) === -1) {
              outShape.push(aShape[dim]);
          }
      }
      var reduceShape = axes.map(function (dim) { return aShape[dim]; });
      return [outShape, reduceShape];
  }
  function expandShapeToKeepDim(shape, axes) {
      var reduceSubShape = axes.map(function (x) { return 1; });
      return combineLocations(shape, reduceSubShape, axes);
  }
  function assertAxesAreInnerMostDims(msg, axes, rank) {
      assert(axesAreInnerMostDims(axes, rank), function () { return msg + " supports only inner-most axes for now. " +
          ("Got axes " + axes + " and rank-" + rank + " input."); });
  }
  /**
   * Returns the axes permutation to be used with `tf.transpose`, if such
   * permutation is necessary. Otherwise it returns null. This method is used by
   * operations that operate only on inner-most axes.
   */
  function getAxesPermutation(axes, rank) {
      if (axesAreInnerMostDims(axes, rank)) {
          return null;
      }
      var result = [];
      for (var i = 0; i < rank; ++i) {
          if (axes.indexOf(i) === -1) {
              result.push(i);
          }
      }
      axes.forEach(function (axis) { return result.push(axis); });
      return result;
  }
  /** Returns the axes permutation that undoes the original permutation. */
  function getUndoAxesPermutation(axes) {
      return axes.map(function (axis, i) { return [i, axis]; })
          .sort(function (a, b) { return a[1] - b[1]; })
          .map(function (x) { return x[0]; });
  }
  function getInnerMostAxes(numAxes, rank) {
      var res = [];
      for (var i = rank - numAxes; i < rank; ++i) {
          res.push(i);
      }
      return res;
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the sum of elements across dimensions of a `tf.Tensor`.
   *
   * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
   * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
   * `axes`. If `keepDims` is true, the reduced dimensions are retained with
   * length 1. If axes has no entries, all dimensions are reduced, and a
   * `tf.Tensor` with a single element is returned.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3]);
   *
   * x.sum().print();  // or tf.sum(x)
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   *
   * const axis = 1;
   * x.sum(axis).print();  // or tf.sum(x, axis)
   * ```
   *
   * @param x The input tensor to compute the sum over. If the dtype is `bool`
   *   it will be converted to `int32` and the output dtype will be `int32`.
   * @param axis The dimension(s) to reduce. By default it reduces
   *     all dimensions.
   * @param keepDims If true, retains reduced dimensions with size 1.
   */
  /** @doc {heading: 'Operations', subheading: 'Reduction'} */
  function sum_(x, axis, keepDims) {
      if (axis === void 0) { axis = null; }
      if (keepDims === void 0) { keepDims = false; }
      var $x = convertToTensor(x, 'x', 'sum');
      if ($x.dtype === 'bool') {
          $x = $x.toInt();
      }
      var forward = function (backend, save) {
          save([$x]);
          var axes = parseAxisParam(axis, $x.shape);
          var permutation = getAxesPermutation(axes, $x.rank);
          var reductionAxes = axes;
          var permutedX = $x;
          if (permutation != null) {
              permutedX = $x.transpose(permutation);
              reductionAxes = getInnerMostAxes(reductionAxes.length, $x.rank);
          }
          var value = backend.sum(permutedX, reductionAxes);
          if (keepDims) {
              var newShape = expandShapeToKeepDim(value.shape, axes);
              value = value.reshape(newShape);
          }
          return value;
      };
      var inputs = { x: $x };
      var attrs = { axis: axis, keepDims: keepDims };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Sum, attrs);
  }
  var sum$1 = op({ sum_: sum_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var atan2GradConfig = {
      kernelName: Atan2,
      inputsToSave: ['a', 'b'],
      gradFunc: function (dy, saved) {
          var a = saved[0], b = saved[1];
          var outShape = assertAndGetBroadcastShape(a.shape, b.shape);
          var derA = function () {
              var d = add(square(a), square(b));
              var res = mul(dy, div(b, d));
              var reduceAxes = getReductionAxes(a.shape, outShape);
              if (reduceAxes.length > 0) {
                  res = sum$1(res, reduceAxes);
              }
              return reshape(res, a.shape);
          };
          var derB = function () {
              var d = add(square(a), square(b));
              var res = neg(mul(dy, div(a, d)));
              var reduceAxes = getReductionAxes(b.shape, outShape);
              if (reduceAxes.length > 0) {
                  res = sum$1(res, reduceAxes);
              }
              return reshape(res, b.shape);
          };
          return { a: derA, b: derB };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var atanGradConfig = {
      kernelName: Atan,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return div(dy, add(square(cast(x, 'float32')), 1)); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var atanhGradConfig = {
      kernelName: Atanh,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return div(dy, sub(scalar(1), square(cast(x, 'float32')))); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   *
   * @param inputShape Input tensor shape is of the following dimensions:
   *     `[batch, height, width, inChannels]`.
   * @param filterShape The filter shape is of the following dimensions:
   *     `[filterHeight, filterWidth, depth]`.
   * @param strides The strides of the sliding window for each dimension of the
   *     input tensor: `[strideHeight, strideWidth]`.
   *     If `strides` is a single number,
   *     then `strideHeight == strideWidth`.
   * @param pad The type of padding algorithm.
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1*1x1.
   *    - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dataFormat The data format of the input and output data.
   *     Defaults to 'NHWC'.
   * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.
   *     Defaults to `[1, 1]`. If `dilations` is a single number, then
   *     `dilationHeight == dilationWidth`.
   */
  function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat, dilations) {
      if (dataFormat === void 0) { dataFormat = 'NHWC'; }
      // `computerConv2DInfo` require filterShape to be in the dimension of:
      // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have
      // outDepth, it should have the same depth as the input.
      // Input shape: [batch, height, width, inChannels]
      var inputChannels = inputShape[3];
      var $filterShape = filterShape.concat([inputChannels]);
      var $dataFormat = convertConv2DDataFormat(dataFormat);
      return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null /* roundingMode */, null /* depthWise */, $dataFormat);
  }
  function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat) {
      if (dataFormat === void 0) { dataFormat = 'channelsLast'; }
      var _a = parseTupleParam(filterSize), filterHeight = _a[0], filterWidth = _a[1];
      var filterShape;
      if (dataFormat === 'channelsLast') {
          filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];
      }
      else if (dataFormat === 'channelsFirst') {
          filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];
      }
      else {
          throw new Error("Unknown dataFormat " + dataFormat);
      }
      return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);
  }
  /**
   * Computes the information for a forward pass of a pooling3D operation.
   */
  function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat) {
      if (dataFormat === void 0) { dataFormat = 'NDHWC'; }
      var _a = parse3TupleParam(filterSize), filterDepth = _a[0], filterHeight = _a[1], filterWidth = _a[2];
      var filterShape;
      var $dataFormat;
      if (dataFormat === 'NDHWC') {
          $dataFormat = 'channelsLast';
          filterShape =
              [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];
      }
      else if (dataFormat === 'NCDHW') {
          $dataFormat = 'channelsFirst';
          filterShape =
              [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];
      }
      else {
          throw new Error("Unknown dataFormat " + dataFormat);
      }
      return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);
  }
  /**
   * Computes the information for a forward pass of a convolution/pooling
   * operation.
   */
  function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise, dataFormat) {
      if (depthwise === void 0) { depthwise = false; }
      if (dataFormat === void 0) { dataFormat = 'channelsLast'; }
      var _a = [-1, -1, -1, -1], batchSize = _a[0], inHeight = _a[1], inWidth = _a[2], inChannels = _a[3];
      if (dataFormat === 'channelsLast') {
          batchSize = inShape[0], inHeight = inShape[1], inWidth = inShape[2], inChannels = inShape[3];
      }
      else if (dataFormat === 'channelsFirst') {
          batchSize = inShape[0], inChannels = inShape[1], inHeight = inShape[2], inWidth = inShape[3];
      }
      else {
          throw new Error("Unknown dataFormat " + dataFormat);
      }
      var filterHeight = filterShape[0], filterWidth = filterShape[1], filterChannels = filterShape[3];
      var _b = parseTupleParam(strides), strideHeight = _b[0], strideWidth = _b[1];
      var _c = parseTupleParam(dilations), dilationHeight = _c[0], dilationWidth = _c[1];
      var effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
      var effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
      var _d = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat), padInfo = _d.padInfo, outHeight = _d.outHeight, outWidth = _d.outWidth;
      var outChannels = depthwise ? filterChannels * inChannels : filterChannels;
      var outShape;
      if (dataFormat === 'channelsFirst') {
          outShape = [batchSize, outChannels, outHeight, outWidth];
      }
      else if (dataFormat === 'channelsLast') {
          outShape = [batchSize, outHeight, outWidth, outChannels];
      }
      return {
          batchSize: batchSize,
          dataFormat: dataFormat,
          inHeight: inHeight,
          inWidth: inWidth,
          inChannels: inChannels,
          outHeight: outHeight,
          outWidth: outWidth,
          outChannels: outChannels,
          padInfo: padInfo,
          strideHeight: strideHeight,
          strideWidth: strideWidth,
          filterHeight: filterHeight,
          filterWidth: filterWidth,
          effectiveFilterHeight: effectiveFilterHeight,
          effectiveFilterWidth: effectiveFilterWidth,
          dilationHeight: dilationHeight,
          dilationWidth: dilationWidth,
          inShape: inShape,
          outShape: outShape,
          filterShape: filterShape
      };
  }
  /**
   * Computes the information for a forward pass of a 3D convolution/pooling
   * operation.
   */
  function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise, dataFormat, roundingMode) {
      if (depthwise === void 0) { depthwise = false; }
      if (dataFormat === void 0) { dataFormat = 'channelsLast'; }
      var _a = [-1, -1, -1, -1, -1], batchSize = _a[0], inDepth = _a[1], inHeight = _a[2], inWidth = _a[3], inChannels = _a[4];
      if (dataFormat === 'channelsLast') {
          batchSize = inShape[0], inDepth = inShape[1], inHeight = inShape[2], inWidth = inShape[3], inChannels = inShape[4];
      }
      else if (dataFormat === 'channelsFirst') {
          batchSize = inShape[0], inChannels = inShape[1], inDepth = inShape[2], inHeight = inShape[3], inWidth = inShape[4];
      }
      else {
          throw new Error("Unknown dataFormat " + dataFormat);
      }
      var filterDepth = filterShape[0], filterHeight = filterShape[1], filterWidth = filterShape[2], filterChannels = filterShape[4];
      var _b = parse3TupleParam(strides), strideDepth = _b[0], strideHeight = _b[1], strideWidth = _b[2];
      var _c = parse3TupleParam(dilations), dilationDepth = _c[0], dilationHeight = _c[1], dilationWidth = _c[2];
      var effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);
      var effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
      var effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
      var _d = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode), padInfo = _d.padInfo, outDepth = _d.outDepth, outHeight = _d.outHeight, outWidth = _d.outWidth;
      var outChannels = depthwise ? filterChannels * inChannels : filterChannels;
      var outShape;
      if (dataFormat === 'channelsFirst') {
          outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];
      }
      else if (dataFormat === 'channelsLast') {
          outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];
      }
      return {
          batchSize: batchSize,
          dataFormat: dataFormat,
          inDepth: inDepth,
          inHeight: inHeight,
          inWidth: inWidth,
          inChannels: inChannels,
          outDepth: outDepth,
          outHeight: outHeight,
          outWidth: outWidth,
          outChannels: outChannels,
          padInfo: padInfo,
          strideDepth: strideDepth,
          strideHeight: strideHeight,
          strideWidth: strideWidth,
          filterDepth: filterDepth,
          filterHeight: filterHeight,
          filterWidth: filterWidth,
          effectiveFilterDepth: effectiveFilterDepth,
          effectiveFilterHeight: effectiveFilterHeight,
          effectiveFilterWidth: effectiveFilterWidth,
          dilationDepth: dilationDepth,
          dilationHeight: dilationHeight,
          dilationWidth: dilationWidth,
          inShape: inShape,
          outShape: outShape,
          filterShape: filterShape
      };
  }
  function computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {
      if (zeroPad == null) {
          zeroPad = computeDefaultPad(inShape, fieldSize, stride);
      }
      var inputRows = inShape[0];
      var inputCols = inShape[1];
      var outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
      assert(isInt(outputRows), function () { return "The output # of rows (" + outputRows + ") must be an integer. " +
          "Change the stride and/or zero pad parameters"; });
      var outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
      assert(isInt(outputCols), function () { return "The output # of columns (" + outputCols + ") must be an integer. " +
          "Change the stride and/or zero pad parameters"; });
      return [outputRows, outputCols];
  }
  function computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {
      if (zeroPad == null) {
          zeroPad = computeDefaultPad(inShape, fieldSize, stride);
      }
      var inputDepth = inShape[0];
      var inputRows = inShape[1];
      var inputCols = inShape[2];
      var outputDepths = conditionalRound((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
      assert(isInt(outputDepths), function () { return "The output # of depths (" + outputDepths + ") must be an integer. " +
          "Change the stride and/or zero pad parameters"; });
      var outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
      assert(isInt(outputRows), function () { return "The output # of rows (" + outputRows + ") must be an integer. " +
          "Change the stride and/or zero pad parameters"; });
      var outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
      assert(isInt(outputCols), function () { return "The output # of columns (" + outputCols + ") must be an integer. " +
          "Change the stride and/or zero pad parameters"; });
      return [outputDepths, outputRows, outputCols, outChannels];
  }
  function computeDefaultPad(inputShape, fieldSize, stride, dilation) {
      if (dilation === void 0) { dilation = 1; }
      var effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);
      return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);
  }
  function parseTupleParam(param) {
      if (typeof param === 'number') {
          return [param, param, param];
      }
      if (param.length === 2) {
          return [param[0], param[1], 1];
      }
      return param;
  }
  function parse3TupleParam(param) {
      return typeof param === 'number' ? [param, param, param] : param;
  }
  /* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d
   * Atrous convolution is equivalent to standard convolution with upsampled
   * filters with effective_filter_height =
   * filter_height + (filter_height - 1) * (dilation - 1)
   * and effective_filter_width =
   * filter_width + (filter_width - 1) * (dilation - 1),
   * produced by inserting dilation - 1 zeros along consecutive elements across
   * the filters' spatial dimensions.
   * When there is a dilation, this converts a filter dimension to the
   * effective filter dimension, so it can be used in a standard convolution.
   */
  function getEffectiveFilterSize(filterSize, dilation) {
      if (dilation <= 1) {
          return filterSize;
      }
      return filterSize + (filterSize - 1) * (dilation - 1);
  }
  function getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {
      var padInfo;
      var outHeight;
      var outWidth;
      if (typeof pad === 'number') {
          var padType = (pad === 0) ? 'VALID' : 'NUMBER';
          padInfo = { top: pad, bottom: pad, left: pad, right: pad, type: padType };
          var outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);
          outHeight = outShape[0];
          outWidth = outShape[1];
      }
      else if (pad === 'same') {
          outHeight = Math.ceil(inHeight / strideHeight);
          outWidth = Math.ceil(inWidth / strideWidth);
          var padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);
          var padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);
          var top_1 = Math.floor(padAlongHeight / 2);
          var bottom = padAlongHeight - top_1;
          var left = Math.floor(padAlongWidth / 2);
          var right = padAlongWidth - left;
          padInfo = { top: top_1, bottom: bottom, left: left, right: right, type: 'SAME' };
      }
      else if (pad === 'valid') {
          padInfo = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' };
          outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
          outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
      }
      else if (typeof pad === 'object') {
          var top_2 = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];
          var bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];
          var left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];
          var right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];
          var padType = (top_2 === 0 && bottom === 0 && left === 0 && right === 0) ?
              'VALID' :
              'EXPLICIT';
          padInfo = { top: top_2, bottom: bottom, left: left, right: right, type: padType };
          outHeight = conditionalRound((inHeight - filterHeight + top_2 + bottom) / strideHeight + 1, roundingMode);
          outWidth = conditionalRound((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);
      }
      else {
          throw Error("Unknown padding parameter: " + pad);
      }
      return { padInfo: padInfo, outHeight: outHeight, outWidth: outWidth };
  }
  function get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {
      var padInfo;
      var outDepth;
      var outHeight;
      var outWidth;
      if (typeof pad === 'number') {
          var padType = (pad === 0) ? 'VALID' : 'NUMBER';
          padInfo = {
              top: pad,
              bottom: pad,
              left: pad,
              right: pad,
              front: pad,
              back: pad,
              type: padType
          };
          var outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);
          outDepth = outShape[0];
          outHeight = outShape[1];
          outWidth = outShape[2];
      }
      else if (pad === 'same') {
          outDepth = Math.ceil(inDepth / strideDepth);
          outHeight = Math.ceil(inHeight / strideHeight);
          outWidth = Math.ceil(inWidth / strideWidth);
          var padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;
          var padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;
          var padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;
          var front = Math.floor(padAlongDepth / 2);
          var back = padAlongDepth - front;
          var top_3 = Math.floor(padAlongHeight / 2);
          var bottom = padAlongHeight - top_3;
          var left = Math.floor(padAlongWidth / 2);
          var right = padAlongWidth - left;
          padInfo = { top: top_3, bottom: bottom, left: left, right: right, front: front, back: back, type: 'SAME' };
      }
      else if (pad === 'valid') {
          padInfo = {
              top: 0,
              bottom: 0,
              left: 0,
              right: 0,
              front: 0,
              back: 0,
              type: 'VALID'
          };
          outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);
          outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
          outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
      }
      else {
          throw Error("Unknown padding parameter: " + pad);
      }
      return { padInfo: padInfo, outDepth: outDepth, outHeight: outHeight, outWidth: outWidth };
  }
  /**
   * Rounds a value depending on the rounding mode
   * @param value
   * @param roundingMode
   */
  function conditionalRound(value, roundingMode) {
      if (!roundingMode) {
          return value;
      }
      switch (roundingMode) {
          case 'round':
              // used for Caffe Conv
              return Math.round(value);
          case 'ceil':
              // used for Caffe Pool
              return Math.ceil(value);
          case 'floor':
              return Math.floor(value);
          default:
              throw new Error("Unknown roundingMode " + roundingMode);
      }
  }
  function tupleValuesAreOne(param) {
      var _a = parseTupleParam(param), dimA = _a[0], dimB = _a[1], dimC = _a[2];
      return dimA === 1 && dimB === 1 && dimC === 1;
  }
  function eitherStridesOrDilationsAreOne(strides, dilations) {
      return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);
  }
  /**
   * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to
   *    'channelsLast'|'channelsFirst'
   * @param dataFormat in 'NHWC'|'NCHW' mode
   * @return dataFormat in 'channelsLast'|'channelsFirst' mode
   * @throws unknown dataFormat
   */
  function convertConv2DDataFormat(dataFormat) {
      if (dataFormat === 'NHWC') {
          return 'channelsLast';
      }
      else if (dataFormat === 'NCHW') {
          return 'channelsFirst';
      }
      else {
          throw new Error("Unknown dataFormat " + dataFormat);
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the backprop of a 3d avg pool.
   *
   * @param dy The dy error, of rank 5 of shape
   *     [batchSize, depth, height, width, channels].
   * assumed.
   * @param input The original input image, of rank 5 or rank4 of shape
   *     [batchSize, depth, height, width, channels].
   * @param filterSize The filter size:
   *     `[filterDepth, filterHeight, filterWidth]`.
   *     `filterSize` is a single number,
   *     then `filterDepth == filterHeight == filterWidth`.
   * @param strides The strides of the pooling:
   *     `[strideDepth, strideHeight, strideWidth]`. If
   *     `strides` is a single number, then `strideHeight == strideWidth`.
   * @param dilations Deprecated, this field will be gone in v3.0.0. The dilation
   *     rates: `[dilationDepth, dilationHeight, dilationWidth]`
   *     in which we sample input values across the depth, height and width
   *     dimensions in dilated pooling.
   *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
   *     then `dilationDepth == dilationHeight == dilationWidth`.
   *     If it is greater than 1, then all values of `strides` must be 1.
   * @param pad A string from: 'same', 'valid'. The type of padding algorithm
   *     used in the forward prop of the op.
   * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
   *     rounding mode used when computing output dimensions if pad is a
   *     number. If none is provided, it will not round and error if the output
   *     is of fractional size.
   */
  function avgPool3dBackprop_(dy, input, filterSize, strides, dilations, pad, dimRoundingMode) {
      if (dilations === void 0) { dilations = [1, 1, 1]; }
      var $dy = convertToTensor(dy, 'dy', 'avgPool3dBackprop');
      var $input = convertToTensor(input, 'input', 'avgPool3dBackprop');
      var dy5D = $dy;
      var input5D = $input;
      var reshapedTo5D = false;
      if ($input.rank === 4) {
          reshapedTo5D = true;
          dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);
          input5D = reshape($input, [
              1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]
          ]);
      }
      assert(dy5D.rank === 5, function () { return "Error in avgPool3dBackprop: dy must be rank 5 but got rank " +
          (dy5D.rank + "."); });
      assert(input5D.rank === 5, function () { return "Error in avgPool3dBackprop: input must be rank 5 but got rank " +
          (input5D.rank + "."); });
      assert(eitherStridesOrDilationsAreOne(strides, dilations), function () { return 'Error in avgPool3dBackprop: Either strides or dilations ' +
          ("must be 1. Got strides " + strides + " and dilations '" + dilations + "'"); });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in maxPool3dBackprop: pad must be an integer when " +
              ("using, dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      var forward = function (backend) {
          var convInfo = computePool3DInfo(input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);
          return backend.avgPool3dBackprop(dy5D, input5D, convInfo);
      };
      var inputs = { dy: dy5D, input: input5D };
      var attrs = { filterSize: filterSize, strides: strides, dilations: dilations, pad: pad, dimRoundingMode: dimRoundingMode };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, AvgPool3DBackprop, attrs);
      if (reshapedTo5D) {
          return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
      }
      return res;
  }
  var avgPool3dBackprop = op({ avgPool3dBackprop_: avgPool3dBackprop_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var avgPool3DGradConfig = {
      kernelName: AvgPool3D,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved, attrs) {
          var x = saved[0];
          var _a = attrs, filterSize = _a.filterSize, strides = _a.strides, dilations = _a.dilations, pad = _a.pad, dimRoundingMode = _a.dimRoundingMode;
          var $dilations = dilations == null ? [1, 1, 1] : dilations;
          return {
              x: function () { return avgPool3dBackprop(dy, x, filterSize, strides, $dilations, pad, dimRoundingMode); }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the backprop of an 2D avg pool.
   *
   * @param dy The dy error, of rank 4 or rank 3 of shape
   *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
   * assumed.
   * @param input The input image, of rank 4 or rank 3 of shape
   *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
   * assumed.
   * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
   *     `filterSize` is a single number, then `filterHeight == filterWidth`.
   * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
   *     `strides` is a single number, then `strideHeight == strideWidth`.
   * @param pad A string from: 'same', 'valid'. The type of padding algorithm
   *     used in the forward prop of the op.
   */
  function avgPoolBackprop_(dy, input, filterSize, strides, pad) {
      var $dy = convertToTensor(dy, 'dy', 'avgPoolBackprop');
      var $input = convertToTensor(input, 'input', 'avgPoolBackprop');
      assert($input.rank === $dy.rank, function () { return "Rank of input (" + $input.rank + ") does not match rank of dy (" + $dy.rank + ")"; });
      var input4D = $input;
      var dy4D = $dy;
      var reshapedTo4D = false;
      if ($input.rank === 3) {
          reshapedTo4D = true;
          input4D =
              reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);
          dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);
      }
      assert(dy4D.rank === 4, function () { return "Error in avgPoolBackprop: dy must be rank 4 but got rank " +
          (dy4D.rank + "."); });
      assert(input4D.rank === 4, function () { return "Error in avgPoolBackprop: input must be rank 4 but got rank " +
          (input4D.rank + "."); });
      var forward = function (backend) {
          var convInfo = computePool2DInfo(input4D.shape, filterSize, strides, 1 /* dilations */, pad);
          return backend.avgPoolBackprop(dy4D, input4D, convInfo);
      };
      var inputs = { dy: dy4D, input: input4D };
      var attrs = { filterSize: filterSize, strides: strides, pad: pad };
      var res = ENGINE.runKernelFunc(forward, inputs, null, AvgPoolBackprop, attrs);
      if (reshapedTo4D) {
          return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }
      return res;
  }
  var avgPoolBackprop = op({ avgPoolBackprop_: avgPoolBackprop_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var avgPoolGradConfig = {
      kernelName: AvgPool,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved, attrs) {
          var x = saved[0];
          var _a = attrs, filterSize = _a.filterSize, strides = _a.strides, pad = _a.pad;
          return {
              x: function () { return avgPoolBackprop(dy, x, filterSize, strides, pad); }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the dot product of two matrices, A * B. These must be matrices.
   *
   * ```js
   * const a = tf.tensor2d([1, 2], [1, 2]);
   * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   *
   * a.matMul(b).print();  // or tf.matMul(a, b)
   * ```
   * @param a First matrix in dot product operation.
   * @param b Second matrix in dot product operation.
   * @param transposeA If true, `a` is transposed before multiplication.
   * @param transposeB If true, `b` is transposed before multiplication.
   */
  /** @doc {heading: 'Operations', subheading: 'Matrices'} */
  function matMul_(a, b, transposeA, transposeB) {
      var _a;
      if (transposeA === void 0) { transposeA = false; }
      if (transposeB === void 0) { transposeB = false; }
      var $a = convertToTensor(a, 'a', 'matMul');
      var $b = convertToTensor(b, 'b', 'matMul');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      assert($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, function () { return "Error in matMul: inputs must have the same rank of at least 2, " +
          ("got ranks " + $a.rank + " and " + $b.rank + "."); });
      var innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];
      var innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];
      var outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];
      var outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];
      var outerDimsA = $a.shape.slice(0, -2);
      var outerDimsB = $b.shape.slice(0, -2);
      var batchDimA = sizeFromShape(outerDimsA);
      var batchDimB = sizeFromShape(outerDimsB);
      assert(arraysEqual(outerDimsA, outerDimsB), function () { return "Error in matMul: outer dimensions (" + outerDimsA + ") and (" +
          (outerDimsB + ") of Tensors with shapes " + $a.shape + " and ") +
          ($b.shape + " must match."); });
      assert(innerShapeA === innerShapeB, function () { return "Error in matMul: inner shapes (" + innerShapeA + ") and (" +
          (innerShapeB + ") of Tensors with shapes " + $a.shape + " and ") +
          ($b.shape + " and transposeA=" + transposeA) +
          (" and transposeB=" + transposeB + " must match."); });
      var outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);
      var a3D = transposeA ? reshape($a, [batchDimA, innerShapeA, outerShapeA]) :
          reshape($a, [batchDimA, outerShapeA, innerShapeA]);
      var b3D = transposeB ? reshape($b, [batchDimB, outerShapeB, innerShapeB]) :
          reshape($b, [batchDimB, innerShapeB, outerShapeB]);
      var forward = function (backend, save) {
          save([a3D, b3D]);
          return backend.batchMatMul(a3D, b3D, transposeA, transposeB);
      };
      var inputs = { a: a3D, b: b3D };
      var attrs = { transposeA: transposeA, transposeB: transposeB };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, BatchMatMul, attrs);
      return reshape(res, outShape);
  }
  var matMul = op({ matMul_: matMul_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var batchMatMulGradConfig = {
      kernelName: BatchMatMul,
      inputsToSave: ['a', 'b'],
      gradFunc: function (dy, saved, attrs) {
          var _a = saved, a = _a[0], b = _a[1];
          var _b = attrs, transposeA = _b.transposeA, transposeB = _b.transposeB;
          if (!transposeA && !transposeB) {
              return {
                  a: function () { return matMul(dy, b, false, true); },
                  b: function () { return matMul(a, dy, true, false); }
              };
          }
          else if (!transposeA && transposeB) {
              return {
                  a: function () { return matMul(dy, b, false, false); },
                  b: function () { return matMul(dy, a, true, false); }
              };
          }
          else if (transposeA && !transposeB) {
              return {
                  a: function () { return matMul(b, dy, false, true); },
                  b: function () { return matMul(a, dy, false, false); }
              };
          }
          else {
              return {
                  a: function () { return matMul(b, dy, true, true); },
                  b: function () { return matMul(dy, a, true, true); }
              };
          }
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * This operation divides "spatial" dimensions `[1, ..., M]` of the input into
   * a grid of blocks of shape `blockShape`, and interleaves these blocks with
   * the "batch" dimension (0) such that in the output, the spatial
   * dimensions `[1, ..., M]` correspond to the position within the grid,
   * and the batch dimension combines both the position within a spatial block
   * and the original batch position. Prior to division into blocks,
   * the spatial dimensions of the input are optionally zero padded
   * according to `paddings`. See below for a precise description.
   *
   * ```js
   * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);
   * const blockShape = [2, 2];
   * const paddings = [[0, 0], [0, 0]];
   *
   * x.spaceToBatchND(blockShape, paddings).print();
   * ```
   *
   * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
   * remainingShape`, where spatialShape has `M` dimensions.
   * @param blockShape A 1-D array. Must have shape `[M]`, all values must
   * be >= 1.
   * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=
   *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad
   * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It
   * is required that
   * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`
   *
   * This operation is equivalent to the following steps:
   *
   * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input
   * according to `paddings` to produce `padded` of shape paddedShape.
   *
   * 2. Reshape `padded` to `reshapedPadded` of shape:
   * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,
   * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`
   *
   * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`
   * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,
   * paddedShape[M] / blockShape[M-1]] + remainingShape`
   *
   * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the
   * batch dimension, producing an output tensor of shape:
   * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,
   * paddedShape[M] / blockShape[M-1]] + remainingShape`
   */
  /** @doc {heading: 'Tensors', subheading: 'Transformations'} */
  function spaceToBatchND_(x, blockShape, paddings) {
      var $x = convertToTensor(x, 'x', 'spaceToBatchND');
      assert($x.rank >= 1 + blockShape.length, function () { return "input rank " + $x.rank + " should be > than [blockShape] " + blockShape.length; });
      assert(paddings.length === blockShape.length, function () { return "paddings.shape[0] " + paddings.length + " must be equal to [blockShape] " + blockShape.length; });
      assert($x.shape.reduce(function (a, b, i) {
          if (i > 0 && i <= blockShape.length) {
              return a &&
                  ((b + paddings[i - 1][0] + paddings[i - 1][1]) %
                      blockShape[i - 1] ===
                      0);
          }
          return a;
      }, true), function () { return "input spatial dimensions " + $x.shape.slice(1) + " with paddings " + paddings.toString() + " must be divisible by blockShapes " + blockShape.toString(); });
      var forward = function (backend) {
          return backend.spaceToBatchND($x, blockShape, paddings);
      };
      var inputs = { x: $x };
      var attrs = { blockShape: blockShape, paddings: paddings };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, SpaceToBatchND, attrs);
  }
  var spaceToBatchND = op({ spaceToBatchND_: spaceToBatchND_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var batchToSpaceNDGradConfig = {
      kernelName: BatchToSpaceND,
      gradFunc: function (dy, saved, attrs) {
          var _a = attrs, blockShape = _a.blockShape, crops = _a.crops;
          return { x: function () { return spaceToBatchND(dy, blockShape, crops); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var broadcastToGradConfig = {
      kernelName: BroadcastTo,
      gradFunc: function (dy, saved, attrs) {
          var broadCastToAttrs = attrs;
          var inputShape = broadCastToAttrs.inputShape;
          var outputShape = broadCastToAttrs.shape;
          var reps = Array.from(outputShape);
          for (var i = inputShape.length - 1; i >= 0; i--) {
              if (inputShape[i] === outputShape[i]) {
                  reps[i] = 1;
              }
              else if (inputShape[i] !== 1) {
                  throw new Error("broadcastTo(): [" + inputShape + "] cannot be broadcast to [" + outputShape + "].");
              }
          }
          var axes = [];
          for (var i = 0; i < reps.length; i++) {
              if (reps[i] > 1) {
                  axes.push(i);
              }
          }
          return { x: function () { return sum$1(dy, axes, true /* keepDims */); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var castGradConfig = {
      kernelName: Cast,
      gradFunc: function (dy) {
          return { x: function () { return dy.clone(); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ceilGradConfig = {
      kernelName: Ceil,
      gradFunc: function (dy) {
          // TODO(manrajgrover): Return null for gradients when backprop supports it.
          return { x: function () { return zerosLike(dy); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the truth value of (a >= b) element-wise. Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([1, 2, 3]);
   * const b = tf.tensor1d([2, 2, 2]);
   *
   * a.greaterEqual(b).print();
   * ```
   *
   * @param a The first input tensor.
   * @param b The second input tensor. Must have the same dtype as `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Logical'} */
  function greaterEqual_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'greaterEqual');
      var $b = convertToTensor(b, 'b', 'greaterEqual');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      assertAndGetBroadcastShape($a.shape, $b.shape);
      var forward = function (backend, save) {
          var res = backend.greaterEqual($a, $b);
          save([$a, $b]);
          return res;
      };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, GreaterEqual);
  }
  var greaterEqual = op({ greaterEqual_: greaterEqual_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the truth value of (a <= b) element-wise. Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([1, 2, 3]);
   * const b = tf.tensor1d([2, 2, 2]);
   *
   * a.lessEqual(b).print();
   * ```
   *
   * @param a The first input tensor.
   * @param b The second input tensor. Must have the same dtype as `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Logical'} */
  function lessEqual_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'lessEqual');
      var $b = convertToTensor(b, 'b', 'lessEqual');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      assertAndGetBroadcastShape($a.shape, $b.shape);
      var forward = function (backend, save) {
          var res = backend.lessEqual($a, $b);
          save([$a, $b]);
          return res;
      };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, LessEqual);
  }
  var lessEqual = op({ lessEqual_: lessEqual_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the truth value of `a AND b` element-wise. Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([false, false, true, true], 'bool');
   * const b = tf.tensor1d([false, true, false, true], 'bool');
   *
   * a.logicalAnd(b).print();
   * ```
   *
   * @param a The first input tensor. Must be of dtype bool.
   * @param b The second input tensor. Must be of dtype bool.
   */
  /** @doc {heading: 'Operations', subheading: 'Logical'} */
  function logicalAnd_(a, b) {
      var $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');
      var $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');
      assertAndGetBroadcastShape($a.shape, $b.shape);
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(function (backend) { return backend.logicalAnd($a, $b); }, inputs, null /* grad */, LogicalAnd);
  }
  var logicalAnd = op({ logicalAnd_: logicalAnd_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the elements, either `a` or `b` depending on the `condition`.
   *
   * If the condition is true, select from `a`, otherwise select from `b`.
   *
   * ```js
   * const cond = tf.tensor1d([false, false, true], 'bool');
   * const a = tf.tensor1d([1 , 2, 3]);
   * const b = tf.tensor1d([-1, -2, -3]);
   *
   * a.where(cond, b).print();
   * ```
   *
   * @param condition The input condition. Must be of dtype bool.
   * @param a If `condition` is rank 1, `a` may have a higher rank but
   *     its first dimension must match the size of `condition`.
   * @param b A tensor with the same dtype as `a` and with shape that is
   *     compatible with `a`.
   * @return A tensor with same dtype as `a` and `b`, and shape that is
   *     broadcastable from `a` and `b`.
   */
  /** @doc {heading: 'Operations', subheading: 'Logical'} */
  function where_(condition, a, b) {
      var $a = convertToTensor(a, 'a', 'where');
      var $b = convertToTensor(b, 'b', 'where');
      var $condition = convertToTensor(condition, 'condition', 'where', 'bool');
      // TODO: move this logic to forward function when the broadcastTo op is
      // implemented in WASM.
      // Find the broadcastable shape for $a and $b.
      var broadcastShape = assertAndGetBroadcastShape($a.shape, $b.shape);
      var $broadcastedA = $a.broadcastTo(broadcastShape);
      var $broadcastedB = $b.broadcastTo(broadcastShape);
      if ($condition.rank === 1) {
          // If condition rank is 1, then the first dimension must match the size of
          // condition.
          assert($condition.shape[0] === $a.shape[0], function () { return 'The first dimension of `a` must match the size of `condition`.'; });
      }
      if ($condition.rank !== 1) {
          // A must have the same shape as condition.
          assertShapesMatch($condition.shape, $broadcastedB.shape, 'Error in where: ');
      }
      var forward = function (backend, save) {
          var res = backend.select($condition, $broadcastedA, $broadcastedB);
          save([$condition]);
          return res;
      };
      var inputs = {
          condition: $condition,
          t: $broadcastedA,
          e: $broadcastedB
      };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, SelectV2);
  }
  var where = op({ where_: where_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var clipByValueGradConfig = {
      kernelName: ClipByValue,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved, attrs) {
          var x = saved[0];
          var _a = attrs, clipValueMin = _a.clipValueMin, clipValueMax = _a.clipValueMax;
          return {
              x: function () { return where(logicalAnd(greaterEqual(x, clipValueMin), lessEqual(x, clipValueMax)), dy, zerosLike(dy)); },
          };
      }
  };

  /**
   * Prepare the split size array. When the input is a number, the axis is evenly
   * divided among the split size. When the input contains the negative value, the
   * rest of the axis is allocated toward that.
   */
  function prepareSplitSize(x, numOrSizeSplits, axis) {
      if (axis === void 0) { axis = 0; }
      var splitSizes = [];
      if (typeof (numOrSizeSplits) === 'number') {
          assert(x.shape[axis] % numOrSizeSplits === 0, function () { return 'Number of splits must evenly divide the axis.'; });
          splitSizes =
              new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);
      }
      else {
          var numOfNegs = numOrSizeSplits.reduce(function (count, value) {
              if (value === -1) {
                  count += 1;
              }
              return count;
          }, 0);
          assert(numOfNegs <= 1, function () { return 'There should be only one negative value in split array.'; });
          var negIndex = numOrSizeSplits.indexOf(-1);
          // Allow the number of split array to be -1, which indicates the rest
          // of dimension is allocated to that split.
          if (negIndex !== -1) {
              var total = numOrSizeSplits.reduce(function (a, b) { return b > 0 ? a + b : a; });
              numOrSizeSplits[negIndex] = x.shape[axis] - total;
          }
          assert(x.shape[axis] === numOrSizeSplits.reduce(function (a, b) { return a + b; }), function () { return 'The sum of sizes must match the size of the axis dimension.'; });
          splitSizes = numOrSizeSplits;
      }
      return splitSizes;
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Splits a `tf.Tensor` into sub tensors.
   *
   * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`
   * into `numOrSizeSplits` smaller tensors.
   * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.
   *
   * If `numOrSizeSplits` is a number array, splits `x` into
   * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the
   * same size as `x` except along dimension `axis` where the size is
   * `numOrSizeSplits[i]`.
   *
   * ```js
   * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);
   * const [a, b] = tf.split(x, 2, 1);
   * a.print();
   * b.print();
   *
   * const [c, d, e] = tf.split(x, [1, 2, 1], 1);
   * c.print();
   * d.print();
   * e.print();
   * ```
   *
   * @param x The input tensor to split.
   * @param numOrSizeSplits Either an integer indicating the number of
   * splits along the axis or an array of integers containing the sizes of
   * each output tensor along the axis. If a number then it must evenly divide
   * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.
   * Can contain one -1 indicating that dimension is to be inferred.
   * @param axis The dimension along which to split. Defaults to 0 (the first
   * dim).
   */
  /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */
  function split_(x, numOrSizeSplits, axis) {
      if (axis === void 0) { axis = 0; }
      var $x = convertToTensor(x, 'x', 'split');
      var forward = function (backend, _) {
          var $axis = parseAxisParam(axis, $x.shape)[0];
          var splitSizes = prepareSplitSize($x, numOrSizeSplits, $axis);
          return backend.split($x, splitSizes, $axis);
      };
      var inputs = { x: $x };
      var attr = { numOrSizeSplits: numOrSizeSplits, axis: axis };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, SplitV, attr);
  }
  var split = op({ split_: split_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var concatGradConfig = {
      kernelName: Concat,
      saveAllInputs: true,
      gradFunc: function (dy, saved, attrs) {
          var shapes = saved.map(function (t) { return t.shape; });
          var axis = attrs.axis;
          var $axis = parseAxisParam(axis, saved[0].shape)[0];
          var sizeSplits = shapes.map(function (s) { return s[$axis]; });
          var derTensors = split(dy, sizeSplits, $axis);
          return derTensors.map(function (t) { return function () { return t; }; });
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the derivative of the filter of a 2D convolution.
   *
   * @param x The input tensor, of rank 4 or rank 3 of shape
   *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.
   * @param dy The dy image, of rank 4 or rank 3, of shape
   *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.
   * @param filterShape The shape of the filter, length 4,
   *     [filterHeight, filterWidth, inDepth, outDepth].
   * @param strides The strides of the convolution: [strideHeight,
   * strideWidth].
   * @param pad A string from: 'same', 'valid'. The type of padding algorithm
   *     used in the forward prop of the op.
   * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
   *     "NHWC". Specify the data format of the input and output data. With the
   *     default format "NHWC", the data is stored in the order of: [batch,
   *     height, width, channels].
   * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
   *     rounding mode used when computing output dimensions if pad is a
   *     number. If none is provided, it will not round and error if the output
   *     is of fractional size.
   */
  function conv2DBackpropFilter_(x, dy, filterShape, strides, pad, dataFormat, dimRoundingMode) {
      if (dataFormat === void 0) { dataFormat = 'NHWC'; }
      var x4D = x;
      if (x.rank === 3) {
          x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
      }
      var dy4D = dy;
      if (dy4D.rank === 3) {
          dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
      }
      assert(x4D.rank === 4, function () { return "Error in conv2dDerFilter: input must be rank 4, but got shape " +
          (x4D.shape + "."); });
      assert(dy4D.rank === 4, function () { return "Error in conv2dDerFilter: dy must be rank 4, but got shape " +
          (dy4D.shape + "."); });
      assert(filterShape.length === 4, function () { return "Error in conv2dDerFilter: filterShape must be length 4, but got " +
          (filterShape + "."); });
      var inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];
      var outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];
      assert(inDepth === filterShape[2], function () { return "Error in conv2dDerFilter: depth of input " + inDepth + ") must " +
          ("match input depth in filter (" + filterShape[2] + "."); });
      assert(outDepth === filterShape[3], function () { return "Error in conv2dDerFilter: depth of dy (" + outDepth + ") must " +
          ("match output depth for filter (" + filterShape[3] + ")."); });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in conv2dDerFilter: pad must be an integer when using, " +
              ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      var forward = function (backend) {
          var dilations = 1;
          var $dataFormat = convertConv2DDataFormat(dataFormat);
          var convInfo = computeConv2DInfo(x4D.shape, filterShape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
          return backend.conv2dDerFilter(x4D, dy4D, convInfo);
      };
      var inputs = { x: x4D, dy: dy4D };
      var attrs = { strides: strides, pad: pad, dataFormat: dataFormat, dimRoundingMode: dimRoundingMode };
      return ENGINE.runKernelFunc(forward, inputs, null, Conv2DBackpropFilter, attrs);
  }
  var conv2DBackpropFilter = op({ conv2DBackpropFilter_: conv2DBackpropFilter_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the derivative of the input of a 2D convolution.
   *
   * @param xShape The shape of the input: [batch, height, width, inDepth].
   * If length of 3, batch of 1 is assumed.
   * @param dy The derivative of the output, of rank 4 or rank 3 of shape
   *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is
   * assumed.
   * @param filter The filter, rank 4, of shape
   *     `[filterHeight, filterWidth, inDepth, outDepth]`.
   * @param strides The strides of the convolution: `[strideHeight,
   * strideWidth]`.
   * @param pad The type of padding algorithm used:
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1x1.
   * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
   *     "NHWC". Specify the data format of the input and output data. With the
   *     default format "NHWC", the data is stored in the order of: [batch,
   *     height, width, channels].
   * @param dimRoundingMode The rounding mode used when computing output
   *     dimensions if pad is a number. If none is provided, it will not round
   *     and error if the output is of fractional size.
   */
  function conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat, dimRoundingMode) {
      if (dataFormat === void 0) { dataFormat = 'NHWC'; }
      assert(xShape.length === dy.rank, function () { return "Length of inShape " +
          ("(" + xShape.length + ") and rank of dy (" + dy.rank + ") must match"); });
      var xShape4D = xShape;
      var dy4D = dy;
      var reshapedTo4D = false;
      if (dy.rank === 3) {
          reshapedTo4D = true;
          dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
          xShape4D = [1, xShape[0], xShape[1], xShape[2]];
      }
      assert(xShape4D.length === 4, function () {
          return "Error in conv2dDerInput: inShape must be length 4, but got length " +
              (xShape4D.length + ".");
      });
      assert(dy4D.rank === 4, function () { return "Error in conv2dDerInput: dy must be rank 4, but got " +
          ("rank " + dy4D.rank); });
      assert(filter.rank === 4, function () { return "Error in conv2dDerInput: filter must be rank 4, but got " +
          ("rank " + filter.rank); });
      var inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];
      var outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];
      assert(inDepth === filter.shape[2], function () { return "Error in conv2dDerInput: depth of input (" + inDepth + ") must " +
          ("match input depth for filter " + filter.shape[2] + "."); });
      assert(outDepth === filter.shape[3], function () { return "Error in conv2dDerInput: depth of output (" + outDepth + ") must " +
          ("match output depth for filter " + filter.shape[3] + "."); });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in conv2dDerInput: pad must be an integer when using, " +
              ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      var forward = function (backend, save) {
          var dilations = 1;
          var $dataFormat = convertConv2DDataFormat(dataFormat);
          var convInfo = computeConv2DInfo(xShape4D, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
          var res = backend.conv2dDerInput(dy4D, filter, convInfo);
          save([dy4D, filter]);
          return res;
      };
      var inputs = { dy: dy4D, filter: filter };
      var attrs = { strides: strides, pad: pad, dataFormat: dataFormat, dimRoundingMode: dimRoundingMode, inputShape: xShape4D };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, Conv2DBackpropInput, attrs);
      if (reshapedTo4D) {
          return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }
      return res;
  }
  var conv2DBackpropInput = op({ conv2DBackpropInput_: conv2DBackpropInput_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var conv2DGradConfig = {
      kernelName: Conv2D,
      inputsToSave: ['x', 'filter'],
      gradFunc: function (dy, saved, attrs) {
          var _a = saved, x4D = _a[0], $filter = _a[1];
          var _b = attrs, dilations = _b.dilations, strides = _b.strides, pad = _b.pad, dataFormat = _b.dataFormat;
          assert(tupleValuesAreOne(dilations), function () { return 'Error in gradient of conv2D: dilation rates greater than 1 ' +
              ("are not yet supported in gradients. Got dilations '" + dilations + "'"); });
          return {
              x: function () {
                  return conv2DBackpropInput(x4D.shape, dy, $filter, strides, pad, dataFormat);
              },
              filter: function () {
                  return conv2DBackpropFilter(x4D, dy, $filter.shape, strides, pad, dataFormat);
              }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes a 2D convolution over the input x.
   *
   * @param x The input tensor, of rank 4 or rank 3, of shape
   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
   * assumed.
   * @param filter The filter, rank 4, of shape
   *     `[filterHeight, filterWidth, inDepth, outDepth]`.
   * @param strides The strides of the convolution: `[strideHeight,
   * strideWidth]`.
   * @param pad The type of padding algorithm.
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1x1.
   *   - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
   *     "NHWC". Specify the data format of the input and output data. With the
   *     default format "NHWC", the data is stored in the order of: [batch,
   *     height, width, channels].
   * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
   *     in which we sample input values across the height and width dimensions
   *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
   *     number, then `dilationHeight == dilationWidth`. If it is greater than
   *     1, then all values of `strides` must be 1.
   * @param dimRoundingMode The rounding mode used when computing output
   *     dimensions if pad is a number. If none is provided, it will not round
   *     and error if the output is of fractional size.
   */
  /** @doc {heading: 'Operations', subheading: 'Convolution'} */
  function conv2d_(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
      if (dataFormat === void 0) { dataFormat = 'NHWC'; }
      if (dilations === void 0) { dilations = [1, 1]; }
      var $x = convertToTensor(x, 'x', 'conv2d');
      var $filter = convertToTensor(filter, 'filter', 'conv2d');
      var x4D = $x;
      var reshapedTo4D = false;
      if ($x.rank === 3) {
          reshapedTo4D = true;
          x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
      }
      assert(x4D.rank === 4, function () { return "Error in conv2d: input must be rank 4, but got rank " + x4D.rank + "."; });
      assert($filter.rank === 4, function () { return "Error in conv2d: filter must be rank 4, but got rank " +
          ($filter.rank + "."); });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in conv2d: pad must be an integer when using, " +
              ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      var inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];
      assert(inDepth === $filter.shape[2], function () { return "Error in conv2d: depth of input (" + inDepth + ") must match " +
          ("input depth for filter " + $filter.shape[2] + "."); });
      assert(eitherStridesOrDilationsAreOne(strides, dilations), function () { return 'Error in conv2D: Either strides or dilations must be 1. ' +
          ("Got strides " + strides + " and dilations '" + dilations + "'"); });
      var forward = function (backend, save) {
          var $dataFormat = convertConv2DDataFormat(dataFormat);
          var convInfo = computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
          var res = backend.conv2d(x4D, $filter, convInfo);
          save([x4D, $filter]);
          return res;
      };
      var inputs = { x: x4D, filter: $filter };
      var attrs = { strides: strides, pad: pad, dataFormat: dataFormat, dilations: dilations, dimRoundingMode: dimRoundingMode };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, Conv2D, attrs);
      if (reshapedTo4D) {
          return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }
      return res;
  }
  var conv2d = op({ conv2d_: conv2d_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var conv2DBackpropInputGradConfig = {
      kernelName: Conv2DBackpropInput,
      inputsToSave: ['dy', 'filter'],
      gradFunc: function (ddx, saved, attrs) {
          var _a = saved, dy = _a[0], filter = _a[1];
          var _b = attrs, strides = _b.strides, pad = _b.pad, dataFormat = _b.dataFormat, dimRoundingMode = _b.dimRoundingMode;
          return {
              dy: function () { return conv2d(ddx, filter, strides, pad, dataFormat, 1 /* dilations */, dimRoundingMode); },
              filter: function () { return conv2DBackpropFilter(ddx, dy, filter.shape, strides, pad, dataFormat, dimRoundingMode); }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the derivative of the filter of a 3D convolution.
   *
   * @param x The input tensor, of rank 5 or rank 4 of shape
   *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is
   *     assumed.
   * @param dy The dy image, of rank 5 or rank 4, of shape
   *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is
   *     assumed.
   * @param filterShape The shape of the filter, length 5,
   *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].
   * @param strides The strides of the convolution: [strideDepth, strideHeight,
   * strideWidth].
   * @param pad A string from: 'same', 'valid'. The type of padding algorithm
   *     used in the forward prop of the op.
   */
  function conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {
      var x5D = x;
      if (x.rank === 4) {
          x5D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);
      }
      var dy5D = dy;
      if (dy5D.rank === 4) {
          dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);
      }
      assert(x5D.rank === 5, function () { return "Error in conv3dDerFilter: input must be rank 5, but got shape " +
          (x5D.shape + "."); });
      assert(dy5D.rank === 5, function () { return "Error in conv3dDerFilter: dy must be rank 5, but got shape " +
          (dy5D.shape + "."); });
      assert(filterShape.length === 5, function () { return "Error in conv3dDerFilter: filterShape must be length 5, but got " +
          (filterShape + "."); });
      assert(x5D.shape[4] === filterShape[3], function () { return "Error in conv3dDerFilter: depth of input " + x5D.shape[4] + ") must " +
          ("match input depth in filter (" + filterShape[3] + "."); });
      assert(dy5D.shape[4] === filterShape[4], function () { return "Error in conv3dDerFilter: depth of dy (" + dy5D.shape[4] + ") must " +
          ("match output depth for filter (" + filterShape[4] + ")."); });
      var forward = function (backend) {
          var dilations = 1;
          var convInfo = computeConv3DInfo(x5D.shape, filterShape, strides, dilations, pad);
          return backend.conv3dDerFilter(x5D, dy5D, convInfo);
      };
      var inputs = { x: x5D, y: dy5D };
      var attrs = { strides: strides, pad: pad };
      return ENGINE.runKernelFunc(forward, inputs, null, Conv3DBackpropFilterV2, attrs);
  }
  var conv3DBackpropFilter = op({ conv3DBackpropFilter_: conv3DBackpropFilter_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the derivative of the input of a 3D convolution.
   *
   * @param xShape The shape of the input: [batch, depth, height, width,
   * in_channels]. If length of 4, batch of 1 is assumed.
   * @param dy The derivative of the output, of rank 5 or rank 4 of shape
   *   `[batch, outDepth, outHeight, outWidth, in_channels]`.
   * If rank 4, batch of 1 is assumed.
   * @param filter The filter, rank 5, of shape
   *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.
   * @param strides The strides of the convolution: `[strideDepth, strideHeight,
   * strideWidth]`.
   * @param pad The type of padding algorithm used:
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1x1.
   */
  function conv3DBackpropInput_(xShape, dy, filter, strides, pad) {
      assert(xShape.length === dy.rank, function () { return "Length of inShape " +
          ("(" + xShape.length + ") and rank of dy (" + dy.rank + ") must match"); });
      var xShape5D = xShape;
      var dy5D = dy;
      var reshapedTo5D = false;
      if (dy.rank === 4) {
          reshapedTo5D = true;
          dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);
          xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];
      }
      var inDepth = xShape5D[4];
      var outDepth = dy5D.shape[4];
      assert(xShape5D.length === 5, function () {
          return "Error in conv3dDerInput: inShape must be length 5, but got length " +
              (xShape5D.length + ".");
      });
      assert(dy5D.rank === 5, function () { return "Error in conv3dDerInput: dy must be rank 5, but got " +
          ("rank " + dy5D.rank); });
      assert(filter.rank === 5, function () { return "Error in conv3dDerInput: filter must be rank 5, but got " +
          ("rank " + filter.rank); });
      assert(inDepth === filter.shape[3], function () { return "Error in conv3dDerInput: depth of input (" + inDepth + ") must " +
          ("match input depth for filter " + filter.shape[3] + "."); });
      assert(outDepth === filter.shape[4], function () { return "Error in conv3dDerInput: depth of output (" + outDepth + ") must " +
          ("match output depth for filter " + filter.shape[4] + "."); });
      var forward = function (backend) {
          var dilations = 1;
          var convInfo = computeConv3DInfo(xShape5D, filter.shape, strides, dilations, pad);
          return backend.conv3dDerInput(dy5D, filter, convInfo);
      };
      var inputs = { dy: dy5D };
      var attrs = { pad: pad };
      var res = ENGINE.runKernelFunc(forward, inputs, null, Conv3DBackpropInputV2, attrs);
      if (reshapedTo5D) {
          return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
      }
      return res;
  }
  var conv3DBackpropInput = op({ conv3DBackpropInput_: conv3DBackpropInput_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var conv3DGradConfig = {
      kernelName: Conv3D,
      inputsToSave: ['x', 'filter'],
      gradFunc: function (dy, saved, attrs) {
          var _a = attrs, dilations = _a.dilations, strides = _a.strides, pad = _a.pad;
          assert(tupleValuesAreOne(dilations), function () {
              return 'Error in gradient of conv3D: dilation rates greater than 1 are ' +
                  ("not yet supported in gradients. Got dilations '" + dilations + "'");
          });
          var x5D = saved[0], $filter = saved[1];
          return {
              x: function () { return conv3DBackpropInput(x5D.shape, dy, $filter, strides, pad); },
              filter: function () { return conv3DBackpropFilter(x5D, dy, $filter.shape, strides, pad); }
          };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes sin of the input Tensor element-wise: `sin(x)`
   *
   * ```js
   * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
   *
   * x.sin().print();  // or tf.sin(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function sin_(x) {
      var $x = convertToTensor(x, 'x', 'sin');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.sin($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Sin);
  }
  var sin = op({ sin_: sin_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var cosGradConfig = {
      kernelName: Cos,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return mul(neg(sin(cast(x, 'float32'))), dy); } };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`
   *
   * ```js
   * const x = tf.tensor1d([0, 1, -1, .7]);
   *
   * x.sinh().print();  // or tf.sinh(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function sinh_(x) {
      var $x = convertToTensor(x, 'x', 'sinh');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.sinh($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Sinh);
  }
  var sinh = op({ sinh_: sinh_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var coshGradConfig = {
      kernelName: Cosh,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return mul(sinh(cast(x, 'float32')), dy); } };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.
   *
   * The returned `tf.Tensor`'s dimension `i` will correspond to the input
   * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,
   * where `n` is the rank of the input `tf.Tensor`. Hence by default, this
   * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.
   *
   * ```js
   * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);
   *
   * a.transpose().print();  // or tf.transpose(a)
   * ```
   *
   * @param x The tensor to transpose.
   * @param perm The permutation of the dimensions of a.
   */
  /** @doc {heading: 'Operations', subheading: 'Matrices'} */
  function transpose_(x, perm) {
      var $x = convertToTensor(x, 'x', 'transpose');
      if (perm == null) {
          perm = $x.shape.map(function (s, i) { return i; }).reverse();
      }
      assert($x.rank === perm.length, function () { return "Error in transpose: rank of input " + $x.rank + " " +
          ("must match length of perm " + perm + "."); });
      perm.forEach(function (axis) {
          assert(axis >= 0 && axis < $x.rank, function () { return "All entries in 'perm' must be between 0 and " + ($x.rank - 1) +
              (" but got " + perm); });
      });
      if ($x.rank <= 1) {
          return $x.clone();
      }
      var inputs = { x: $x };
      var attrs = { perm: perm };
      return ENGINE.runKernelFunc(function (backend) { return backend.transpose($x, perm); }, inputs, null /* gradient */, Transpose, attrs);
  }
  var transpose = op({ transpose_: transpose_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the cumulative sum of a `tf.Tensor` along `axis`.
   *
   * ```js
   * const x = tf.tensor([1, 2, 3, 4]);
   * x.cumsum().print();
   * ```
   * ```js
   * const x = tf.tensor([[1, 2], [3, 4]]);
   * x.cumsum().print();
   * ```
   *
   * @param x The input tensor to be summed.
   * @param axis The axis along which to sum. Optional. Defaults to 0.
   * @param exclusive Whether to perform exclusive cumulative sum. Optional.
   *     Defaults to false. If set to true then the sum of each tensor entry
   *     does not include its own value, but only the values previous to it
   *     along the specified axis.
   * @param reverse Whether to sum in the opposite direction. Optional.
   *     Defaults to false.
   */
  /** @doc {heading: 'Operations', subheading: 'Scan'} */
  function cumsum_(x, axis, exclusive, reverse) {
      if (axis === void 0) { axis = 0; }
      if (exclusive === void 0) { exclusive = false; }
      if (reverse === void 0) { reverse = false; }
      var $x = convertToTensor(x, 'x', 'cumsum');
      var forward = function (backend, save) {
          var permutation = getAxesPermutation([axis], $x.rank);
          var permutedX = $x;
          if (permutation != null) {
              permutedX = transpose($x, permutation);
          }
          var permutedAxis = getInnerMostAxes(1, $x.rank)[0];
          var value = backend.cumsum(permutedX, permutedAxis, exclusive, reverse);
          save([$x]);
          if (permutation != null) {
              var reversePermutation = getUndoAxesPermutation(permutation);
              value = transpose(value, reversePermutation);
          }
          return value;
      };
      var inputs = { x: $x };
      var attrs = { axis: axis, exclusive: exclusive, reverse: reverse };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Cumsum, attrs);
  }
  var cumsum = op({ cumsum_: cumsum_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var cumsumGradConfig = {
      kernelName: Cumsum,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved, attrs) {
          var x = saved[0];
          var _a = attrs, axis = _a.axis, exclusive = _a.exclusive, reverse = _a.reverse;
          return {
              x: function () {
                  var permutation = getAxesPermutation([axis], x.rank);
                  var out = cumsum(dy, axis, exclusive, !reverse);
                  if (permutation != null) {
                      out = transpose(out, permutation);
                  }
                  return out;
              }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function depthwiseConv2dNativeBackpropFilter_(x, dy, filterShape, convInfo) {
      var x4D = x;
      if (x.rank === 3) {
          x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
      }
      var dy4D = dy;
      if (dy4D.rank === 3) {
          dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
      }
      var forward = function (backend) {
          return backend.depthwiseConv2DDerFilter(x4D, dy4D, convInfo);
      };
      var inputs = { x: x4D, dy: dy4D };
      return ENGINE.runKernelFunc(forward, inputs, null, DepthwiseConv2dNativeBackpropFilter);
  }
  var depthwiseConv2dNativeBackpropFilter = op({ depthwiseConv2dNativeBackpropFilter_: depthwiseConv2dNativeBackpropFilter_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, convInfo) {
      var dy4D = dy;
      var reshapedTo4D = false;
      if (dy.rank === 3) {
          reshapedTo4D = true;
          dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
      }
      var forward = function (backend) {
          return backend.depthwiseConv2DDerInput(dy4D, filter, convInfo);
      };
      var inputs = { dy: dy4D };
      var res = ENGINE.runKernelFunc(forward, inputs, null, DepthwiseConv2dNativeBackpropInput);
      if (reshapedTo4D) {
          return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }
      return res;
  }
  var depthwiseConv2dNativeBackpropInput = op({ depthwiseConv2dNativeBackpropInput_: depthwiseConv2dNativeBackpropInput_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var depthwiseConv2dNativeGradConfig = {
      kernelName: DepthwiseConv2dNative,
      inputsToSave: ['x', 'filter'],
      gradFunc: function (dy, saved, attrs) {
          var _a = attrs, dilations = _a.dilations, strides = _a.strides, pad = _a.pad, dimRoundingMode = _a.dimRoundingMode;
          var $dilations = dilations == null ? [1, 1] : dilations;
          assert(tupleValuesAreOne($dilations), function () { return 'Error in gradient of depthwiseConv2dNative: dilation rates ' +
              "greater than 1 are not yet supported. Got dilations " +
              ("'" + $dilations + "'"); });
          var _b = saved, x = _b[0], filter = _b[1];
          assert(x.rank === 4, function () { return "Error in gradient of depthwiseConv2dNative: input must be " +
              ("rank 4, but got rank " + x.rank + "."); });
          assert(filter.rank === 4, function () { return "Error in gradient of depthwiseConv2dNative: filter must be " +
              ("rank 4, but got rank " + filter.rank + "."); });
          assert(x.shape[3] === filter.shape[2], function () { return "Error in gradient of depthwiseConv2d: number of input " +
              ("channels (" + x.shape[3] + ") must match the inChannels dimension ") +
              ("in filter " + filter.shape[2] + "."); });
          assert(eitherStridesOrDilationsAreOne(strides, $dilations), function () { return 'Error in gradient of depthwiseConv2d: Either strides or ' +
              ("dilations must be  1. Got strides " + strides + " and dilations ") +
              ("'" + $dilations + "'."); });
          if (dimRoundingMode != null) {
              assert(isInt(pad), function () {
                  return "Error in depthwiseConv2d: pad must be an integer when using, " +
                      ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + ".");
              });
          }
          var convInfo = computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);
          return {
              x: function () {
                  return depthwiseConv2dNativeBackpropInput(x.shape, dy, filter, convInfo);
              },
              filter: function () {
                  return depthwiseConv2dNativeBackpropFilter(x, dy, filter.shape, convInfo);
              },
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var dilation2dGradConfig = {
      kernelName: Dilation2D,
      inputsToSave: ['x', 'filter'],
      gradFunc: function (dy, saved, attrs) {
          var _a = saved, x = _a[0], filter = _a[1];
          var inputInputs = { x: x, filter: filter, dy: dy };
          var filterInputs = { x: x, filter: filter, dy: dy };
          return {
              x: function () { return ENGINE.runKernel(Dilation2DBackpropInput, inputInputs, attrs); },
              filter: function () { return ENGINE.runKernel(Dilation2DBackpropFilter, filterInputs, attrs); }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var divGradConfig = {
      kernelName: Div,
      inputsToSave: ['a', 'b'],
      gradFunc: function (dy, saved) {
          var a = saved[0], b = saved[1];
          var outShape = assertAndGetBroadcastShape(a.shape, b.shape);
          var derA = function () {
              var res = div(dy, b.toFloat());
              var reduceAxes = getReductionAxes(a.shape, outShape);
              if (reduceAxes.length > 0) {
                  return sum$1(res, reduceAxes).reshape(a.shape);
              }
              return res;
          };
          var derB = function () {
              var res = mul(dy, a.toFloat());
              var reduceAxes = getReductionAxes(b.shape, outShape);
              if (reduceAxes.length > 0) {
                  res = reshape(sum$1(res, reduceAxes), b.shape);
              }
              var tmp = square(b);
              return neg(div(res, tmp.toFloat()));
          };
          return { a: derA, b: derB };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var eluGradConfig = {
      kernelName: Elu,
      outputsToSave: [true],
      gradFunc: function (dy, saved) {
          var y = saved[0];
          var backPropKernelFunc = function (backend) {
              return backend.eluDer(dy, y);
          };
          var inputs = { dy: dy, y: y };
          return {
              x: function () { return ENGINE.runKernelFunc(backPropKernelFunc, inputs, null /* grad */, EluGrad); }
          };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`
   *
   * ```js
   * const x = tf.tensor1d([1, 2, -3]);
   *
   * x.exp().print();  // or tf.exp(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function exp_(x) {
      var $x = convertToTensor(x, 'x', 'exp');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.exp($x);
          save([res]);
          return res;
      }, inputs, null /* grad */, Exp);
  }
  var exp = op({ exp_: exp_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var erfGradConfig = {
      kernelName: Erf,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          var a = mul(exp(neg(square(x))), 2 / Math.sqrt(Math.PI));
          return { x: function () { return mul(dy, a); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var expGradConfig = {
      kernelName: Exp,
      outputsToSave: [true],
      gradFunc: function (dy, saved) {
          var y = saved[0];
          return { x: function () { return mul(dy, y); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var expm1GradConfig = {
      kernelName: Expm1,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return mul(dy, exp(x)); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var floorGradConfig = {
      kernelName: Floor,
      gradFunc: function (dy) {
          return { x: function () { return zerosLike(dy); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var floorDivGradConfig = {
      kernelName: FloorDiv,
      inputsToSave: ['a', 'b'],
      gradFunc: function (dy, saved) {
          var a = saved[0], b = saved[1];
          var outShape = assertAndGetBroadcastShape(a.shape, b.shape);
          var derA = function () {
              var res = dy.div(b.toFloat());
              var reduceAxes = getReductionAxes(a.shape, outShape);
              if (reduceAxes.length > 0) {
                  return res.sum(reduceAxes).reshape(a.shape);
              }
              return res;
          };
          var derB = function () {
              var res = dy.mul(a.toFloat());
              var reduceAxes = getReductionAxes(b.shape, outShape);
              if (reduceAxes.length > 0) {
                  res = res.sum(reduceAxes).reshape(b.shape);
              }
              var tmp = b.square();
              return res.div(tmp.toFloat()).neg();
          };
          return { a: derA, b: derB };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes reciprocal of square root of the input `tf.Tensor` element-wise:
   * `y = 1 / sqrt(x)`
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 4, -1]);
   *
   * x.rsqrt().print();  // or tf.rsqrt(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function rsqrt_(x) {
      var $x = convertToTensor(x, 'x', 'rsqrt');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.rsqrt($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Rsqrt);
  }
  var rsqrt = op({ rsqrt_: rsqrt_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Construct a tensor by repeating it the number of times given by reps.
   *
   * This operation creates a new tensor by replicating `input` `reps`
   * times. The output tensor's i'th dimension has `input.shape[i] *
   * reps[i]` elements, and the values of `input` are replicated
   * `reps[i]` times along the i'th dimension. For example, tiling
   * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.
   *
   * ```js
   * const a = tf.tensor1d([1, 2]);
   *
   * a.tile([2]).print();    // or a.tile([2])
   * ```
   *
   * ```js
   * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   *
   * a.tile([1, 2]).print();  // or a.tile([1, 2])
   * ```
   * @param x The tensor to tile.
   * @param reps Determines the number of replications per dimension.
   */
  /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */
  function tile_(x, reps) {
      var parseAs = null;
      var $x = convertToTensor(x, 'x', 'tile', parseAs);
      assert($x.rank === reps.length, function () { return "Error in transpose: rank of input " + $x.rank + " " +
          ("must match length of reps " + reps + "."); });
      var forward = function (backend, save) {
          var res = backend.tile($x, reps);
          save([$x]);
          return res;
      };
      var inputsToSave = [$x];
      var inputs = { x: $x };
      var attrs = { reps: reps };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Tile, attrs, inputsToSave);
  }
  var tile = op({ tile_: tile_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var fusedBatchNormGradConfig = {
      kernelName: FusedBatchNorm,
      inputsToSave: ['x', 'mean', 'variance', 'scale'],
      gradFunc: function (dy, saved, attrs) {
          var varianceEpsilon = attrs.varianceEpsilon;
          var x = saved[0], mean = saved[1], variance = saved[2], scale = saved[3];
          var scaleValue = scale == null ? scalar(1) : scale;
          var reductionAxes = getReductionAxes(mean.shape, x.shape);
          var tileShape = [];
          if (mean.rank === 1) {
              for (var i = 0; i < x.shape.length - 1; ++i) {
                  tileShape.push(x.shape[i]);
              }
              tileShape.push(1);
          }
          var xMinusMean = sub(x, mean);
          var dyTimesScaleValue = mul(dy, scaleValue);
          var oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));
          var minusHalfRCube = mul(mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), scalar(-0.5));
          var derX = function () {
              if (mean.rank === 1) {
                  return reshape(mul(mul(dy, tile(oneOverSqrtVariance.as4D(1, 1, 1, mean.shape[0]), tileShape)), scaleValue), x.shape);
              }
              else {
                  return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);
              }
          };
          var derMean = function () {
              var meanDer = mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);
              if (mean.rank === 1) {
                  meanDer = sum$1(meanDer, reductionAxes);
              }
              return reshape(meanDer, mean.shape);
          };
          var derVariance = function () {
              var varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);
              if (mean.rank === 1) {
                  varianceDer = sum$1(varianceDer, reductionAxes);
              }
              return reshape(varianceDer, mean.shape);
          };
          var derScale = function () {
              var xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);
              var scaleDer = mul(dy, xMinusMean2TimesRsqrt);
              if (mean.rank === 1) {
                  scaleDer = sum$1(scaleDer, reductionAxes);
              }
              return reshape(scaleDer, mean.shape);
          };
          var derOffset = function () {
              var offsetDer = dy;
              if (mean.rank === 1) {
                  offsetDer = sum$1(offsetDer, reductionAxes);
              }
              return reshape(offsetDer, mean.shape);
          };
          return {
              x: derX,
              mean: derMean,
              variance: derVariance,
              scale: derScale,
              offset: derOffset
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the sum along segments of a `tf.Tensor`.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3, 4]);
   * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');
   * const numSegments = 3;
   *
   * x.unsortedSegmentSum(segmentIds, numSegments).print()
   * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)
   * ```
   * @param x The `tf.Tensor` that will be summed along its segments.
   * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s
   * dimension along the `axis`.  Maps each element of `x` to a segment.
   * @param numSegments The number of distinct `segmentIds`.
   */
  /** @doc {heading: 'Operations', subheading: 'Segment'} */
  function unsortedSegmentSum_(x, segmentIds, numSegments) {
      var $x = convertToTensor(x, 'x', 'unsortedSegmentSum');
      var $segmentIds = convertToTensor(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');
      assert(isInt(numSegments), function () { return 'numSegments must be of dtype int'; });
      var inputs = { x: $x, segmentIds: $segmentIds };
      var attrs = { numSegments: numSegments };
      var forward = function (backend, save) {
          var res = backend.unsortedSegmentSum($x, $segmentIds, numSegments);
          save([$segmentIds]);
          return res;
      };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, UnsortedSegmentSum, attrs);
  }
  var unsortedSegmentSum = op({ unsortedSegmentSum_: unsortedSegmentSum_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var gatherGradConfig = {
      kernelName: GatherV2,
      inputsToSave: ['x', 'indices'],
      gradFunc: function (dy, saved, attrs) {
          var x = saved[0], indices = saved[1];
          var axis = attrs.axis;
          var parsedAxis = parseAxisParam(axis, x.shape)[0];
          var derX = function () {
              var paramsShape = x.shape;
              var indicesSize = indices.size;
              var outerShape = paramsShape.slice(0, parsedAxis);
              var outerDims = outerShape.length;
              var innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);
              var innerDims = innerShape.length;
              var outerAxesIndices = arrayRange(0, outerDims);
              var innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);
              var valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);
              var values = reshape(dy, valuesShape);
              var reshapedIndices = reshape(indices, [indicesSize]);
              var transposeDims = arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);
              var valuesTranspose = transpose(values, transposeDims);
              var paramsGrad = unsortedSegmentSum(valuesTranspose, reshapedIndices, x.shape[parsedAxis]);
              var invertTransposeDims = getUndoAxesPermutation(transposeDims);
              paramsGrad = transpose(paramsGrad, invertTransposeDims);
              return paramsGrad;
          };
          return { x: derX, indices: function () { return indices; } };
      }
  };
  function arrayRange(start, stop) {
      var result = [];
      for (var i = start; i < stop; ++i) {
          result.push(i);
      }
      return result;
  }
  function arrayConcat(arrays) {
      var result = [];
      for (var i = 0; i < arrays.length; ++i) {
          for (var j = 0; j < arrays[i].length; ++j) {
              result.push(arrays[i][j]);
          }
      }
      return result;
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var greaterEqualGradConfig = {
      kernelName: GreaterEqual,
      inputsToSave: ['a', 'b'],
      gradFunc: function (dy, saved) {
          var a = saved[0], b = saved[1];
          return { a: function () { return zerosLike(a); }, b: function () { return zerosLike(b); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var identityGradConfig = {
      kernelName: Identity,
      gradFunc: function (dy) {
          return { x: function () { return dy.toFloat(); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var isFiniteGradConfig = {
      kernelName: IsFinite,
      gradFunc: function (dy) {
          // TODO(nsthorat): Let gradients be null for cases where we want to stop
          // backpropgation.
          return { x: function () { return zerosLike(dy); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var isInfGradConfig = {
      kernelName: IsInf,
      gradFunc: function (dy) {
          // TODO(nsthorat): Let gradients be null for cases where we want to stop
          // backpropgation.
          return { x: function () { return zerosLike(dy); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var isNanGradConfig = {
      kernelName: IsNan,
      gradFunc: function (dy) {
          // TODO(nsthorat): Let gradients be null for cases where we want to stop
          // backpropgation.
          return { x: function () { return zerosLike(dy); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var log1pGradConfig = {
      kernelName: Log1p,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return div(dy, add(x, 1)); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var logGradConfig = {
      kernelName: Log,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return div(dy, cast(x, 'float32')); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var logSoftmaxGradConfig = {
      kernelName: LogSoftmax,
      inputsToSave: [],
      outputsToSave: [true],
      gradFunc: function (dy, saved, attrs) {
          var value = saved[0];
          var axis = attrs.axis;
          return {
              logits: function () {
                  var keepDims = true;
                  var softmax = value.exp();
                  return dy.sub(dy.sum(axis, keepDims).mul(softmax));
              }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function localResponseNormalizationBackprop_(x, y, dy, depthRadius, bias, alpha, beta) {
      if (depthRadius === void 0) { depthRadius = 5; }
      if (bias === void 0) { bias = 1; }
      if (alpha === void 0) { alpha = 1; }
      if (beta === void 0) { beta = 0.5; }
      var forward = function (backend) {
          return backend.LRNGrad(dy, x, y, depthRadius, bias, alpha, beta);
      };
      var inputs = { x: x, y: y, dy: dy };
      var attrs = { depthRadius: depthRadius, bias: bias, alpha: alpha, beta: beta };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, LRNBackprop, attrs);
  }
  var localResponseNormalizationBackprop = op({ localResponseNormalizationBackprop_: localResponseNormalizationBackprop_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var lrnGradConfig = {
      kernelName: LRN,
      inputsToSave: ['x'],
      outputsToSave: [true],
      gradFunc: function (dy, saved, attrs) {
          var _a = saved, x = _a[0], y = _a[1];
          var _b = attrs, depthRadius = _b.depthRadius, bias = _b.bias, alpha = _b.alpha, beta = _b.beta;
          return {
              x: function () { return localResponseNormalizationBackprop(x, y, dy, depthRadius, bias, alpha, beta); }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the truth value of (a == b) element-wise. Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([1, 2, 3]);
   * const b = tf.tensor1d([2, 2, 2]);
   *
   * a.equal(b).print();
   * ```
   *
   * @param a The first input tensor.
   * @param b The second input tensor. Must have the same dtype as `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Logical'} */
  function equal_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'equal');
      var $b = convertToTensor(b, 'b', 'equal');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      assertAndGetBroadcastShape($a.shape, $b.shape);
      var forward = function (backend) { return backend.equal($a, $b); };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null, Equal);
  }
  var equal = op({ equal_: equal_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Gradient helper function for the min and max operations.
   */
  function gradForMinAndMax(dy, y, xOrig, origAxes, permutedAxes) {
      if (y.rank < xOrig.rank) {
          y = reshape(y, expandShapeToKeepDim(y.shape, origAxes));
      }
      if (dy.rank < xOrig.rank) {
          dy = reshape(dy, expandShapeToKeepDim(dy.shape, origAxes));
      }
      return {
          x: function () {
              var dx = mul(dy, cast(equal(xOrig, y), dy.dtype));
              return permutedAxes == null ? dx : transpose(dx, permutedAxes);
          }
      };
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var maxGradConfig = {
      kernelName: Max,
      inputsToSave: ['x'],
      outputsToSave: [true],
      gradFunc: function (dy, saved, attrs) {
          var maxAttrs = attrs;
          var reductionIndices = maxAttrs.reductionIndices;
          var x = saved[0], y = saved[1];
          var origAxes = parseAxisParam(reductionIndices, x.shape);
          var permutedAxes = getAxesPermutation(origAxes, x.rank);
          var maxGrad = gradForMinAndMax(dy, y, x, origAxes, permutedAxes);
          return {
              x: function () {
                  var out = maxGrad['x']();
                  if (permutedAxes != null) {
                      out = transpose(out);
                  }
                  return out;
              }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the truth value of (a < b) element-wise. Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([1, 2, 3]);
   * const b = tf.tensor1d([2, 2, 2]);
   *
   * a.less(b).print();
   * ```
   * @param a The first input tensor.
   * @param b The second input tensor. Must have the same dtype as `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Logical'} */
  function less_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'less');
      var $b = convertToTensor(b, 'b', 'less');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      assertAndGetBroadcastShape($a.shape, $b.shape);
      var forward = function (backend) { return backend.less($a, $b); };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Less);
  }
  var less = op({ less_: less_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var maximumGradConfig = {
      kernelName: Maximum,
      inputsToSave: ['a', 'b'],
      gradFunc: function (dy, saved) {
          var a = saved[0], b = saved[1];
          var derA = function () { return mul(dy, cast(greaterEqual(a, b), 'float32')); };
          var derB = function () { return mul(dy, cast(less(a, b), 'float32')); };
          return { a: derA, b: derB };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the backprop of a 3d max pool.
   *
   * @param dy The dy error, of rank 5 of shape
   *     [batchSize, depth, height, width, channels].
   * assumed.
   * @param input The original input image, of rank 5 or rank 4 of shape
   *     [batchSize, depth, height, width, channels].
   * @param output The original output image, of rank 5 of shape
   *     [batchSize, outDepth, outHeight, outWidth, channels].
   * @param filterSize The filter size:
   *     `[filterDepth, filterHeight, filterWidth]`.
   *     `filterSize` is a single number,
   *     then `filterDepth == filterHeight == filterWidth`.
   * @param strides The strides of the pooling:
   *     `[strideDepth, strideHeight, strideWidth]`. If
   *     `strides` is a single number, then `strideHeight == strideWidth`.
   * @param dilations Deprecated, this field will be gone in v3.0.0.
   *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`
   *     in which we sample input values across the depth, height and width
   *     dimensions in dilated pooling.
   *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
   *     then `dilationDepth == dilationHeight == dilationWidth`.
   *     If it is greater than 1, then all values of `strides` must be 1.
   * @param pad A string from: 'same', 'valid'. The type of padding algorithm
   *     used in the forward prop of the op.
   * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
   *     rounding mode used when computing output dimensions if pad is a
   *     number. If none is provided, it will not round and error if the output
   *     is of fractional size.
   */
  function maxPool3dBackprop_(dy, input, output, filterSize, strides, dilations, pad, dimRoundingMode) {
      if (dilations === void 0) { dilations = [1, 1, 1]; }
      var $dy = convertToTensor(dy, 'dy', 'maxPool3dBackprop');
      var $input = convertToTensor(input, 'input', 'maxPool3dBackprop');
      var $output = convertToTensor(output, 'output', 'maxPool3dBackprop');
      var dy5D = $dy;
      var input5D = $input;
      var output5D = $output;
      var reshapedTo5D = false;
      if ($input.rank === 4) {
          reshapedTo5D = true;
          dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);
          input5D = reshape($input, [
              1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]
          ]);
          output5D = reshape($output, [
              1, $output.shape[0], $output.shape[1], $output.shape[2], $output.shape[3]
          ]);
      }
      assert(dy5D.rank === 5, function () { return "Error in maxPool3dBackprop: dy must be rank 5 but got rank " +
          (dy5D.rank + "."); });
      assert(input5D.rank === 5, function () { return "Error in maxPool3dBackprop: input must be rank 5 but got rank " +
          (input5D.rank + "."); });
      assert(output5D.rank === 5, function () { return "Error in maxPool3dBackprop: output must be rank 5 but got rank " +
          (output5D.rank + "."); });
      assert(eitherStridesOrDilationsAreOne(strides, dilations), function () { return 'Error in maxPool3dBackprop: Either strides or dilations ' +
          ("must be 1. Got strides " + strides + " and dilations '" + dilations + "'"); });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in maxPool3dBackprop: pad must be an integer when " +
              ("using, dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      var forward = function (backend) {
          var convInfo = computePool3DInfo(input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);
          return backend.maxPool3dBackprop(dy5D, input5D, output5D, convInfo);
      };
      var inputs = { dy: dy5D, input: input5D, output: output5D };
      var attrs = { filterSize: filterSize, strides: strides, dilations: dilations, pad: pad, dimRoundingMode: dimRoundingMode };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, MaxPool3DBackprop, attrs);
      if (reshapedTo5D) {
          return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
      }
      return res;
  }
  var maxPool3dBackprop = op({ maxPool3dBackprop_: maxPool3dBackprop_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var maxPool3DGradConfig = {
      kernelName: MaxPool3D,
      inputsToSave: ['x'],
      outputsToSave: [true],
      gradFunc: function (dy, saved, attrs) {
          var _a = saved, x = _a[0], y = _a[1];
          var _b = attrs, filterSize = _b.filterSize, strides = _b.strides, dilations = _b.dilations, pad = _b.pad, dimRoundingMode = _b.dimRoundingMode;
          var $dilations = dilations == null ? [1, 1, 1] : dilations;
          return {
              x: function () { return maxPool3dBackprop(dy, x, y, filterSize, strides, $dilations, pad, dimRoundingMode); }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the backprop of a 2D max pool.
   *
   * @param dy The dy error, of rank 4 or rank 3 of shape
   *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
   * assumed.
   * @param input The original input image, of rank 4, of shape
   *     [batchSize, height, width, channels].
   * @param output The original output image, of rank 4, of shape
   *     [batchSize, outHeight, outWidth, channels].
   * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
   *     `filterSize` is a single number, then `filterHeight == filterWidth`.
   * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
   *     `strides` is a single number, then `strideHeight == strideWidth`.
   * @param pad A string from: 'same', 'valid'. The type of padding algorithm
   *     used in the forward prop of the op.
   * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The
   *     rounding mode used when computing output dimensions if pad is a
   *     number. If none is provided, it will not round and error if the output
   *     is of fractional size.
   */
  function maxPoolBackprop_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {
      var $dy = convertToTensor(dy, 'dy', 'maxPoolBackprop');
      var $input = convertToTensor(input, 'input', 'maxPoolBackprop');
      var $output = convertToTensor(output, 'output', 'maxPoolBackprop');
      assert($input.rank === $dy.rank, function () { return "Rank of input (" + $input.rank + ") does not match rank of dy " +
          ("(" + $dy.rank + ")"); });
      assert($dy.rank === 4, function () { return "Error in maxPoolBackprop: dy must be rank 4 but got rank " +
          ($dy.rank + "."); });
      assert($input.rank === 4, function () { return "Error in maxPoolBackprop: input must be rank 4 but got rank " +
          ($input.rank + "."); });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in maxPoolBackprop: pad must be an integer when using, " +
              ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      var forward = function (backend) {
          var convInfo = computePool2DInfo($input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
          return backend.maxPoolBackprop($dy, $input, $output, convInfo);
      };
      var inputs = { dy: $dy, input: $input, output: $output };
      var attrs = { filterSize: filterSize, strides: strides, pad: pad, dimRoundingMode: dimRoundingMode };
      return ENGINE.runKernelFunc(forward, inputs, null, MaxPoolBackprop, attrs);
  }
  var maxPoolBackprop = op({ maxPoolBackprop_: maxPoolBackprop_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var maxPoolGradConfig = {
      kernelName: MaxPool,
      inputsToSave: ['x'],
      outputsToSave: [true],
      gradFunc: function (dy, saved, attrs) {
          var _a = saved, x = _a[0], y = _a[1];
          var _b = attrs, filterSize = _b.filterSize, strides = _b.strides, pad = _b.pad;
          return {
              x: function () { return maxPoolBackprop(dy, x, y, filterSize, strides, pad); }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var minGradConfig = {
      kernelName: Min,
      inputsToSave: ['x'],
      outputsToSave: [true],
      gradFunc: function (dy, saved, attrs) {
          var minAttrs = attrs;
          var axis = minAttrs.axis;
          var x = saved[0], y = saved[1];
          var origAxes = parseAxisParam(axis, x.shape);
          var permutedAxes = getAxesPermutation(origAxes, x.rank);
          var minGrad = gradForMinAndMax(dy, y, x, origAxes, permutedAxes);
          return {
              x: function () {
                  var out = minGrad['x']();
                  if (permutedAxes != null) {
                      out = transpose(out);
                  }
                  return out;
              }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the truth value of (a > b) element-wise. Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([1, 2, 3]);
   * const b = tf.tensor1d([2, 2, 2]);
   *
   * a.greater(b).print();
   * ```
   *
   * @param a The first input tensor.
   * @param b The second input tensor. Must have the same dtype as `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Logical'} */
  function greater_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'greater');
      var $b = convertToTensor(b, 'b', 'greater');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      assertAndGetBroadcastShape($a.shape, $b.shape);
      var forward = function (backend) { return backend.greater($a, $b); };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Greater);
  }
  var greater = op({ greater_: greater_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var minimumGradConfig = {
      kernelName: Minimum,
      inputsToSave: ['a', 'b'],
      gradFunc: function (dy, saved) {
          var a = saved[0], b = saved[1];
          var derA = function () { return mul(dy, cast(lessEqual(a, b), 'float32')); };
          var derB = function () { return mul(dy, cast(greater(a, b), 'float32')); };
          return { a: derA, b: derB };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.
   *
   * ```js
   * const x = tf.tensor1d([.6, 1.1, -3.3]);
   *
   * x.floor().print();  // or tf.floor(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function floor_(x) {
      var $x = convertToTensor(x, 'x', 'floor');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend) { return backend.floor($x); }, inputs, null /* grad */, Floor);
  }
  var floor = op({ floor_: floor_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var modGradConfig = {
      kernelName: Mod,
      inputsToSave: ['a', 'b'],
      gradFunc: function (dy, saved) {
          var a = saved[0], b = saved[1];
          var outShape = assertAndGetBroadcastShape(a.shape, b.shape);
          var derA = function () {
              var reduceAxes = getReductionAxes(a.shape, outShape);
              if (reduceAxes.length > 0) {
                  return reshape(sum$1(dy, reduceAxes), a.shape);
              }
              return dy;
          };
          var derB = function () {
              var res = mul(dy, neg(floor(div(a, b))));
              var reduceAxes = getReductionAxes(b.shape, outShape);
              if (reduceAxes.length > 0) {
                  return reshape(sum$1(res, reduceAxes), b.shape);
              }
              return res;
          };
          return { a: derA, b: derB };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var multiplyGradConfig = {
      kernelName: Multiply,
      inputsToSave: ['a', 'b'],
      gradFunc: function (dy, saved) {
          var a = saved[0], b = saved[1];
          var outShape = assertAndGetBroadcastShape(a.shape, b.shape);
          var derA = function () {
              var res = mul(dy, cast(b, 'float32'));
              var reduceAxes = getReductionAxes(a.shape, outShape);
              if (reduceAxes.length > 0) {
                  return reshape(sum$1(res, reduceAxes), a.shape);
              }
              return res;
          };
          var derB = function () {
              var res = mul(dy, cast(a, 'float32'));
              var reduceAxes = getReductionAxes(b.shape, outShape);
              if (reduceAxes.length > 0) {
                  return reshape(sum$1(res, reduceAxes), b.shape);
              }
              return res;
          };
          return { a: derA, b: derB };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var negateGradConfig = {
      kernelName: Negate,
      gradFunc: function (dy) {
          return { x: function () { return neg(dy); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Converts two real numbers to a complex number.
   *
   * Given a tensor `real` representing the real part of a complex number, and a
   * tensor `imag` representing the imaginary part of a complex number, this
   * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],
   * where r represents the real part and i represents the imag part.
   *
   * The input tensors real and imag must have the same shape.
   *
   * ```js
   * const real = tf.tensor1d([2.25, 3.25]);
   * const imag = tf.tensor1d([4.75, 5.75]);
   * const complex = tf.complex(real, imag);
   *
   * complex.print();
   * ```
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function complex_(real, imag) {
      var $real = convertToTensor(real, 'real', 'complex');
      var $imag = convertToTensor(imag, 'imag', 'complex');
      assertShapesMatch($real.shape, $imag.shape, "real and imag shapes, " + $real.shape + " and " + $imag.shape + ", " +
          "must match in call to tf.complex().");
      var forward = function (backend) {
          return backend.complex($real, $imag);
      };
      var inputs = { real: $real, imag: $imag };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Complex);
  }
  var complex = op({ complex_: complex_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a `tf.Tensor` with all elements set to 0.
   *
   * ```js
   * tf.zeros([2, 2]).print();
   * ```
   *
   * @param shape An array of integers defining the output tensor shape.
   * @param dtype The type of an element in the resulting tensor. Can
   *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function zeros(shape, dtype) {
      if (dtype === void 0) { dtype = 'float32'; }
      if (dtype === 'complex64') {
          var real = zeros(shape, 'float32');
          var imag = zeros(shape, 'float32');
          return complex(real, imag);
      }
      var values = makeZerosTypedArray(sizeFromShape(shape), dtype);
      return ENGINE.makeTensor(values, shape, dtype);
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var oneHotGradConfig = {
      kernelName: OneHot,
      inputsToSave: ['indices'],
      gradFunc: function (dy, saved) {
          var indices = saved[0];
          return { indices: function () { return zeros(indices.shape, 'float32'); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var onesLikeGradConfig = {
      kernelName: OnesLike,
      gradFunc: function (dy) {
          return { x: function () { return zerosLike(dy); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var padV2GradConfig = {
      kernelName: PadV2,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved, attrs) {
          // Pad introduces values around the original tensor, so the gradient
          // slices the original shape out of the gradient.
          var x = saved[0];
          var paddings = attrs.paddings;
          var begin = paddings.map(function (p) { return p[0]; });
          return { x: function () { return dy.slice(begin, x.shape); } };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`
   *
   * ```js
   * const x = tf.tensor1d([1, 2, Math.E]);
   *
   * x.log().print();  // or tf.log(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function log_(x) {
      var $x = convertToTensor(x, 'x', 'log');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.log($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Log);
  }
  var log = op({ log_: log_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the power of one `tf.Tensor` to another. Supports broadcasting.
   *
   * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for
   * corresponding elements in x and y. The result's dtype will be the upcasted
   * type of the `base` and `exp` dtypes.
   *
   * ```js
   * const a = tf.tensor([[2, 3], [4, 5]])
   * const b = tf.tensor([[1, 2], [3, 0]]).toInt();
   *
   * a.pow(b).print();  // or tf.pow(a, b)
   * ```
   *
   * ```js
   * const a = tf.tensor([[1, 2], [3, 4]])
   * const b = tf.tensor(2).toInt();
   *
   * a.pow(b).print();  // or tf.pow(a, b)
   * ```
   * We also expose `powStrict` which has the same signature as this op and
   * asserts that `base` and `exp` are the same shape (does not broadcast).
   *
   * @param base The base `tf.Tensor` to pow element-wise.
   * @param exp The exponent `tf.Tensor` to pow element-wise.
   */
  /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */
  function pow_(base, exp) {
      var _a;
      var $base = convertToTensor(base, 'base', 'pow');
      var $exp = convertToTensor(exp, 'exp', 'pow');
      _a = makeTypesMatch($base, $exp), $base = _a[0], $exp = _a[1];
      var inputs = { a: $base, b: $exp };
      var forward = function (backend, save) {
          var y = backend.pow($base, $exp);
          save([$base, $exp, y]);
          return y;
      };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Pow);
  }
  var pow = op({ pow_: pow_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var powGradConfig = {
      kernelName: Pow,
      inputsToSave: ['a', 'b'],
      outputsToSave: [true],
      gradFunc: function (dy, saved) {
          var a = saved[0], b = saved[1], y = saved[2];
          var base = a;
          var exp = b;
          var outShape = assertAndGetBroadcastShape(base.shape, exp.shape);
          var derBase = function () {
              var expFloat = cast(exp, 'float32');
              var res = mul(dy, mul(expFloat, pow(base, sub(expFloat, scalar(1)))));
              var reduceAxes = getReductionAxes(base.shape, outShape);
              if (reduceAxes.length > 0) {
                  res = sum$1(res, reduceAxes);
              }
              return reshape(res, base.shape);
          };
          var derExp = function () {
              var condition = greater(base, 0);
              var logBase = where(condition, log(base), zerosLike(base));
              var res = mul(dy, mul(y, logBase));
              var reduceAxes = getReductionAxes(exp.shape, outShape);
              if (reduceAxes.length > 0) {
                  res = sum$1(res, reduceAxes);
              }
              return reshape(res, exp.shape);
          };
          return { a: derBase, b: derExp };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var preluGradConfig = {
      kernelName: Prelu,
      inputsToSave: ['x', 'alpha'],
      gradFunc: function (dy, saved) {
          var x = saved[0], alpha = saved[1];
          var mask = greater(x, 0);
          return {
              x: function () { return where(mask, dy, mul(dy, alpha)); },
              alpha: function () {
                  var res = where(mask, zerosLike(dy), mul(dy, x));
                  var reduceAxes = getReductionAxes(alpha.shape, dy.shape);
                  if (reduceAxes.length > 0) {
                      res = sum$1(res, reduceAxes);
                  }
                  return reshape(res, alpha.shape);
              }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var reciprocalGradConfig = {
      kernelName: Reciprocal,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return div(dy, neg(square(x))); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var relu6GradConfig = {
      kernelName: Relu6,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          var mask = mul(lessEqual(x, 6), step(x));
          return { x: function () { return mul(dy, cast(mask, 'float32')); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var reluGradConfig = {
      kernelName: Relu,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return mul(dy, cast(step(x), 'float32')); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var reshapeGradConfig = {
      kernelName: Reshape,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return reshape(dy, x.shape); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var resizeBilinearGradConfig = {
      kernelName: ResizeBilinear,
      inputsToSave: ['images'],
      gradFunc: function (dy, saved, attrs) {
          var images = saved[0];
          var backPropKernelFunc = function (backend) {
              var alignCorners = attrs.alignCorners;
              return backend.resizeBilinearBackprop(dy, images, alignCorners);
          };
          var inputs = { images: images };
          var imagesDer = function () { return ENGINE.runKernelFunc(backPropKernelFunc, inputs, null /* gradient */, ResizeBilinearGrad, attrs); };
          return { images: imagesDer };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var resizeNearestNeighborGradConfig = {
      kernelName: ResizeNearestNeighbor,
      inputsToSave: ['images'],
      gradFunc: function (dy, saved, attrs) {
          var images = saved[0];
          var backPropKernelFunc = function (backend) {
              var alignCorners = attrs.alignCorners;
              return backend.resizeNearestNeighborBackprop(dy, images, alignCorners);
          };
          var inputs = { images: images };
          var imagesDer = function () { return ENGINE.runKernelFunc(backPropKernelFunc, inputs, null /* gradient */, ResizeNearestNeighborGrad, attrs); };
          return { images: imagesDer };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a new tensor with the same values and shape as the specified
   * tensor.
   *
   * ```js
   * const x = tf.tensor([1, 2]);
   *
   * x.clone().print();
   * ```
   *
   * @param x The tensor to clone.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function clone_(x) {
      var $x = convertToTensor(x, 'x', 'clone', null);
      var forward = function () {
          return ENGINE.makeTensorFromDataId($x.dataId, $x.shape, $x.dtype);
      };
      var inputs = { x: $x };
      // Note this op is called tf.identity in python. Hence the kernel name used
      // here.
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Identity);
  }
  var clone = op({ clone_: clone_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Reverses a `tf.Tensor` along a specified axis.
   *
   * Also available are stricter rank-specific methods that assert that `x` is
   * of the given rank:
   *   - `tf.reverse1d`
   *   - `tf.reverse2d`
   *   - `tf.reverse3d`
   *   - `tf.reverse4d`
   *
   * Except `tf.reverse1d` (which does not have axis param), all methods have
   * same signature as this method.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3, 4]);
   *
   * x.reverse().print();
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   *
   * const axis = 1;
   * x.reverse(axis).print();
   * ```
   * @param x The input tensor to be reversed.
   * @param axis The set of dimensions to reverse. Must be in the
   *     range [-rank(x), rank(x)). Defaults to all axes.
   */
  /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */
  function reverse_(x, axis) {
      var $x = convertToTensor(x, 'x', 'reverse');
      var forward = function (backend) {
          var axes = parseAxisParam(axis, $x.shape);
          if ($x.rank === 0) {
              return clone($x);
          }
          var res = backend.reverse($x, axes);
          return reshape(res, $x.shape);
      };
      var inputs = { x: $x };
      var attrs = { dims: axis };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Reverse, attrs);
  }
  var reverse = op({ reverse_: reverse_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var reverseGradConfig = {
      kernelName: Reverse,
      gradFunc: function (dy, saved, attrs) {
          var dims = attrs.dims;
          var axes = parseAxisParam(dims, dy.shape);
          return { x: function () { return reverse(dy, axes); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var roundGradConfig = {
      kernelName: Round,
      gradFunc: function (dy) {
          // TODO(nsthorat): Let gradients be null for cases where we want to stop
          // backpropgation.
          return { x: function () { return zerosLike(dy); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var rsqrtGradConfig = {
      kernelName: Rsqrt,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return neg(div(dy, mul(pow(x, 1.5), 2))); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the truth value of `NOT x` element-wise.
   *
   * ```js
   * const a = tf.tensor1d([false, true], 'bool');
   *
   * a.logicalNot().print();
   * ```
   *
   * @param x The input tensor. Must be of dtype 'bool'.
   */
  /** @doc {heading: 'Operations', subheading: 'Logical'} */
  function logicalNot_(x) {
      var $x = convertToTensor(x, 'x', 'logicalNot', 'bool');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend) { return backend.logicalNot($x); }, inputs, null /* grad */, LogicalNot);
  }
  var logicalNot = op({ logicalNot_: logicalNot_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var selectV2PoolGradConfig = {
      kernelName: SelectV2,
      inputsToSave: ['condition'],
      gradFunc: function (dy, saved) {
          var condition = saved[0];
          return {
              // TODO(julianoks): Return null for condition gradient
              // when backprop supports it.
              condition: function () { return cast(zerosLike(condition), 'float32'); },
              t: function () { return mul(dy, cast(condition, dy.dtype)); },
              e: function () { return mul(dy, cast(logicalNot(condition), dy.dtype)); }
          };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var SELU_SCALEALPHA = 1.7580993408473768599402175208123;
  var SELU_SCALE = 1.0507009873554804934193349852946;

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var seluGradConfig = {
      kernelName: Selu,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return {
              x: function () {
                  var mask = greater(x, scalar(0));
                  var scaleAlpha = scalar(SELU_SCALEALPHA);
                  var scale = scalar(SELU_SCALE);
                  var greaterThanZeroDer = mul(dy, scale);
                  var lessEqualZeroDer = mul(mul(dy, scaleAlpha), exp(cast(x, 'float32')));
                  return where(mask, greaterThanZeroDer, lessEqualZeroDer);
              }
          };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var sigmoidGradConfig = {
      kernelName: Sigmoid,
      outputsToSave: [true],
      gradFunc: function (dy, saved) {
          var y = saved[0];
          return { x: function () { return mul(dy, mul(y, sub(scalar(1), y))); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var signGradConfig = {
      kernelName: Sign,
      gradFunc: function (dy) {
          return { x: function () { return zerosLike(dy); } };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`
   *
   * ```js
   * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
   *
   * x.cos().print();  // or tf.cos(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function cos_(x) {
      var $x = convertToTensor(x, 'x', 'cos');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.cos($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Cos);
  }
  var cos = op({ cos_: cos_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var sinGradConfig = {
      kernelName: Sin,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return mul(cos(cast(x, 'float32')), dy); } };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`
   *
   * ```js
   * const x = tf.tensor1d([0, 1, -1, .7]);
   *
   * x.cosh().print();  // or tf.cosh(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function cosh_(x) {
      var $x = convertToTensor(x, 'x', 'cosh');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.cosh($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Cosh);
  }
  var cosh = op({ cosh_: cosh_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var sinhGradConfig = {
      kernelName: Sinh,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return mul(cosh(cast(x, 'float32')), dy); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Pads a `tf.Tensor` with a given value and paddings.
   *
   * This operation currently only implements the `CONSTANT` mode.
   *
   * Also available are stricter rank-specific methods with the same signature
   * as this method that assert that `paddings` is of given length.
   *   - `tf.pad1d`
   *   - `tf.pad2d`
   *   - `tf.pad3d`
   *   - `tf.pad4d`
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3, 4]);
   * x.pad([[1, 2]]).print();
   * ```
   * @param x The tensor to pad.
   * @param paddings An array of length `R` (the rank of the tensor), where
   * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
   * specifying how much to pad along each dimension of the tensor.
   * @param constantValue The pad value to use. Defaults to 0.
   */
  /** @doc {heading: 'Tensors', subheading: 'Transformations'} */
  function pad_(x, paddings, constantValue) {
      if (constantValue === void 0) { constantValue = 0; }
      var $x = convertToTensor(x, 'x', 'pad');
      if ($x.rank === 0) {
          throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');
      }
      var forward = function (backend, save) {
          save([$x]);
          return backend.pad($x, paddings, constantValue);
      };
      var attrs = { paddings: paddings, constantValue: constantValue };
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, PadV2, attrs);
  }
  var pad = op({ pad_: pad_ });

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function assertParamsValid(input, begin, size) {
      assert(input.rank === begin.length, function () { return "Error in slice" + input.rank + "D: Length of begin " + begin + " must " +
          ("match the rank of the array (" + input.rank + ")."); });
      assert(input.rank === size.length, function () { return "Error in slice" + input.rank + "D: Length of size " + size + " must " +
          ("match the rank of the array (" + input.rank + ")."); });
      var _loop_1 = function (i) {
          assert(begin[i] + size[i] <= input.shape[i], function () { return "Error in slice" + input.rank + "D: begin[" + i + "] + size[" + i + "] " +
              ("(" + (begin[i] + size[i]) + ") would overflow input.shape[" + i + "] (" + input.shape[i] + ")"); });
      };
      for (var i = 0; i < input.rank; ++i) {
          _loop_1(i);
      }
  }
  /** Converts a binary mask to an array of axes. Used in stridedSlice(). */
  function maskToAxes(mask) {
      var axes = [];
      var axis = 0;
      while (mask > 0) {
          if (mask & 1) {
              axes.push(axis);
          }
          mask /= 2;
          axis++;
      }
      return axes;
  }
  /** Computes the output shape given the strided slice params. */
  function computeOutShape(begin, end, strides) {
      var size = [];
      for (var axis = 0; axis < begin.length; axis++) {
          size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);
      }
      return size;
  }
  // Creates full selection at the elided dimensions. If the dimension matches
  // the ellipsis mask, override the current stride value. Otherwise, insert.
  function stridesWithElidedDims(strides, ellipsisInsertionIndex, numElidedAxes, inputShape) {
      var newStrides = strides.slice();
      for (var i = newStrides.length; i < inputShape.length; i++) {
          newStrides.push(1);
      }
      for (var i = 0; i < numElidedAxes; i++) {
          if (i === 0) {
              newStrides[ellipsisInsertionIndex] = 1;
          }
          else {
              newStrides.splice(ellipsisInsertionIndex, 0 /* num elements to delete */, 1 /* element to add */);
              newStrides.pop();
          }
      }
      return newStrides;
  }
  function unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, normalizedAxis) {
      if (normalizedAxis <= ellipsisInsertionIndex) {
          return normalizedAxis;
      }
      return normalizedAxis - (numElidedAxes - 1);
  }
  function getElidedAxes(numElidedAxes, ellipsisInsertionIndex) {
      var elidedAxes = [];
      for (var i = 0; i < numElidedAxes; i++) {
          elidedAxes.push(ellipsisInsertionIndex + i);
      }
      return elidedAxes;
  }
  // Creates full selection at the elided dimensions. If the dimension matches
  // the ellipsis mask, override the current start value. Otherwise, insert.
  function startIndicesWithElidedDims(beginMask, ellipsisInsertionIndex, numElidedAxes, originalBegin, inputShape) {
      var newIndices = inputShape.slice();
      var elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);
      for (var axis = 0; axis < newIndices.length; axis++) {
          if (elidedAxes.indexOf(axis) > -1) {
              newIndices[axis] = 0;
          }
          else {
              var originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
              var originalValue = originalBegin[originalAxis];
              if (beginMask & 1 << originalAxis) {
                  originalValue = 0;
              }
              newIndices[axis] = originalValue;
          }
      }
      return newIndices;
  }
  // Creates full selection at the elided dimensions. If the dimension matches
  // the ellipsis mask, override the current stop value. Otherwise, insert.
  function stopIndicesWithElidedDims(endMask, ellipsisInsertionIndex, numElidedAxes, originalEnd, inputShape) {
      var newIndices = inputShape.slice();
      var elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);
      for (var axis = 0; axis < newIndices.length; axis++) {
          if (elidedAxes.indexOf(axis) > -1) {
              newIndices[axis] = Number.MAX_SAFE_INTEGER;
          }
          else {
              var originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
              var originalValue = originalEnd[originalAxis];
              if (endMask & 1 << originalAxis) {
                  originalValue = Number.MAX_SAFE_INTEGER;
              }
              newIndices[axis] = originalValue;
          }
      }
      for (var i = 0; i < newIndices.length; i++) {
          // Handle negative indices
          var axisSize = inputShape[i];
          if (newIndices[i] < 0) {
              newIndices[i] += axisSize;
          }
          newIndices[i] = clamp(0, newIndices[i], inputShape[i]);
      }
      return newIndices;
  }
  function stridesForAxis(strides, axis, ellipsisMask) {
      var stride = strides[axis];
      if (ellipsisMask & (1 << axis) || stride == null) {
          stride = 1;
      }
      return stride;
  }
  function startForAxis(beginMask, startIndices, strides, inputShape, axis, ellipsisMask) {
      // Begin with the specified index
      var start = startIndices[axis];
      var stride = strides[axis] || 1;
      // Check the axis bit from right of masked axes, or the begin index is not set
      // for the axis.
      if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {
          if (stride > 0) {
              // Forward iteration - use the first element. These values will get
              // clamped below (Note: We could have set them to 0 and axis_size-1, but
              // use lowest() and max() to maintain symmetry with StopForAxis())
              start = Number.MIN_SAFE_INTEGER;
          }
          else {
              // Backward iteration - use the last element.
              start = Number.MAX_SAFE_INTEGER;
          }
      }
      // Handle negative indices
      var axisSize = inputShape[axis];
      if (start < 0) {
          start += axisSize;
      }
      // Clamping
      start = clamp(0, start, axisSize - 1);
      return start;
  }
  function stopForAxis(endMask, stopIndices, strides, inputShape, axis, ellipsisMask) {
      // Begin with the specified index
      var stop = stopIndices[axis];
      var stride = strides[axis] || 1;
      // Check the axis bit from right of masked axes, or if the stop index is not
      // set for this axis.
      if (endMask & (1 << axis) || ellipsisMask & (1 << axis) || stop == null) {
          if (stride > 0) {
              // Forward iteration - use the last element. These values will get
              // clamped below
              stop = Number.MAX_SAFE_INTEGER;
          }
          else {
              // Backward iteration - use the first element.
              stop = Number.MIN_SAFE_INTEGER;
          }
      }
      // Handle negative indices
      var axisSize = inputShape[axis];
      if (stop < 0) {
          stop += axisSize;
      }
      // Clamping
      // Because the end index points one past the last element, we need slightly
      // different clamping ranges depending on the direction.
      if (stride > 0) {
          // Forward iteration
          stop = clamp(0, stop, axisSize);
      }
      else {
          // Backward iteration
          stop = clamp(-1, stop, axisSize - 1);
      }
      return stop;
  }
  /**
   * Returns true if the slice occupies a continous set of elements in the
   * 'flat' space.
   */
  function isSliceContinous(shape, begin, size) {
      // Index of the first axis that has size > 1.
      var firstNonOneAxis = size.length;
      for (var i = 0; i < size.length; i++) {
          if (size[i] > 1) {
              firstNonOneAxis = i;
              break;
          }
      }
      for (var i = firstNonOneAxis + 1; i < size.length; i++) {
          if (begin[i] > 0 || size[i] !== shape[i]) {
              return false;
          }
      }
      return true;
  }
  function computeFlatOffset(begin, strides) {
      var flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;
      for (var i = 0; i < begin.length - 1; i++) {
          flatOffset += begin[i] * strides[i];
      }
      return flatOffset;
  }
  function parseSliceParams(x, begin, size) {
      // The following logic allows for more ergonomic calls.
      var begin_;
      if (typeof begin === 'number') {
          begin_ = [begin].concat(new Array(x.rank - 1).fill(0));
      }
      else if (begin.length < x.rank) {
          begin_ = begin.concat(new Array(x.rank - begin.length).fill(0));
      }
      else {
          begin_ = begin.slice();
      }
      begin_.forEach(function (d) {
          assert(d !== -1, function () { return 'slice() does not support negative begin indexing.'; });
      });
      var size_;
      if (size == null) {
          size_ = new Array(x.rank).fill(-1);
      }
      else if (typeof size === 'number') {
          size_ = [size].concat(new Array(x.rank - 1).fill(-1));
      }
      else if (size.length < x.rank) {
          size_ = size.concat(new Array(x.rank - size.length).fill(-1));
      }
      else {
          size_ = size;
      }
      size_ = size_.map(function (d, i) {
          if (d >= 0) {
              return d;
          }
          else {
              assert(d === -1, function () { return "Negative size values should be exactly -1 but got " +
                  (d + " for the slice() size at index " + i + "."); });
              return x.shape[i] - begin_[i];
          }
      });
      return [begin_, size_];
  }

  var slice_util = {
      __proto__: null,
      assertParamsValid: assertParamsValid,
      maskToAxes: maskToAxes,
      computeOutShape: computeOutShape,
      stridesWithElidedDims: stridesWithElidedDims,
      startIndicesWithElidedDims: startIndicesWithElidedDims,
      stopIndicesWithElidedDims: stopIndicesWithElidedDims,
      stridesForAxis: stridesForAxis,
      startForAxis: startForAxis,
      stopForAxis: stopForAxis,
      isSliceContinous: isSliceContinous,
      computeFlatOffset: computeFlatOffset,
      parseSliceParams: parseSliceParams
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var sliceGradConfig = {
      kernelName: Slice,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved, attrs) {
          var x = saved[0];
          var _a = attrs, begin = _a.begin, size = _a.size;
          var inputShape = x.shape;
          var _b = parseSliceParams(x, begin, size), begin_ = _b[0], size_ = _b[1];
          // Create an Nx2 padding where the first column represents how many
          // zeros are prepended (at start) for each dimension, and the second
          // column indicates how many zeros are appended (at end).
          // The number of zeros to append is the shape of the input
          // elementwise-subtracted by both the begin vector and sizes vector.
          var paddings = [];
          for (var i = 0; i < dy.rank; i++) {
              paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);
          }
          return { x: function () { return pad(dy, paddings); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var softmaxGradConfig = {
      kernelName: Softmax,
      outputsToSave: [true],
      gradFunc: function (dy, saved, attrs) {
          var y = saved[0];
          var dim = attrs.dim;
          var keepDims = true;
          var dyTimesY = mul(dy, y);
          return {
              logits: function () { return sub(dyTimesY, mul(sum$1(dyTimesY, [dim], keepDims), y)); }
          };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes sigmoid element-wise, `1 / (1 + exp(-x))`
   *
   * ```js
   * const x = tf.tensor1d([0, -1, 2, -3]);
   *
   * x.sigmoid().print();  // or tf.sigmoid(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function sigmoid_(x) {
      var $x = convertToTensor(x, 'x', 'sigmoid');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.sigmoid($x);
          save([res]);
          return res;
      }, inputs, null /* grad */, Sigmoid);
  }
  var sigmoid = op({ sigmoid_: sigmoid_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var softplusGradConfig = {
      kernelName: Softplus,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return mul(dy, sigmoid(x)); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * This operation reshapes the "batch" dimension 0 into `M + 1` dimensions of
   * shape `blockShape + [batch]`, interleaves these blocks back into the grid
   * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with
   * the same rank as the input. The spatial dimensions of this intermediate
   * result are then optionally cropped according to `crops` to produce the
   * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise
   * description.
   *
   * ```js
   * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);
   * const blockShape = [2, 2];
   * const crops = [[0, 0], [0, 0]];
   *
   * x.batchToSpaceND(blockShape, crops).print();
   * ```
   *
   * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
   * remainingShape`, where spatialShape has `M` dimensions.
   * @param blockShape A 1-D array. Must have shape `[M]`, all values must
   * be >= 1.
   * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.
   * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input
   * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required
   * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`
   *
   * This operation is equivalent to the following steps:
   *
   * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,
   * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,
   * x.shape[N-1]]`
   *
   * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /
   * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],
   * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
   *
   * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /
   * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *
   * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
   *
   * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`
   * according to `crops` to produce the output of shape: `[batch /
   * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],
   * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -
   * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`
   */
  /** @doc {heading: 'Tensors', subheading: 'Transformations'} */
  function batchToSpaceND_(x, blockShape, crops) {
      var $x = convertToTensor(x, 'x', 'batchToSpaceND');
      var prod = blockShape.reduce(function (a, b) { return a * b; });
      assert($x.rank >= 1 + blockShape.length, function () { return "input rank is " + $x.rank + " but should be > than blockShape.length " + blockShape.length; });
      assert(crops.length === blockShape.length, function () { return "crops.length is " + crops.length + " but should be equal to blockShape.length  " + blockShape.length; });
      assert($x.shape[0] % prod === 0, function () { return "input tensor batch is " + $x.shape[0] + " but is not divisible by the product of " +
          ("the elements of blockShape " + blockShape.join(' * ') + " === " + prod); });
      var forward = function (backend) {
          return backend.batchToSpaceND($x, blockShape, crops);
      };
      var inputs = { x: $x };
      var attrs = { blockShape: blockShape, crops: crops };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, BatchToSpaceND, attrs);
  }
  var batchToSpaceND = op({ batchToSpaceND_: batchToSpaceND_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var spaceToBatchNDGradConfig = {
      kernelName: SpaceToBatchND,
      gradFunc: function (dy, saved, attrs) {
          var _a = attrs, blockShape = _a.blockShape, paddings = _a.paddings;
          return { x: function () { return batchToSpaceND(dy, blockShape, paddings); } };
      }
  };

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function assertParamsConsistent(shapes, axis) {
      var rank = shapes[0].length;
      shapes.forEach(function (shape, i) {
          assert(shape.length === rank, function () {
              return "Error in concat" + rank + "D: rank of tensors[" + i + "] must be the same " +
                  ("as the rank of the rest (" + rank + ")");
          });
      });
      assert(axis >= 0 && axis < rank, function () { return "Error in concat" + rank + "D: axis must be between 0 and " + (rank - 1) + "."; });
      var firstShape = shapes[0];
      shapes.forEach(function (shape, i) {
          for (var r = 0; r < rank; r++) {
              assert((r === axis) || (shape[r] === firstShape[r]), function () { return "Error in concat" + rank + "D: Shape of tensors[" + i + "] (" + shape + ") " +
                  ("does not match the shape of the rest (" + firstShape + ") ") +
                  ("along the non-concatenated axis " + i + "."); });
          }
      });
  }
  function computeOutShape$1(shapes, axis) {
      var outputShape = shapes[0].slice();
      for (var i = 1; i < shapes.length; i++) {
          outputShape[axis] += shapes[i][axis];
      }
      return outputShape;
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a `tf.Tensor` with the provided values, shape and dtype.
   *
   * ```js
   * // Pass an array of values to create a vector.
   * tf.tensor([1, 2, 3, 4]).print();
   * ```
   *
   * ```js
   * // Pass a nested array of values to make a matrix or a higher
   * // dimensional tensor.
   * tf.tensor([[1, 2], [3, 4]]).print();
   * ```
   *
   * ```js
   * // Pass a flat array and specify a shape yourself.
   * tf.tensor([1, 2, 3, 4], [2, 2]).print();
   * ```
   *
   * @param values The values of the tensor. Can be nested array of numbers,
   *     or a flat array, or a `TypedArray`. If the values are strings,
   *     they will be encoded as utf-8 and kept as `Uint8Array[]`.
   * @param shape The shape of the tensor. Optional. If not provided,
   *   it is inferred from `values`.
   * @param dtype The data type.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function tensor(values, shape, dtype) {
      var inferredShape = inferShape(values, dtype);
      return makeTensor(values, shape, inferredShape, dtype);
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Concatenates a list of `tf.Tensor`s along a given axis.
   *
   * The tensors ranks and types must match, and their sizes must match in all
   * dimensions except `axis`.
   *
   * Also available are stricter rank-specific methods that assert that
   * `tensors` are of the given rank:
   *   - `tf.concat1d`
   *   - `tf.concat2d`
   *   - `tf.concat3d`
   *   - `tf.concat4d`
   *
   * Except `tf.concat1d` (which does not have axis param), all methods have
   * same signature as this method.
   *
   * ```js
   * const a = tf.tensor1d([1, 2]);
   * const b = tf.tensor1d([3, 4]);
   * a.concat(b).print();  // or a.concat(b)
   * ```
   *
   * ```js
   * const a = tf.tensor1d([1, 2]);
   * const b = tf.tensor1d([3, 4]);
   * const c = tf.tensor1d([5, 6]);
   * tf.concat([a, b, c]).print();
   * ```
   *
   * ```js
   * const a = tf.tensor2d([[1, 2], [10, 20]]);
   * const b = tf.tensor2d([[3, 4], [30, 40]]);
   * const axis = 1;
   * tf.concat([a, b], axis).print();
   * ```
   * @param tensors A list of tensors to concatenate.
   * @param axis The axis to concate along. Defaults to 0 (the first dim).
   */
  /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */
  function concat_(tensors, axis) {
      if (axis === void 0) { axis = 0; }
      assert(tensors.length >= 1, function () { return 'Pass at least one tensor to concat'; });
      var $tensors = convertToTensorArray(tensors, 'tensors', 'concat');
      if ($tensors[0].dtype === 'complex64') {
          $tensors.forEach(function (tensor) {
              if (tensor.dtype !== 'complex64') {
                  throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype " + tensor.dtype + ". ");
              }
          });
      }
      var $axis = parseAxisParam(axis, $tensors[0].shape)[0];
      var outShape = computeOutShape$1($tensors.map(function (t) { return t.shape; }), $axis);
      if (sizeFromShape(outShape) === 0) {
          return tensor([], outShape);
      }
      // Keep only non-empty tensors (ignore tensors with 0 in their shape).
      $tensors = $tensors.filter(function (t) { return t.size > 0; });
      if ($tensors.length === 1) {
          return $tensors[0];
      }
      var shapes = $tensors.map(function (t) { return t.shape; });
      assertParamsConsistent(shapes, $axis);
      var forward = function (backend, save) {
          var res = backend.concat($tensors, $axis);
          save($tensors);
          return res;
      };
      var inputs = $tensors;
      var attr = { axis: axis };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Concat, attr);
  }
  var concat = op({ concat_: concat_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var splitVGradConfig = {
      kernelName: SplitV,
      gradFunc: function (dy, saved, attrs) {
          var axis = attrs.axis;
          return { x: function () { return concat(dy, axis); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var sqrtGradConfig = {
      kernelName: Sqrt,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return div(dy, mul(sqrt(cast(x, 'float32')), 2)); } };
      }
  };

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var squareGradConfig = {
      kernelName: Square,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return mul(dy, mul(x.toFloat(), 2)); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var squaredDifferenceGradConfig = {
      kernelName: SquaredDifference,
      inputsToSave: ['a', 'b'],
      gradFunc: function (dy, saved) {
          var a = saved[0], b = saved[1];
          var two = scalar(2);
          var derA = function () { return mul(dy, mul(two, sub(a, b))); };
          var derB = function () { return mul(dy, mul(two, sub(b, a))); };
          return { a: derA, b: derB };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var stepGradConfig = {
      kernelName: Step,
      gradFunc: function (dy) {
          // TODO(manrajgrover): Return null for gradients when backprop supports
          // it.
          return { x: function () { return zerosLike(dy); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var subGradConfig = {
      kernelName: Sub,
      inputsToSave: ['a', 'b'],
      gradFunc: function (dy, saved) {
          var a = saved[0], b = saved[1];
          var outShape = assertAndGetBroadcastShape(a.shape, b.shape);
          var derA = function () {
              var res = dy;
              var reduceAxes = getReductionAxes(a.shape, outShape);
              if (reduceAxes.length > 0) {
                  res = sum$1(res, reduceAxes);
              }
              return reshape(res, a.shape);
          };
          var derB = function () {
              var res = dy;
              var reduceAxes = getReductionAxes(b.shape, outShape);
              if (reduceAxes.length > 0) {
                  res = sum$1(res, reduceAxes);
              }
              return reshape(neg(res), b.shape);
          };
          return { a: derA, b: derB };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a `tf.Tensor` with all elements set to 1.
   *
   * ```js
   * tf.ones([2, 2]).print();
   * ```
   *
   * @param shape An array of integers defining the output tensor shape.
   * @param dtype The type of an element in the resulting tensor. Defaults to
   *     'float'.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function ones$1(shape, dtype) {
      if (dtype === void 0) { dtype = 'float32'; }
      if (dtype === 'complex64') {
          var real = ones$1(shape, 'float32');
          var imag = zeros(shape, 'float32');
          return complex(real, imag);
      }
      var values = makeOnesTypedArray(sizeFromShape(shape), dtype);
      return ENGINE.makeTensor(values, shape, dtype);
  }

  /**
   * @license
   * Copyright 2020 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var sumGradConfig = {
      kernelName: Sum,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved, attrs) {
          var x = saved[0];
          var expandedDyShape = x.shape.slice();
          var axis = attrs.axis;
          var axes = parseAxisParam(axis, x.shape);
          axes.forEach(function (axis) {
              expandedDyShape[axis] = 1;
          });
          var expandedDy = reshape(dy, expandedDyShape);
          var derX = mul(expandedDy, ones$1(x.shape, 'float32'));
          return { x: function () { return derX; } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var tanGradConfig = {
      kernelName: Tan,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved) {
          var x = saved[0];
          return { x: function () { return div(dy, square(cos(x))); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var tanhGradConfig = {
      kernelName: Tanh,
      outputsToSave: [true],
      gradFunc: function (dy, saved) {
          var y = saved[0];
          return { x: function () { return mul(sub(scalar(1), square(y)), dy); } };
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`
   * and is of size `size`.
   *
   * Also available are stricter rank-specific methods with the same signature
   * as this method that assert that `x` is of the given rank:
   *   - `tf.slice1d`
   *   - `tf.slice2d`
   *   - `tf.slice3d`
   *   - `tf.slice4d`
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3, 4]);
   *
   * x.slice([1], [2]).print();
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   *
   * x.slice([1, 0], [1, 2]).print();
   * ```
   * @param x The input `tf.Tensor` to slice from.
   * @param begin The coordinates to start the slice from. The length can be
   *     less than the rank of x - the rest of the axes will have implicit 0 as
   *     start. Can also be a single number, in which case it specifies the
   *     first axis.
   * @param size The size of the slice. The length can be less than the rank of
   *     x - the rest of the axes will have implicit -1. A value of -1 requests
   *     the rest of the dimensions in the axis. Can also be a single number,
   *     in which case it specifies the size of the first axis.
   */
  /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */
  function slice_(x, begin, size) {
      var $x = convertToTensor(x, 'x', 'slice');
      if ($x.rank === 0) {
          throw new Error('Slicing scalar is not possible');
      }
      var _a = parseSliceParams($x, begin, size), begin_ = _a[0], size_ = _a[1];
      assertParamsValid($x, begin_, size_);
      var forward = function (backend, save) {
          save([$x]);
          return backend.slice($x, begin_, size_);
      };
      var inputs = { x: $x };
      var attrs = { begin: begin, size: size };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Slice, attrs);
  }
  var slice = op({ slice_: slice_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var tileGradConfig = {
      kernelName: Tile,
      inputsToSave: ['x'],
      gradFunc: function (dy, saved, attrs) {
          var x = saved[0];
          var reps = attrs.reps;
          var derX = function () {
              var xGrad = zerosLike(x);
              // TODO(cais): Maybe reduce memory footprint by avoiding repeated
              // slicing.
              if (x.rank === 1) {
                  for (var i = 0; i < reps[0]; ++i) {
                      xGrad = add(xGrad, slice(dy, [i * x.shape[0]], [x.shape[0]]));
                  }
              }
              else if (x.rank === 2) {
                  for (var i = 0; i < reps[0]; ++i) {
                      for (var j = 0; j < reps[1]; ++j) {
                          xGrad = add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1]], [
                              x.shape[0], x.shape[1]
                          ]));
                      }
                  }
              }
              else if (x.rank === 3) {
                  for (var i = 0; i < reps[0]; ++i) {
                      for (var j = 0; j < reps[1]; ++j) {
                          for (var k = 0; k < reps[2]; ++k) {
                              xGrad =
                                  add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));
                          }
                      }
                  }
              }
              else if (x.rank === 4) {
                  for (var i = 0; i < reps[0]; ++i) {
                      for (var j = 0; j < reps[1]; ++j) {
                          for (var k = 0; k < reps[2]; ++k) {
                              for (var l = 0; l < reps[3]; ++l) {
                                  xGrad =
                                      add(xGrad, slice(dy, [
                                          i * x.shape[0], j * x.shape[1], k * x.shape[2],
                                          l * x.shape[3]
                                      ], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));
                              }
                          }
                      }
                  }
              }
              else {
                  throw new Error("Gradient for tile operation is not implemented for rank-" +
                      (x.rank + " tensors yet."));
              }
              return xGrad;
          };
          return { x: derX };
      },
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var transposeGradConfig = {
      kernelName: Transpose,
      gradFunc: function (dy, saved, attrs) {
          var transposeAttrs = attrs;
          var perm = transposeAttrs.perm;
          var undoPerm = getUndoAxesPermutation(perm);
          return { x: function () { return transpose(dy, undoPerm); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension
   * into the tensor's shape.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3, 4]);
   * const axis = 1;
   * x.expandDims(axis).print();
   * ```
   *
   * @param x The input tensor whose dimensions to be expanded.
   * @param axis The dimension index at which to insert shape of `1`. Defaults
   *     to 0 (the first dimension).
   */
  /** @doc {heading: 'Tensors', subheading: 'Transformations'} */
  function expandDims_(x, axis) {
      if (axis === void 0) { axis = 0; }
      var parseAs = null;
      var $x = convertToTensor(x, 'x', 'expandDims', parseAs);
      assert(axis <= $x.rank, function () { return 'Axis must be <= rank of the tensor'; });
      var newShape = $x.shape.slice();
      if (axis < 0) {
          // Negative value is counted from the tail of rank.
          assert(-($x.rank + 1) <= axis, function () { return "Axis must be in the interval [" + -($x.rank + 1) + ", " + $x.rank + "]"; });
          axis = $x.rank + axis + 1;
      }
      newShape.splice(axis, 0, 1);
      return reshape($x, newShape);
  }
  var expandDims = op({ expandDims_: expandDims_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.
   *
   * ```js
   * const a = tf.tensor1d([1, 2]);
   * const b = tf.tensor1d([3, 4]);
   * const c = tf.tensor1d([5, 6]);
   * tf.stack([a, b, c]).print();
   * ```
   *
   * @param tensors A list of tensor objects with the same shape and dtype.
   * @param axis The axis to stack along. Defaults to 0 (the first dim).
   */
  /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */
  function stack_(tensors, axis) {
      if (axis === void 0) { axis = 0; }
      var $tensors = convertToTensorArray(tensors, 'tensors', 'stack');
      assert($tensors.length >= 1, function () { return 'Pass at least one tensor to tf.stack'; });
      if ($tensors.length === 1) {
          return expandDims($tensors[0], axis);
      }
      var rank = $tensors[0].rank;
      var shape = $tensors[0].shape;
      var dtype = $tensors[0].dtype;
      assert(axis <= rank, function () { return 'Axis must be <= rank of the tensor'; });
      $tensors.forEach(function (t) {
          assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');
          assert(dtype === t.dtype, function () { return 'All tensors passed to stack must have matching dtypes'; });
      });
      var expandedTensors = $tensors.map(function (t) { return expandDims(t, axis); });
      // Stack exists in the TensorFlow C++ API
      // (https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/stack) but not
      // in
      // https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/core/ops/ops.pbtxt.
      // Therefore we are treating it like a high-level op rather than
      // creating a dedicated stack kernel.
      return concat(expandedTensors, axis);
  }
  var stack = op({ stack_: stack_ });

  /**
   * @license
   * Copyright 2020 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var unpackGradConfig = {
      kernelName: Unpack,
      gradFunc: function (dy, saved, attrs) {
          var unpackAttrs = attrs;
          var axis = unpackAttrs.axis;
          return { value: function () { return stack(dy, axis); } };
      }
  };

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var PARALLELIZE_THRESHOLD = 30;
  function computeOptimalWindowSize(inSize) {
      if (inSize <= PARALLELIZE_THRESHOLD) {
          return inSize;
      }
      return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function segOpComputeOptimalWindowSize(inSize, numSegments) {
      var done = false;
      var res;
      if (inSize <= PARALLELIZE_THRESHOLD) {
          res = inSize;
          done = true;
      }
      else {
          res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));
      }
      while (!done) {
          if (res > numSegments || res === inSize) {
              done = true;
          }
          else {
              res = nearestDivisor(inSize, res + 1);
          }
      }
      return res;
  }
  function computeOutShape$2(aShape, axis, numSegments) {
      var outShape = [];
      var rank = aShape.length;
      for (var dim = 0; dim < rank; dim++) {
          if (dim !== axis) {
              outShape.push(aShape[dim]);
          }
          else {
              outShape.push(numSegments);
          }
      }
      return outShape;
  }
  function collectGatherOpShapeInfo(x, indices, axis) {
      var dimSize = x.shape[axis];
      var outputShape = [];
      var batchSize = 1;
      var sliceSize = 1;
      for (var i = 0; i < axis; i++) {
          outputShape.push(x.shape[i]);
          batchSize *= x.shape[i];
      }
      for (var i = 0; i < indices.rank; i++) {
          outputShape.push(indices.shape[i]);
      }
      for (var i = axis + 1; i < x.rank; i++) {
          outputShape.push(x.shape[i]);
          sliceSize *= x.shape[i];
      }
      return { batchSize: batchSize, sliceSize: sliceSize, dimSize: dimSize, outputShape: outputShape };
  }

  var segment_util = {
      __proto__: null,
      segOpComputeOptimalWindowSize: segOpComputeOptimalWindowSize,
      computeOutShape: computeOutShape$2,
      collectGatherOpShapeInfo: collectGatherOpShapeInfo
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Gather slices from tensor `x`'s axis `axis` according to `indices`.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3, 4]);
   * const indices = tf.tensor1d([1, 3, 3], 'int32');
   *
   * x.gather(indices).print();
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   * const indices = tf.tensor1d([1, 1, 0], 'int32');
   *
   * x.gather(indices).print();
   * ```
   * @param x The input tensor whose slices to be gathered.
   * @param indices The indices of the values to extract.
   * @param axis The axis over which to select values. Defaults to 0.
   */
  /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */
  function gather_(x, indices, axis) {
      if (axis === void 0) { axis = 0; }
      var $x = convertToTensor(x, 'x', 'gather');
      var $indices = convertToTensor(indices, 'indices', 'gather', 'int32');
      var inputs = { x: $x, indices: $indices };
      var attrs = { axis: axis };
      var forward = function (backend, save) {
          var parsedAxis = parseAxisParam(axis, $x.shape)[0];
          var shapeInfo = collectGatherOpShapeInfo($x, $indices, parsedAxis);
          var res = backend.gather($x, $indices.flatten(), parsedAxis);
          save([$x, $indices]);
          return res.reshape(shapeInfo.outputShape);
      };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, GatherV2, attrs);
  }
  var gather = op({ gather_: gather_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the max of a and b (`a > b ? a : b`) element-wise.
   * Supports broadcasting.
   *
   * We also expose `tf.maximumStrict` which has the same signature as this op and
   * asserts that `a` and `b` are the same shape (does not broadcast).
   *
   * ```js
   * const a = tf.tensor1d([1, 4, 3, 16]);
   * const b = tf.tensor1d([1, 2, 9, 4]);
   *
   * a.maximum(b).print();  // or tf.maximum(a, b)
   * ```
   *
   * ```js
   * // Broadcast maximum a with b.
   * const a = tf.tensor1d([2, 4, 6, 8]);
   * const b = tf.scalar(5);
   *
   * a.maximum(b).print();  // or tf.maximum(a, b)
   * ```
   *
   * @param a The first tensor.
   * @param b The second tensor. Must have the same type as `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */
  function maximum_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'maximum');
      var $b = convertToTensor(b, 'b', 'maximum');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      if ($a.dtype === 'bool') {
          $a = cast($a, 'int32');
          $b = cast($b, 'int32');
      }
      assertAndGetBroadcastShape($a.shape, $b.shape);
      var forward = function (backend, save) {
          var res = backend.maximum($a, $b);
          save([$a, $b]);
          return res;
      };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Maximum);
  }
  var maximum = op({ maximum_: maximum_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var unsortedSegmentSumGradConfig = {
      kernelName: UnsortedSegmentSum,
      inputsToSave: ['segmentIds'],
      gradFunc: function (dy, saved) {
          var segmentIds = saved[0];
          var derX = function () {
              return gatherDropNegatives(dy, segmentIds);
          };
          return { x: derX };
      }
  };
  function gatherDropNegatives(x, indices) {
      // Helper function for unsorted segment ops. Gathers params for
      // positive segment ids and gathers 0 for inputs with negative segment id.
      // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py
      var zeroClippedIndices = maximum(indices, zerosLike(indices));
      var gathered = gather(x, zeroClippedIndices);
      var isPositive = greaterEqual(indices, scalar(0, 'int32'));
      var numIters = gathered.rank - isPositive.rank;
      for (var i = 0; i < numIters; ++i) {
          isPositive = expandDims(isPositive, i + 1);
      }
      isPositive = logicalAnd(isPositive, ones$1(gathered.shape, 'bool'));
      var zeroSlice = zerosLike(gathered);
      return where(isPositive, gathered, zeroSlice);
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var zerosLikeGradConfig = {
      kernelName: ZerosLike,
      gradFunc: function (dy) {
          return { x: function () { return zerosLike(dy); } };
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // Export all kernel configs here so that the package can auto register them
  var gradConfigs = [
      absGradConfig,
      acosGradConfig,
      acoshGradConfig,
      addGradConfig,
      addNGradConfig,
      argMaxGradConfig,
      argMinGradConfig,
      asinGradConfig,
      asinhGradConfig,
      atan2GradConfig,
      atanGradConfig,
      atanhGradConfig,
      avgPool3DGradConfig,
      avgPoolGradConfig,
      batchMatMulGradConfig,
      batchToSpaceNDGradConfig,
      broadcastToGradConfig,
      castGradConfig,
      ceilGradConfig,
      clipByValueGradConfig,
      concatGradConfig,
      conv2DBackpropInputGradConfig,
      conv2DGradConfig,
      conv3DGradConfig,
      cosGradConfig,
      coshGradConfig,
      cumsumGradConfig,
      depthwiseConv2dNativeGradConfig,
      dilation2dGradConfig,
      divGradConfig,
      eluGradConfig,
      erfGradConfig,
      expGradConfig,
      expm1GradConfig,
      floorDivGradConfig,
      floorGradConfig,
      fusedBatchNormGradConfig,
      gatherGradConfig,
      greaterEqualGradConfig,
      identityGradConfig,
      isFiniteGradConfig,
      isInfGradConfig,
      isNanGradConfig,
      log1pGradConfig,
      logGradConfig,
      logSoftmaxGradConfig,
      lrnGradConfig,
      maxGradConfig,
      maxGradConfig,
      maximumGradConfig,
      maxPool3DGradConfig,
      maxPoolGradConfig,
      minGradConfig,
      minimumGradConfig,
      modGradConfig,
      multiplyGradConfig,
      negateGradConfig,
      oneHotGradConfig,
      onesLikeGradConfig,
      padV2GradConfig,
      padV2GradConfig,
      powGradConfig,
      preluGradConfig,
      reciprocalGradConfig,
      relu6GradConfig,
      reluGradConfig,
      reshapeGradConfig,
      resizeBilinearGradConfig,
      resizeNearestNeighborGradConfig,
      reverseGradConfig,
      roundGradConfig,
      rsqrtGradConfig,
      selectV2PoolGradConfig,
      seluGradConfig,
      sigmoidGradConfig,
      signGradConfig,
      sinGradConfig,
      sinhGradConfig,
      sliceGradConfig,
      softmaxGradConfig,
      softplusGradConfig,
      spaceToBatchNDGradConfig,
      spaceToBatchNDGradConfig,
      splitVGradConfig,
      splitVGradConfig,
      sqrtGradConfig,
      squaredDifferenceGradConfig,
      squareGradConfig,
      stepGradConfig,
      subGradConfig,
      sumGradConfig,
      tanGradConfig,
      tanhGradConfig,
      tileGradConfig,
      transposeGradConfig,
      unpackGradConfig,
      unsortedSegmentSumGradConfig,
      zerosLikeGradConfig
  ];
  for (var _i = 0, gradConfigs_1 = gradConfigs; _i < gradConfigs_1.length; _i++) {
      var gradientConfig = gradConfigs_1[_i];
      registerGradient(gradientConfig);
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var PlatformBrowser = /** @class */ (function () {
      function PlatformBrowser() {
      }
      PlatformBrowser.prototype.fetch = function (path, init) {
          return fetch(path, init);
      };
      PlatformBrowser.prototype.now = function () {
          return performance.now();
      };
      PlatformBrowser.prototype.encode = function (text, encoding) {
          if (encoding !== 'utf-8' && encoding !== 'utf8') {
              throw new Error("Browser's encoder only supports utf-8, but got " + encoding);
          }
          if (this.textEncoder == null) {
              this.textEncoder = new TextEncoder();
          }
          return this.textEncoder.encode(text);
      };
      PlatformBrowser.prototype.decode = function (bytes, encoding) {
          return new TextDecoder(encoding).decode(bytes);
      };
      return PlatformBrowser;
  }());
  if (env().get('IS_BROWSER')) {
      env().setPlatform('browser', new PlatformBrowser());
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // We are wrapping this within an object so it can be stubbed by Jasmine.
  var getNodeFetch = {
      // tslint:disable-next-line:no-require-imports
      importFetch: function () { return require('node-fetch'); }
  };
  var systemFetch;
  var PlatformNode = /** @class */ (function () {
      function PlatformNode() {
          // tslint:disable-next-line:no-require-imports
          this.util = require('util');
          // According to the spec, the built-in encoder can do only UTF-8 encoding.
          // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder
          this.textEncoder = new this.util.TextEncoder();
      }
      PlatformNode.prototype.fetch = function (path, requestInits) {
          if (env().global.fetch != null) {
              return env().global.fetch(path, requestInits);
          }
          if (systemFetch == null) {
              systemFetch = getNodeFetch.importFetch();
          }
          return systemFetch(path, requestInits);
      };
      PlatformNode.prototype.now = function () {
          var time = process.hrtime();
          return time[0] * 1000 + time[1] / 1000000;
      };
      PlatformNode.prototype.encode = function (text, encoding) {
          if (encoding !== 'utf-8' && encoding !== 'utf8') {
              throw new Error("Node built-in encoder only supports utf-8, but got " + encoding);
          }
          return this.textEncoder.encode(text);
      };
      PlatformNode.prototype.decode = function (bytes, encoding) {
          if (bytes.length === 0) {
              return '';
          }
          return new this.util.TextDecoder(encoding).decode(bytes);
      };
      return PlatformNode;
  }());
  if (env().get('IS_NODE')) {
      env().setPlatform('node', new PlatformNode());
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /* Type definitions for exporting and importing of models. */
  /**
   * A map from Tensor dtype to number of bytes per element of the Tensor.
   */
  var DTYPE_VALUE_SIZE_MAP = {
      'float32': 4,
      'float16': 2,
      'int32': 4,
      'uint16': 2,
      'uint8': 1,
      'bool': 1,
      'complex64': 8
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** Number of bytes reserved for the length of the string. (32bit integer). */
  var NUM_BYTES_STRING_LENGTH = 4;
  /**
   * Encode a map from names to weight values as an ArrayBuffer, along with an
   * `Array` of `WeightsManifestEntry` as specification of the encoded weights.
   *
   * This function does not perform sharding.
   *
   * This function is the reverse of `decodeWeights`.
   *
   * @param tensors A map ("dict") from names to tensors.
   * @param group Group to which the weights belong (optional).
   * @returns A `Promise` of
   *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s
   *     concatenated.
   *   - An `Array` of `WeightManifestEntry`s, carrying information including
   *     tensor names, `dtype`s and shapes.
   * @throws Error: on unsupported tensor `dtype`.
   */
  function encodeWeights(tensors, group) {
      return __awaiter(this, void 0, void 0, function () {
          var specs, dataPromises, names, _loop_1, i, tensorValues;
          var _this = this;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      specs = [];
                      dataPromises = [];
                      names = Array.isArray(tensors) ?
                          tensors.map(function (tensor) { return tensor.name; }) :
                          Object.keys(tensors);
                      _loop_1 = function (i) {
                          var name_1 = names[i];
                          var t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name_1];
                          if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&
                              t.dtype !== 'string' && t.dtype !== 'complex64') {
                              throw new Error("Unsupported dtype in weight '" + name_1 + "': " + t.dtype);
                          }
                          var spec = { name: name_1, shape: t.shape, dtype: t.dtype };
                          if (t.dtype === 'string') {
                              var utf8bytes = new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                                  var vals, totalNumBytes, bytes, offset, i_1, val, bytesOfLength;
                                  return __generator(this, function (_a) {
                                      switch (_a.label) {
                                          case 0: return [4 /*yield*/, t.bytes()];
                                          case 1:
                                              vals = _a.sent();
                                              totalNumBytes = vals.reduce(function (p, c) { return p + c.length; }, 0) +
                                                  NUM_BYTES_STRING_LENGTH * vals.length;
                                              bytes = new Uint8Array(totalNumBytes);
                                              offset = 0;
                                              for (i_1 = 0; i_1 < vals.length; i_1++) {
                                                  val = vals[i_1];
                                                  bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);
                                                  bytes.set(bytesOfLength, offset);
                                                  offset += NUM_BYTES_STRING_LENGTH;
                                                  bytes.set(val, offset);
                                                  offset += val.length;
                                              }
                                              resolve(bytes);
                                              return [2 /*return*/];
                                      }
                                  });
                              }); });
                              dataPromises.push(utf8bytes);
                          }
                          else {
                              dataPromises.push(t.data());
                          }
                          if (group != null) {
                              spec.group = group;
                          }
                          specs.push(spec);
                      };
                      for (i = 0; i < names.length; ++i) {
                          _loop_1(i);
                      }
                      return [4 /*yield*/, Promise.all(dataPromises)];
                  case 1:
                      tensorValues = _a.sent();
                      return [2 /*return*/, { data: concatenateTypedArrays(tensorValues), specs: specs }];
              }
          });
      });
  }
  /**
   * Decode flat ArrayBuffer as weights.
   *
   * This function does not handle sharding.
   *
   * This function is the reverse of `encodeWeights`.
   *
   * @param buffer A flat ArrayBuffer carrying the binary values of the tensors
   *   concatenated in the order specified in `specs`.
   * @param specs Specifications of the names, dtypes and shapes of the tensors
   *   whose value are encoded by `buffer`.
   * @return A map from tensor name to tensor value, with the names corresponding
   *   to names in `specs`.
   * @throws Error, if any of the tensors has unsupported dtype.
   */
  function decodeWeights(buffer, specs) {
      // TODO(adarob, cais): Support quantization.
      var out = {};
      var float16Decode;
      var offset = 0;
      for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
          var spec = specs_1[_i];
          var name_2 = spec.name;
          var dtype = spec.dtype;
          var shape = spec.shape;
          var size = sizeFromShape(shape);
          var values = void 0;
          if ('quantization' in spec) {
              var quantization = spec.quantization;
              if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {
                  if (!('min' in quantization && 'scale' in quantization)) {
                      throw new Error("Weight " + spec.name + " with quantization " + quantization.dtype + " " +
                          "doesn't have corresponding metadata min and scale.");
                  }
              }
              else if (quantization.dtype === 'float16') {
                  if (dtype !== 'float32') {
                      throw new Error("Weight " + spec.name + " is quantized with " + quantization.dtype + " " +
                          ("which only supports weights of type float32 not " + dtype + "."));
                  }
              }
              else {
                  throw new Error("Weight " + spec.name + " has unknown " +
                      ("quantization dtype " + quantization.dtype + ". ") +
                      "Supported quantization dtypes are: " +
                      "'uint8', 'uint16', and 'float16'.");
              }
              var quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];
              var byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);
              var quantizedArray = (quantization.dtype === 'uint8') ?
                  new Uint8Array(byteBuffer) :
                  new Uint16Array(byteBuffer);
              if (dtype === 'float32') {
                  if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {
                      values = new Float32Array(quantizedArray.length);
                      for (var i = 0; i < quantizedArray.length; i++) {
                          var v = quantizedArray[i];
                          values[i] = v * quantization.scale + quantization.min;
                      }
                  }
                  else if (quantization.dtype === 'float16') {
                      if (float16Decode === undefined) {
                          float16Decode = getFloat16Decoder();
                      }
                      values = float16Decode(quantizedArray);
                  }
                  else {
                      throw new Error("Unsupported quantization type " + quantization.dtype + " " +
                          "for weight type float32.");
                  }
              }
              else if (dtype === 'int32') {
                  if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {
                      throw new Error("Unsupported quantization type " + quantization.dtype + " " +
                          "for weight type int32.");
                  }
                  values = new Int32Array(quantizedArray.length);
                  for (var i = 0; i < quantizedArray.length; i++) {
                      var v = quantizedArray[i];
                      values[i] = Math.round(v * quantization.scale + quantization.min);
                  }
              }
              else {
                  throw new Error("Unsupported dtype in weight '" + name_2 + "': " + dtype);
              }
              offset += size * quantizationSizeFactor;
          }
          else if (dtype === 'string') {
              var size_1 = sizeFromShape(spec.shape);
              values = [];
              for (var i = 0; i < size_1; i++) {
                  var byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];
                  offset += NUM_BYTES_STRING_LENGTH;
                  var bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));
                  values.push(bytes);
                  offset += byteLength;
              }
          }
          else {
              var dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];
              var byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);
              if (dtype === 'float32') {
                  values = new Float32Array(byteBuffer);
              }
              else if (dtype === 'int32') {
                  values = new Int32Array(byteBuffer);
              }
              else if (dtype === 'bool') {
                  values = new Uint8Array(byteBuffer);
              }
              else if (dtype === 'complex64') {
                  values = new Float32Array(byteBuffer);
                  var real = new Float32Array(values.length / 2);
                  var image = new Float32Array(values.length / 2);
                  for (var i = 0; i < real.length; i++) {
                      real[i] = values[i * 2];
                      image[i] = values[i * 2 + 1];
                  }
                  var realTensor = tensor(real, shape, 'float32');
                  var imageTensor = tensor(image, shape, 'float32');
                  out[name_2] = complex(realTensor, imageTensor);
              }
              else {
                  throw new Error("Unsupported dtype in weight '" + name_2 + "': " + dtype);
              }
              offset += size * dtypeFactor;
          }
          if (dtype !== 'complex64') {
              out[name_2] = tensor(values, shape, dtype);
          }
      }
      return out;
  }
  /**
   * Concatenate TypedArrays into an ArrayBuffer.
   */
  function concatenateTypedArrays(xs) {
      // TODO(adarob, cais): Support quantization.
      if (xs === null) {
          throw new Error("Invalid input value: " + JSON.stringify(xs));
      }
      var totalByteLength = 0;
      // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'
      // can have a different byte length from that of the `TypedArray` itself,
      // for example, when the `TypedArray` is created from an offset in an
      // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match
      // the `TypedArray` in byte length. If an element of `xs` does not show
      // this property, a new `TypedArray` that satisfy this property will be
      // constructed and pushed into `normalizedXs`.
      var normalizedXs = [];
      xs.forEach(function (x) {
          totalByteLength += x.byteLength;
          // tslint:disable:no-any
          normalizedXs.push(x.byteLength === x.buffer.byteLength ? x :
              new x.constructor(x));
          if (!(x instanceof Float32Array || x instanceof Int32Array ||
              x instanceof Uint8Array)) {
              throw new Error("Unsupported TypedArray subtype: " + x.constructor.name);
          }
          // tslint:enable:no-any
      });
      var y = new Uint8Array(totalByteLength);
      var offset = 0;
      normalizedXs.forEach(function (x) {
          y.set(new Uint8Array(x.buffer), offset);
          offset += x.byteLength;
      });
      return y.buffer;
  }
  // Use Buffer on Node.js instead of Blob/atob/btoa
  var useNodeBuffer = typeof Buffer !== 'undefined' &&
      (typeof Blob === 'undefined' || typeof atob === 'undefined' ||
          typeof btoa === 'undefined');
  /**
   * Calculate the byte length of a JavaScript string.
   *
   * Note that a JavaScript string can contain wide characters, therefore the
   * length of the string is not necessarily equal to the byte length.
   *
   * @param str Input string.
   * @returns Byte length.
   */
  function stringByteLength(str) {
      if (useNodeBuffer) {
          return Buffer.byteLength(str);
      }
      return new Blob([str]).size;
  }
  /**
   * Encode an ArrayBuffer as a base64 encoded string.
   *
   * @param buffer `ArrayBuffer` to be converted.
   * @returns A string that base64-encodes `buffer`.
   */
  function arrayBufferToBase64String(buffer) {
      if (useNodeBuffer) {
          return Buffer.from(buffer).toString('base64');
      }
      var buf = new Uint8Array(buffer);
      var s = '';
      for (var i = 0, l = buf.length; i < l; i++) {
          s += String.fromCharCode(buf[i]);
      }
      return btoa(s);
  }
  /**
   * Decode a base64 string as an ArrayBuffer.
   *
   * @param str Base64 string.
   * @returns Decoded `ArrayBuffer`.
   */
  function base64StringToArrayBuffer(str) {
      if (useNodeBuffer) {
          var buf = Buffer.from(str, 'base64');
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      }
      var s = atob(str);
      var buffer = new Uint8Array(s.length);
      for (var i = 0; i < s.length; ++i) {
          buffer.set([s.charCodeAt(i)], i);
      }
      return buffer.buffer;
  }
  /**
   * Concatenate a number of ArrayBuffers into one.
   *
   * @param buffers A number of array buffers to concatenate.
   * @returns Result of concatenating `buffers` in order.
   */
  function concatenateArrayBuffers(buffers) {
      if (buffers.length === 1) {
          return buffers[0];
      }
      var totalByteLength = 0;
      buffers.forEach(function (buffer) {
          totalByteLength += buffer.byteLength;
      });
      var temp = new Uint8Array(totalByteLength);
      var offset = 0;
      buffers.forEach(function (buffer) {
          temp.set(new Uint8Array(buffer), offset);
          offset += buffer.byteLength;
      });
      return temp.buffer;
  }
  /**
   * Get the basename of a path.
   *
   * Behaves in a way analogous to Linux's basename command.
   *
   * @param path
   */
  function basename(path) {
      var SEPARATOR = '/';
      path = path.trim();
      while (path.endsWith(SEPARATOR)) {
          path = path.slice(0, path.length - 1);
      }
      var items = path.split(SEPARATOR);
      return items[items.length - 1];
  }
  /**
   * Populate ModelArtifactsInfo fields for a model with JSON topology.
   * @param modelArtifacts
   * @returns A ModelArtifactsInfo object.
   */
  function getModelArtifactsInfoForJSON(modelArtifacts) {
      if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
          throw new Error('Expected JSON model topology, received ArrayBuffer.');
      }
      return {
          dateSaved: new Date(),
          modelTopologyType: 'JSON',
          modelTopologyBytes: modelArtifacts.modelTopology == null ?
              0 :
              stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),
          weightSpecsBytes: modelArtifacts.weightSpecs == null ?
              0 :
              stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),
          weightDataBytes: modelArtifacts.weightData == null ?
              0 :
              modelArtifacts.weightData.byteLength,
      };
  }
  /**
   * Computes mantisa table for casting Float16 to Float32
   * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
   *
   * @returns Uint32Array, 2048 mantissa lookup values.
   */
  function computeFloat16MantisaTable() {
      var convertMantissa = function (i) {
          var m = i << 13;
          var e = 0;
          while ((m & 0x00800000) === 0) {
              e -= 0x00800000;
              m <<= 1;
          }
          m &= ~0x00800000;
          e += 0x38800000;
          return m | e;
      };
      var mantisaTable = new Uint32Array(2048);
      mantisaTable[0] = 0;
      for (var i = 1; i < 1024; i++) {
          mantisaTable[i] = convertMantissa(i);
      }
      for (var i = 1024; i < 2048; i++) {
          mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);
      }
      return mantisaTable;
  }
  /**
   * Computes exponent table for casting Float16 to Float32
   * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
   *
   * @returns Uint32Array, 64 exponent lookup values.
   */
  function computeFloat16ExponentTable() {
      var exponentTable = new Uint32Array(64);
      exponentTable[0] = 0;
      exponentTable[31] = 0x47800000;
      exponentTable[32] = 0x80000000;
      exponentTable[63] = 0xc7800000;
      for (var i = 1; i < 31; i++) {
          exponentTable[i] = i << 23;
      }
      for (var i = 33; i < 63; i++) {
          exponentTable[i] = 0x80000000 + ((i - 32) << 23);
      }
      return exponentTable;
  }
  /**
   * Computes offset table for casting Float16 to Float32
   * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
   *
   * @returns Uint32Array, 6d offset values.
   */
  function computeFloat16OffsetTable() {
      var offsetTable = new Uint32Array(64);
      for (var i = 0; i < 64; i++) {
          offsetTable[i] = 1024;
      }
      offsetTable[0] = offsetTable[32] = 0;
      return offsetTable;
  }
  /**
   * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values
   * to a Float32Array.
   *
   * @returns Function (buffer: Uint16Array) => Float32Array which decodes
   *          the Uint16Array of Float16 bytes to a Float32Array.
   */
  function getFloat16Decoder() {
      // Algorithm is based off of
      // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
      // Cache lookup tables
      var mantisaTable = computeFloat16MantisaTable();
      var exponentTable = computeFloat16ExponentTable();
      var offsetTable = computeFloat16OffsetTable();
      return function (quantizedArray) {
          var buffer = new ArrayBuffer(4 * quantizedArray.length);
          var bufferUint32View = new Uint32Array(buffer);
          for (var index = 0; index < quantizedArray.length; index++) {
              var float16Bits = quantizedArray[index];
              var float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +
                  exponentTable[float16Bits >> 10];
              bufferUint32View[index] = float32Bits;
          }
          return new Float32Array(buffer);
      };
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var IORouterRegistry = /** @class */ (function () {
      function IORouterRegistry() {
          this.saveRouters = [];
          this.loadRouters = [];
      }
      IORouterRegistry.getInstance = function () {
          if (IORouterRegistry.instance == null) {
              IORouterRegistry.instance = new IORouterRegistry();
          }
          return IORouterRegistry.instance;
      };
      /**
       * Register a save-handler router.
       *
       * @param saveRouter A function that maps a URL-like string onto an instance
       * of `IOHandler` with the `save` method defined or `null`.
       */
      IORouterRegistry.registerSaveRouter = function (saveRouter) {
          IORouterRegistry.getInstance().saveRouters.push(saveRouter);
      };
      /**
       * Register a load-handler router.
       *
       * @param loadRouter A function that maps a URL-like string onto an instance
       * of `IOHandler` with the `load` method defined or `null`.
       */
      IORouterRegistry.registerLoadRouter = function (loadRouter) {
          IORouterRegistry.getInstance().loadRouters.push(loadRouter);
      };
      /**
       * Look up IOHandler for saving, given a URL-like string.
       *
       * @param url
       * @returns If only one match is found, an instance of IOHandler with the
       * `save` method defined. If no match is found, `null`.
       * @throws Error, if more than one match is found.
       */
      IORouterRegistry.getSaveHandlers = function (url) {
          return IORouterRegistry.getHandlers(url, 'save');
      };
      /**
       * Look up IOHandler for loading, given a URL-like string.
       *
       * @param url
       * @param loadOptions Optional, custom load options.
       * @returns All valid handlers for `url`, given the currently registered
       *   handler routers.
       */
      IORouterRegistry.getLoadHandlers = function (url, loadOptions) {
          return IORouterRegistry.getHandlers(url, 'load', loadOptions);
      };
      IORouterRegistry.getHandlers = function (url, handlerType, loadOptions) {
          var validHandlers = [];
          var routers = handlerType === 'load' ?
              IORouterRegistry.getInstance().loadRouters :
              IORouterRegistry.getInstance().saveRouters;
          routers.forEach(function (router) {
              var handler = router(url, loadOptions);
              if (handler !== null) {
                  validHandlers.push(handler);
              }
          });
          return validHandlers;
      };
      return IORouterRegistry;
  }());
  var registerSaveRouter = function (loudRouter) {
      return IORouterRegistry.registerSaveRouter(loudRouter);
  };
  var registerLoadRouter = function (loudRouter) {
      return IORouterRegistry.registerLoadRouter(loudRouter);
  };
  var getSaveHandlers = function (url) {
      return IORouterRegistry.getSaveHandlers(url);
  };
  var getLoadHandlers = function (url, loadOptions) {
      return IORouterRegistry.getLoadHandlers(url, loadOptions);
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var URL_SCHEME_SUFFIX = '://';
  var ModelStoreManagerRegistry = /** @class */ (function () {
      function ModelStoreManagerRegistry() {
          this.managers = {};
      }
      ModelStoreManagerRegistry.getInstance = function () {
          if (ModelStoreManagerRegistry.instance == null) {
              ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();
          }
          return ModelStoreManagerRegistry.instance;
      };
      /**
       * Register a save-handler router.
       *
       * @param saveRouter A function that maps a URL-like string onto an instance
       * of `IOHandler` with the `save` method defined or `null`.
       */
      ModelStoreManagerRegistry.registerManager = function (scheme, manager) {
          assert(scheme != null, function () { return 'scheme must not be undefined or null.'; });
          if (scheme.endsWith(URL_SCHEME_SUFFIX)) {
              scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));
          }
          assert(scheme.length > 0, function () { return 'scheme must not be an empty string.'; });
          var registry = ModelStoreManagerRegistry.getInstance();
          assert(registry.managers[scheme] == null, function () { return "A model store manager is already registered for scheme '" + scheme + "'."; });
          registry.managers[scheme] = manager;
      };
      ModelStoreManagerRegistry.getManager = function (scheme) {
          var manager = this.getInstance().managers[scheme];
          if (manager == null) {
              throw new Error("Cannot find model manager for scheme '" + scheme + "'");
          }
          return manager;
      };
      ModelStoreManagerRegistry.getSchemes = function () {
          return Object.keys(this.getInstance().managers);
      };
      return ModelStoreManagerRegistry;
  }());
  /**
   * Helper method for parsing a URL string into a scheme and a path.
   *
   * @param url E.g., 'localstorage://my-model'
   * @returns A dictionary with two fields: scheme and path.
   *   Scheme: e.g., 'localstorage' in the example above.
   *   Path: e.g., 'my-model' in the example above.
   */
  function parseURL(url) {
      if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {
          throw new Error("The url string provided does not contain a scheme. " +
              "Supported schemes are: " +
              ("" + ModelStoreManagerRegistry.getSchemes().join(',')));
      }
      return {
          scheme: url.split(URL_SCHEME_SUFFIX)[0],
          path: url.split(URL_SCHEME_SUFFIX)[1],
      };
  }
  function cloneModelInternal(sourceURL, destURL, deleteSource) {
      if (deleteSource === void 0) { deleteSource = false; }
      return __awaiter(this, void 0, void 0, function () {
          var loadHandlers, loadHandler, saveHandlers, saveHandler, sourceScheme, sourcePath, sameMedium, modelArtifacts, saveResult;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      assert(sourceURL !== destURL, function () { return "Old path and new path are the same: '" + sourceURL + "'"; });
                      loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);
                      assert(loadHandlers.length > 0, function () { return "Copying failed because no load handler is found for source URL " + sourceURL + "."; });
                      assert(loadHandlers.length < 2, function () { return "Copying failed because more than one (" + loadHandlers.length + ") " +
                          ("load handlers for source URL " + sourceURL + "."); });
                      loadHandler = loadHandlers[0];
                      saveHandlers = IORouterRegistry.getSaveHandlers(destURL);
                      assert(saveHandlers.length > 0, function () { return "Copying failed because no save handler is found for destination " +
                          ("URL " + destURL + "."); });
                      assert(saveHandlers.length < 2, function () { return "Copying failed because more than one (" + loadHandlers.length + ") " +
                          ("save handlers for destination URL " + destURL + "."); });
                      saveHandler = saveHandlers[0];
                      sourceScheme = parseURL(sourceURL).scheme;
                      sourcePath = parseURL(sourceURL).path;
                      sameMedium = sourceScheme === parseURL(sourceURL).scheme;
                      return [4 /*yield*/, loadHandler.load()];
                  case 1:
                      modelArtifacts = _a.sent();
                      if (!(deleteSource && sameMedium)) return [3 /*break*/, 3];
                      return [4 /*yield*/, ModelStoreManagerRegistry.getManager(sourceScheme)
                              .removeModel(sourcePath)];
                  case 2:
                      _a.sent();
                      _a.label = 3;
                  case 3: return [4 /*yield*/, saveHandler.save(modelArtifacts)];
                  case 4:
                      saveResult = _a.sent();
                      if (!(deleteSource && !sameMedium)) return [3 /*break*/, 6];
                      return [4 /*yield*/, ModelStoreManagerRegistry.getManager(sourceScheme)
                              .removeModel(sourcePath)];
                  case 5:
                      _a.sent();
                      _a.label = 6;
                  case 6: return [2 /*return*/, saveResult.modelArtifactsInfo];
              }
          });
      });
  }
  /**
   * List all models stored in registered storage mediums.
   *
   * For a web browser environment, the registered mediums are Local Storage and
   * IndexedDB.
   *
   * ```js
   * // First create and save a model.
   * const model = tf.sequential();
   * model.add(tf.layers.dense(
   *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
   * await model.save('localstorage://demo/management/model1');
   *
   * // Then list existing models.
   * console.log(JSON.stringify(await tf.io.listModels()));
   *
   * // Delete the model.
   * await tf.io.removeModel('localstorage://demo/management/model1');
   *
   * // List models again.
   * console.log(JSON.stringify(await tf.io.listModels()));
   * ```
   *
   * @returns A `Promise` of a dictionary mapping URLs of existing models to
   * their model artifacts info. URLs include medium-specific schemes, e.g.,
   *   'indexeddb://my/model/1'. Model artifacts info include type of the
   * model's topology, byte sizes of the topology, weights, etc.
   */
  /**
   * @doc {
   *   heading: 'Models',
   *   subheading: 'Management',
   *   namespace: 'io',
   *   ignoreCI: true
   * }
   */
  function listModels() {
      return __awaiter(this, void 0, void 0, function () {
          var schemes, out, _i, schemes_1, scheme, schemeOut, path, url;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      schemes = ModelStoreManagerRegistry.getSchemes();
                      out = {};
                      _i = 0, schemes_1 = schemes;
                      _a.label = 1;
                  case 1:
                      if (!(_i < schemes_1.length)) return [3 /*break*/, 4];
                      scheme = schemes_1[_i];
                      return [4 /*yield*/, ModelStoreManagerRegistry.getManager(scheme).listModels()];
                  case 2:
                      schemeOut = _a.sent();
                      for (path in schemeOut) {
                          url = scheme + URL_SCHEME_SUFFIX + path;
                          out[url] = schemeOut[path];
                      }
                      _a.label = 3;
                  case 3:
                      _i++;
                      return [3 /*break*/, 1];
                  case 4: return [2 /*return*/, out];
              }
          });
      });
  }
  /**
   * Remove a model specified by URL from a reigstered storage medium.
   *
   * ```js
   * // First create and save a model.
   * const model = tf.sequential();
   * model.add(tf.layers.dense(
   *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
   * await model.save('localstorage://demo/management/model1');
   *
   * // Then list existing models.
   * console.log(JSON.stringify(await tf.io.listModels()));
   *
   * // Delete the model.
   * await tf.io.removeModel('localstorage://demo/management/model1');
   *
   * // List models again.
   * console.log(JSON.stringify(await tf.io.listModels()));
   * ```
   *
   * @param url A URL to a stored model, with a scheme prefix, e.g.,
   *   'localstorage://my-model-1', 'indexeddb://my/model/2'.
   * @returns ModelArtifactsInfo of the deleted model (if and only if deletion
   *   is successful).
   * @throws Error if deletion fails, e.g., if no model exists at `path`.
   */
  /**
   * @doc {
   *   heading: 'Models',
   *   subheading: 'Management',
   *   namespace: 'io',
   *   ignoreCI: true
   * }
   */
  function removeModel(url) {
      return __awaiter(this, void 0, void 0, function () {
          var schemeAndPath, manager;
          return __generator(this, function (_a) {
              schemeAndPath = parseURL(url);
              manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);
              return [2 /*return*/, manager.removeModel(schemeAndPath.path)];
          });
      });
  }
  /**
   * Copy a model from one URL to another.
   *
   * This function supports:
   *
   * 1. Copying within a storage medium, e.g.,
   *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`
   * 2. Copying between two storage mediums, e.g.,
   *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`
   *
   * ```js
   * // First create and save a model.
   * const model = tf.sequential();
   * model.add(tf.layers.dense(
   *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
   * await model.save('localstorage://demo/management/model1');
   *
   * // Then list existing models.
   * console.log(JSON.stringify(await tf.io.listModels()));
   *
   * // Copy the model, from Local Storage to IndexedDB.
   * await tf.io.copyModel(
   *     'localstorage://demo/management/model1',
   *     'indexeddb://demo/management/model1');
   *
   * // List models again.
   * console.log(JSON.stringify(await tf.io.listModels()));
   *
   * // Remove both models.
   * await tf.io.removeModel('localstorage://demo/management/model1');
   * await tf.io.removeModel('indexeddb://demo/management/model1');
   * ```
   *
   * @param sourceURL Source URL of copying.
   * @param destURL Destination URL of copying.
   * @returns ModelArtifactsInfo of the copied model (if and only if copying
   *   is successful).
   * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or
   *   if `oldPath` and `newPath` are identical.
   */
  /**
   * @doc {
   *   heading: 'Models',
   *   subheading: 'Management',
   *   namespace: 'io',
   *   ignoreCI: true
   * }
   */
  function copyModel(sourceURL, destURL) {
      return __awaiter(this, void 0, void 0, function () {
          var deleteSource;
          return __generator(this, function (_a) {
              deleteSource = false;
              return [2 /*return*/, cloneModelInternal(sourceURL, destURL, deleteSource)];
          });
      });
  }
  /**
   * Move a model from one URL to another.
   *
   * This function supports:
   *
   * 1. Moving within a storage medium, e.g.,
   *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`
   * 2. Moving between two storage mediums, e.g.,
   *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`
   *
   * ```js
   * // First create and save a model.
   * const model = tf.sequential();
   * model.add(tf.layers.dense(
   *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
   * await model.save('localstorage://demo/management/model1');
   *
   * // Then list existing models.
   * console.log(JSON.stringify(await tf.io.listModels()));
   *
   * // Move the model, from Local Storage to IndexedDB.
   * await tf.io.moveModel(
   *     'localstorage://demo/management/model1',
   *     'indexeddb://demo/management/model1');
   *
   * // List models again.
   * console.log(JSON.stringify(await tf.io.listModels()));
   *
   * // Remove the moved model.
   * await tf.io.removeModel('indexeddb://demo/management/model1');
   * ```
   *
   * @param sourceURL Source URL of moving.
   * @param destURL Destination URL of moving.
   * @returns ModelArtifactsInfo of the copied model (if and only if copying
   *   is successful).
   * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or
   *   if `oldPath` and `newPath` are identical.
   */
  /**
   * @doc {
   *   heading: 'Models',
   *   subheading: 'Management',
   *   namespace: 'io',
   *   ignoreCI: true
   * }
   */
  function moveModel(sourceURL, destURL) {
      return __awaiter(this, void 0, void 0, function () {
          var deleteSource;
          return __generator(this, function (_a) {
              deleteSource = true;
              return [2 /*return*/, cloneModelInternal(sourceURL, destURL, deleteSource)];
          });
      });
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var DATABASE_NAME = 'tensorflowjs';
  var DATABASE_VERSION = 1;
  // Model data and ModelArtifactsInfo (metadata) are stored in two separate
  // stores for efficient access of the list of stored models and their metadata.
  // 1. The object store for model data: topology, weights and weight manifests.
  var MODEL_STORE_NAME = 'models_store';
  // 2. The object store for ModelArtifactsInfo, including meta-information such
  //    as the type of topology (JSON vs binary), byte size of the topology, byte
  //    size of the weights, etc.
  var INFO_STORE_NAME = 'model_info_store';
  function getIndexedDBFactory() {
      if (!env().getBool('IS_BROWSER')) {
          // TODO(cais): Add more info about what IOHandler subtypes are available.
          //   Maybe point to a doc page on the web and/or automatically determine
          //   the available IOHandlers and print them in the error message.
          throw new Error('Failed to obtain IndexedDB factory because the current environment' +
              'is not a web browser.');
      }
      // tslint:disable-next-line:no-any
      var theWindow = typeof window === 'undefined' ? self : window;
      var factory = theWindow.indexedDB || theWindow.mozIndexedDB ||
          theWindow.webkitIndexedDB || theWindow.msIndexedDB ||
          theWindow.shimIndexedDB;
      if (factory == null) {
          throw new Error('The current browser does not appear to support IndexedDB.');
      }
      return factory;
  }
  function setUpDatabase(openRequest) {
      var db = openRequest.result;
      db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });
      db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });
  }
  /**
   * IOHandler subclass: Browser IndexedDB.
   *
   * See the doc string of `browserIndexedDB` for more details.
   */
  var BrowserIndexedDB = /** @class */ (function () {
      function BrowserIndexedDB(modelPath) {
          this.indexedDB = getIndexedDBFactory();
          if (modelPath == null || !modelPath) {
              throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');
          }
          this.modelPath = modelPath;
      }
      BrowserIndexedDB.prototype.save = function (modelArtifacts) {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  // TODO(cais): Support saving GraphDef models.
                  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
                      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +
                          'in binary formats yet.');
                  }
                  return [2 /*return*/, this.databaseAction(this.modelPath, modelArtifacts)];
              });
          });
      };
      BrowserIndexedDB.prototype.load = function () {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  return [2 /*return*/, this.databaseAction(this.modelPath)];
              });
          });
      };
      /**
       * Perform database action to put model artifacts into or read model artifacts
       * from IndexedDB object store.
       *
       * Whether the action is put or get depends on whether `modelArtifacts` is
       * specified. If it is specified, the action will be put; otherwise the action
       * will be get.
       *
       * @param modelPath A unique string path for the model.
       * @param modelArtifacts If specified, it will be the model artifacts to be
       *   stored in IndexedDB.
       * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
       *   of `ModelArtifacts`, if the action is get.
       */
      BrowserIndexedDB.prototype.databaseAction = function (modelPath, modelArtifacts) {
          var _this = this;
          return new Promise(function (resolve, reject) {
              var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
              openRequest.onupgradeneeded = function () { return setUpDatabase(openRequest); };
              openRequest.onsuccess = function () {
                  var db = openRequest.result;
                  if (modelArtifacts == null) {
                      // Read model out from object store.
                      var modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');
                      var modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                      var getRequest_1 = modelStore.get(_this.modelPath);
                      getRequest_1.onsuccess = function () {
                          if (getRequest_1.result == null) {
                              db.close();
                              return reject(new Error("Cannot find model with path '" + _this.modelPath + "' " +
                                  "in IndexedDB."));
                          }
                          else {
                              resolve(getRequest_1.result.modelArtifacts);
                          }
                      };
                      getRequest_1.onerror = function (error) {
                          db.close();
                          return reject(getRequest_1.error);
                      };
                      modelTx.oncomplete = function () { return db.close(); };
                  }
                  else {
                      // Put model into object store.
                      var modelArtifactsInfo_1 = getModelArtifactsInfoForJSON(modelArtifacts);
                      // First, put ModelArtifactsInfo into info store.
                      var infoTx_1 = db.transaction(INFO_STORE_NAME, 'readwrite');
                      var infoStore_1 = infoTx_1.objectStore(INFO_STORE_NAME);
                      var putInfoRequest_1 = infoStore_1.put({ modelPath: _this.modelPath, modelArtifactsInfo: modelArtifactsInfo_1 });
                      var modelTx_1;
                      putInfoRequest_1.onsuccess = function () {
                          // Second, put model data into model store.
                          modelTx_1 = db.transaction(MODEL_STORE_NAME, 'readwrite');
                          var modelStore = modelTx_1.objectStore(MODEL_STORE_NAME);
                          var putModelRequest = modelStore.put({
                              modelPath: _this.modelPath,
                              modelArtifacts: modelArtifacts,
                              modelArtifactsInfo: modelArtifactsInfo_1
                          });
                          putModelRequest.onsuccess = function () { return resolve({ modelArtifactsInfo: modelArtifactsInfo_1 }); };
                          putModelRequest.onerror = function (error) {
                              // If the put-model request fails, roll back the info entry as
                              // well.
                              infoStore_1 = infoTx_1.objectStore(INFO_STORE_NAME);
                              var deleteInfoRequest = infoStore_1.delete(_this.modelPath);
                              deleteInfoRequest.onsuccess = function () {
                                  db.close();
                                  return reject(putModelRequest.error);
                              };
                              deleteInfoRequest.onerror = function (error) {
                                  db.close();
                                  return reject(putModelRequest.error);
                              };
                          };
                      };
                      putInfoRequest_1.onerror = function (error) {
                          db.close();
                          return reject(putInfoRequest_1.error);
                      };
                      infoTx_1.oncomplete = function () {
                          if (modelTx_1 == null) {
                              db.close();
                          }
                          else {
                              modelTx_1.oncomplete = function () { return db.close(); };
                          }
                      };
                  }
              };
              openRequest.onerror = function (error) { return reject(openRequest.error); };
          });
      };
      BrowserIndexedDB.URL_SCHEME = 'indexeddb://';
      return BrowserIndexedDB;
  }());
  var indexedDBRouter = function (url) {
      if (!env().getBool('IS_BROWSER')) {
          return null;
      }
      else {
          if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {
              return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));
          }
          else {
              return null;
          }
      }
  };
  IORouterRegistry.registerSaveRouter(indexedDBRouter);
  IORouterRegistry.registerLoadRouter(indexedDBRouter);
  /**
   * Creates a browser IndexedDB IOHandler for saving and loading models.
   *
   * ```js
   * const model = tf.sequential();
   * model.add(
   *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
   *
   * const saveResult = await model.save('indexeddb://MyModel'));
   * console.log(saveResult);
   * ```
   *
   * @param modelPath A unique identifier for the model to be saved. Must be a
   *   non-empty string.
   * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),
   *   which can be used with, e.g., `tf.Model.save`.
   */
  function browserIndexedDB(modelPath) {
      return new BrowserIndexedDB(modelPath);
  }
  function maybeStripScheme(key) {
      return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?
          key.slice(BrowserIndexedDB.URL_SCHEME.length) :
          key;
  }
  var BrowserIndexedDBManager = /** @class */ (function () {
      function BrowserIndexedDBManager() {
          this.indexedDB = getIndexedDBFactory();
      }
      BrowserIndexedDBManager.prototype.listModels = function () {
          return __awaiter(this, void 0, void 0, function () {
              var _this = this;
              return __generator(this, function (_a) {
                  return [2 /*return*/, new Promise(function (resolve, reject) {
                          var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
                          openRequest.onupgradeneeded = function () { return setUpDatabase(openRequest); };
                          openRequest.onsuccess = function () {
                              var db = openRequest.result;
                              var tx = db.transaction(INFO_STORE_NAME, 'readonly');
                              var store = tx.objectStore(INFO_STORE_NAME);
                              // tslint:disable:max-line-length
                              // Need to cast `store` as `any` here because TypeScript's DOM
                              // library does not have the `getAll()` method even though the
                              // method is supported in the latest version of most mainstream
                              // browsers:
                              // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll
                              // tslint:enable:max-line-length
                              // tslint:disable-next-line:no-any
                              var getAllInfoRequest = store.getAll();
                              getAllInfoRequest.onsuccess = function () {
                                  var out = {};
                                  for (var _i = 0, _a = getAllInfoRequest.result; _i < _a.length; _i++) {
                                      var item = _a[_i];
                                      out[item.modelPath] = item.modelArtifactsInfo;
                                  }
                                  resolve(out);
                              };
                              getAllInfoRequest.onerror = function (error) {
                                  db.close();
                                  return reject(getAllInfoRequest.error);
                              };
                              tx.oncomplete = function () { return db.close(); };
                          };
                          openRequest.onerror = function (error) { return reject(openRequest.error); };
                      })];
              });
          });
      };
      BrowserIndexedDBManager.prototype.removeModel = function (path) {
          return __awaiter(this, void 0, void 0, function () {
              var _this = this;
              return __generator(this, function (_a) {
                  path = maybeStripScheme(path);
                  return [2 /*return*/, new Promise(function (resolve, reject) {
                          var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
                          openRequest.onupgradeneeded = function () { return setUpDatabase(openRequest); };
                          openRequest.onsuccess = function () {
                              var db = openRequest.result;
                              var infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');
                              var infoStore = infoTx.objectStore(INFO_STORE_NAME);
                              var getInfoRequest = infoStore.get(path);
                              var modelTx;
                              getInfoRequest.onsuccess = function () {
                                  if (getInfoRequest.result == null) {
                                      db.close();
                                      return reject(new Error("Cannot find model with path '" + path + "' " +
                                          "in IndexedDB."));
                                  }
                                  else {
                                      // First, delete the entry in the info store.
                                      var deleteInfoRequest = infoStore.delete(path);
                                      var deleteModelData_1 = function () {
                                          // Second, delete the entry in the model store.
                                          modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');
                                          var modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                                          var deleteModelRequest = modelStore.delete(path);
                                          deleteModelRequest.onsuccess = function () {
                                              return resolve(getInfoRequest.result.modelArtifactsInfo);
                                          };
                                          deleteModelRequest.onerror = function (error) {
                                              return reject(getInfoRequest.error);
                                          };
                                      };
                                      // Proceed with deleting model data regardless of whether deletion
                                      // of info data succeeds or not.
                                      deleteInfoRequest.onsuccess = deleteModelData_1;
                                      deleteInfoRequest.onerror = function (error) {
                                          deleteModelData_1();
                                          db.close();
                                          return reject(getInfoRequest.error);
                                      };
                                  }
                              };
                              getInfoRequest.onerror = function (error) {
                                  db.close();
                                  return reject(getInfoRequest.error);
                              };
                              infoTx.oncomplete = function () {
                                  if (modelTx == null) {
                                      db.close();
                                  }
                                  else {
                                      modelTx.oncomplete = function () { return db.close(); };
                                  }
                              };
                          };
                          openRequest.onerror = function (error) { return reject(openRequest.error); };
                      })];
              });
          });
      };
      return BrowserIndexedDBManager;
  }());
  if (env().getBool('IS_BROWSER')) {
      // Wrap the construction and registration, to guard against browsers that
      // don't support Local Storage.
      try {
          ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());
      }
      catch (err) {
      }
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var PATH_SEPARATOR = '/';
  var PATH_PREFIX = 'tensorflowjs_models';
  var INFO_SUFFIX = 'info';
  var MODEL_TOPOLOGY_SUFFIX = 'model_topology';
  var WEIGHT_SPECS_SUFFIX = 'weight_specs';
  var WEIGHT_DATA_SUFFIX = 'weight_data';
  var MODEL_METADATA_SUFFIX = 'model_metadata';
  function getModelKeys(path) {
      return {
          info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),
          topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),
          weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),
          weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),
          modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)
      };
  }
  /**
   * Get model path from a local-storage key.
   *
   * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'
   *
   * @param key
   */
  function getModelPathFromKey(key) {
      var items = key.split(PATH_SEPARATOR);
      if (items.length < 3) {
          throw new Error("Invalid key format: " + key);
      }
      return items.slice(1, items.length - 1).join(PATH_SEPARATOR);
  }
  function maybeStripScheme$1(key) {
      return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?
          key.slice(BrowserLocalStorage.URL_SCHEME.length) :
          key;
  }
  /**
   * IOHandler subclass: Browser Local Storage.
   *
   * See the doc string to `browserLocalStorage` for more details.
   */
  var BrowserLocalStorage = /** @class */ (function () {
      function BrowserLocalStorage(modelPath) {
          if (!env().getBool('IS_BROWSER') ||
              typeof window === 'undefined' ||
              typeof window.localStorage === 'undefined') {
              // TODO(cais): Add more info about what IOHandler subtypes are
              // available.
              //   Maybe point to a doc page on the web and/or automatically determine
              //   the available IOHandlers and print them in the error message.
              throw new Error('The current environment does not support local storage.');
          }
          this.LS = window.localStorage;
          if (modelPath == null || !modelPath) {
              throw new Error('For local storage, modelPath must not be null, undefined or empty.');
          }
          this.modelPath = modelPath;
          this.keys = getModelKeys(this.modelPath);
      }
      /**
       * Save model artifacts to browser local storage.
       *
       * See the documentation to `browserLocalStorage` for details on the saved
       * artifacts.
       *
       * @param modelArtifacts The model artifacts to be stored.
       * @returns An instance of SaveResult.
       */
      BrowserLocalStorage.prototype.save = function (modelArtifacts) {
          return __awaiter(this, void 0, void 0, function () {
              var topology, weightSpecs, modelArtifactsInfo;
              return __generator(this, function (_a) {
                  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
                      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +
                          'in binary formats yet.');
                  }
                  else {
                      topology = JSON.stringify(modelArtifacts.modelTopology);
                      weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);
                      modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);
                      try {
                          this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));
                          this.LS.setItem(this.keys.topology, topology);
                          this.LS.setItem(this.keys.weightSpecs, weightSpecs);
                          this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));
                          this.LS.setItem(this.keys.modelMetadata, JSON.stringify({
                              format: modelArtifacts.format,
                              generatedBy: modelArtifacts.generatedBy,
                              convertedBy: modelArtifacts.convertedBy,
                              userDefinedMetadata: modelArtifacts.userDefinedMetadata
                          }));
                          return [2 /*return*/, { modelArtifactsInfo: modelArtifactsInfo }];
                      }
                      catch (err) {
                          // If saving failed, clean up all items saved so far.
                          this.LS.removeItem(this.keys.info);
                          this.LS.removeItem(this.keys.topology);
                          this.LS.removeItem(this.keys.weightSpecs);
                          this.LS.removeItem(this.keys.weightData);
                          this.LS.removeItem(this.keys.modelMetadata);
                          throw new Error("Failed to save model '" + this.modelPath + "' to local storage: " +
                              "size quota being exceeded is a possible cause of this failure: " +
                              ("modelTopologyBytes=" + modelArtifactsInfo.modelTopologyBytes + ", ") +
                              ("weightSpecsBytes=" + modelArtifactsInfo.weightSpecsBytes + ", ") +
                              ("weightDataBytes=" + modelArtifactsInfo.weightDataBytes + "."));
                      }
                  }
                  return [2 /*return*/];
              });
          });
      };
      /**
       * Load a model from local storage.
       *
       * See the documentation to `browserLocalStorage` for details on the saved
       * artifacts.
       *
       * @returns The loaded model (if loading succeeds).
       */
      BrowserLocalStorage.prototype.load = function () {
          return __awaiter(this, void 0, void 0, function () {
              var info, out, topology, weightSpecs, metadataString, metadata, weightDataBase64;
              return __generator(this, function (_a) {
                  info = JSON.parse(this.LS.getItem(this.keys.info));
                  if (info == null) {
                      throw new Error("In local storage, there is no model with name '" + this.modelPath + "'");
                  }
                  if (info.modelTopologyType !== 'JSON') {
                      throw new Error('BrowserLocalStorage does not support loading non-JSON model ' +
                          'topology yet.');
                  }
                  out = {};
                  topology = JSON.parse(this.LS.getItem(this.keys.topology));
                  if (topology == null) {
                      throw new Error("In local storage, the topology of model '" + this.modelPath + "' " +
                          "is missing.");
                  }
                  out.modelTopology = topology;
                  weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
                  if (weightSpecs == null) {
                      throw new Error("In local storage, the weight specs of model '" + this.modelPath + "' " +
                          "are missing.");
                  }
                  out.weightSpecs = weightSpecs;
                  metadataString = this.LS.getItem(this.keys.modelMetadata);
                  if (metadataString != null) {
                      metadata = JSON.parse(metadataString);
                      out.format = metadata['format'];
                      out.generatedBy = metadata['generatedBy'];
                      out.convertedBy = metadata['convertedBy'];
                      out.userDefinedMetadata = metadata['userDefinedMetadata'];
                  }
                  weightDataBase64 = this.LS.getItem(this.keys.weightData);
                  if (weightDataBase64 == null) {
                      throw new Error("In local storage, the binary weight values of model " +
                          ("'" + this.modelPath + "' are missing."));
                  }
                  out.weightData = base64StringToArrayBuffer(weightDataBase64);
                  return [2 /*return*/, out];
              });
          });
      };
      BrowserLocalStorage.URL_SCHEME = 'localstorage://';
      return BrowserLocalStorage;
  }());
  var localStorageRouter = function (url) {
      if (!env().getBool('IS_BROWSER')) {
          return null;
      }
      else {
          if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {
              return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));
          }
          else {
              return null;
          }
      }
  };
  IORouterRegistry.registerSaveRouter(localStorageRouter);
  IORouterRegistry.registerLoadRouter(localStorageRouter);
  /**
   * Factory function for local storage IOHandler.
   *
   * This `IOHandler` supports both `save` and `load`.
   *
   * For each model's saved artifacts, four items are saved to local storage.
   *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the
   *     model, such as date saved, type of the topology, size in bytes, etc.
   *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-
   *     style models, this is a stringized JSON.
   *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the
   *     model, can be used to decode the saved binary weight values (see
   *     item below).
   *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary
   *     weight values, stored as a base64-encoded string.
   *
   * Saving may throw an `Error` if the total size of the artifacts exceed the
   * browser-specific quota.
   *
   * @param modelPath A unique identifier for the model to be saved. Must be a
   *   non-empty string.
   * @returns An instance of `IOHandler`, which can be used with, e.g.,
   *   `tf.Model.save`.
   */
  function browserLocalStorage(modelPath) {
      return new BrowserLocalStorage(modelPath);
  }
  var BrowserLocalStorageManager = /** @class */ (function () {
      function BrowserLocalStorageManager() {
          assert(env().getBool('IS_BROWSER'), function () { return 'Current environment is not a web browser'; });
          assert(typeof window === 'undefined' ||
              typeof window.localStorage !== 'undefined', function () { return 'Current browser does not appear to support localStorage'; });
          this.LS = window.localStorage;
      }
      BrowserLocalStorageManager.prototype.listModels = function () {
          return __awaiter(this, void 0, void 0, function () {
              var out, prefix, suffix, i, key, modelPath;
              return __generator(this, function (_a) {
                  out = {};
                  prefix = PATH_PREFIX + PATH_SEPARATOR;
                  suffix = PATH_SEPARATOR + INFO_SUFFIX;
                  for (i = 0; i < this.LS.length; ++i) {
                      key = this.LS.key(i);
                      if (key.startsWith(prefix) && key.endsWith(suffix)) {
                          modelPath = getModelPathFromKey(key);
                          out[modelPath] = JSON.parse(this.LS.getItem(key));
                      }
                  }
                  return [2 /*return*/, out];
              });
          });
      };
      BrowserLocalStorageManager.prototype.removeModel = function (path) {
          return __awaiter(this, void 0, void 0, function () {
              var keys, info;
              return __generator(this, function (_a) {
                  path = maybeStripScheme$1(path);
                  keys = getModelKeys(path);
                  if (this.LS.getItem(keys.info) == null) {
                      throw new Error("Cannot find model at path '" + path + "'");
                  }
                  info = JSON.parse(this.LS.getItem(keys.info));
                  this.LS.removeItem(keys.info);
                  this.LS.removeItem(keys.topology);
                  this.LS.removeItem(keys.weightSpecs);
                  this.LS.removeItem(keys.weightData);
                  return [2 /*return*/, info];
              });
          });
      };
      return BrowserLocalStorageManager;
  }());
  if (env().getBool('IS_BROWSER')) {
      // Wrap the construction and registration, to guard against browsers that
      // don't support Local Storage.
      try {
          ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());
      }
      catch (err) {
      }
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var DEFAULT_FILE_NAME_PREFIX = 'model';
  var DEFAULT_JSON_EXTENSION_NAME = '.json';
  var DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';
  function defer(f) {
      return new Promise(function (resolve) { return setTimeout(resolve); }).then(f);
  }
  var BrowserDownloads = /** @class */ (function () {
      function BrowserDownloads(fileNamePrefix) {
          if (!env().getBool('IS_BROWSER')) {
              // TODO(cais): Provide info on what IOHandlers are available under the
              //   current environment.
              throw new Error('browserDownloads() cannot proceed because the current environment ' +
                  'is not a browser.');
          }
          if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {
              fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);
          }
          if (fileNamePrefix == null || fileNamePrefix.length === 0) {
              fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;
          }
          this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;
          this.weightDataFileName =
              fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
      }
      BrowserDownloads.prototype.save = function (modelArtifacts) {
          return __awaiter(this, void 0, void 0, function () {
              var weightsURL, weightsManifest, modelTopologyAndWeightManifest, modelTopologyAndWeightManifestURL, jsonAnchor_1, weightDataAnchor_1;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          if (typeof (document) === 'undefined') {
                              throw new Error('Browser downloads are not supported in ' +
                                  'this environment since `document` is not present');
                          }
                          weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));
                          if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) return [3 /*break*/, 1];
                          throw new Error('BrowserDownloads.save() does not support saving model topology ' +
                              'in binary formats yet.');
                      case 1:
                          weightsManifest = [{
                                  paths: ['./' + this.weightDataFileName],
                                  weights: modelArtifacts.weightSpecs
                              }];
                          modelTopologyAndWeightManifest = {
                              modelTopology: modelArtifacts.modelTopology,
                              format: modelArtifacts.format,
                              generatedBy: modelArtifacts.generatedBy,
                              convertedBy: modelArtifacts.convertedBy,
                              weightsManifest: weightsManifest
                          };
                          modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: 'application/json' }));
                          jsonAnchor_1 = this.jsonAnchor == null ? document.createElement('a') :
                              this.jsonAnchor;
                          jsonAnchor_1.download = this.modelTopologyFileName;
                          jsonAnchor_1.href = modelTopologyAndWeightManifestURL;
                          // Trigger downloads by evoking a click event on the download anchors.
                          // When multiple downloads are started synchronously, Firefox will only
                          // save the last one.
                          return [4 /*yield*/, defer(function () { return jsonAnchor_1.dispatchEvent(new MouseEvent('click')); })];
                      case 2:
                          // Trigger downloads by evoking a click event on the download anchors.
                          // When multiple downloads are started synchronously, Firefox will only
                          // save the last one.
                          _a.sent();
                          if (!(modelArtifacts.weightData != null)) return [3 /*break*/, 4];
                          weightDataAnchor_1 = this.weightDataAnchor == null ?
                              document.createElement('a') :
                              this.weightDataAnchor;
                          weightDataAnchor_1.download = this.weightDataFileName;
                          weightDataAnchor_1.href = weightsURL;
                          return [4 /*yield*/, defer(function () { return weightDataAnchor_1.dispatchEvent(new MouseEvent('click')); })];
                      case 3:
                          _a.sent();
                          _a.label = 4;
                      case 4: return [2 /*return*/, { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) }];
                  }
              });
          });
      };
      BrowserDownloads.URL_SCHEME = 'downloads://';
      return BrowserDownloads;
  }());
  var BrowserFiles = /** @class */ (function () {
      function BrowserFiles(files) {
          if (files == null || files.length < 1) {
              throw new Error("When calling browserFiles, at least 1 file is required, " +
                  ("but received " + files));
          }
          this.files = files;
      }
      BrowserFiles.prototype.load = function () {
          return __awaiter(this, void 0, void 0, function () {
              var jsonFile, weightFiles;
              var _this = this;
              return __generator(this, function (_a) {
                  jsonFile = this.files[0];
                  weightFiles = this.files.slice(1);
                  return [2 /*return*/, new Promise(function (resolve, reject) {
                          var jsonReader = new FileReader();
                          jsonReader.onload = function (event) {
                              // tslint:disable-next-line:no-any
                              var modelJSON = JSON.parse(event.target.result);
                              var modelTopology = modelJSON.modelTopology;
                              if (modelTopology == null) {
                                  reject(new Error("modelTopology field is missing from file " + jsonFile.name));
                                  return;
                              }
                              if (weightFiles.length === 0) {
                                  resolve({ modelTopology: modelTopology });
                              }
                              var weightsManifest = modelJSON.weightsManifest;
                              if (weightsManifest == null) {
                                  reject(new Error("weightManifest field is missing from file " + jsonFile.name));
                                  return;
                              }
                              var pathToFile;
                              try {
                                  pathToFile =
                                      _this.checkManifestAndWeightFiles(weightsManifest, weightFiles);
                              }
                              catch (err) {
                                  reject(err);
                                  return;
                              }
                              var weightSpecs = [];
                              var paths = [];
                              var perFileBuffers = [];
                              weightsManifest.forEach(function (weightsGroup) {
                                  weightsGroup.paths.forEach(function (path) {
                                      paths.push(path);
                                      perFileBuffers.push(null);
                                  });
                                  weightSpecs.push.apply(weightSpecs, weightsGroup.weights);
                              });
                              weightsManifest.forEach(function (weightsGroup) {
                                  weightsGroup.paths.forEach(function (path) {
                                      var weightFileReader = new FileReader();
                                      weightFileReader.onload = function (event) {
                                          // tslint:disable-next-line:no-any
                                          var weightData = event.target.result;
                                          var index = paths.indexOf(path);
                                          perFileBuffers[index] = weightData;
                                          if (perFileBuffers.indexOf(null) === -1) {
                                              resolve({
                                                  modelTopology: modelTopology,
                                                  weightSpecs: weightSpecs,
                                                  weightData: concatenateArrayBuffers(perFileBuffers),
                                                  format: modelJSON.format,
                                                  generatedBy: modelJSON.generatedBy,
                                                  convertedBy: modelJSON.convertedBy,
                                                  userDefinedMetadata: modelJSON.userDefinedMetadata
                                              });
                                          }
                                      };
                                      weightFileReader.onerror = function (error) {
                                          return reject("Failed to weights data from file of path '" + path + "'.");
                                      };
                                      weightFileReader.readAsArrayBuffer(pathToFile[path]);
                                  });
                              });
                          };
                          jsonReader.onerror = function (error) { return reject("Failed to read model topology and weights manifest JSON " +
                              ("from file '" + jsonFile.name + "'. BrowserFiles supports loading ") +
                              "Keras-style tf.Model artifacts only."); };
                          jsonReader.readAsText(jsonFile);
                      })];
              });
          });
      };
      /**
       * Check the compatibility between weights manifest and weight files.
       */
      BrowserFiles.prototype.checkManifestAndWeightFiles = function (manifest, files) {
          var basenames = [];
          var fileNames = files.map(function (file) { return basename(file.name); });
          var pathToFile = {};
          for (var _i = 0, manifest_1 = manifest; _i < manifest_1.length; _i++) {
              var group = manifest_1[_i];
              group.paths.forEach(function (path) {
                  var pathBasename = basename(path);
                  if (basenames.indexOf(pathBasename) !== -1) {
                      throw new Error("Duplicate file basename found in weights manifest: " +
                          ("'" + pathBasename + "'"));
                  }
                  basenames.push(pathBasename);
                  if (fileNames.indexOf(pathBasename) === -1) {
                      throw new Error("Weight file with basename '" + pathBasename + "' is not provided.");
                  }
                  else {
                      pathToFile[path] = files[fileNames.indexOf(pathBasename)];
                  }
              });
          }
          if (basenames.length !== files.length) {
              throw new Error("Mismatch in the number of files in weights manifest " +
                  ("(" + basenames.length + ") and the number of weight files provided ") +
                  ("(" + files.length + ")."));
          }
          return pathToFile;
      };
      return BrowserFiles;
  }());
  var browserDownloadsRouter = function (url) {
      if (!env().getBool('IS_BROWSER')) {
          return null;
      }
      else {
          if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {
              return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));
          }
          else {
              return null;
          }
      }
  };
  IORouterRegistry.registerSaveRouter(browserDownloadsRouter);
  /**
   * Creates an IOHandler that triggers file downloads from the browser.
   *
   * The returned `IOHandler` instance can be used as model exporting methods such
   * as `tf.Model.save` and supports only saving.
   *
   * ```js
   * const model = tf.sequential();
   * model.add(tf.layers.dense(
   *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
   * const saveResult = await model.save('downloads://mymodel');
   * // This will trigger downloading of two files:
   * //   'mymodel.json' and 'mymodel.weights.bin'.
   * console.log(saveResult);
   * ```
   *
   * @param fileNamePrefix Prefix name of the files to be downloaded. For use with
   *   `tf.Model`, `fileNamePrefix` should follow either of the following two
   *   formats:
   *   1. `null` or `undefined`, in which case the default file
   *      names will be used:
   *      - 'model.json' for the JSON file containing the model topology and
   *        weights manifest.
   *      - 'model.weights.bin' for the binary file containing the binary weight
   *        values.
   *   2. A single string or an Array of a single string, as the file name prefix.
   *      For example, if `'foo'` is provided, the downloaded JSON
   *      file and binary weights file will be named 'foo.json' and
   *      'foo.weights.bin', respectively.
   * @param config Additional configuration for triggering downloads.
   * @returns An instance of `BrowserDownloads` `IOHandler`.
   */
  /**
   * @doc {
   *   heading: 'Models',
   *   subheading: 'Loading',
   *   namespace: 'io',
   *   ignoreCI: true
   * }
   */
  function browserDownloads(fileNamePrefix) {
      if (fileNamePrefix === void 0) { fileNamePrefix = 'model'; }
      return new BrowserDownloads(fileNamePrefix);
  }
  /**
   * Creates an IOHandler that loads model artifacts from user-selected files.
   *
   * This method can be used for loading from files such as user-selected files
   * in the browser.
   * When used in conjunction with `tf.loadLayersModel`, an instance of
   * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
   *
   * ```js
   * // Note: This code snippet won't run properly without the actual file input
   * //   elements in the HTML DOM.
   *
   * // Suppose there are two HTML file input (`<input type="file" ...>`)
   * // elements.
   * const uploadJSONInput = document.getElementById('upload-json');
   * const uploadWeightsInput = document.getElementById('upload-weights');
   * const model = await tf.loadLayersModel(tf.io.browserFiles(
   *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));
   * ```
   *
   * @param files `File`s to load from. Currently, this function supports only
   *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for
   *   which an `Array` of `File`s is expected (in that order):
   *   - A JSON file containing the model topology and weight manifest.
   *   - Optionally, One or more binary files containing the binary weights.
   *     These files must have names that match the paths in the `weightsManifest`
   *     contained by the aforementioned JSON file, or errors will be thrown
   *     during loading. These weights files have the same format as the ones
   *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`
   *     Python PIP package. If no weights files are provided, only the model
   *     topology will be loaded from the JSON file above.
   * @returns An instance of `Files` `IOHandler`.
   */
  /**
   * @doc {
   *   heading: 'Models',
   *   subheading: 'Loading',
   *   namespace: 'io',
   *   ignoreCI: true
   * }
   */
  function browserFiles(files) {
      return new BrowserFiles(files);
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Monitor Promise.all progress, fire onProgress callback function.
   *
   * @param promises Promise list going to be monitored
   * @param onProgress Callback function. Fired when a promise resolved.
   * @param startFraction Optional fraction start. Default to 0.
   * @param endFraction Optional fraction end. Default to 1.
   */
  function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {
      checkPromises(promises);
      startFraction = startFraction == null ? 0 : startFraction;
      endFraction = endFraction == null ? 1 : endFraction;
      checkFraction(startFraction, endFraction);
      var resolvedPromise = 0;
      var registerMonitor = function (promise) {
          promise.then(function (value) {
              var fraction = startFraction +
                  ++resolvedPromise / promises.length * (endFraction - startFraction);
              // pass fraction as parameter to callback function.
              onProgress(fraction);
              return value;
          });
          return promise;
      };
      function checkPromises(promises) {
          assert(promises != null && Array.isArray(promises) && promises.length > 0, function () { return 'promises must be a none empty array'; });
      }
      function checkFraction(startFraction, endFraction) {
          assert(startFraction >= 0 && startFraction <= 1, function () { return "Progress fraction must be in range [0, 1], but " +
              ("got startFraction " + startFraction); });
          assert(endFraction >= 0 && endFraction <= 1, function () { return "Progress fraction must be in range [0, 1], but " +
              ("got endFraction " + endFraction); });
          assert(endFraction >= startFraction, function () { return "startFraction must be no more than endFraction, but " +
              ("got startFraction " + startFraction + " and endFraction ") +
              ("" + endFraction); });
      }
      return Promise.all(promises.map(registerMonitor));
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Reads binary weights data from a number of URLs.
   *
   * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.
   * @param requestOptions RequestInit (options) for the HTTP requests.
   * @param fetchFunc Optional overriding value for the `window.fetch` function.
   * @param onProgress Optional, progress callback function, fired periodically
   *   before the load is completed.
   * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same
   *   length as `fetchURLs`.
   */
  function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {
      return __awaiter(this, void 0, void 0, function () {
          var fetchFunc, requests, fetchStartFraction, fetchEndFraction, responses, _a, bufferPromises, bufferStartFraction, bufferEndFraction, buffers, _b;
          return __generator(this, function (_c) {
              switch (_c.label) {
                  case 0:
                      if (loadOptions == null) {
                          loadOptions = {};
                      }
                      fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :
                          loadOptions.fetchFunc;
                      requests = fetchURLs.map(function (fetchURL) {
                          return fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true });
                      });
                      fetchStartFraction = 0;
                      fetchEndFraction = 0.5;
                      if (!(loadOptions.onProgress == null)) return [3 /*break*/, 2];
                      return [4 /*yield*/, Promise.all(requests)];
                  case 1:
                      _a = _c.sent();
                      return [3 /*break*/, 4];
                  case 2: return [4 /*yield*/, monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction)];
                  case 3:
                      _a = _c.sent();
                      _c.label = 4;
                  case 4:
                      responses = _a;
                      bufferPromises = responses.map(function (response) { return response.arrayBuffer(); });
                      bufferStartFraction = 0.5;
                      bufferEndFraction = 1;
                      if (!(loadOptions.onProgress == null)) return [3 /*break*/, 6];
                      return [4 /*yield*/, Promise.all(bufferPromises)];
                  case 5:
                      _b = _c.sent();
                      return [3 /*break*/, 8];
                  case 6: return [4 /*yield*/, monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction)];
                  case 7:
                      _b = _c.sent();
                      _c.label = 8;
                  case 8:
                      buffers = _b;
                      return [2 /*return*/, buffers];
              }
          });
      });
  }
  /**
   * Reads a weights manifest JSON configuration, fetches the weights and
   * returns them as `Tensor`s.
   *
   * @param manifest The weights manifest JSON.
   * @param filePathPrefix The path prefix for filenames given in the manifest.
   *     Defaults to the empty string.
   * @param weightNames The names of the weights to be fetched.
   */
  function loadWeights(manifest, filePathPrefix, weightNames, requestInit) {
      if (filePathPrefix === void 0) { filePathPrefix = ''; }
      return __awaiter(this, void 0, void 0, function () {
          var fetchWeights, loadWeights;
          return __generator(this, function (_a) {
              fetchWeights = function (fetchUrls) {
                  return loadWeightsAsArrayBuffer(fetchUrls, { requestInit: requestInit });
              };
              loadWeights = weightsLoaderFactory(fetchWeights);
              return [2 /*return*/, loadWeights(manifest, filePathPrefix, weightNames)];
          });
      });
  }
  /**
   * Creates a function, which reads a weights manifest JSON configuration,
   * fetches the weight files using the specified function and returns them as
   * `Tensor`s.
   *
   * ```js
   * // example for creating a nodejs weight loader, which reads the weight files
   * // from disk using fs.readFileSync
   *
   * import * as fs from 'fs'
   *
   * const fetchWeightsFromDisk = (filePaths: string[]) =>
   *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)
   *
   * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)
   *
   * const manifest = JSON.parse(
   *   fs.readFileSync('./my_model-weights_manifest').toString()
   * )
   * const weightMap = await loadWeights(manifest, './')
   * ```
   * @param fetchWeightsFunction The function used for fetching the weight files.
   * @returns Weight loading function.
   */
  function weightsLoaderFactory(fetchWeightsFunction) {
      var _this = this;
      return function (manifest, filePathPrefix, weightNames) {
          if (filePathPrefix === void 0) { filePathPrefix = ''; }
          return __awaiter(_this, void 0, void 0, function () {
              var groupIndicesToFetchMap, groupWeightsToFetch, weightsFound, allManifestWeightNames, weightsNotFound, groupIndicesToFetch, fetchUrls, buffers, weightsTensorMap, bufferIndexOffset;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          groupIndicesToFetchMap = manifest.map(function () { return false; });
                          groupWeightsToFetch = {};
                          weightsFound = weightNames != null ? weightNames.map(function () { return false; }) : [];
                          allManifestWeightNames = [];
                          manifest.forEach(function (manifestGroupConfig, groupIndex) {
                              var groupOffset = 0;
                              manifestGroupConfig.weights.forEach(function (weightsEntry) {
                                  var rawDtype = ('quantization' in weightsEntry) ?
                                      weightsEntry.quantization.dtype :
                                      weightsEntry.dtype;
                                  var weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *
                                      sizeFromShape(weightsEntry.shape);
                                  var enqueueWeightsForFetchingFn = function () {
                                      groupIndicesToFetchMap[groupIndex] = true;
                                      if (groupWeightsToFetch[groupIndex] == null) {
                                          groupWeightsToFetch[groupIndex] = [];
                                      }
                                      groupWeightsToFetch[groupIndex].push({
                                          manifestEntry: weightsEntry,
                                          groupOffset: groupOffset,
                                          sizeBytes: weightsBytes
                                      });
                                  };
                                  if (weightNames != null) {
                                      weightNames.forEach(function (weightName, weightIndex) {
                                          if (weightName === weightsEntry.name) {
                                              enqueueWeightsForFetchingFn();
                                              weightsFound[weightIndex] = true;
                                          }
                                      });
                                  }
                                  else {
                                      enqueueWeightsForFetchingFn();
                                  }
                                  allManifestWeightNames.push(weightsEntry.name);
                                  groupOffset += weightsBytes;
                              });
                          });
                          if (!weightsFound.every(function (found) { return found; })) {
                              weightsNotFound = weightNames.filter(function (_, i) { return !weightsFound[i]; });
                              throw new Error("Could not find weights in manifest with names: " +
                                  (weightsNotFound.join(', ') + ". \n") +
                                  "Manifest JSON has weights with names: " +
                                  (allManifestWeightNames.join(', ') + "."));
                          }
                          groupIndicesToFetch = groupIndicesToFetchMap.reduce(function (accumulator, shouldFetch, i) {
                              if (shouldFetch) {
                                  accumulator.push(i);
                              }
                              return accumulator;
                          }, []);
                          fetchUrls = [];
                          groupIndicesToFetch.forEach(function (i) {
                              manifest[i].paths.forEach(function (filepath) {
                                  var fetchUrl = filePathPrefix +
                                      (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;
                                  fetchUrls.push(fetchUrl);
                              });
                          });
                          return [4 /*yield*/, fetchWeightsFunction(fetchUrls)];
                      case 1:
                          buffers = _a.sent();
                          weightsTensorMap = {};
                          bufferIndexOffset = 0;
                          groupIndicesToFetch.forEach(function (i) {
                              var numBuffers = manifest[i].paths.length;
                              var groupBytes = 0;
                              for (var i_1 = 0; i_1 < numBuffers; i_1++) {
                                  groupBytes += buffers[bufferIndexOffset + i_1].byteLength;
                              }
                              // Create a buffer for the whole group.
                              var groupBuffer = new ArrayBuffer(groupBytes);
                              var groupByteBuffer = new Uint8Array(groupBuffer);
                              var groupBufferOffset = 0;
                              for (var i_2 = 0; i_2 < numBuffers; i_2++) {
                                  var buffer = new Uint8Array(buffers[bufferIndexOffset + i_2]);
                                  groupByteBuffer.set(buffer, groupBufferOffset);
                                  groupBufferOffset += buffer.byteLength;
                              }
                              var weightsEntries = groupWeightsToFetch[i];
                              weightsEntries.forEach(function (weightsEntry) {
                                  var byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);
                                  var nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);
                                  for (var name_1 in nameToTensorMap) {
                                      weightsTensorMap[name_1] = nameToTensorMap[name_1];
                                  }
                              });
                              bufferIndexOffset += numBuffers;
                          });
                          return [2 /*return*/, weightsTensorMap];
                  }
              });
          });
      };
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var OCTET_STREAM_MIME_TYPE = 'application/octet-stream';
  var JSON_TYPE = 'application/json';
  var HTTPRequest = /** @class */ (function () {
      function HTTPRequest(path, loadOptions) {
          this.DEFAULT_METHOD = 'POST';
          if (loadOptions == null) {
              loadOptions = {};
          }
          this.weightPathPrefix = loadOptions.weightPathPrefix;
          this.onProgress = loadOptions.onProgress;
          if (loadOptions.fetchFunc != null) {
              assert(typeof loadOptions.fetchFunc === 'function', function () { return 'Must pass a function that matches the signature of ' +
                  '`fetch` (see ' +
                  'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)'; });
              this.fetch = loadOptions.fetchFunc;
          }
          else {
              this.fetch = env().platform.fetch;
          }
          assert(path != null && path.length > 0, function () { return 'URL path for http must not be null, undefined or ' +
              'empty.'; });
          if (Array.isArray(path)) {
              assert(path.length === 2, function () { return 'URL paths for http must have a length of 2, ' +
                  ("(actual length is " + path.length + ")."); });
          }
          this.path = path;
          if (loadOptions.requestInit != null &&
              loadOptions.requestInit.body != null) {
              throw new Error('requestInit is expected to have no pre-existing body, but has one.');
          }
          this.requestInit = loadOptions.requestInit || {};
      }
      HTTPRequest.prototype.save = function (modelArtifacts) {
          return __awaiter(this, void 0, void 0, function () {
              var init, weightsManifest, modelTopologyAndWeightManifest, response;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
                              throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +
                                  'in binary formats yet.');
                          }
                          init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
                          init.body = new FormData();
                          weightsManifest = [{
                                  paths: ['./model.weights.bin'],
                                  weights: modelArtifacts.weightSpecs,
                              }];
                          modelTopologyAndWeightManifest = {
                              modelTopology: modelArtifacts.modelTopology,
                              format: modelArtifacts.format,
                              generatedBy: modelArtifacts.generatedBy,
                              convertedBy: modelArtifacts.convertedBy,
                              userDefinedMetadata: modelArtifacts.userDefinedMetadata,
                              weightsManifest: weightsManifest
                          };
                          init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), 'model.json');
                          if (modelArtifacts.weightData != null) {
                              init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: OCTET_STREAM_MIME_TYPE }), 'model.weights.bin');
                          }
                          return [4 /*yield*/, this.fetch(this.path, init)];
                      case 1:
                          response = _a.sent();
                          if (response.ok) {
                              return [2 /*return*/, {
                                      modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),
                                      responses: [response],
                                  }];
                          }
                          else {
                              throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status " +
                                  (response.status + "."));
                          }
                  }
              });
          });
      };
      /**
       * Load model artifacts via HTTP request(s).
       *
       * See the documentation to `tf.io.http` for details on the saved
       * artifacts.
       *
       * @returns The loaded model artifacts (if loading succeeds).
       */
      HTTPRequest.prototype.load = function () {
          return __awaiter(this, void 0, void 0, function () {
              var modelConfigRequest, modelConfig, e_1, message, modelTopology, weightsManifest, generatedBy, convertedBy, format, userDefinedMetadata, weightSpecs, weightData, results;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.fetch(this.path, this.requestInit)];
                      case 1:
                          modelConfigRequest = _a.sent();
                          if (!modelConfigRequest.ok) {
                              throw new Error("Request to " + this.path + " failed with status code " +
                                  (modelConfigRequest.status + ". Please verify this URL points to ") +
                                  "the model JSON of the model to load.");
                          }
                          _a.label = 2;
                      case 2:
                          _a.trys.push([2, 4, , 5]);
                          return [4 /*yield*/, modelConfigRequest.json()];
                      case 3:
                          modelConfig = _a.sent();
                          return [3 /*break*/, 5];
                      case 4:
                          e_1 = _a.sent();
                          message = "Failed to parse model JSON of response from " + this.path + ".";
                          // TODO(nsthorat): Remove this after some time when we're comfortable that
                          // .pb files are mostly gone.
                          if (this.path.endsWith('.pb')) {
                              message += ' Your path contains a .pb file extension. ' +
                                  'Support for .pb models have been removed in TensorFlow.js 1.0 ' +
                                  'in favor of .json models. You can re-convert your Python ' +
                                  'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +
                                  'or you can convert your.pb models with the \'pb2json\'' +
                                  'NPM script in the tensorflow/tfjs-converter repository.';
                          }
                          else {
                              message += ' Please make sure the server is serving valid ' +
                                  'JSON for this request.';
                          }
                          throw new Error(message);
                      case 5:
                          modelTopology = modelConfig.modelTopology;
                          weightsManifest = modelConfig.weightsManifest;
                          generatedBy = modelConfig.generatedBy;
                          convertedBy = modelConfig.convertedBy;
                          format = modelConfig.format;
                          userDefinedMetadata = modelConfig.userDefinedMetadata;
                          // We do not allow both modelTopology and weightsManifest to be missing.
                          if (modelTopology == null && weightsManifest == null) {
                              throw new Error("The JSON from HTTP path " + this.path + " contains neither model " +
                                  "topology or manifest for weights.");
                          }
                          if (!(weightsManifest != null)) return [3 /*break*/, 7];
                          return [4 /*yield*/, this.loadWeights(weightsManifest)];
                      case 6:
                          results = _a.sent();
                          weightSpecs = results[0], weightData = results[1];
                          _a.label = 7;
                      case 7: return [2 /*return*/, {
                              modelTopology: modelTopology,
                              weightSpecs: weightSpecs,
                              weightData: weightData,
                              userDefinedMetadata: userDefinedMetadata,
                              generatedBy: generatedBy,
                              convertedBy: convertedBy,
                              format: format
                          }];
                  }
              });
          });
      };
      HTTPRequest.prototype.loadWeights = function (weightsManifest) {
          return __awaiter(this, void 0, void 0, function () {
              var weightPath, _a, prefix, suffix, pathPrefix, weightSpecs, _i, weightsManifest_1, entry, fetchURLs, buffers;
              return __generator(this, function (_b) {
                  switch (_b.label) {
                      case 0:
                          weightPath = Array.isArray(this.path) ? this.path[1] : this.path;
                          _a = parseUrl(weightPath), prefix = _a[0], suffix = _a[1];
                          pathPrefix = this.weightPathPrefix || prefix;
                          weightSpecs = [];
                          for (_i = 0, weightsManifest_1 = weightsManifest; _i < weightsManifest_1.length; _i++) {
                              entry = weightsManifest_1[_i];
                              weightSpecs.push.apply(weightSpecs, entry.weights);
                          }
                          fetchURLs = [];
                          weightsManifest.forEach(function (weightsGroup) {
                              weightsGroup.paths.forEach(function (path) {
                                  fetchURLs.push(pathPrefix + path + suffix);
                              });
                          });
                          return [4 /*yield*/, loadWeightsAsArrayBuffer(fetchURLs, {
                                  requestInit: this.requestInit,
                                  fetchFunc: this.fetch,
                                  onProgress: this.onProgress
                              })];
                      case 1:
                          buffers = _b.sent();
                          return [2 /*return*/, [weightSpecs, concatenateArrayBuffers(buffers)]];
                  }
              });
          });
      };
      HTTPRequest.URL_SCHEME_REGEX = /^https?:\/\//;
      return HTTPRequest;
  }());
  /**
   * Extract the prefix and suffix of the url, where the prefix is the path before
   * the last file, and suffix is the search params after the last file.
   * ```
   * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'
   * [prefix, suffix] = parseUrl(url)
   * // prefix = 'http://tfhub.dev/model/1/'
   * // suffix = '?tfjs-format=file'
   * ```
   * @param url the model url to be parsed.
   */
  function parseUrl(url) {
      var lastSlash = url.lastIndexOf('/');
      var lastSearchParam = url.lastIndexOf('?');
      var prefix = url.substring(0, lastSlash);
      var suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';
      return [prefix + '/', suffix];
  }
  function isHTTPScheme(url) {
      return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;
  }
  var httpRouter = function (url, loadOptions) {
      if (typeof fetch === 'undefined' &&
          (loadOptions == null || loadOptions.fetchFunc == null)) {
          // `http` uses `fetch` or `node-fetch`, if one wants to use it in
          // an environment that is not the browser or node they have to setup a
          // global fetch polyfill.
          return null;
      }
      else {
          var isHTTP = true;
          if (Array.isArray(url)) {
              isHTTP = url.every(function (urlItem) { return isHTTPScheme(urlItem); });
          }
          else {
              isHTTP = isHTTPScheme(url);
          }
          if (isHTTP) {
              return http(url, loadOptions);
          }
      }
      return null;
  };
  IORouterRegistry.registerSaveRouter(httpRouter);
  IORouterRegistry.registerLoadRouter(httpRouter);
  /**
   * Creates an IOHandler subtype that sends model artifacts to HTTP server.
   *
   * An HTTP request of the `multipart/form-data` mime type will be sent to the
   * `path` URL. The form data includes artifacts that represent the topology
   * and/or weights of the model. In the case of Keras-style `tf.Model`, two
   * blobs (files) exist in form-data:
   *   - A JSON file consisting of `modelTopology` and `weightsManifest`.
   *   - A binary weights file consisting of the concatenated weight values.
   * These files are in the same format as the one generated by
   * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).
   *
   * The following code snippet exemplifies the client-side code that uses this
   * function:
   *
   * ```js
   * const model = tf.sequential();
   * model.add(
   *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
   *
   * const saveResult = await model.save(tf.io.http(
   *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));
   * console.log(saveResult);
   * ```
   *
   * If the default `POST` method is to be used, without any custom parameters
   * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:
   *
   * ```js
   * const saveResult = await model.save('http://model-server:5000/upload');
   * ```
   *
   * The following GitHub Gist
   * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864
   * implements a server based on [flask](https://github.com/pallets/flask) that
   * can receive the request. Upon receiving the model artifacts via the requst,
   * this particular server reconsistutes instances of [Keras
   * Models](https://keras.io/models/model/) in memory.
   *
   *
   * @param path A URL path to the model.
   *   Can be an absolute HTTP path (e.g.,
   *   'http://localhost:8000/model-upload)') or a relative path (e.g.,
   *   './model-upload').
   * @param requestInit Request configurations to be used when sending
   *    HTTP request to server using `fetch`. It can contain fields such as
   *    `method`, `credentials`, `headers`, `mode`, etc. See
   *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
   *    for more information. `requestInit` must not have a body, because the
   * body will be set by TensorFlow.js. File blobs representing the model
   * topology (filename: 'model.json') and the weights of the model (filename:
   * 'model.weights.bin') will be appended to the body. If `requestInit` has a
   * `body`, an Error will be thrown.
   * @param loadOptions Optional configuration for the loading. It includes the
   *   following fields:
   *   - weightPathPrefix Optional, this specifies the path prefix for weight
   *     files, by default this is calculated from the path param.
   *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,
   *     the `fetch` from node-fetch can be used here.
   *   - onProgress Optional, progress callback function, fired periodically
   *     before the load is completed.
   * @returns An instance of `IOHandler`.
   */
  /**
   * @doc {
   *   heading: 'Models',
   *   subheading: 'Loading',
   *   namespace: 'io',
   *   ignoreCI: true
   * }
   */
  function http(path, loadOptions) {
      return new HTTPRequest(path, loadOptions);
  }
  /**
   * Deprecated. Use `tf.io.http`.
   * @param path
   * @param loadOptions
   */
  function browserHTTPRequest(path, loadOptions) {
      return http(path, loadOptions);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var PassthroughLoader = /** @class */ (function () {
      function PassthroughLoader(modelArtifacts) {
          this.modelArtifacts = modelArtifacts;
      }
      PassthroughLoader.prototype.load = function () {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  return [2 /*return*/, this.modelArtifacts];
              });
          });
      };
      return PassthroughLoader;
  }());
  var PassthroughSaver = /** @class */ (function () {
      function PassthroughSaver(saveHandler) {
          this.saveHandler = saveHandler;
      }
      PassthroughSaver.prototype.save = function (modelArtifacts) {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  return [2 /*return*/, this.saveHandler(modelArtifacts)];
              });
          });
      };
      return PassthroughSaver;
  }());
  /**
   * Creates an IOHandler that loads model artifacts from memory.
   *
   * When used in conjunction with `tf.loadLayersModel`, an instance of
   * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
   *
   * ```js
   * const model = await tf.loadLayersModel(tf.io.fromMemory(
   *     modelTopology, weightSpecs, weightData));
   * ```
   *
   * @param modelArtifacts a object containing model topology (i.e., parsed from
   *   the JSON format).
   * @param weightSpecs An array of `WeightsManifestEntry` objects describing the
   *   names, shapes, types, and quantization of the weight data.
   * @param weightData A single `ArrayBuffer` containing the weight data,
   *   concatenated in the order described by the weightSpecs.
   * @param trainingConfig Model training configuration. Optional.
   *
   * @returns A passthrough `IOHandler` that simply loads the provided data.
   */
  function fromMemory(modelArtifacts, weightSpecs, weightData, trainingConfig) {
      if (arguments.length === 1) {
          var isModelArtifacts = modelArtifacts.modelTopology != null ||
              modelArtifacts.weightSpecs != null;
          if (isModelArtifacts) {
              return new PassthroughLoader(modelArtifacts);
          }
          else {
              // Legacy support: with only modelTopology.
              // TODO(cais): Remove this deprecated API.
              console.warn('Please call tf.io.fromMemory() with only one argument. ' +
                  'The argument should be of type ModelArtifacts. ' +
                  'The multi-argument signature of tf.io.fromMemory() has been ' +
                  'deprecated and will be removed in a future release.');
              return new PassthroughLoader({ modelTopology: modelArtifacts });
          }
      }
      else {
          // Legacy support.
          // TODO(cais): Remove this deprecated API.
          console.warn('Please call tf.io.fromMemory() with only one argument. ' +
              'The argument should be of type ModelArtifacts. ' +
              'The multi-argument signature of tf.io.fromMemory() has been ' +
              'deprecated and will be removed in a future release.');
          return new PassthroughLoader({
              modelTopology: modelArtifacts,
              weightSpecs: weightSpecs,
              weightData: weightData,
              trainingConfig: trainingConfig
          });
      }
  }
  /**
   * Creates an IOHandler that passes saved model artifacts to a callback.
   *
   * ```js
   * function handleSave(artifacts) {
   *   // ... do something with the artifacts ...
   *   return {modelArtifactsInfo: {...}, ...};
   * }
   *
   * const saveResult = model.save(tf.io.withSaveHandler(handleSave));
   * ```
   *
   * @param saveHandler A function that accepts a `ModelArtifacts` and returns a
   *     `SaveResult`.
   */
  function withSaveHandler(saveHandler) {
      return new PassthroughSaver(saveHandler);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */

  var io = {
      __proto__: null,
      browserFiles: browserFiles,
      browserHTTPRequest: browserHTTPRequest,
      concatenateArrayBuffers: concatenateArrayBuffers,
      decodeWeights: decodeWeights,
      encodeWeights: encodeWeights,
      fromMemory: fromMemory,
      getLoadHandlers: getLoadHandlers,
      getModelArtifactsInfoForJSON: getModelArtifactsInfoForJSON,
      getSaveHandlers: getSaveHandlers,
      http: http,
      isHTTPScheme: isHTTPScheme,
      loadWeights: loadWeights,
      registerLoadRouter: registerLoadRouter,
      registerSaveRouter: registerSaveRouter,
      weightsLoaderFactory: weightsLoaderFactory,
      withSaveHandler: withSaveHandler,
      copyModel: copyModel,
      listModels: listModels,
      moveModel: moveModel,
      removeModel: removeModel
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take
   * value `onValue` (defaults to 1), while all other locations take value
   * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank
   * `R+1` with the last axis of size `depth`.
   *
   * ```js
   * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();
   * ```
   *
   * @param indices `tf.Tensor` of indices with dtype `int32`.
   * @param depth The depth of the one hot dimension.
   * @param onValue A number used to fill in the output when the index matches
   * the location.
   * @param offValue A number used to fill in the output when the index does
   *     not match the location.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function oneHot_(indices, depth, onValue, offValue) {
      if (onValue === void 0) { onValue = 1; }
      if (offValue === void 0) { offValue = 0; }
      if (depth < 2) {
          throw new Error("Error in oneHot: depth must be >=2, but it is " + depth);
      }
      var $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');
      var outShape = $indices.shape.concat([depth]);
      var forward = function (backend, save) {
          save([$indices]);
          return reshape(backend.oneHot($indices.flatten(), depth, onValue, offValue), outShape);
      };
      var inputs = { indices: $indices };
      var attrs = { depth: depth, onValue: onValue, offValue: offValue };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, OneHot, attrs);
  }
  var oneHot = op({ oneHot_: oneHot_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the confusion matrix from true labels and predicted labels.
   *
   * ```js
   * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');
   * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');
   * const numClasses = 3;
   * const out = tf.math.confusionMatrix(labels, predictions, numClasses);
   * out.print();
   * // Expected output matrix:
   * // [[2, 0, 0],
   * //  [0, 1, 1],
   * //  [0, 0, 1]]
   * ```
   *
   * @param labels The target labels, assumed to be 0-based integers
   *   for the classes. The shape is `[numExamples]`, where
   *   `numExamples` is the number of examples included.
   * @param predictions The predicted classes, assumed to be
   *   0-based integers for the classes. Must have the same shape as `labels`.
   * @param numClasses Number of all classes, as an integer.
   *   Its value must be larger than the largest element in `labels` and
   *   `predictions`.
   * @returns The confusion matrix as a int32-type 2D tensor. The value at
   *   row `r` and column `c` is the number of times examples of actual class
   *   `r` were predicted as class `c`.
   */
  /** @doc {heading: 'Operations', subheading: 'Evaluation'} */
  function confusionMatrix_(labels, predictions, numClasses) {
      var $labels = convertToTensor(labels, 'labels', 'confusionMatrix');
      var $predictions = convertToTensor(predictions, 'predictions', 'confusionMatrix');
      assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), function () { return "If provided, numClasses must be a positive integer, " +
          ("but got " + numClasses); });
      assert($labels.rank === 1, function () { return "Expected the rank of labels to be 1, but got " + $labels.rank; });
      assert($predictions.rank === 1, function () { return "Expected the rank of predictions to be 1, " +
          ("but got " + $predictions.rank); });
      assert($labels.shape[0] === $predictions.shape[0], function () { return "Mismatch in the number of examples: " +
          ($labels.shape[0] + " vs. " + $predictions.shape[0] + ". ") +
          "Labels and predictions should have the same number of elements."; });
      assert(numClasses > 0 && Number.isInteger(numClasses), function () { return "numClasses is required to be a positive integer, but got " +
          ("" + numClasses); });
      // TODO(cais): In the future, if oneHot supports tensors inputs for
      //   `numClasses`, `confusionMatrix` can make `numClasses` optional.
      var oneHotLabels = oneHot($labels.asType('int32'), numClasses);
      var oneHotPredictions = oneHot($predictions.asType('int32'), numClasses);
      var oneHotLabelsT = oneHotLabels.transpose();
      return oneHotLabelsT.matMul(oneHotPredictions).asType('int32');
  }
  var confusionMatrix = op({ confusionMatrix_: confusionMatrix_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */

  var math = {
      __proto__: null,
      confusionMatrix: confusionMatrix
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.
   *
   * The same functionality can be achieved with `tf.tensor`, but in general
   * we recommend using `tf.tensor3d` as it makes the code more readable.
   *
   *  ```js
   * // Pass a nested array.
   * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();
   * ```
   * ```js
   * // Pass a flat array and specify a shape.
   * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();
   * ```
   *
   * @param values The values of the tensor. Can be nested array of numbers,
   *     or a flat array, or a `TypedArray`.
   * @param shape The shape of the tensor. If not provided,  it is inferred from
   *     `values`.
   * @param dtype The data type.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function tensor3d(values, shape, dtype) {
      assertNonNull(values);
      if (shape != null && shape.length !== 3) {
          throw new Error('tensor3d() requires shape to have three numbers');
      }
      var inferredShape = inferShape(values, dtype);
      if (inferredShape.length !== 3 && inferredShape.length !== 1) {
          throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');
      }
      if (inferredShape.length === 1 && shape == null) {
          throw new Error('tensor3d() requires shape to be provided when `values` ' +
              'are a flat array');
      }
      return makeTensor(values, shape, inferredShape, dtype);
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var fromPixels2DContext;
  /**
   * Creates a `tf.Tensor` from an image.
   *
   * ```js
   * const image = new ImageData(1, 1);
   * image.data[0] = 100;
   * image.data[1] = 150;
   * image.data[2] = 200;
   * image.data[3] = 255;
   *
   * tf.browser.fromPixels(image).print();
   * ```
   *
   * @param pixels The input image to construct the tensor from. The
   * supported image types are all 4-channel. You can also pass in an image
   * object with following attributes:
   * `{data: Uint8Array; width: number; height: number}`
   * @param numChannels The number of channels of the output tensor. A
   * numChannels value less than 4 allows you to ignore channels. Defaults to
   * 3 (ignores alpha channel of input image).
   */
  /** @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true} */
  function fromPixels_(pixels, numChannels) {
      if (numChannels === void 0) { numChannels = 3; }
      // Sanity checks.
      if (numChannels > 4) {
          throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');
      }
      if (pixels == null) {
          throw new Error('pixels passed to tf.browser.fromPixels() can not be null');
      }
      var isPixelData = false;
      var isImageData = false;
      var isVideo = false;
      var isImage = false;
      var isCanvasLike = false;
      if (pixels.data instanceof Uint8Array) {
          isPixelData = true;
      }
      else if (typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {
          isImageData = true;
      }
      else if (typeof (HTMLVideoElement) !== 'undefined' &&
          pixels instanceof HTMLVideoElement) {
          isVideo = true;
      }
      else if (typeof (HTMLImageElement) !== 'undefined' &&
          pixels instanceof HTMLImageElement) {
          isImage = true;
          // tslint:disable-next-line: no-any
      }
      else if (pixels.getContext != null) {
          isCanvasLike = true;
      }
      else {
          throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' +
              "HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData " +
              "in browser, or OffscreenCanvas, ImageData in webworker" +
              " or {data: Uint32Array, width: number, height: number}, " +
              ("but was " + pixels.constructor.name));
      }
      if (isVideo) {
          var HAVE_CURRENT_DATA_READY_STATE = 2;
          if (isVideo &&
              pixels.readyState <
                  HAVE_CURRENT_DATA_READY_STATE) {
              throw new Error('The video element has not loaded data yet. Please wait for ' +
                  '`loadeddata` event on the <video> element.');
          }
      }
      // If the current backend has 'FromPixels' registered, it has a more
      // efficient way of handling pixel uploads, so we call that.
      var kernel = getKernel(FromPixels, ENGINE.backendName);
      if (kernel != null) {
          var inputs = { pixels: pixels };
          var attrs = { numChannels: numChannels };
          return ENGINE.runKernel(FromPixels, inputs, attrs);
      }
      var _a = isVideo ?
          [
              pixels.videoWidth,
              pixels.videoHeight
          ] :
          [pixels.width, pixels.height], width = _a[0], height = _a[1];
      var vals;
      if (isCanvasLike) {
          vals =
              // tslint:disable-next-line:no-any
              pixels.getContext('2d').getImageData(0, 0, width, height).data;
      }
      else if (isImageData || isPixelData) {
          vals = pixels.data;
      }
      else if (isImage || isVideo) {
          if (fromPixels2DContext == null) {
              fromPixels2DContext = document.createElement('canvas').getContext('2d');
          }
          fromPixels2DContext.canvas.width = width;
          fromPixels2DContext.canvas.height = height;
          fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
          vals = fromPixels2DContext.getImageData(0, 0, width, height).data;
      }
      var values;
      if (numChannels === 4) {
          values = new Int32Array(vals);
      }
      else {
          var numPixels = width * height;
          values = new Int32Array(numPixels * numChannels);
          for (var i = 0; i < numPixels; i++) {
              for (var channel = 0; channel < numChannels; ++channel) {
                  values[i * numChannels + channel] = vals[i * 4 + channel];
              }
          }
      }
      var outShape = [height, width, numChannels];
      return tensor3d(values, outShape, 'int32');
  }
  /**
   * Draws a `tf.Tensor` of pixel values to a byte array or optionally a
   * canvas.
   *
   * When the dtype of the input is 'float32', we assume values in the range
   * [0-1]. Otherwise, when input is 'int32', we assume values in the range
   * [0-255].
   *
   * Returns a promise that resolves when the canvas has been drawn to.
   *
   * @param img A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If
   *     rank-3, must have depth of 1, 3 or 4. When depth of 1, draws
   * grayscale. When depth of 3, we draw with the first three components of
   * the depth dimension corresponding to r, g, b and alpha = 1. When depth of
   * 4, all four components of the depth dimension correspond to r, g, b, a.
   * @param canvas The canvas to draw to.
   */
  /** @doc {heading: 'Browser', namespace: 'browser'} */
  function toPixels(img, canvas) {
      return __awaiter(this, void 0, void 0, function () {
          var $img, originalImgTensor, _a, height, width, depth, data, minTensor, maxTensor, vals, minVals, maxVals, min, max, multiplier, bytes, i, r, g, b, a, j, ctx, imageData;
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      $img = convertToTensor(img, 'img', 'toPixels');
                      if (!(img instanceof Tensor)) {
                          originalImgTensor = $img;
                          $img = originalImgTensor.toInt();
                          originalImgTensor.dispose();
                      }
                      if ($img.rank !== 2 && $img.rank !== 3) {
                          throw new Error("toPixels only supports rank 2 or 3 tensors, got rank " + $img.rank + ".");
                      }
                      _a = $img.shape.slice(0, 2), height = _a[0], width = _a[1];
                      depth = $img.rank === 2 ? 1 : $img.shape[2];
                      if (depth > 4 || depth === 2) {
                          throw new Error("toPixels only supports depth of size " +
                              ("1, 3 or 4 but got " + depth));
                      }
                      return [4 /*yield*/, $img.data()];
                  case 1:
                      data = _b.sent();
                      minTensor = $img.min();
                      maxTensor = $img.max();
                      return [4 /*yield*/, Promise.all([minTensor.data(), maxTensor.data()])];
                  case 2:
                      vals = _b.sent();
                      minVals = vals[0];
                      maxVals = vals[1];
                      min = minVals[0];
                      max = maxVals[0];
                      minTensor.dispose();
                      maxTensor.dispose();
                      if ($img.dtype === 'float32') {
                          if (min < 0 || max > 1) {
                              throw new Error("Tensor values for a float32 Tensor must be in the " +
                                  ("range [0 - 1] but got range [" + min + " - " + max + "]."));
                          }
                      }
                      else if ($img.dtype === 'int32') {
                          if (min < 0 || max > 255) {
                              throw new Error("Tensor values for a int32 Tensor must be in the " +
                                  ("range [0 - 255] but got range [" + min + " - " + max + "]."));
                          }
                      }
                      else {
                          throw new Error("Unsupported type for toPixels: " + $img.dtype + "." +
                              " Please use float32 or int32 tensors.");
                      }
                      multiplier = $img.dtype === 'float32' ? 255 : 1;
                      bytes = new Uint8ClampedArray(width * height * 4);
                      for (i = 0; i < height * width; ++i) {
                          r = void 0, g = void 0, b = void 0, a = void 0;
                          if (depth === 1) {
                              r = data[i] * multiplier;
                              g = data[i] * multiplier;
                              b = data[i] * multiplier;
                              a = 255;
                          }
                          else if (depth === 3) {
                              r = data[i * 3] * multiplier;
                              g = data[i * 3 + 1] * multiplier;
                              b = data[i * 3 + 2] * multiplier;
                              a = 255;
                          }
                          else if (depth === 4) {
                              r = data[i * 4] * multiplier;
                              g = data[i * 4 + 1] * multiplier;
                              b = data[i * 4 + 2] * multiplier;
                              a = data[i * 4 + 3] * multiplier;
                          }
                          j = i * 4;
                          bytes[j + 0] = Math.round(r);
                          bytes[j + 1] = Math.round(g);
                          bytes[j + 2] = Math.round(b);
                          bytes[j + 3] = Math.round(a);
                      }
                      if (canvas != null) {
                          canvas.width = width;
                          canvas.height = height;
                          ctx = canvas.getContext('2d');
                          imageData = new ImageData(bytes, width, height);
                          ctx.putImageData(imageData, 0, 0);
                      }
                      if ($img !== img) {
                          $img.dispose();
                      }
                      return [2 /*return*/, bytes];
              }
          });
      });
  }
  var fromPixels = op({ fromPixels_: fromPixels_ });

  var browser = {
      __proto__: null,
      toPixels: toPixels,
      fromPixels: fromPixels
  };

  /**
   * Validate gather nd inputs.
   *
   * @param tensor The tensor contains the source values.
   * @param indices The tensor contains the indices to slice the source.
   *
   * @returns [resultShape, numUpdates, sliceSize, strides]
   */
  function prepareAndValidate(tensor, indices) {
      if (tensor.rank < 1) {
          throw new Error('tf.gatherND() expects the input to be rank 1 or higher,' +
              (" but the rank was " + tensor.rank + "."));
      }
      if (indices.rank < 1) {
          throw new Error('tf.gatherND() expects the indices to be rank 1 or higher,' +
              (" but the rank was " + indices.rank + "."));
      }
      if (indices.dtype !== 'int32') {
          throw new Error('tf.gatherND() expects the indices to be int32 type,' +
              (" but the dtype was " + indices.dtype + "."));
      }
      if (indices.shape[indices.rank - 1] > tensor.rank) {
          throw new Error('index innermost dimension length must be <= tensor rank; saw: ' +
              (indices.shape[indices.rank - 1] + " vs. " + tensor.rank));
      }
      if (tensor.size === 0) {
          throw new Error('Requested more than 0 entries, but input is empty.' +
              (" Input shape: " + tensor.shape + "."));
      }
      var indicesShape = indices.shape;
      var sliceRank = indicesShape[indicesShape.length - 1];
      // The result shape is
      //   indices.shape[:-1] + params.shape[indices.shape[-1]:]
      var nResult = 1;
      for (var i = 0; i < indicesShape.length - 1; ++i) {
          nResult *= indicesShape[i];
      }
      var inputShape = tensor.shape;
      var resultShape = indicesShape.slice();
      resultShape.pop();
      var sliceSize = 1;
      for (var i = sliceRank; i < tensor.rank; ++i) {
          sliceSize *= inputShape[i];
          resultShape.push(inputShape[i]);
      }
      var strides = computeStrides(tensor.shape).map(function (stride) { return stride / sliceSize; }).concat([1]).slice(0, sliceRank);
      return [resultShape, nResult, sliceSize, strides];
  }

  var gather_nd_util = {
      __proto__: null,
      prepareAndValidate: prepareAndValidate
  };

  /**
   * Check whether updates.shape = indices.shape[:batchDim] +
   * shape[sliceDim:]
   *
   * @param x The input tensor.
   */
  function validateUpdateShape(shape, indices, updates) {
      var sliceDim = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;
      var batchDim = (indices.rank > 1) ? indices.rank - 1 : 1;
      var shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' +
          ("shape[sliceDim:], got updates.shape: " + updates.shape) +
          (", indices.shape: " + indices.shape + ", shape: " + shape) +
          (", sliceDim: " + sliceDim + ", and batchDim: " + batchDim + ".");
      if (updates.rank < batchDim) {
          throw new Error(shapeError + (" update.rank < " + batchDim + ". "));
      }
      if (shape.length < sliceDim + (updates.rank - batchDim)) {
          throw new Error(shapeError +
              (" Output shape length < " + (sliceDim + (updates.rank - batchDim))));
      }
      if (updates.rank !== batchDim + shape.length - sliceDim) {
          throw new Error(shapeError + (" update.rank != " + (batchDim + shape.length - sliceDim)));
      }
      for (var d = 0; d < batchDim; ++d) {
          if (updates.shape[d] !== indices.shape[d]) {
              throw new Error(shapeError +
                  (" updates.shape[" + d + "] (" + updates.shape[d] + ") != indices.shape[" + d + "] (" + indices.shape[d] + ")."));
          }
      }
      for (var d = 0; d < updates.rank - batchDim; ++d) {
          if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {
              throw new Error(shapeError +
                  (" updates.shape[" + (d + batchDim) + "] (" + updates.shape[d + batchDim] + ") != shape[" + (d + batchDim) + "] (" + shape[d + batchDim] + ")"));
          }
      }
  }
  /**
   * Validate scatter nd inputs.
   *
   * @param update The tensor contains the update values.
   * @param indices The tensor contains the indices for the update values.
   * @param shape The shape of the output tensor.
   */
  function validateInput(updates, indices, shape) {
      if (indices.rank < 1) {
          throw new Error('tf.scatterND() expects the indices to be rank 1 or higher,' +
              (" but the rank was " + indices.rank + "."));
      }
      if (updates.rank < 1) {
          throw new Error('tf.scatterND() expects the updates to be rank 1 or higher,' +
              (" but the rank was " + updates.rank + "."));
      }
      if (indices.dtype !== 'int32') {
          throw new Error("The dtype of 'indices' should be int32, but got dtype: " + indices.dtype);
      }
      if (shape.length < 1) {
          throw new Error("Output rank must be greater or equal to 1, but got shape: " + shape);
      }
      if (shape.length === 0) {
          if (indices.size === 0) {
              throw new Error("Indices specified for empty output. indices shape: " + indices.shape);
          }
          if (updates.size === 0) {
              throw new Error("Updates specified for empty output. updates shape: " + updates.shape);
          }
      }
      validateUpdateShape(shape, indices, updates);
  }
  /**
   * Calculate the shape information for the output.
   *
   * @param update The tensor contains the update values.
   * @param indices The tensor contains the indices for the update values.
   * @param shape The shape of the output tensor.
   *
   * @returns ScatterShapeInfo
   */
  function calculateShapes(updates, indices, shape) {
      // Calculate the number of dimensions in indices
      var indicesRank = indices.shape.length;
      var sliceRank = (indicesRank > 1) ? indices.shape[indicesRank - 1] : 1;
      // Calculate the number of elements that make up each slice of our updated
      // tensor. This allows us to work with flattened tensors and copy over whole
      // slices at a time.
      var totalNd = shape.length;
      var sliceSize = 1;
      for (var i = sliceRank; i < totalNd; ++i) {
          sliceSize *= shape[i];
      }
      var safeSliceDim = (sliceRank < 1) ? 1 : sliceRank;
      var numUpdates = sizeFromShape(indices.shape) / safeSliceDim;
      var strides = computeStrides(shape.slice(0, sliceRank)).concat([1]);
      var outputSize = sizeFromShape(shape);
      return { sliceRank: sliceRank, numUpdates: numUpdates, sliceSize: sliceSize, strides: strides, outputSize: outputSize };
  }

  var scatter_nd_util = {
      __proto__: null,
      validateUpdateShape: validateUpdateShape,
      validateInput: validateInput,
      calculateShapes: calculateShapes
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Serializable defines the serialization contract.
   *
   * TFJS requires serializable classes to return their className when asked
   * to avoid issues with minification.
   */
  var Serializable = /** @class */ (function () {
      function Serializable() {
      }
      /**
       * Return the class name for this class to use in serialization contexts.
       *
       * Generally speaking this will be the same thing that constructor.name
       * would have returned.  However, the class name needs to be robust
       * against minification for serialization/deserialization to work properly.
       *
       * There's also places such as initializers.VarianceScaling, where
       * implementation details between different languages led to different
       * class hierarchies and a non-leaf node is used for serialization purposes.
       */
      Serializable.prototype.getClassName = function () {
          return this.constructor
              .className;
      };
      /**
       * Creates an instance of T from a ConfigDict.
       *
       * This works for most descendants of serializable.  A few need to
       * provide special handling.
       * @param cls A Constructor for the class to instantiate.
       * @param config The Configuration for the object.
       */
      /** @nocollapse */
      Serializable.fromConfig = function (cls, config) {
          return new cls(config);
      };
      return Serializable;
  }());
  /**
   * Maps string keys to class constructors.
   *
   * Used during (de)serialization from the cross-language JSON format, which
   * requires the class name in the serialization format matches the class
   * names as used in Python, should it exist.
   */
  var SerializationMap = /** @class */ (function () {
      function SerializationMap() {
          this.classNameMap = {};
      }
      /**
       * Returns the singleton instance of the map.
       */
      SerializationMap.getMap = function () {
          if (SerializationMap.instance == null) {
              SerializationMap.instance = new SerializationMap();
          }
          return SerializationMap.instance;
      };
      /**
       * Registers the class as serializable.
       */
      SerializationMap.register = function (cls) {
          SerializationMap.getMap().classNameMap[cls.className] =
              [cls, cls.fromConfig];
      };
      return SerializationMap;
  }());
  /**
   * Register a class with the serialization map of TensorFlow.js.
   *
   * This is often used for registering custom Layers, so they can be
   * serialized and deserialized.
   *
   * Example:
   *
   * ```js
   * class MyCustomLayer extends tf.layers.Layer {
   *   static className = 'MyCustomLayer';
   *
   *   constructor(config) {
   *     super(config);
   *   }
   * }
   * tf.serialization.registerClass(MyCustomLayer);
   * ```
   *
   * @param cls The class to be registered. It must have a public static member
   *   called `className` defined and the value must be a non-empty string.
   */
  /** @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true} */
  function registerClass(cls) {
      assert(cls.className != null, function () { return "Class being registered does not have the static className " +
          "property defined."; });
      assert(typeof cls.className === 'string', function () { return "className is required to be a string, but got type " +
          typeof cls.className; });
      assert(cls.className.length > 0, function () { return "Class being registered has an empty-string as its className, " +
          "which is disallowed."; });
      SerializationMap.register(cls);
  }

  var serialization = {
      __proto__: null,
      Serializable: Serializable,
      SerializationMap: SerializationMap,
      registerClass: registerClass
  };

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var TEST_EPSILON_FLOAT32 = 1e-3;
  var TEST_EPSILON_FLOAT16 = 1e-1;
  function expectArraysClose(actual, expected, epsilon) {
      if (epsilon == null) {
          epsilon = testEpsilon();
      }
      return expectArraysPredicate(actual, expected, function (a, b) { return areClose(a, b, epsilon); });
  }
  function testEpsilon() {
      return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :
          TEST_EPSILON_FLOAT16;
  }
  function expectArraysPredicate(actual, expected, predicate) {
      var checkClassType = true;
      if (isTypedArray(actual) || isTypedArray(expected)) {
          checkClassType = false;
      }
      if (isTypedArray(actual) && isTypedArray(expected)) {
          checkClassType = true;
      }
      if (checkClassType) {
          var aType = actual.constructor.name;
          var bType = expected.constructor.name;
          if (aType !== bType) {
              throw new Error("Arrays are of different type. Actual: " + aType + ". " +
                  ("Expected: " + bType));
          }
      }
      if (Array.isArray(actual) && Array.isArray(expected)) {
          var actualShape = inferShape(actual);
          var expectedShape = inferShape(expected);
          if (!arraysEqual(actualShape, expectedShape)) {
              throw new Error("Arrays have different shapes. " +
                  ("Actual: [" + actualShape + "]. Expected: [" + expectedShape + "]"));
          }
      }
      var actualFlat = isTypedArray(actual) ? actual : flatten(actual);
      var expectedFlat = isTypedArray(expected) ?
          expected :
          flatten(expected);
      if (actualFlat.length !== expectedFlat.length) {
          throw new Error("Arrays have different lengths actual: " + actualFlat.length + " vs " +
              ("expected: " + expectedFlat.length + ".\n") +
              ("Actual:   " + actualFlat + ".\n") +
              ("Expected: " + expectedFlat + "."));
      }
      for (var i = 0; i < expectedFlat.length; ++i) {
          var a = actualFlat[i];
          var e = expectedFlat[i];
          if (!predicate(a, e)) {
              throw new Error("Arrays differ: actual[" + i + "] = " + a + ", expected[" + i + "] = " + e + ".\n" +
                  ("Actual:   " + actualFlat + ".\n") +
                  ("Expected: " + expectedFlat + "."));
          }
      }
  }
  function expectPromiseToFail(fn, done) {
      fn().then(function () { return done.fail(); }, function () { return done(); });
  }
  function expectArraysEqual(actual, expected) {
      var exp = typeof expected === 'string' || typeof expected === 'number' ||
          typeof expected === 'boolean' ?
          [expected] :
          expected;
      if (isString(actual) || isString(actual[0]) ||
          isString(expected) || isString(expected[0])) {
          // tslint:disable-next-line: triple-equals
          return expectArraysPredicate(actual, exp, function (a, b) { return a == b; });
      }
      return expectArraysPredicate(actual, expected, function (a, b) { return areClose(a, b, 0); });
  }
  function expectNumbersClose(a, e, epsilon) {
      if (epsilon == null) {
          epsilon = testEpsilon();
      }
      if (!areClose(a, e, epsilon)) {
          throw new Error("Numbers differ: actual === " + a + ", expected === " + e);
      }
  }
  function areClose(a, e, epsilon) {
      if (!isFinite(a) && !isFinite(e)) {
          return true;
      }
      if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {
          return false;
      }
      return true;
  }
  function expectValuesInRange(actual, low, high) {
      for (var i = 0; i < actual.length; i++) {
          if (actual[i] < low || actual[i] > high) {
              throw new Error("Value out of range:" + actual[i] + " low: " + low + ", high: " + high);
          }
      }
  }
  function expectArrayBuffersEqual(actual, expected) {
      // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in
      // a Float32Array solves this issue.
      expect(new Float32Array(actual)).toEqual(new Float32Array(expected));
  }

  var test_util = {
      __proto__: null,
      TEST_EPSILON_FLOAT16: TEST_EPSILON_FLOAT16,
      expectArraysClose: expectArraysClose,
      testEpsilon: testEpsilon,
      expectPromiseToFail: expectPromiseToFail,
      expectArraysEqual: expectArraysEqual,
      expectNumbersClose: expectNumbersClose,
      expectValuesInRange: expectValuesInRange,
      expectArrayBuffersEqual: expectArrayBuffersEqual
  };

  /** @license See the LICENSE file. */
  // This code is auto-generated, do not modify this file!
  var version = '2.1.0';

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Enables production mode which disables correctness checks in favor of
   * performance.
   */
  /** @doc {heading: 'Environment'} */
  function enableProdMode() {
      env().set('PROD', true);
  }
  /**
   * Enables debug mode which will log information about all executed kernels:
   * the elapsed time of the kernel execution, as well as the rank, shape, and
   * size of the output tensor.
   *
   * Debug mode will significantly slow down your application as it will
   * download the result of every operation to the CPU. This should not be used in
   * production. Debug mode does not affect the timing information of the kernel
   * execution as we do not measure download time in the kernel execution time.
   *
   * See also: `tf.profile`, `tf.memory`.
   */
  /** @doc {heading: 'Environment'} */
  function enableDebugMode() {
      env().set('DEBUG', true);
  }
  /** Globally disables deprecation warnings */
  function disableDeprecationWarnings() {
      env().set('DEPRECATION_WARNINGS_ENABLED', false);
      console.warn("TensorFlow.js deprecation warnings have been disabled.");
  }
  /** Warn users about deprecated functionality. */
  function deprecationWarn(msg) {
      if (env().getBool('DEPRECATION_WARNINGS_ENABLED')) {
          console.warn(msg + ' You can disable deprecation warnings with ' +
              'tf.disableDeprecationWarnings().');
      }
  }
  /**
   * Dispose all variables kept in backend engine.
   */
  /** @doc {heading: 'Environment'} */
  function disposeVariables() {
      ENGINE.disposeVariables();
  }
  /**
   * It returns the global engine that keeps track of all tensors and backends.
   */
  /** @doc {heading: 'Environment'} */
  function engine() {
      return ENGINE;
  }
  /**
   * Returns memory info at the current time in the program. The result is an
   * object with the following properties:
   *
   * - `numBytes`: Number of bytes allocated (undisposed) at this time.
   * - `numTensors`: Number of unique tensors allocated.
   * - `numDataBuffers`: Number of unique data buffers allocated
   *   (undisposed) at this time, which is ≤ the number of tensors
   *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same
   *   data buffer with `a`).
   * - `unreliable`: True if the memory usage is unreliable. See `reasons` when
   *    `unreliable` is true.
   * - `reasons`: `string[]`, reasons why the memory is unreliable, present if
   *    `unreliable` is true.
   *
   * WebGL Properties:
   * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at
   *     this time.
   */
  /** @doc {heading: 'Performance', subheading: 'Memory'} */
  function memory() {
      return ENGINE.memory();
  }
  /**
   * Executes the provided function `f()` and returns a promise that resolves
   * with information about the function's memory use:
   * - `newBytes`: the number of new bytes allocated
   * - `newTensors`: the number of new tensors created
   * - `peakBytes`: the peak number of bytes allocated
   * - `kernels`: an array of objects for each kernel involved that reports
   * their input and output shapes, number of bytes used, and number of new
   * tensors created.
   *
   * ```js
   * const profile = await tf.profile(() => {
   *   const x = tf.tensor1d([1, 2, 3]);
   *   let x2 = x.square();
   *   x2.dispose();
   *   x2 = x.square();
   *   x2.dispose();
   *   return x;
   * });
   *
   * console.log(`newBytes: ${profile.newBytes}`);
   * console.log(`newTensors: ${profile.newTensors}`);
   * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>
   * k.totalBytesSnapshot)}`);
   * ```
   *
   */
  /** @doc {heading: 'Performance', subheading: 'Profile'} */
  function profile(f) {
      return ENGINE.profile(f);
  }
  /**
   * Executes the provided function `fn` and after it is executed, cleans up all
   * intermediate tensors allocated by `fn` except those returned by `fn`.
   * `fn` must not return a Promise (async functions not allowed). The returned
   * result can be a complex object.
   *
   * Using this method helps avoid memory leaks. In general, wrap calls to
   * operations in `tf.tidy` for automatic memory cleanup.
   *
   * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to
   * dispose variables, please use `tf.disposeVariables` or call dispose()
   * directly on variables.
   *
   * ```js
   * // y = 2 ^ 2 + 1
   * const y = tf.tidy(() => {
   *   // a, b, and one will be cleaned up when the tidy ends.
   *   const one = tf.scalar(1);
   *   const a = tf.scalar(2);
   *   const b = a.square();
   *
   *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
   *
   *   // The value returned inside the tidy function will return
   *   // through the tidy, in this case to the variable y.
   *   return b.add(one);
   * });
   *
   * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
   * y.print();
   * ```
   *
   * @param nameOrFn The name of the closure, or the function to execute.
   *     If a name is provided, the 2nd argument should be the function.
   *     If debug mode is on, the timing and the memory usage of the function
   *     will be tracked and displayed on the console using the provided name.
   * @param fn The function to execute.
   */
  /** @doc {heading: 'Performance', subheading: 'Memory'} */
  function tidy(nameOrFn, fn) {
      return ENGINE.tidy(nameOrFn, fn);
  }
  /**
   * Disposes any `tf.Tensor`s found within the provided object.
   *
   * @param container an object that may be a `tf.Tensor` or may directly
   *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If
   *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing
   *     happens. In general it is safe to pass any object here, except that
   *     `Promise`s are not supported.
   */
  /** @doc {heading: 'Performance', subheading: 'Memory'} */
  function dispose(container) {
      var tensors = getTensorsInContainer(container);
      tensors.forEach(function (tensor) { return tensor.dispose(); });
  }
  /**
   * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed
   * automatically.
   *
   * ```js
   * let b;
   * const y = tf.tidy(() => {
   *   const one = tf.scalar(1);
   *   const a = tf.scalar(2);
   *
   *   // b will not be cleaned up by the tidy. a and one will be cleaned up
   *   // when the tidy ends.
   *   b = tf.keep(a.square());
   *
   *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
   *
   *   // The value returned inside the tidy function will return
   *   // through the tidy, in this case to the variable y.
   *   return b.add(one);
   * });
   *
   * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
   * console.log('y:');
   * y.print();
   * console.log('b:');
   * b.print();
   * ```
   *
   * @param result The tensor to keep from being disposed.
   */
  /** @doc {heading: 'Performance', subheading: 'Memory'} */
  function keep(result) {
      return ENGINE.keep(result);
  }
  /**
   * Executes `f()` and returns a promise that resolves with timing
   * information.
   *
   * The result is an object with the following properties:
   *
   * - `wallMs`: Wall execution time.
   * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the
   * WebGL backend and the query timer extension is not available, this will
   * return an error object.
   * - On `WebGL` The following additional properties exist:
   *   - `uploadWaitMs`: CPU blocking time on texture uploads.
   *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).
   *
   * ```js
   * const x = tf.randomNormal([20, 20]);
   * const time = await tf.time(() => x.matMul(x));
   *
   * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);
   * ```
   *
   * @param f The function to execute and time.
   */
  /** @doc {heading: 'Performance', subheading: 'Timing'} */
  function time(f) {
      return ENGINE.time(f);
  }
  /**
   * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and
   * executing operations on those tensors. Returns a promise that resolves
   * to a boolean if the backend initialization was successful.
   *
   * Note this disposes the current backend, if any, as well as any tensors
   * associated with it. A new backend is initialized, even if it is of the
   * same type as the previous one.
   *
   * @param backendName The name of the backend. Currently supports
   *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js
   *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).
   */
  /** @doc {heading: 'Backends'} */
  function setBackend(backendName) {
      return ENGINE.setBackend(backendName);
  }
  /**
   * Returns a promise that resolves when the currently selected backend (or the
   * highest priority one) has initialized. Await this promise when you are using
   * a backend that has async initialization.
   */
  /** @doc {heading: 'Backends'} */
  function ready() {
      return ENGINE.ready();
  }
  /**
   * Returns the current backend name (cpu, webgl, etc). The backend is
   * responsible for creating tensors and executing operations on those tensors.
   */
  /** @doc {heading: 'Backends'} */
  function getBackend() {
      return ENGINE.backendName;
  }
  /**
   * Removes a backend and the registered factory.
   */
  /** @doc {heading: 'Backends'} */
  function removeBackend(name) {
      ENGINE.removeBackend(name);
  }
  /**
   * Finds the backend registered under the provided name. Returns null if the
   * name is not in the registry, or the registration hasn't finished yet.
   */
  function findBackend(name) {
      return ENGINE.findBackend(name);
  }
  /**
   * Finds the backend factory registered under the provided name. Returns a
   * function that produces a new backend when called. Returns null if the name
   * is not in the registry.
   */
  function findBackendFactory(name) {
      return ENGINE.findBackendFactory(name);
  }
  /**
   * Registers a global backend. The registration should happen when importing
   * a module file (e.g. when importing `backend_webgl.ts`), and is used for
   * modular builds (e.g. custom tfjs bundle with only webgl support).
   *
   * @param factory The backend factory function. When called, it should
   * return a backend instance, or a promise of an instance.
   * @param priority The priority of the backend (higher = more important).
   *     In case multiple backends are registered, the priority is used to find
   *     the best backend. Defaults to 1.
   * @return False if there is already a registered backend under this name, true
   *     if not.
   */
  /** @doc {heading: 'Backends'} */
  function registerBackend(name, factory, priority) {
      if (priority === void 0) { priority = 1; }
      return ENGINE.registerBackend(name, factory, priority);
  }
  /**
   * Gets the current backend. If no backends have been initialized, this will
   * attempt to initialize the best backend. Will throw an error if the highest
   * priority backend has async initialization, in which case, you should call
   * 'await tf.ready()' before running other code.
   */
  /** @doc {heading: 'Backends'} */
  function backend() {
      return ENGINE.backend;
  }
  /**
   * Sets the global platform.
   *
   * @param platformName The name of this platform.
   * @param platform A platform implementation.
   */
  function setPlatform(platformName, platform) {
      env().setPlatform(platformName, platform);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes absolute value element-wise: `abs(x)`
   *
   * ```js
   * const x = tf.tensor1d([-1, 2, -3, 4]);
   *
   * x.abs().print();  // or tf.abs(x)
   * ```
   * @param x The input `tf.Tensor`.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function abs_(x) {
      var $x = convertToTensor(x, 'x', 'abs');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          save([$x]);
          if ($x.dtype === 'complex64') {
              return backend.complexAbs($x);
          }
          return backend.abs($x);
      }, inputs, null /* grad */, Abs);
  }
  var abs = op({ abs_: abs_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`
   *
   * ```js
   * const x = tf.tensor1d([0, 1, -1, .7]);
   *
   * x.acos().print();  // or tf.acos(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function acos_(x) {
      var $x = convertToTensor(x, 'x', 'acos');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.acos($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Acos);
  }
  var acos = op({ acos_: acos_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:
   * `acosh(x)`
   *
   * ```js
   * const x = tf.tensor1d([10, 1, 3, 5.7]);
   *
   * x.acosh().print();  // or tf.acosh(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function acosh_(x) {
      var $x = convertToTensor(x, 'x', 'acosh');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.acosh($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Acosh);
  }
  var acosh = op({ acosh_: acosh_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.
   *
   * ```js
   * const a = tf.tensor1d([1, 2]);
   * const b = tf.tensor1d([3, 4]);
   * const c = tf.tensor1d([5, 6]);
   *
   * tf.addN([a, b, c]).print();
   * ```
   * @param tensors A list of tensors with the same shape and dtype.
   */
  /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */
  function addN_(tensors) {
      assert(Array.isArray(tensors), function () { return 'The argument passed to tf.addN() must be a list of tensors'; });
      assert(tensors.length >= 1, function () { return "Must pass at least one tensor to tf.addN(), but got " +
          ("" + tensors.length); });
      var $tensors = tensors.map(function (t, i) { return convertToTensor(t, "tensors" + i, 'addN'); });
      var firstTensor = $tensors[0];
      $tensors.forEach(function (t) {
          if (t.dtype !== firstTensor.dtype) {
              throw new Error('All tensors passed to tf.addN() must have the same dtype');
          }
      });
      $tensors.forEach(function (t) {
          if (!arraysEqual(t.shape, firstTensor.shape)) {
              throw new Error('All tensors passed to tf.addN() must have the same shape');
          }
      });
      var forward = function (backend, save) {
          var res = backend.addN($tensors);
          save($tensors);
          return res;
      };
      var inputs = $tensors;
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, AddN);
  }
  var addN = op({ addN_: addN_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the logical and of elements across dimensions of a `tf.Tensor`.
   *
   * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
   * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
   * `axes`. If `keepDims` is true, the reduced dimensions are retained with
   * length 1. If `axes` has no entries, all dimensions are reduced, and an
   * `tf.Tensor` with a single element is returned.
   *
   * ```js
   * const x = tf.tensor1d([1, 1, 1], 'bool');
   *
   * x.all().print();  // or tf.all(x)
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
   *
   * const axis = 1;
   * x.all(axis).print();  // or tf.all(x, axis)
   * ```
   *
   * @param x The input tensor. Must be of dtype bool.
   * @param axis The dimension(s) to reduce. By default it reduces
   *     all dimensions.
   * @param keepDims If true, retains reduced dimensions with size 1.
   */
  /** @doc {heading: 'Operations', subheading: 'Reduction'} */
  function all_(x, axis, keepDims) {
      if (axis === void 0) { axis = null; }
      if (keepDims === void 0) { keepDims = false; }
      var $x = convertToTensor(x, 'x', 'all', 'bool');
      var forward = function (backend) {
          var origAxes = parseAxisParam(axis, $x.shape);
          var axes = origAxes;
          var permutedAxes = getAxesPermutation(axes, $x.rank);
          if (permutedAxes != null) {
              $x = $x.transpose(permutedAxes);
              axes = getInnerMostAxes(axes.length, $x.rank);
          }
          var res = backend.all($x, axes);
          if (keepDims) {
              var newShape = expandShapeToKeepDim(res.shape, origAxes);
              return res.reshape(newShape);
          }
          return res;
      };
      var inputs = { x: $x };
      var attrs = { axis: axis, keepDims: keepDims };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, All, attrs);
  }
  var all = op({ all_: all_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the logical or of elements across dimensions of a `tf.Tensor`.
   *
   * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
   * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
   * `axes`. If `keepDims` is true, the reduced dimensions are retained with
   * length 1. If `axes` has no entries, all dimensions are reduced, and an
   * `tf.Tensor` with a single element is returned.
   *
   * ```js
   * const x = tf.tensor1d([1, 1, 1], 'bool');
   *
   * x.any().print();  // or tf.any(x)
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
   *
   * const axis = 1;
   * x.any(axis).print();  // or tf.any(x, axis)
   * ```
   *
   * @param x The input tensor. Must be of dtype bool.
   * @param axis The dimension(s) to reduce. By default it reduces
   *     all dimensions.
   * @param keepDims If true, retains reduced dimensions with size 1.
   */
  /** @doc {heading: 'Operations', subheading: 'Reduction'} */
  function any_(x, axis, keepDims) {
      if (axis === void 0) { axis = null; }
      if (keepDims === void 0) { keepDims = false; }
      var $x = convertToTensor(x, 'x', 'any', 'bool');
      var forward = function (backend) {
          var origAxes = parseAxisParam(axis, $x.shape);
          var axes = origAxes;
          var permutedAxes = getAxesPermutation(axes, $x.rank);
          if (permutedAxes != null) {
              $x = $x.transpose(permutedAxes);
              axes = getInnerMostAxes(axes.length, $x.rank);
          }
          var res = backend.any($x, axes);
          if (keepDims) {
              var newShape = expandShapeToKeepDim(res.shape, origAxes);
              return res.reshape(newShape);
          }
          return res;
      };
      var inputs = { x: $x };
      var attrs = { axis: axis, keepDims: keepDims };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Any, attrs);
  }
  // tslint:disable-next-line:variable-name
  var any = op({ any_: any_ });

  /**
   * @license
   * Copyright 2020 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the indices of the maximum values along an `axis`.
   *
   * The result has the same shape as `input` with the dimension along `axis`
   * removed.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3]);
   *
   * x.argMax().print();  // or tf.argMax(x)
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
   *
   * const axis = 1;
   * x.argMax(axis).print();  // or tf.argMax(x, axis)
   * ```
   *
   * @param x The input tensor.
   * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
   */
  /** @doc {heading: 'Operations', subheading: 'Reduction'} */
  function argMax_(x, axis) {
      if (axis === void 0) { axis = 0; }
      var $x = convertToTensor(x, 'x', 'argMax');
      var forward = function (backend, save) {
          save([$x]);
          var axes = parseAxisParam(axis, $x.shape);
          var permutedAxes = getAxesPermutation(axes, $x.rank);
          if (permutedAxes != null) {
              $x = $x.transpose(permutedAxes);
              axes = getInnerMostAxes(axes.length, $x.rank);
          }
          return backend.argMax($x, axes[0]);
      };
      var inputs = { x: $x };
      var attrs = { axis: axis };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, ArgMax, attrs);
  }
  var argMax = op({ argMax_: argMax_ });

  /**
   * @license
   * Copyright 2020 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the indices of the minimum values along an `axis`.
   *
   * The result has the same shape as `input` with the dimension along `axis`
   * removed.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3]);
   *
   * x.argMin().print();  // or tf.argMin(x)
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
   *
   * const axis = 1;
   * x.argMin(axis).print();  // or tf.argMin(x, axis)
   * ```
   *
   * @param x The input tensor.
   * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
   *
   */
  /** @doc {heading: 'Operations', subheading: 'Reduction'} */
  function argMin_(x, axis) {
      if (axis === void 0) { axis = 0; }
      var $x = convertToTensor(x, 'x', 'argMin');
      var forward = function (backend, save) {
          save([$x]);
          if (axis == null) {
              axis = 0;
          }
          var axes = parseAxisParam(axis, $x.shape);
          var permutedAxes = getAxesPermutation(axes, $x.rank);
          if (permutedAxes != null) {
              $x = $x.transpose(permutedAxes);
              axes = getInnerMostAxes(axes.length, $x.rank);
          }
          return backend.argMin($x, axes[0]);
      };
      var inputs = { x: $x };
      var attrs = { axis: axis };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, ArgMin, attrs);
  }
  var argMin = op({ argMin_: argMin_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`
   *
   * ```js
   * const x = tf.tensor1d([0, 1, -1, .7]);
   *
   * x.asin().print();  // or tf.asin(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function asin_(x) {
      var $x = convertToTensor(x, 'x', 'asin');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.asin($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Asin);
  }
  var asin = op({ asin_: asin_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:
   * `asinh(x)`
   *
   * ```js
   * const x = tf.tensor1d([0, 1, -1, .7]);
   *
   * x.asinh().print();  // or tf.asinh(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function asinh_(x) {
      var $x = convertToTensor(x, 'x', 'asinh');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.asinh($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Asinh);
  }
  var asinh = op({ asinh_: asinh_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`
   *
   * ```js
   * const x = tf.tensor1d([0, 1, -1, .7]);
   *
   * x.atan().print();  // or tf.atan(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function atan_(x) {
      var $x = convertToTensor(x, 'x', 'atan');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.atan($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Atan);
  }
  var atan = op({ atan_: atan_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.
   * Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);
   * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);
   *
   * tf.atan2(a, b).print()
   * ```
   *
   * @param a The first tensor.
   * @param b The second tensor. Must have the same dtype as `a`.
   *
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function atan2_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'atan2');
      var $b = convertToTensor(b, 'b', 'atan2');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      var forward = function (backend, save) {
          var res = backend.atan2($a, $b);
          save([$a, $b]);
          return res;
      };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Atan2);
  }
  var atan2 = op({ atan2_: atan2_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:
   * `atanh(x)`
   *
   * ```js
   * const x = tf.tensor1d([0, .1, -.1, .7]);
   *
   * x.atanh().print();  // or tf.atanh(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function atanh_(x) {
      var $x = convertToTensor(x, 'x', 'atanh');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.atanh($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Atanh);
  }
  var atanh = op({ atanh_: atanh_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the 2D average pooling of an image.
   *
   * @param x The input tensor, of rank 4 or rank 3 of shape
   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
   * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
   *     `filterSize` is a single number, then `filterHeight == filterWidth`.
   * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
   *     `strides` is a single number, then `strideHeight == strideWidth`.
   * @param pad The type of padding algorithm:
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1x1.
   *    - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dimRoundingMode The rounding mode used when computing output
   *     dimensions if pad is a number. If none is provided, it will not round
   *     and error if the output is of fractional size.
   */
  function avgPool_(x, filterSize, strides, pad, dimRoundingMode) {
      var $x = convertToTensor(x, 'x', 'avgPool', 'float32');
      var dilations = 1;
      assert(eitherStridesOrDilationsAreOne(strides, dilations), function () { return 'Error in avgPool: Either strides or dilations must be 1. ' +
          ("Got strides " + strides + " and dilations '" + dilations + "'"); });
      var x4D = $x;
      var reshapedTo4D = false;
      if ($x.rank === 3) {
          reshapedTo4D = true;
          x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
      }
      assert(x4D.rank === 4, function () { return "Error in avgPool: x must be rank 4 but got rank " + x4D.rank + "."; });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in avgPool: pad must be an integer when using, " +
              ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      var forward = function (backend, save) {
          var convInfo = computePool2DInfo(x4D.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
          save([x4D]);
          if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&
              arraysEqual(convInfo.inShape, convInfo.outShape)) {
              return x4D.clone();
          }
          return backend.avgPool(x4D, convInfo);
      };
      var inputs = { x: x4D };
      var attrs = { filterSize: filterSize, strides: strides, pad: pad, dimRoundingMode: dimRoundingMode };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, AvgPool, attrs);
      res = cast(res, $x.dtype);
      if (reshapedTo4D) {
          return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
      }
      return res;
  }
  var avgPool = op({ avgPool_: avgPool_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the 3D average pooling.
   *
   * ```js
   * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
   * const result = tf.avgPool3d(x, 2, 1, 'valid');
   * result.print();
   * ```
   *
   * @param x The input tensor, of rank 5 or rank 4 of shape
   *     `[batch, depth, height, width, inChannels]`.
   * @param filterSize The filter size:
   *     `[filterDepth, filterHeight, filterWidth]`.
   *     If `filterSize` is a single number,
   *     then `filterDepth == filterHeight == filterWidth`.
   * @param strides The strides of the pooling:
   *     `[strideDepth, strideHeight, strideWidth]`.
   *     If `strides` is a single number,
   *     then `strideDepth == strideHeight == strideWidth`.
   * @param pad The type of padding algorithm.
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1*1x1.
   *    - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dimRoundingMode The rounding mode used when computing output
   *     dimensions if pad is a number. If none is provided, it will not round
   *     and error if the output is of fractional size.
   * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
   *     "NDHWC". Specify the data format of the input and output data. With the
   *     default format "NDHWC", the data is stored in the order of: [batch,
   *     depth, height, width, channels]. Only "NDHWC" is currently supported.
   * @param dilations Deprecated, this field will be gone in v3.0.0.
   *     The dilation rates:
   *     `[dilationDepth, dilationHeight, dilationWidth]`
   *     in which we sample input values across the depth, height and width
   *     dimensions in dilated pooling.
   *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
   *     then `dilationDepth == dilationHeight == dilationWidth`.
   *     If it is greater than 1, then all values of `strides` must be 1.
   */
  /** @doc {heading: 'Operations', subheading: 'Convolution'} */
  function avgPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat, dilations) {
      if (dataFormat === void 0) { dataFormat = 'NDHWC'; }
      if (dilations == null) {
          dilations = [1, 1, 1];
      }
      else {
          deprecationWarn('dilations is deprecated, this field will be gone in ' +
              'v3.0.0.');
      }
      var $x = convertToTensor(x, 'x', 'avgPool3d', 'float32');
      var x5D = $x;
      var reshapedTo5D = false;
      if ($x.rank === 4) {
          reshapedTo5D = true;
          x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
      }
      assert(x5D.rank === 5, function () { return "Error in avgPool3d: x must be rank 5 but got rank " + x5D.rank + "."; });
      assert(dataFormat === 'NDHWC', function () { return "Error in avgPool3d: Only NDHWC is currently supported, " +
          ("but got dataFormat of " + dataFormat); });
      assert(eitherStridesOrDilationsAreOne(strides, dilations), function () { return 'Error in avgPool3d: Either strides or dilations must be 1. ' +
          ("Got strides " + strides + " and dilations '" + dilations + "'"); });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in avgPool3d: pad must be an integer when using, " +
              ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      var forward = function (backend, save) {
          if (dilations == null) {
              dilations = [1, 1, 1];
          }
          var convInfo = computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);
          save([x5D]);
          return backend.avgPool3d(x5D, convInfo);
      };
      var inputs = { x: x5D };
      var attrs = { filterSize: filterSize, strides: strides, pad: pad, dimRoundingMode: dimRoundingMode, dataFormat: dataFormat, dilations: dilations };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, AvgPool3D, attrs);
      res = cast(res, x5D.dtype);
      if (reshapedTo5D) {
          return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]);
      }
      return res;
  }
  var avgPool3d = op({ avgPool3d_: avgPool3d_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`
   *
   * ```js
   * const x = tf.tensor1d([0, 1, -1, 70]);
   *
   * x.tanh().print();  // or tf.tanh(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function tanh_(x) {
      var $x = convertToTensor(x, 'x', 'tanh');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var y = backend.tanh($x);
          save([y]);
          return y;
      }, inputs, null /* grad */, Tanh);
  }
  var tanh$1 = op({ tanh_: tanh_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the next state and output of a BasicLSTMCell.
   *
   * Returns `[newC, newH]`.
   *
   * Derived from tf.contrib.rnn.BasicLSTMCell.
   *
   * @param forgetBias Forget bias for the cell.
   * @param lstmKernel The weights for the cell.
   * @param lstmBias The bias for the cell.
   * @param data The input to the cell.
   * @param c Previous cell state.
   * @param h Previous cell output.
   */
  /** @doc {heading: 'Operations', subheading: 'RNN'} */
  function basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {
      var $forgetBias = convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');
      var $lstmKernel = convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');
      var $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');
      var $data = convertToTensor(data, 'data', 'basicLSTMCell');
      var $c = convertToTensor(c, 'c', 'basicLSTMCell');
      var $h = convertToTensor(h, 'h', 'basicLSTMCell');
      var combined = concat([$data, $h], 1);
      var weighted = matMul(combined, $lstmKernel);
      var res = add(weighted, $lstmBias);
      // i = input_gate, j = new_input, f = forget_gate, o = output_gate
      var batchSize = res.shape[0];
      var sliceCols = res.shape[1] / 4;
      var sliceSize = [batchSize, sliceCols];
      var i = slice(res, [0, 0], sliceSize);
      var j = slice(res, [0, sliceCols], sliceSize);
      var f = slice(res, [0, sliceCols * 2], sliceSize);
      var o = slice(res, [0, sliceCols * 3], sliceSize);
      var newC = add(mul(sigmoid(i), tanh$1(j)), mul($c, sigmoid(add($forgetBias, f))));
      var newH = mul(tanh$1(newC), sigmoid(o));
      return [newC, newH];
  }
  var basicLSTMCell = op({ basicLSTMCell_: basicLSTMCell_ });

  function xAs4D(x) {
      var x4D;
      if (x.rank === 0 || x.rank === 1) {
          x4D = x.as4D(1, 1, 1, x.size);
      }
      else if (x.rank === 2) {
          x4D = x.as4D(1, 1, x.shape[0], x.shape[1]);
      }
      else if (x.rank === 3) {
          x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
      }
      else {
          x4D = x;
      }
      return x4D;
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Batch normalization.
   *
   * As described in
   * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).
   *
   * Mean, variance, scale, and offset can be of two shapes:
   *   - The same shape as the input.
   *   - In the common case, the depth dimension is the last dimension of x, so
   *     the values would be an `tf.Tensor1D` of shape [depth].
   *
   * Also available are stricter rank-specific methods with the same signature
   * as this method that assert that parameters passed are of given rank
   *   - `tf.batchNorm2d`
   *   - `tf.batchNorm3d`
   *   - `tf.batchNorm4d`
   *
   * @param x The input Tensor.
   * @param mean A mean Tensor.
   * @param variance A variance Tensor.
   * @param offset An offset Tensor.
   * @param scale A scale Tensor.
   * @param varianceEpsilon A small float number to avoid dividing by 0.
   */
  /** @doc {heading: 'Operations', subheading: 'Normalization'} */
  function batchNorm_(x, mean, variance, offset, scale, varianceEpsilon) {
      if (varianceEpsilon == null) {
          varianceEpsilon = 0.001;
      }
      var $x = convertToTensor(x, 'x', 'batchNorm');
      var $mean = convertToTensor(mean, 'mean', 'batchNorm');
      var $variance = convertToTensor(variance, 'variance', 'batchNorm');
      var $scale;
      if (scale != null) {
          $scale = convertToTensor(scale, 'scale', 'batchNorm');
      }
      var $offset;
      if (offset != null) {
          $offset = convertToTensor(offset, 'offset', 'batchNorm');
      }
      assert($mean.rank === $variance.rank, function () { return 'Batch normalization gradient requires mean and variance to have ' +
          'equal ranks.'; });
      assert($offset == null || $mean.rank === $offset.rank, function () { return 'Batch normalization gradient requires mean and offset to have ' +
          'equal ranks.'; });
      assert($scale == null || $mean.rank === $scale.rank, function () { return 'Batch normalization gradient requires mean and scale to have ' +
          'equal ranks.'; });
      var x4D = xAs4D($x);
      var forward = function (backend, save) {
          save([x4D, $mean, $variance, $scale]);
          return backend.batchNorm(x4D, as1DOr4D($mean), as1DOr4D($variance), as1DOr4D($offset), as1DOr4D($scale), varianceEpsilon);
      };
      var inputs = {
          x: x4D,
          scale: $scale,
          offset: $offset,
          mean: $mean,
          variance: $variance
      };
      var attrs = { varianceEpsilon: varianceEpsilon };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* gradient */, FusedBatchNorm, attrs);
      return reshape(res, $x.shape);
  }
  function as1DOr4D(x) {
      if (x == null) {
          return null;
      }
      if (x.rank === 0) {
          return x.as1D();
      }
      else if (x.rank === 1) {
          return x;
      }
      else if (x.rank === 2) {
          return x.as4D(1, 1, x.shape[0], x.shape[1]);
      }
      else if (x.rank === 3) {
          return x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);
      }
      return x;
  }
  var batchNorm = op({ batchNorm_: batchNorm_ });

  /**
   * Batch normalization, strictly for 2D. For the more relaxed version, see
   * `tf.batchNorm`.
   *
   * @param x The input Tensor.
   * @param mean A mean Tensor.
   * @param variance A variance Tensor.
   * @param offset An offset Tensor.
   * @param scale A scale Tensor.
   * @param varianceEpsilon A small float number to avoid dividing by 0.
   */
  function batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {
      var $x = convertToTensor(x, 'x', 'batchNorm');
      var $mean = convertToTensor(mean, 'mean', 'batchNorm');
      var $variance = convertToTensor(variance, 'variance', 'batchNorm');
      var $scale;
      if (scale != null) {
          $scale = convertToTensor(scale, 'scale', 'batchNorm');
      }
      var $offset;
      if (offset != null) {
          $offset = convertToTensor(offset, 'offset', 'batchNorm');
      }
      assert($x.rank === 2, function () { return "Error in batchNorm3D: x must be rank 3 but got rank " +
          ($x.rank + "."); });
      assert($mean.rank === 2 || $mean.rank === 1, function () { return "Error in batchNorm2D: mean must be rank 2 or rank 1 but " +
          ("got rank " + $mean.rank + "."); });
      assert($variance.rank === 2 || $variance.rank === 1, function () { return "Error in batchNorm2D: variance must be rank 2 or rank 1 " +
          ("but got rank " + $variance.rank + "."); });
      if ($scale != null) {
          assert($scale.rank === 2 || $scale.rank === 1, function () { return "Error in batchNorm2D: scale must be rank 2 or rank 1 " +
              ("but got rank " + $scale.rank + "."); });
      }
      if ($offset != null) {
          assert($offset.rank === 2 || $offset.rank === 1, function () { return "Error in batchNorm2D: offset must be rank 2 or rank 1 " +
              ("but got rank " + $offset.rank + "."); });
      }
      return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);
  }
  var batchNorm2d = op({ batchNorm2d_: batchNorm2d_ });

  /**
   * Batch normalization, strictly for 3D. For the more relaxed version, see
   * `tf.batchNorm`.
   *
   * @param x The input Tensor.
   * @param mean A mean Tensor.
   * @param variance A variance Tensor.
   * @param offset An offset Tensor.
   * @param scale A scale Tensor.
   * @param varianceEpsilon A small float number to avoid dividing by 0.
   */
  function batchNorm3d_(x, mean, variance, offset, scale, varianceEpsilon) {
      var $x = convertToTensor(x, 'x', 'batchNorm');
      var $mean = convertToTensor(mean, 'mean', 'batchNorm');
      var $variance = convertToTensor(variance, 'variance', 'batchNorm');
      var $scale;
      if (scale != null) {
          $scale = convertToTensor(scale, 'scale', 'batchNorm');
      }
      var $offset;
      if (offset != null) {
          $offset = convertToTensor(offset, 'offset', 'batchNorm');
      }
      assert($x.rank === 3, function () { return "Error in batchNorm3D: x must be rank 3 but got rank " +
          ($x.rank + "."); });
      assert($mean.rank === 3 || $mean.rank === 1, function () { return "Error in batchNorm3D: mean must be rank 3 or rank 1 but " +
          ("got rank " + $mean.rank + "."); });
      assert($variance.rank === 3 || $variance.rank === 1, function () { return "Error in batchNorm3D: variance must be rank 3 or rank 1 " +
          ("but got rank " + $variance.rank + "."); });
      if ($scale != null) {
          assert($scale.rank === 3 || $scale.rank === 1, function () { return "Error in batchNorm3D: scale must be rank 3 or rank 1 " +
              ("but got rank " + $scale.rank + "."); });
      }
      if ($offset != null) {
          assert($offset.rank === 3 || $offset.rank === 1, function () { return "Error in batchNorm3D: offset must be rank 3 or rank 1 " +
              ("but got rank " + $offset.rank + "."); });
      }
      return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);
  }
  var batchNorm3d = op({ batchNorm3d_: batchNorm3d_ });

  /**
   * Batch normalization, strictly for 4D. For the more relaxed version, see
   * `tf.batchNorm`.
   *
   * @param x The input Tensor.
   * @param mean A mean Tensor.
   * @param variance A variance Tensor.
   * @param offset An offset Tensor.
   * @param scale A scale Tensor.
   * @param varianceEpsilon A small float number to avoid dividing by 0.
   */
  function batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon) {
      var $x = convertToTensor(x, 'x', 'batchNorm');
      var $mean = convertToTensor(mean, 'mean', 'batchNorm');
      var $variance = convertToTensor(variance, 'variance', 'batchNorm');
      var $scale;
      if (scale != null) {
          $scale = convertToTensor(scale, 'scale', 'batchNorm');
      }
      var $offset;
      if (offset != null) {
          $offset = convertToTensor(offset, 'offset', 'batchNorm');
      }
      assert($x.rank === 4, function () { return "Error in batchNorm4D: x must be rank 4 but got rank " +
          ($x.rank + "."); });
      assert($mean.rank === 4 || $mean.rank === 1, function () { return "Error in batchNorm4D: mean must be rank 4 or rank 1 but " +
          ("got rank " + $mean.rank + "."); });
      assert($variance.rank === 4 || $variance.rank === 1, function () { return "Error in batchNorm4D: variance must be rank 4 or rank 1 " +
          ("but got rank " + $variance.rank + "."); });
      if ($scale != null) {
          assert($scale.rank === 4 || $scale.rank === 1, function () { return "Error in batchNorm4D: scale must be rank 4 or rank 1 " +
              ("but got rank " + $scale.rank + "."); });
      }
      if ($offset != null) {
          assert($offset.rank === 4 || $offset.rank === 1, function () { return "Error in batchNorm4D: offset must be rank 4 or rank 1 " +
              ("but got rank " + $offset.rank + "."); });
      }
      return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);
  }
  var batchNorm4d = op({ batchNorm4d_: batchNorm4d_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Broadcast an array to a compatible shape NumPy-style.
   *
   * The tensor's shape is compared to the broadcast shape from end to beginning.
   * Ones are prepended to the tensor's shape until is has the same length as
   * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is
   * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then
   * the input tensor is tiled N times along that axis (using tf.tile).
   *
   * @param input The tensor that is to be broadcasted.
   * @param shape The input is to be broadcast to this shape.
   */
  /** @doc {heading: 'Tensors', subheading: 'Transformations'} */
  function broadcastTo_(x, shape) {
      var input = convertToTensor(x, 'broadcastTo', 'x');
      var xShape = input.shape;
      if (shape.some(function (d) { return !(d > 0) || d % 1 !== 0; })) {
          throw new Error("broadcastTo(): Invalid broadcast shape [" + shape + "].");
      }
      if (shape.length < input.rank) {
          throw new Error("broadcastTo(): shape.length=" + shape.length + " < input.rank=" + input.rank + ".");
      }
      if (shape.length > input.rank) {
          var newShape = input.shape.slice();
          while (newShape.length < shape.length) {
              newShape.unshift(1);
          }
          input = reshape(input, newShape);
      }
      var inputShape = input.shape;
      var reps = Array.from(shape);
      for (var i = shape.length - 1; i >= 0; i--) {
          if (inputShape[i] === shape[i]) {
              reps[i] = 1;
          }
          else if (input.shape[i] !== 1) {
              throw new Error("broadcastTo(): [" + xShape + "] cannot be broadcast to [" + shape + "].");
          }
      }
      var axes = reps.map(function (n, i) { return n > 1 ? i : -1; }).filter(function (i) { return i >= 0; });
      if (axes.length === 0) {
          return clone(input);
      }
      var forward = function (backend) { return backend.tile(input, reps); };
      var inputs = { x: input };
      var attrs = { shape: shape, inputShape: inputShape };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, BroadcastTo, attrs);
  }
  var broadcastTo = op({ broadcastTo_: broadcastTo_ });

  /**
   * @license
   * Copyright 2020 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.
   *
   * The values are stored in CPU as `TypedArray`. Fill the buffer using
   * `buffer.set()`, or by modifying directly `buffer.values`.
   *
   * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with
   * those values.
   *
   * ```js
   * // Create a buffer and set values at particular indices.
   * const buffer = tf.buffer([2, 2]);
   * buffer.set(3, 0, 0);
   * buffer.set(5, 1, 0);
   *
   * // Convert the buffer back to a tensor.
   * buffer.toTensor().print();
   * ```
   *
   * @param shape An array of integers defining the output tensor shape.
   * @param dtype The dtype of the buffer. Defaults to 'float32'.
   * @param values The values of the buffer as `TypedArray`. Defaults to
   * zeros.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function buffer(shape, dtype, values) {
      if (dtype === void 0) { dtype = 'float32'; }
      dtype = dtype || 'float32';
      assertNonNegativeIntegerDimensions(shape);
      return new TensorBuffer(shape, dtype, values);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`
   *
   * ```js
   * const x = tf.tensor1d([.6, 1.1, -3.3]);
   *
   * x.ceil().print();  // or tf.ceil(x)
   * ```
   * @param x The input Tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function ceil_(x) {
      var $x = convertToTensor(x, 'x', 'ceil');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend) { return backend.ceil($x); }, inputs, null /* grad */, Ceil);
  }
  var ceil = op({ ceil_: ceil_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`
   *
   * ```js
   * const x = tf.tensor1d([-1, 2, -3, 4]);
   *
   * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)
   * ```
   * @param x The input tensor.
   * @param clipValueMin Lower-bound of range to be clipped to.
   * @param clipValueMax Upper-bound of range to be clipped to.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function clipByValue_(x, clipValueMin, clipValueMax) {
      var $x = convertToTensor(x, 'x', 'clipByValue');
      assert((clipValueMin <= clipValueMax), function () { return "Error in clip: min (" + clipValueMin + ") must be " +
          ("less than or equal to max (" + clipValueMax + ")."); });
      var inputs = { x: $x };
      var attrs = { clipValueMin: clipValueMin, clipValueMax: clipValueMax };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.clip($x, clipValueMin, clipValueMax);
          save([$x]);
          return res;
      }, inputs, null /* grad */, ClipByValue, attrs);
  }
  var clipByValue = op({ clipByValue_: clipByValue_ });

  /**
   * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.
   *
   * For example, if:
   * A: shape(3) = |r1, g1, b1|
   * B: shape(2) = |r2, g2|
   * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|
   *
   * @param tensors A list of`tf.Tensor`s to concatenate.
   * @return The concatenated array.
   */
  function concat1d_(tensors) {
      return concat(tensors, 0 /* axis */);
  }
  var concat1d = op({ concat1d_: concat1d_ });

  /**
   * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.
   *
   * For example, if:
   * A: shape(2, 3) = | r1, g1, b1 |
   *                  | r2, g2, b2 |
   *
   * B: shape(2, 3) = | r3, g3, b3 |
   *                  | r4, g4, b4 |
   *
   * C = tf.concat2d([A, B], axis)
   *
   * if axis = 0:
   * C: shape(4, 3) = | r1, g1, b1 |
   *                  | r2, g2, b2 |
   *                  | r3, g3, b3 |
   *                  | r4, g4, b4 |
   *
   * if axis = 1:
   * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |
   *                   | r2, g2, b2, r4, g4, b4 |
   *
   *
   * @param tensors A list of `tf.Tensor`s to concatenate.
   * @param axis The axis to concatenate along.
   * @return The concatenated array.
   */
  function concat2d_(tensors, axis) {
      return concat(tensors, axis);
  }
  var concat2d = op({ concat2d_: concat2d_ });

  /**
   * Concatenates a list of `tf.Tensor3D`s along an axis.
   * See `concat` for details.
   *
   * For example, if:
   * A: shape(2, 1, 3) = | r1, g1, b1 |
   *                     | r2, g2, b2 |
   *
   * B: shape(2, 1, 3) = | r3, g3, b3 |
   *                     | r4, g4, b4 |
   *
   * C = tf.concat3d([A, B], axis)
   *
   * if axis = 0:
   * C: shape(4, 1, 3) = | r1, g1, b1 |
   *                     | r2, g2, b2 |
   *                     | r3, g3, b3 |
   *                     | r4, g4, b4 |
   *
   * if axis = 1:
   * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |
   *                     | r2, g2, b2, r4, g4, b4 |
   *
   * if axis = 2:
   * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |
   *                      | r2, g2, b2, r4, g4, b4 |
   *
   * @param tensors A list of`tf.Tensor`s to concatenate.
   * @param axis The axis to concate along.
   * @return The concatenated array.
   */
  function concat3d_(tensors, axis) {
      return concat(tensors, axis);
  }
  var concat3d = op({ concat3d_: concat3d_ });

  /**
   * Concatenates a list of `tf.Tensor4D`s along an axis.
   * See `concat` for details.
   *
   * @param tensors A list of `tf.Tensor`s to concatenate.
   * @param axis The axis to concate along.
   * @return The concatenated array.
   */
  function concat4d_(tensors, axis) {
      return concat(tensors, axis);
  }
  var concat4d = op({ concat4d_: concat4d_ });

  /**
   * Computes a 1D convolution over the input x.
   *
   * @param x The input tensor, of rank 3 or rank 2, of shape
   *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.
   * @param filter The filter, rank 3, of shape
   *     `[filterWidth, inDepth, outDepth]`.
   * @param stride The number of entries by which the filter is moved right at
   *     each step.
   * @param pad The type of padding algorithm.
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1x1.
   *   - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dataFormat An optional string from "NWC", "NCW". Defaults to "NWC",
   *     the data is stored in the order of [batch, in_width, in_channels]. Only
   *     "NWC" is currently supported.
   * @param dilation The dilation rate in which we sample input values in
   *     atrous convolution. Defaults to `1`. If it is greater than 1, then
   *     stride must be `1`.
   * @param dimRoundingMode The rounding mode used when computing output
   *     dimensions if pad is a number. If none is provided, it will not round
   *     and error if the output is of fractional size.
   */
  /** @doc {heading: 'Operations', subheading: 'Convolution'} */
  function conv1d_(x, filter, stride, pad, dataFormat, dilation, dimRoundingMode) {
      if (dataFormat === void 0) { dataFormat = 'NWC'; }
      if (dilation === void 0) { dilation = 1; }
      var $x = convertToTensor(x, 'x', 'conv1d');
      var $filter = convertToTensor(filter, 'filter', 'conv1d');
      var x3D = $x;
      var reshapedTo3D = false;
      if ($x.rank === 2) {
          reshapedTo3D = true;
          x3D = reshape($x, [1, $x.shape[0], $x.shape[1]]);
      }
      assert(x3D.rank === 3, function () { return "Error in conv1d: input must be rank 3, but got rank " + x3D.rank + "."; });
      assert($filter.rank === 3, function () { return "Error in conv1d: filter must be rank 3, but got rank " +
          ($filter.rank + "."); });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in conv1d: pad must be an integer when using, " +
              ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      assert(x3D.shape[2] === $filter.shape[1], function () { return "Error in conv1d: depth of input (" + x3D.shape[2] + ") must match " +
          ("input depth for filter " + $filter.shape[1] + "."); });
      assert(eitherStridesOrDilationsAreOne(stride, dilation), function () { return 'Error in conv1D: Either stride or dilation must be 1. ' +
          ("Got stride " + stride + " and dilation '" + dilation + "'"); });
      assert(dataFormat === 'NWC', function () { return "Error in conv1d: got dataFormat of " + dataFormat + " but only NWC is currently supported."; });
      var filter4D = reshape($filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);
      var input4D = reshape(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);
      var strides = [1, stride];
      var dilations = [1, dilation];
      var conv2dDataFormat = 'NHWC';
      var res = conv2d(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);
      if (reshapedTo3D) {
          return reshape(res, [res.shape[2], res.shape[3]]);
      }
      return reshape(res, [res.shape[0], res.shape[2], res.shape[3]]);
  }
  var conv1d = op({ conv1d_: conv1d_ });

  /**
   * Computes the transposed 2D convolution of an image, also known as a
   * deconvolution.
   *
   * @param x The input image, of rank 4 or rank 3, of shape
   *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.
   * @param filter The filter, rank 4, of shape
   *     `[filterHeight, filterWidth, outDepth, inDepth]`.
   *     `inDepth` must match `inDepth` in `x`.
   * @param outputShape Output shape, of rank 4 or rank 3:
   *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.
   * @param strides The strides of the original convolution:
   *     `[strideHeight, strideWidth]`.
   * @param pad  The type of padding algorithm used in the non-transpose version
   *    of the op.
   * @param dimRoundingMode The rounding mode used when computing output
   *    dimensions if pad is a number. If none is provided, it will not round
   *    and error if the output is of fractional size.
   */
  /** @doc {heading: 'Operations', subheading: 'Convolution'} */
  function conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {
      var $x = convertToTensor(x, 'x', 'conv2dTranspose');
      var $filter = convertToTensor(filter, 'filter', 'conv2dTranspose');
      return conv2DBackpropInput(outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);
  }
  var conv2dTranspose = op({ conv2dTranspose_: conv2dTranspose_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes a 3D convolution over the input x.
   *
   * @param x The input tensor, of rank 5 or rank 4, of shape
   *     `[batch, depth, height, width, channels]`. If rank 4,
   * batch of 1 is assumed.
   * @param filter The filter, rank 5, of shape
   *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.
   *      inChannels must match between input and filter.
   * @param strides The strides of the convolution: `[strideDepth, strideHeight,
   * strideWidth]`.
   * @param pad The type of padding algorithm.
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1x1.
   *   - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dataFormat: An optional string from: "NDHWC", "NCDHW". Defaults to
   *     "NDHWC". Specify the data format of the input and output data. With the
   *     default format "NDHWC", the data is stored in the order of: [batch,
   *     depth, height, width, channels]. Only "NDHWC" is currently supported.
   * @param dilations The dilation rates: `[dilationDepth, dilationHeight,
   *     dilationWidth]` in which we sample input values across the height
   *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.
   *     If `dilations` is a single number, then
   *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater
   *     than 1, then all values of `strides` must be 1.
   */
  /** @doc {heading: 'Operations', subheading: 'Convolution'} */
  function conv3d_(x, filter, strides, pad, dataFormat, dilations) {
      if (dataFormat === void 0) { dataFormat = 'NDHWC'; }
      if (dilations === void 0) { dilations = [1, 1, 1]; }
      var $x = convertToTensor(x, 'x', 'conv3d');
      var $filter = convertToTensor(filter, 'filter', 'conv3d');
      var x5D = $x;
      var reshapedTo5D = false;
      if ($x.rank === 4) {
          reshapedTo5D = true;
          x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
      }
      assert(x5D.rank === 5, function () { return "Error in conv3d: input must be rank 5, but got rank " + x5D.rank + "."; });
      assert($filter.rank === 5, function () { return "Error in conv3d: filter must be rank 5, but got rank " +
          ($filter.rank + "."); });
      assert(x5D.shape[4] === $filter.shape[3], function () { return "Error in conv3d: depth of input (" + x5D.shape[4] + ") must match " +
          ("input depth for filter " + $filter.shape[3] + "."); });
      assert(eitherStridesOrDilationsAreOne(strides, dilations), function () { return 'Error in conv3D: Either strides or dilations must be 1. ' +
          ("Got strides " + strides + " and dilations '" + dilations + "'"); });
      assert(dataFormat === 'NDHWC', function () { return "Error in conv3d: got dataFormat of " + dataFormat + " but only NDHWC is currently supported."; });
      var forward = function (backend, save) {
          var convInfo = computeConv3DInfo(x5D.shape, $filter.shape, strides, dilations, pad);
          var res = backend.conv3d(x5D, $filter, convInfo);
          save([x5D, $filter]);
          return res;
      };
      var inputs = { x: x5D, filter: $filter };
      var attrs = { strides: strides, pad: pad, dataFormat: dataFormat, dilations: dilations };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, Conv3D, attrs);
      if (reshapedTo5D) {
          return res.as4D(res.shape[1], res.shape[2], res.shape[3], res.shape[4]);
      }
      return res;
  }
  var conv3d = op({ conv3d_: conv3d_ });

  /**
   * Computes the transposed 3D convolution of a volume, also known as a
   * deconvolution.
   *
   * @param x The input image, of rank 5 or rank 4, of shape
   *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.
   * @param filter The filter, rank 4, of shape
   *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.
   *     `inDepth` must match `inDepth` in `x`.
   * @param outputShape Output shape, of rank 5 or rank 4:
   *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is
   *    assumed.
   * @param strides The strides of the original convolution:
   *     `[strideDepth, strideHeight, strideWidth]`.
   * @param pad  The type of padding algorithm used in the non-transpose version
   *    of the op.
   */
  /** @doc {heading: 'Operations', subheading: 'Convolution'} */
  function conv3dTranspose_(x, filter, outputShape, strides, pad) {
      var $x = convertToTensor(x, 'x', 'conv3dTranspose');
      var $filter = convertToTensor(filter, 'filter', 'conv3dTranspose');
      return conv3DBackpropInput(outputShape, $x, $filter, strides, pad);
  }
  var conv3dTranspose = op({ conv3dTranspose_: conv3dTranspose_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Rearranges data from depth into blocks of spatial data. More specifically,
   * this op outputs a copy of the input tensor where values from the `depth`
   * dimension are moved in spatial blocks to the `height` and `width` dimensions.
   * The attr `blockSize` indicates the input block size and how the data is
   * moved.
   *
   *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged
   * into non-overlapping blocks of size `blockSize x blockSize`
   *
   *  - The width the output tensor is `inputWidth * blockSize`, whereas the
   * height is `inputHeight * blockSize`
   *
   *  - The Y, X coordinates within each block of the output image are determined
   * by the high order component of the input channel index
   *
   *  - The depth of the input tensor must be divisible by `blockSize *
   * blockSize`
   *
   * The `dataFormat` attr specifies the layout of the input and output tensors
   * with the following options: "NHWC": [ `batch, height, width, channels` ]
   * "NCHW": [ `batch, channels, height, width` ]
   *
   * ```js
   * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);
   * const blockSize = 2;
   * const dataFormat = "NHWC";
   *
   * tf.depthToSpace(x, blockSize, dataFormat).print();
   * ```
   *
   * @param x The input tensor of rank 4
   * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block
   * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to "NHWC"
   */
  /** @doc {heading: 'Tensors', subheading: 'Transformations'} */
  function depthToSpace_(x, blockSize, dataFormat) {
      if (dataFormat === void 0) { dataFormat = 'NHWC'; }
      var $x = convertToTensor(x, 'x', 'depthToSpace');
      var inputHeight = (dataFormat === 'NHWC') ? $x.shape[1] : $x.shape[2];
      var inputWidth = (dataFormat === 'NHWC') ? $x.shape[2] : $x.shape[3];
      var inputDepth = (dataFormat === 'NHWC') ? $x.shape[3] : $x.shape[1];
      assert(inputHeight * blockSize >= 0, function () { return "Negative dimension size caused by overflow when multiplying\n    " + inputHeight + " and " + blockSize + "  for depthToSpace with input shape\n    " + $x.shape; });
      assert(inputWidth * blockSize >= 0, function () { return "Negative dimension size caused by overflow when multiplying\n    " + inputWidth + " and " + blockSize + " for depthToSpace with input shape\n        " + $x.shape; });
      assert((inputDepth % (blockSize * blockSize) === 0), function () { return "Dimension size must be evenly divisible by " + blockSize * blockSize + " but is " + inputDepth + " for depthToSpace with input shape " + $x.shape; });
      var forward = function (backend) {
          return backend.depthToSpace($x, blockSize, dataFormat);
      };
      var inputs = { x: $x };
      var attrs = { blockSize: blockSize, dataFormat: dataFormat };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, DepthToSpace, attrs);
  }
  var depthToSpace = op({ depthToSpace_: depthToSpace_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Depthwise 2D convolution.
   *
   * Given a 4D `input` array and a `filter` array of shape
   * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
   * `inChannels` convolutional filters of depth 1, this op applies a
   * different filter to each input channel (expanding from 1 channel to
   * `channelMultiplier` channels for each), then concatenates the results
   * together. The output has `inChannels * channelMultiplier` channels.
   *
   * See
   * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
   *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
   * for more details.
   *
   * @param x The input tensor, of rank 4 or rank 3, of shape
   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
   * assumed.
   * @param filter The filter tensor, rank 4, of shape
   *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
   * @param strides The strides of the convolution: `[strideHeight,
   * strideWidth]`. If strides is a single number, then `strideHeight ==
   * strideWidth`.
   * @param pad The type of padding algorithm.
   *   - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *   - `valid`: output will be smaller than input if filter is larger
   *       than 1x1.
   *   - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
   *     in which we sample input values across the height and width dimensions
   *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
   *     number, then `dilationHeight == dilationWidth`. If it is greater than
   *     1, then all values of `strides` must be 1.
   * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
   *     "NHWC". Specify the data format of the input and output data. With the
   *     default format "NHWC", the data is stored in the order of: [batch,
   *     height, width, channels]. Only "NHWC" is currently supported.
   * @param dimRoundingMode The rounding mode used when computing output
   *     dimensions if pad is a number. If none is provided, it will not round
   *     and error if the output is of fractional size.
   */
  /** @doc {heading: 'Operations', subheading: 'Convolution'} */
  function depthwiseConv2d_(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
      if (dataFormat === void 0) { dataFormat = 'NHWC'; }
      if (dilations === void 0) { dilations = [1, 1]; }
      var $x = convertToTensor(x, 'x', 'depthwiseConv2d');
      var $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d');
      var x4D = $x;
      var reshapedTo4D = false;
      if ($x.rank === 3) {
          reshapedTo4D = true;
          x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
      }
      assert(x4D.rank === 4, function () { return "Error in depthwiseConv2d: input must be rank 4, but got " +
          ("rank " + x4D.rank + "."); });
      assert($filter.rank === 4, function () { return "Error in depthwiseConv2d: filter must be rank 4, but got rank " +
          ($filter.rank + "."); });
      assert(x4D.shape[3] === $filter.shape[2], function () { return "Error in depthwiseConv2d: number of input channels " +
          ("(" + x4D.shape[3] + ") must match the inChannels dimension in ") +
          ("filter " + $filter.shape[2] + "."); });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in depthwiseConv2d: pad must be an integer when using, " +
              ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      var forward = function (backend, save) {
          if (dilations == null) {
              dilations = [1, 1];
          }
          assert(eitherStridesOrDilationsAreOne(strides, dilations), function () { return 'Error in depthwiseConv2d: Either strides or dilations must be ' +
              ("1. Got strides " + strides + " and dilations '" + dilations + "'"); });
          var convInfo = computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
          var res = backend.depthwiseConv2D(x4D, $filter, convInfo);
          save([x4D, $filter]);
          return res;
      };
      var inputs = { x: x4D, filter: $filter };
      var attrs = { strides: strides, pad: pad, dataFormat: dataFormat, dilations: dilations, dimRoundingMode: dimRoundingMode };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, DepthwiseConv2dNative, attrs);
      if (reshapedTo4D) {
          return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }
      return res;
  }
  var depthwiseConv2d = op({ depthwiseConv2d_: depthwiseConv2d_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns a diagonal tensor with a given diagonal values.
   *
   * Given a diagonal, this operation returns a tensor with the diagonal and
   * everything else padded with zeros.
   *
   * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor
   * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3, 4]);
   *
   * tf.diag(x).print()
   * ```
   * ```js
   * const x = tf.tensor1d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])
   *
   * tf.diag(x).print()
   * ```
   * @param x The input tensor.
   */
  function diag_(x) {
      var $x = convertToTensor(x, 'x', 'diag').flatten();
      var forward = function (backend) {
          var result = backend.diag($x);
          var outShape = x.shape.concat(x.shape);
          return reshape(result, outShape);
      };
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Diag);
  }
  var diag = op({ diag_: diag_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the grayscale dilation over the input `x`.
   *
   * @param x The input tensor, rank 3 or rank 4 of shape
   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
   * @param filter The filter tensor, rank 3, of shape
   *     `[filterHeight, filterWidth, depth]`.
   * @param strides The strides of the sliding window for each dimension of the
   *     input tensor: `[strideHeight, strideWidth]`.
   *     If `strides` is a single number,
   *     then `strideHeight == strideWidth`.
   * @param pad The type of padding algorithm.
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1*1x1.
   *    - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dataFormat Specify the data format of the input and output data.
   *      Defaults to 'NHWC'. Only 'NHWC' is currently supported. With the
   *      default format "NHWC", the data is stored in the order of: [batch,
   *      height, width, channels].
   * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
   *     in which we sample input values across the height and width dimensions
   *     for atrous morphological dilation. Defaults to `[1, 1]`. If `dilations`
   *     is a single number, then `dilationHeight == dilationWidth`. If it is
   *     greater than 1, then all values of `strides` must be 1.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function dilation2d_(x, filter, strides, pad, dilations, dataFormat) {
      if (dilations === void 0) { dilations = [1, 1]; }
      if (dataFormat === void 0) { dataFormat = 'NHWC'; }
      var $x = convertToTensor(x, 'x', 'dilation2d');
      var $filter = convertToTensor(filter, 'filter', 'dilation2d');
      assert($x.rank === 3 || $x.rank === 4, function () { return "Error in dilation2d: input must be rank 3 or 4, but got rank " +
          ($x.rank + "."); });
      assert($filter.rank === 3, function () { return "Error in dilation2d: filter must be rank 3, but got rank " +
          ($filter.rank + "."); });
      assert(dataFormat === 'NHWC', function () { return "Error in dilation2d: Only NHWC is currently supported, " +
          ("but got dataFormat of " + dataFormat); });
      var x4D = $x;
      var reshapedTo4D = false;
      if ($x.rank === 3) {
          x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
          reshapedTo4D = true;
      }
      var inputs = { x: x4D, filter: $filter };
      var attrs = { strides: strides, pad: pad, dilations: dilations };
      var res = ENGINE.runKernel(Dilation2D, inputs, attrs);
      if (reshapedTo4D) {
          return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }
      return res;
  }
  var dilation2d = op({ dilation2d_: dilation2d_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0
   * if denominator is 0.
   *
   *
   * ```js
   * const a = tf.tensor1d([1, 4, 9, 16]);
   * const b = tf.tensor1d([1, 2, 3, 4]);
   * const c = tf.tensor1d([0, 0, 0, 0]);
   *
   * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
   * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
   * ```
   *
   * ```js
   * // Broadcast div a with b.
   * const a = tf.tensor1d([2, 4, 6, 8]);
   * const b = tf.scalar(2);
   * const c = tf.scalar(0);
   *
   * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
   * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
   * ```
   *
   * @param a The first tensor as the numerator.
   * @param b The second tensor as the denominator. Must have the same dtype as
   * `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */
  function divNoNan_(a, b) {
      var _a;
      // TODO: Make this into its own kernel.
      var $a = convertToTensor(a, 'a', 'div');
      var $b = convertToTensor(b, 'b', 'div');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      var divResult = div($a, $b);
      var zeros = zerosLike(divResult);
      var bEqualsZero = $b.equal(zeros);
      return where(bEqualsZero, zeros, divResult);
  }
  var divNoNan = op({ divNoNan_: divNoNan_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.
   *
   * ```js
   * const a = tf.tensor1d([1, 2]);
   * const b = tf.tensor2d([[1, 2], [3, 4]]);
   * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
   *
   * a.dot(b).print();  // or tf.dot(a, b)
   * b.dot(a).print();
   * b.dot(c).print();
   * ```
   * @param t1 The first tensor in the dot operation.
   * @param t2 The second tensor in the dot operation.
   */
  /** @doc {heading: 'Operations', subheading: 'Matrices'} */
  function dot_(t1, t2) {
      var $t1 = convertToTensor(t1, 't1', 'dot');
      var $t2 = convertToTensor(t2, 't2', 'dot');
      assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), function () { return "Error in dot: inputs must all be rank 1 or 2, but got ranks " +
          ($t1.rank + " and " + $t2.rank + "."); });
      var t1Inner = ($t1.rank === 1 ? $t1.size : $t1.shape[1]);
      var t2Inner = ($t2.rank === 1 ? $t2.size : $t2.shape[0]);
      assert(t1Inner === t2Inner, function () { return "Error in dot: inner dimensions of inputs must match, but got " +
          (t1Inner + " and " + t2Inner + "."); });
      if ($t1.rank === 1 && $t2.rank === 1) {
          var t12D = reshape($t1, [1, -1]);
          var t22D = reshape($t2, [-1, 1]);
          var t1t2 = matMul(t12D, t22D);
          return reshape(t1t2, []);
      }
      else if ($t1.rank === 1 && $t2.rank === 2) {
          var t12D = reshape($t1, [1, -1]);
          var t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);
          var t1t2 = matMul(t12D, t22D);
          return reshape(t1t2, [t1t2.size]);
      }
      else if ($t1.rank === 2 && $t2.rank === 1) {
          var t22D = reshape($t2, [-1, 1]);
          var t1t2 = matMul($t1, t22D);
          return reshape(t1t2, [t1t2.size]);
      }
      else {
          var t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);
          var t1t2 = matMul($t1, t22D);
          return t1t2;
      }
  }
  var dot = op({ dot_: dot_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes exponential linear element-wise: `x > 0 ? e ^ x - 1 : 0`.
   *
   * ```js
   * const x = tf.tensor1d([-1, 1, -3, 2]);
   *
   * x.elu().print();  // or tf.elu(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function elu_(x) {
      var $x = convertToTensor(x, 'x', 'elu');
      var forward = function (backend, save) {
          var y = backend.elu($x);
          save([y]);
          return y;
      };
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Elu);
  }
  var elu = op({ elu_: elu_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes gause error function of the input `tf.Tensor` element-wise:
   * `erf(x)`
   *
   * ```js
   * const x = tf.tensor1d([0, .1, -.1, .7]);
   *
   * x.erf().print(); // or tf.erf(x);
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function erf_(x) {
      var $x = convertToTensor(x, 'x', 'erf');
      assert($x.dtype === 'int32' || $x.dtype === 'float32', function () { return 'Input dtype must be `int32` or `float32`.'; });
      if ($x.dtype === 'int32') {
          $x = $x.toFloat();
      }
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.erf($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Erf);
  }
  var erf = op({ erf_: erf_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes exponential of the input `tf.Tensor` minus one element-wise.
   * `e ^ x - 1`
   *
   * ```js
   * const x = tf.tensor1d([1, 2, -3]);
   *
   * x.expm1().print();  // or tf.expm1(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function expm1_(x) {
      var $x = convertToTensor(x, 'x', 'expm1');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.expm1($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Expm1);
  }
  var expm1 = op({ expm1_: expm1_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Create an identity matrix.
   *
   * @param numRows Number of rows.
   * @param numColumns Number of columns. Defaults to `numRows`.
   * @param batchShape If provided, will add the batch shape to the beginning
   *   of the shape of the returned `tf.Tensor` by repeating the identity
   *   matrix.
   * @param dtype Data type.
   * @returns Identity matrix of the specified size and data type, possibly
   *   with batch repetition if `batchShape` is specified.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function eye_(numRows, numColumns, batchShape, dtype) {
      if (dtype === void 0) { dtype = 'float32'; }
      if (numColumns == null) {
          numColumns = numRows;
      }
      var buff = buffer([numRows, numColumns], dtype);
      var n = numRows <= numColumns ? numRows : numColumns;
      for (var i = 0; i < n; ++i) {
          buff.set(1, i, i);
      }
      var out = buff.toTensor().as2D(numRows, numColumns);
      if (batchShape == null) {
          return out;
      }
      else {
          if (batchShape.length === 1) {
              return tile(expandDims(out, 0), [batchShape[0], 1, 1]);
          }
          else if (batchShape.length === 2) {
              return tile(expandDims(expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);
          }
          else if (batchShape.length === 3) {
              return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [
                  batchShape[0], batchShape[1], batchShape[2], 1, 1
              ]);
          }
          else {
              throw new Error("eye() currently supports only 1D and 2D " +
                  (
                  // tslint:disable-next-line:no-any
                  "batchShapes, but received " + batchShape.length + "D."));
          }
      }
  }
  var eye = op({ eye_: eye_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Fast Fourier transform.
   *
   * Computes the 1-dimensional discrete Fourier transform over the inner-most
   * dimension of input.
   *
   * ```js
   * const real = tf.tensor1d([1, 2, 3]);
   * const imag = tf.tensor1d([1, 2, 3]);
   * const x = tf.complex(real, imag);
   *
   * x.fft().print();  // tf.spectral.fft(x).print();
   * ```
   * @param input The complex input to compute an fft over.
   */
  /**
   * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
   */
  function fft_(input) {
      assert(input.dtype === 'complex64', function () { return "The dtype for tf.spectral.fft() must be complex64 " +
          ("but got " + input.dtype + "."); });
      var inputs = { input: input };
      return ENGINE.runKernelFunc(function (backend) {
          // Collapse all outer dimensions to a single batch dimension.
          var innerDimensionSize = input.shape[input.shape.length - 1];
          var batch = input.size / innerDimensionSize;
          var input2D = input.as2D(batch, innerDimensionSize);
          var result = backend.fft(input2D);
          return result.reshape(input.shape);
      }, inputs, null /* gradient */, FFT);
  }
  var fft = op({ fft_: fft_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a `tf.Tensor` filled with a scalar value.
   *
   * ```js
   * tf.fill([2, 2], 4).print();
   * ```
   *
   * @param shape An array of integers defining the output tensor shape.
   * @param value The scalar value to fill the tensor with.
   * @param dtype The type of an element in the resulting tensor. Defaults to
   * 'float'.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function fill(shape, value, dtype) {
      var attrs = { shape: shape, value: value, dtype: dtype };
      return ENGINE.runKernelFunc(function (backend) { return backend.fill(shape, value, dtype); }, {}, null, Fill, attrs);
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Inverse fast Fourier transform.
   *
   * Computes the inverse 1-dimensional discrete Fourier transform over the
   * inner-most dimension of input.
   *
   * ```js
   * const real = tf.tensor1d([1, 2, 3]);
   * const imag = tf.tensor1d([1, 2, 3]);
   * const x = tf.complex(real, imag);
   *
   * x.ifft().print();  // tf.spectral.ifft(x).print();
   * ```
   * @param input The complex input to compute an ifft over.
   */
  /**
   * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
   */
  function ifft_(input) {
      assert(input.dtype === 'complex64', function () { return "The dtype for tf.spectral.ifft() must be complex64 " +
          ("but got " + input.dtype + "."); });
      var inputs = { input: input };
      return ENGINE.runKernelFunc(function (backend) {
          // Collapse all outer dimensions to a single batch dimension.
          var innerDimensionSize = input.shape[input.shape.length - 1];
          var batch = input.size / innerDimensionSize;
          var input2D = input.as2D(batch, innerDimensionSize);
          var result = backend.ifft(input2D);
          return result.reshape(input.shape);
      }, inputs, null /* gradient */, IFFT);
  }
  var ifft = op({ ifft_: ifft_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the imaginary part of a complex (or real) tensor.
   *
   * Given a tensor input, this operation returns a tensor of type float that is
   * the imaginary part of each element in input considered as a complex number.
   * If input is real, a tensor of all zeros is returned.
   *
   * ```js
   * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
   * tf.imag(x).print();
   * ```
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function imag_(input) {
      var $input = convertToTensor(input, 'input', 'imag');
      var forward = function (backend) {
          return backend.imag($input);
      };
      var inputs = { input: $input };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Imag);
  }
  var imag = op({ imag_: imag_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the real part of a complex (or real) tensor.
   *
   * Given a tensor input, this operation returns a tensor of type float that is
   * the real part of each element in input considered as a complex number.
   *
   * If the input is real, it simply makes a clone.
   *
   * ```js
   * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
   * tf.real(x).print();
   * ```
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function real_(input) {
      var $input = convertToTensor(input, 'input', 'real');
      var forward = function (backend) {
          return backend.real($input);
      };
      var inputs = { input: $input };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Real);
  }
  var real = op({ real_: real_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Inversed real value input fast Fourier transform.
   *
   * Computes the 1-dimensional inversed discrete Fourier transform over the
   * inner-most dimension of the real input.
   *
   * ```js
   * const real = tf.tensor1d([1, 2, 3]);
   * const imag = tf.tensor1d([0, 0, 0]);
   * const x = tf.complex(real, imag);
   *
   * x.irfft().print();
   * ```
   * @param input The real value input to compute an irfft over.
   */
  /**
   * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
   */
  function irfft_(input) {
      var innerDimensionSize = input.shape[input.shape.length - 1];
      var batch = input.size / innerDimensionSize;
      var ret;
      if (innerDimensionSize <= 2) {
          var complexInput = reshape(input, [batch, innerDimensionSize]);
          ret = ifft(complexInput);
      }
      else {
          // The length of unique components of the DFT of a real-valued signal
          // is 2 * (input_len - 1)
          var outputShape = [batch, 2 * (innerDimensionSize - 1)];
          var realInput = reshape(real(input), [batch, innerDimensionSize]);
          var imagInput = reshape(imag(input), [batch, innerDimensionSize]);
          var realConjugate = reverse(slice(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);
          var imagConjugate = mul(reverse(slice(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1), scalar(-1));
          var r = concat([realInput, realConjugate], 1);
          var i = concat([imagInput, imagConjugate], 1);
          var complexInput = reshape(complex(r, i), [outputShape[0], outputShape[1]]);
          ret = ifft(complexInput);
      }
      ret = real(ret);
      // reshape the result if the input is 3D tensor.
      if (input.rank === 3 && input.shape[0] !== 0) {
          var temp = ret;
          var batch_1 = input.shape[0];
          ret = reshape(ret, [batch_1, ret.shape[0] / batch_1, ret.shape[1]]);
          temp.dispose();
      }
      return ret;
  }
  var irfft = op({ irfft_: irfft_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns which elements of x are finite.
   *
   * ```js
   * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
   *
   * x.isFinite().print();  // or tf.isNaN(x)
   * ```
   * @param x The input Tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function isFinite_(x) {
      var $x = convertToTensor(x, 'x', 'isFinite');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend) { return backend.isFinite($x); }, inputs, null /* grad */, IsFinite);
  }
  var isFinite$1 = op({ isFinite_: isFinite_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns which elements of x are Infinity or -Infinity.
   *
   * ```js
   * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
   *
   * x.isInf().print();  // or tf.isNaN(x)
   * ```
   * @param x The input Tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function isInf_(x) {
      var $x = convertToTensor(x, 'x', 'isInf');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend) { return backend.isInf($x); }, inputs, null /* grad */, IsInf);
  }
  var isInf = op({ isInf_: isInf_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * RReturns which elements of x are NaN.
   *
   * ```js
   * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
   *
   * x.isNaN().print();  // or tf.isNaN(x)
   * ```
   * @param x The input Tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function isNaN_(x) {
      var $x = convertToTensor(x, 'x', 'isNaN');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend) { return backend.isNaN($x); }, inputs, null /* grad */, IsNan);
  }
  var isNaN$1 = op({ isNaN_: isNaN_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes leaky rectified linear element-wise.
   *
   * See
   * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](
   *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)
   *
   * ```js
   * const x = tf.tensor1d([-1, 2, -3, 4]);
   *
   * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)
   * ```
   * @param x The input tensor.
   * @param alpha The scaling factor for negative values, defaults to 0.2.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function leakyRelu_(x, alpha) {
      if (alpha === void 0) { alpha = 0.2; }
      var $x = convertToTensor(x, 'x', 'leakyRelu');
      return maximum(mul(scalar(alpha), $x), $x);
  }
  var leakyRelu = op({ leakyRelu_: leakyRelu_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Return an evenly spaced sequence of numbers over the given interval.
   *
   * ```js
   * tf.linspace(0, 9, 10).print();
   * ```
   * @param start The start value of the sequence.
   * @param stop The end value of the sequence.
   * @param num The number of values to generate.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function linspace(start, stop, num) {
      if (num <= 0) {
          throw new Error('The number of values should be positive.');
      }
      var attrs = { start: start, stop: stop, num: num };
      return ENGINE.runKernelFunc(function (backend) { return backend.linspace(start, stop, num); }, {} /* inputs */, null /* grad */, LinSpace, attrs);
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Normalizes the activation of a local neighborhood across or within
   * channels.
   *
   * @param x The input tensor. The 4-D input tensor is treated as a 3-D array
   *     of 1D vectors (along the last dimension), and each vector is
   *     normalized independently.
   * @param depthRadius The number of adjacent channels in the 1D normalization
   *     window.
   * @param bias A constant bias term for the basis.
   * @param alpha A scale factor, usually positive.
   * @param beta An exponent.
   */
  /** @doc {heading: 'Operations', subheading: 'Normalization'} */
  function localResponseNormalization_(x, depthRadius, bias, alpha, beta) {
      if (depthRadius === void 0) { depthRadius = 5; }
      if (bias === void 0) { bias = 1; }
      if (alpha === void 0) { alpha = 1; }
      if (beta === void 0) { beta = 0.5; }
      var $x = convertToTensor(x, 'x', 'localResponseNormalization');
      assert($x.rank === 4 || $x.rank === 3, function () { return "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " + $x.rank + "."; });
      assert(isInt(depthRadius), function () { return "Error in localResponseNormalization: depthRadius must be an " +
          ("integer but got depthRadius " + depthRadius + "."); });
      var x4D = $x;
      var reshapedTo4D = false;
      if ($x.rank === 3) {
          reshapedTo4D = true;
          x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
      }
      var forward = function (backend, save) {
          var y = backend.localResponseNormalization4D(x4D, depthRadius, bias, alpha, beta);
          save([x4D, y]);
          return y;
      };
      var inputs = { x: x4D };
      var attrs = { depthRadius: depthRadius, bias: bias, alpha: alpha, beta: beta };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, LRN, attrs);
      if (reshapedTo4D) {
          return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
      }
      else {
          return res;
      }
  }
  var localResponseNormalization = op({ localResponseNormalization_: localResponseNormalization_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes natural logarithm of the input `tf.Tensor` plus one
   * element-wise: `ln(1 + x)`
   *
   * ```js
   * const x = tf.tensor1d([1, 2, Math.E - 1]);
   *
   * x.log1p().print();  // or tf.log1p(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function log1p_(x) {
      var $x = convertToTensor(x, 'x', 'log1p');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.log1p($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Log1p);
  }
  var log1p = op({ log1p_: log1p_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the
   * gradient of `f(x)` with respect to `x`.
   *
   * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to
   * `x` is computed instead. `f(x)` must take a single tensor `x` and return a
   * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.
   *
   * ```js
   * // f(x) = x ^ 2
   * const f = x => x.square();
   * // f'(x) = 2x
   * const g = tf.grad(f);
   *
   * const x = tf.tensor1d([2, 3]);
   * g(x).print();
   * ```
   *
   * ```js
   * // f(x) = x ^ 3
   * const f = x => x.pow(tf.scalar(3, 'int32'));
   * // f'(x) = 3x ^ 2
   * const g = tf.grad(f);
   * // f''(x) = 6x
   * const gg = tf.grad(g);
   *
   * const x = tf.tensor1d([2, 3]);
   * gg(x).print();
   * ```
   *
   * @param f The function f(x), to compute gradient for.
   */
  /** @doc {heading: 'Training', subheading: 'Gradients'} */
  function grad(f) {
      assert(isFunction(f), function () { return 'The f passed in grad(f) must be a function'; });
      return function (x, dy) {
          // x can be of any dtype, thus null as the last argument.
          var $x = convertToTensor(x, 'x', 'tf.grad', null);
          var $dy = (dy != null) ? convertToTensor(dy, 'dy', 'tf.grad') : null;
          return ENGINE.tidy(function () {
              var _a = ENGINE.gradients(function () { return f($x); }, [$x], $dy), value = _a.value, grads = _a.grads;
              if ($dy != null) {
                  assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' +
                      'returned by f(x)');
              }
              checkGrads(grads);
              return grads[0];
          });
      };
  }
  /**
   * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,
   * which gives an array of gradients of `f()` with respect to each input
   * [`x1`,`x2`,...].
   *
   * If `dy` is passed when calling `g()`, the gradient of
   * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.
   * The provided `f` must take one or more tensors and return a single tensor
   * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.
   *
   * ```js
   * // f(a, b) = a * b
   * const f = (a, b) => a.mul(b);
   * // df / da = b, df / db = a
   * const g = tf.grads(f);
   *
   * const a = tf.tensor1d([2, 3]);
   * const b = tf.tensor1d([-2, -3]);
   * const [da, db] = g([a, b]);
   * console.log('da');
   * da.print();
   * console.log('db');
   * db.print();
   * ```
   *
   * @param f The function `f(x1, x2,...)` to compute gradients for.
   */
  /** @doc {heading: 'Training', subheading: 'Gradients'} */
  function grads(f) {
      assert(isFunction(f), function () { return 'The f passed in grads(f) must be a function'; });
      return function (args, dy) {
          assert(Array.isArray(args), function () { return 'The args passed in grads(f)(args) must be an array ' +
              'of `Tensor`s or `TensorLike`s'; });
          // args can be of any dtype, thus null as the last argument.
          var $args = convertToTensorArray(args, 'args', 'tf.grads', null);
          var $dy = (dy != null) ? convertToTensor(dy, 'dy', 'tf.grads') : null;
          return ENGINE.tidy(function () {
              var _a = ENGINE.gradients(function () { return f.apply(void 0, $args); }, $args, $dy), value = _a.value, grads = _a.grads;
              if ($dy != null) {
                  assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' +
                      'match the shape returned by f([x1,...])');
              }
              checkGrads(grads);
              return grads;
          });
      };
  }
  /**
   * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`
   * returns a metric you want to show.
   *
   * The result is a rich object with the following properties:
   * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).
   * - value: The value returned by `f(x)`.
   *
   * ```js
   * // f(x) = x ^ 2
   * const f = x => x.square();
   * // f'(x) = 2x
   * const g = tf.valueAndGrad(f);
   *
   * const x = tf.tensor1d([2, 3]);
   * const {value, grad} = g(x);
   *
   * console.log('value');
   * value.print();
   * console.log('grad');
   * grad.print();
   * ```
   */
  /** @doc {heading: 'Training', subheading: 'Gradients'} */
  function valueAndGrad(f) {
      assert(isFunction(f), function () { return 'The f passed in valueAndGrad(f) must be a function'; });
      return function (x, dy) {
          assert(x instanceof Tensor, function () { return 'The x passed in valueAndGrad(f)(x) must be a tensor'; });
          assert(dy == null || dy instanceof Tensor, function () { return 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor'; });
          var _a = ENGINE.gradients(function () { return f(x); }, [x], dy), grads = _a.grads, value = _a.value;
          checkGrads(grads);
          return { grad: grads[0], value: value };
      };
  }
  /**
   * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`
   * returns a metric you want to show.
   *
   * The result is a rich object with the following properties:
   * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).
   * - value: The value returned by `f(x)`.
   *
   * ```js
   * // f(a, b) = a * b
   * const f = (a, b) => a.mul(b);
   * // df/da = b, df/db = a
   * const g = tf.valueAndGrads(f);
   *
   * const a = tf.tensor1d([2, 3]);
   * const b = tf.tensor1d([-2, -3]);
   * const {value, grads} = g([a, b]);
   *
   * const [da, db] = grads;
   *
   * console.log('value');
   * value.print();
   *
   * console.log('da');
   * da.print();
   * console.log('db');
   * db.print();
   * ```
   */
  /** @doc {heading: 'Training', subheading: 'Gradients'} */
  function valueAndGrads(f) {
      assert(isFunction(f), function () { return 'The f passed in valueAndGrads(f) must be a function'; });
      return function (args, dy) {
          assert(Array.isArray(args) && args.every(function (arg) { return arg instanceof Tensor; }), function () { return 'The args passed in valueAndGrads(f)(args) must be array of ' +
              'tensors'; });
          assert(dy == null || dy instanceof Tensor, function () { return 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor'; });
          var res = ENGINE.gradients(function () { return f.apply(void 0, args); }, args, dy);
          if (dy != null) {
              assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +
                  'match the shape returned by f([x1,...])');
          }
          checkGrads(res.grads);
          return res;
      };
  }
  /**
   * Computes and returns the gradient of f(x) with respect to the list of
   * trainable variables provided by `varList`. If no list is provided, it
   * defaults to all trainable variables.
   *
   * ```js
   * const a = tf.variable(tf.tensor1d([3, 4]));
   * const b = tf.variable(tf.tensor1d([5, 6]));
   * const x = tf.tensor1d([1, 2]);
   *
   * // f(a, b) = a * x ^ 2 + b * x
   * const f = () => a.mul(x.square()).add(b.mul(x)).sum();
   * // df/da = x ^ 2, df/db = x
   * const {value, grads} = tf.variableGrads(f);
   *
   * Object.keys(grads).forEach(varName => grads[varName].print());
   * ```
   *
   * @param f The function to execute. f() should return a scalar.
   * @param varList The list of variables to compute the gradients with respect
   *     to. Defaults to all trainable variables.
   * @returns An object with the following keys and values:
   *   - `value`: The value of the function `f`.
   *   - `grads`: A map from the names of the variables to the gradients.
   *     If the `varList` argument is provided explicitly and contains a subset of
   *     non-trainable variables, this map in the return value will contain keys
   *     that map the names of the non-trainable variables to `null`.
   */
  /** @doc {heading: 'Training', subheading: 'Gradients'} */
  function variableGrads(f, varList) {
      assert(isFunction(f), function () { return 'The f passed in variableGrads(f) must be a function'; });
      assert(varList == null ||
          Array.isArray(varList) && varList.every(function (v) { return v instanceof Variable; }), function () {
          return 'The varList passed in variableGrads(f, varList) must be an array ' +
              'of variables';
      });
      var specifiedVarList = varList != null;
      if (!specifiedVarList) {
          // Get all of the trainable variables.
          varList = [];
          for (var varName in ENGINE.registeredVariables) {
              varList.push(ENGINE.registeredVariables[varName]);
          }
      }
      var specifiedNonTrainable = specifiedVarList ? varList.filter(function (variable) { return !variable.trainable; }) : null;
      // Prune non-trainable variables.
      var originalVarCount = varList.length;
      varList = varList.filter(function (variable) { return variable.trainable; });
      assert(varList.length > 0, function () { return "variableGrads() expects at least one of the input variables to " +
          ("be trainable, but none of the " + originalVarCount + " variables is ") +
          "trainable."; });
      var allowNoGradients = true;
      var _a = ENGINE.gradients(f, varList, null, allowNoGradients), value = _a.value, grads = _a.grads;
      assert(grads.some(function (g) { return g != null; }), function () { return 'Cannot find a connection between any variable and the result of ' +
          'the loss function y=f(x). Please make sure the operations that ' +
          'use variables are inside the function f passed to minimize().'; });
      assert(value.rank === 0, function () { return "The f passed in variableGrads(f) must return a scalar, but it " +
          ("returned a rank-" + value.rank + " tensor"); });
      var namedGrads = {};
      varList.forEach(function (v, i) {
          if (grads[i] != null) {
              namedGrads[v.name] = grads[i];
          }
      });
      if (specifiedNonTrainable != null) {
          // If varList is explicitly provided and contains non-trainable values,
          // add them to the returned gradients with `null` values.
          specifiedNonTrainable.forEach(function (v) { return namedGrads[v.name] = null; });
      }
      return { value: value, grads: namedGrads };
  }
  /**
   * Overrides the gradient computation of a function `f`.
   *
   * Takes a function
   * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`
   * and returns another function `g(...inputs)` which takes the same inputs as
   * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients
   * with respect to each input of `f` are computed using `f().gradFunc`.
   *
   * The `save` function passsed to `f` should be used for saving tensors needed
   * in the gradient. And the `saved` passed to the `gradFunc` is a
   * `NamedTensorMap`, which contains those saved tensor.
   *
   * ```js
   * const customOp = tf.customGrad((x, save) => {
   *   // Save x to make sure it's available later for the gradient.
   *   save([x]);
   *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);
   *   return {
   *     value: x.square(),
   *     // Note `saved.x` which points to the `x` we saved earlier.
   *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]
   *   };
   * });
   *
   * const x = tf.tensor1d([-1, -2, 3]);
   * const dx = tf.grad(x => customOp(x));
   *
   * console.log(`f(x):`);
   * customOp(x).print();
   * console.log(`f'(x):`);
   * dx(x).print();
   * ```
   *
   * @param f The function to evaluate in forward mode, which should return
   *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`
   *     returns the custom gradients of `f` with respect to its inputs.
   */
  /** @doc {heading: 'Training', subheading: 'Gradients'} */
  function customGrad(f) {
      return ENGINE.customGrad(f);
  }
  function checkGrads(grads) {
      var numNullGradients = grads.filter(function (g) { return g == null; }).length;
      if (numNullGradients > 0) {
          throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.");
      }
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes log sigmoid of the input `tf.Tensor` element-wise:
   * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.
   *
   * ```js
   * const x = tf.tensor1d([0, 1, -1, .7]);
   *
   * x.logSigmoid().print();  // or tf.logSigmoid(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function logSigmoid_(x) {
      var $x = convertToTensor(x, 'x', 'logSigmoid');
      // Use a custom gradient to maintain previous implementation.
      // There is no LogSigmoid kernel in TF so we can't use engine.runKernel
      // directly
      var customOp = customGrad(function (x) {
          // TODO(yassogba) we can remove the chained softplus call here only
          // after backends have modualrized softplus at which point we can call
          // engine runKernel(..., Sotfplus, ...) directly.
          var value = neg(neg(x).softplus());
          var gradFunc = function (dy) {
              var derX = mul(dy, sigmoid(neg(x)));
              return derX;
          };
          return { value: value, gradFunc: gradFunc };
      });
      return customOp($x);
  }
  var logSigmoid = op({ logSigmoid_: logSigmoid_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the maximum of elements across dimensions of a `tf.Tensor`.
   *
   * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
   * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
   * `axes`. If `keepDims` is true, the reduced dimensions are retained with
   * length 1. If `axes` has no entries, all dimensions are reduced, and an
   * `tf.Tensor` with a single element is returned.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3]);
   *
   * x.max().print();  // or tf.max(x)
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   *
   * const axis = 1;
   * x.max(axis).print();  // or tf.max(x, axis)
   * ```
   *
   * @param x The input tensor.
   * @param axis The dimension(s) to reduce. By default it reduces
   *     all dimensions.
   * @param keepDims If true, retains reduced dimensions with size 1.
   */
  /** @doc {heading: 'Operations', subheading: 'Reduction'} */
  function max_(x, axis, keepDims) {
      if (axis === void 0) { axis = null; }
      if (keepDims === void 0) { keepDims = false; }
      var $x = convertToTensor(x, 'x', 'max');
      var forward = function (backend, save) {
          var origAxes = parseAxisParam(axis, $x.shape);
          var axes = origAxes;
          var permutedAxes = getAxesPermutation(axes, $x.rank);
          var maxInput = $x;
          if (permutedAxes != null) {
              maxInput = transpose($x, permutedAxes);
              axes = getInnerMostAxes(axes.length, maxInput.rank);
          }
          var y = backend.max(maxInput, axes);
          if (permutedAxes != null) {
              maxInput.dispose();
          }
          var res = y;
          if (keepDims) {
              var expandedShape = expandShapeToKeepDim(res.shape, parseAxisParam(axis, $x.shape));
              res = reshape(res, expandedShape);
              y.dispose();
          }
          save([$x, res]);
          return res;
      };
      var inputs = { x: $x };
      var attrs = { reductionIndices: axis, keepDims: keepDims };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Max, attrs);
  }
  var max = op({ max_: max_ });

  /**
   * @license
   * Copyright 2020 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the log softmax.
   *
   * ```js
   * const a = tf.tensor1d([1, 2, 3]);
   *
   * a.logSoftmax().print();  // or tf.logSoftmax(a)
   * ```
   *
   * ```js
   * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
   *
   * a.logSoftmax().print();  // or tf.logSoftmax(a)
   * ```
   *
   * @param logits The logits array.
   * @param axis The dimension softmax would be performed on. Defaults to `-1`
   *     which indicates the last dimension.
   */
  /** @doc {heading: 'Operations', subheading: 'Normalization'} */
  function logSoftmax_(logits, axis) {
      if (axis === void 0) { axis = -1; }
      var $logits = convertToTensor(logits, 'logits', 'logSoftmax');
      if (axis === -1) {
          axis = $logits.rank - 1;
      }
      if (axis !== $logits.rank - 1) {
          throw Error('Log Softmax along a non-last dimension is not yet supported. ' +
              ("Logits was rank " + $logits.rank + " and axis was " + axis));
      }
      var forward = function (backend, save) {
          var keepDims = true;
          var xMax = max(logits, axis, true);
          var shifted = sub(logits, xMax);
          var value = shifted.toFloat().sub(shifted.exp().sum(axis, keepDims).log());
          save([value]);
          return value;
      };
      var inputs = { logits: $logits };
      var attrs = { axis: axis };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, LogSoftmax, attrs);
  }
  var logSoftmax = op({ logSoftmax_: logSoftmax_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the log(sum(exp(elements across the reduction dimensions)).
   *
   * Reduces the input along the dimensions given in `axis`. Unless `keepDims`
   * is true, the rank of the array is reduced by 1 for each entry in `axis`.
   * If `keepDims` is true, the reduced dimensions are retained with length 1.
   * If `axis` has no entries, all dimensions are reduced, and an array with a
   * single element is returned.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3]);
   *
   * x.logSumExp().print();  // or tf.logSumExp(x)
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   *
   * const axis = 1;
   * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)
   * ```
   * @param x The input tensor.
   * @param axis The dimension(s) to reduce. If null (the default),
   *     reduces all dimensions.
   * @param keepDims If true, retains reduced dimensions with length
   *     of 1. Defaults to false.
   */
  /** @doc {heading: 'Operations', subheading: 'Reduction'} */
  function logSumExp_(x, axis, keepDims) {
      if (axis === void 0) { axis = null; }
      if (keepDims === void 0) { keepDims = false; }
      var $x = convertToTensor(x, 'x', 'logSumExp');
      var axes = parseAxisParam(axis, $x.shape);
      var xMax = max($x, axes, true /* keepDims */);
      var a = sub($x, xMax);
      var b = exp(a);
      var c = sum$1(b, axes);
      var d = log(c);
      var res = add(reshape(xMax, d.shape), d);
      if (keepDims) {
          var newShape = expandShapeToKeepDim(res.shape, axes);
          return reshape(res, newShape);
      }
      return res;
  }
  var logSumExp = op({ logSumExp_: logSumExp_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the truth value of `a OR b` element-wise. Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([false, false, true, true], 'bool');
   * const b = tf.tensor1d([false, true, false, true], 'bool');
   *
   * a.logicalOr(b).print();
   * ```
   * @param a The first input tensor. Must be of dtype bool.
   * @param b The second input tensor. Must be of dtype bool.
   */
  /** @doc {heading: 'Operations', subheading: 'Logical'} */
  function logicalOr_(a, b) {
      var $a = convertToTensor(a, 'a', 'logicalOr', 'bool');
      var $b = convertToTensor(b, 'b', 'logicalOr', 'bool');
      assertAndGetBroadcastShape($a.shape, $b.shape);
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(function (backend) { return backend.logicalOr($a, $b); }, inputs, null /* grad */, LogicalOr);
  }
  var logicalOr = op({ logicalOr_: logicalOr_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([false, false, true, true], 'bool');
   * const b = tf.tensor1d([false, true, false, true], 'bool');
   *
   * a.logicalXor(b).print();
   * ```
   *
   * @param a The first input tensor. Must be of dtype bool.
   * @param b The second input tensor. Must be of dtype bool.
   */
  /** @doc {heading: 'Operations', subheading: 'Logical'} */
  function logicalXor_(a, b) {
      var $a = convertToTensor(a, 'a', 'logicalXor', 'bool');
      var $b = convertToTensor(b, 'b', 'logicalXor', 'bool');
      assertAndGetBroadcastShape($a.shape, $b.shape);
      // x ^ y = (x | y) & ~(x & y)
      return logicalAnd(logicalOr(a, b), logicalNot(logicalAnd(a, b)));
  }
  var logicalXor = op({ logicalXor_: logicalXor_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the 2D max pooling of an image.
   *
   * @param x The input tensor, of rank 4 or rank 3 of shape
   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
   * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
   *     `filterSize` is a single number, then `filterHeight == filterWidth`.
   * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
   *     `strides` is a single number, then `strideHeight == strideWidth`.
   * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
   *     in which we sample input values across the height and width dimensions
   *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single
   *     number, then `dilationHeight == dilationWidth`. If it is greater than
   *     1, then all values of `strides` must be 1.
   * @param pad The type of padding algorithm.
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1x1.
   *    - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dimRoundingMode The rounding mode used when computing output
   *     dimensions if pad is a number. If none is provided, it will not round
   *     and error if the output is of fractional size.
   */
  function maxPool_(x, filterSize, strides, pad, dimRoundingMode) {
      var $x = convertToTensor(x, 'x', 'maxPool');
      var dilations = 1;
      var x4D = $x;
      var reshapedTo4D = false;
      if ($x.rank === 3) {
          reshapedTo4D = true;
          x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
      }
      assert(x4D.rank === 4, function () { return "Error in maxPool: input must be rank 4 but got rank " + x4D.rank + "."; });
      assert(eitherStridesOrDilationsAreOne(strides, dilations), function () { return 'Error in maxPool: Either strides or dilations must be 1. ' +
          ("Got strides " + strides + " and dilations '" + dilations + "'"); });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in maxPool: pad must be an integer when using, " +
              ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      var forward = function (backend, save) {
          var convInfo = computePool2DInfo(x4D.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
          var y;
          if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&
              arraysEqual(convInfo.inShape, convInfo.outShape)) {
              y = x4D.clone();
          }
          else {
              y = backend.maxPool(x4D, convInfo);
          }
          save([x4D, y]);
          return y;
      };
      var inputs = { x: x4D };
      var attrs = { filterSize: filterSize, strides: strides, pad: pad, dimRoundingMode: dimRoundingMode };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, MaxPool, attrs);
      if (reshapedTo4D) {
          return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }
      return res;
  }
  var maxPool = op({ maxPool_: maxPool_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the 3D max pooling.
   *
   * ```js
   * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
   * const result = tf.maxPool3d(x, 2, 1, 'valid');
   * result.print();
   * ```
   *
   * @param x The input tensor, of rank 5 or rank 4 of shape
   *     `[batch, depth, height, width, inChannels]`.
   * @param filterSize The filter size:
   *     `[filterDepth, filterHeight, filterWidth]`.
   *     If `filterSize` is a single number,
   *     then `filterDepth == filterHeight == filterWidth`.
   * @param strides The strides of the pooling:
   *     `[strideDepth, strideHeight, strideWidth]`.
   *     If `strides` is a single number,
   *     then `strideDepth == strideHeight == strideWidth`.
   * @param pad The type of padding algorithm.
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1*1x1.
   *    - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dimRoundingMode The rounding mode used when computing output
   *     dimensions if pad is a number. If none is provided, it will not round
   *     and error if the output is of fractional size.
   * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
   *     "NDHWC". Specify the data format of the input and output data. With the
   *     default format "NDHWC", the data is stored in the order of: [batch,
   *     depth, height, width, channels]. Only "NDHWC" is currently supported.
   * @param dilations Deprecated, this field will be gone in v3.0.0.
   *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`
   *     in which we sample input values across the depth, height and width
   *     dimensions in dilated pooling.
   *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
   *     then `dilationDepth == dilationHeight == dilationWidth`.
   *     If it is greater than 1, then all values of `strides` must be 1.
   */
  /** @doc {heading: 'Operations', subheading: 'Convolution'} */
  function maxPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat, dilations) {
      if (filterSize === void 0) { filterSize = [1, 1, 1]; }
      if (dataFormat === void 0) { dataFormat = 'NDHWC'; }
      if (dilations == null) {
          dilations = [1, 1, 1];
      }
      else {
          deprecationWarn('dilations is deprecated, this field will be gone in ' +
              'v3.0.0.');
      }
      var $x = convertToTensor(x, 'x', 'maxPool3d');
      var x5D = $x;
      var reshapedTo5D = false;
      if ($x.rank === 4) {
          reshapedTo5D = true;
          x5D = $x.as5D(1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]);
      }
      assert(x5D.rank === 5, function () { return "Error in maxPool3d: x must be rank 5 but got rank " + x5D.rank + "."; });
      assert(dataFormat === 'NDHWC', function () { return "Error in maxPool3d: Only NDHWC is currently supported, " +
          ("but got dataFormat of " + dataFormat); });
      assert(eitherStridesOrDilationsAreOne(strides, dilations), function () { return 'Error in maxPool3d: Either strides or dilations must be 1. ' +
          ("Got strides " + strides + " and dilations '" + dilations + "'"); });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in maxPool3d: pad must be an integer when using, " +
              ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      var forward = function (backend, save) {
          if (dilations == null) {
              dilations = [1, 1, 1];
          }
          var convInfo = computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);
          var y = backend.maxPool3d(x5D, convInfo);
          save([x5D, y]);
          return y;
      };
      var inputs = { x: x5D };
      var attrs = { filterSize: filterSize, strides: strides, pad: pad, dimRoundingMode: dimRoundingMode, dataFormat: dataFormat, dilations: dilations };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, MaxPool3D, attrs);
      if (reshapedTo5D) {
          return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
      }
      return res;
  }
  var maxPool3d = op({ maxPool3d_: maxPool3d_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the 2D max pooling of an image with Argmax index.
   * The indices in argmax are flattened, so that a maximum value at position `[b,
   * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if
   * include_batch_in_index is False; `((b * height + y) * width + x) * channels
   * +c` if include_batch_in_index is True.
   *
   * The indices returned are always in `[0, height) x [0, width)` before
   * flattening.
   *
   * @param x The input tensor, of rank 4 or rank 3 of shape
   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
   * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
   *     `filterSize` is a single number, then `filterHeight == filterWidth`.
   * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
   *     `strides` is a single number, then `strideHeight == strideWidth`.
   * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
   *     "NDHWC". Specify the data format of the input and output data. With the
   *     default format "NDHWC", the data is stored in the order of: [batch,
   *     depth, height, width, channels]. Only "NDHWC" is currently supported.
   * @param pad The type of padding algorithm.
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1x1.
   *    - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param includeBatchIndex Defaults to False. Whether to include batch
   *    dimension in flattened index of argmax.
   */
  /** @doc {heading: 'Operations', subheading: 'Convolution'} */
  /** @doc {heading: 'Operations', subheading: 'Convolution'} */
  function maxPoolWithArgmax_(x, filterSize, strides, pad, includeBatchInIndex) {
      if (includeBatchInIndex === void 0) { includeBatchInIndex = false; }
      var $x = convertToTensor(x, 'x', 'maxPoolWithArgmax');
      var inputs = { x: $x };
      var attrs = { filterSize: filterSize, strides: strides, pad: pad, includeBatchInIndex: includeBatchInIndex };
      var result = ENGINE.runKernel(MaxPoolWithArgmax, inputs, attrs);
      return { result: result[0], indexes: result[1] };
  }
  var maxPoolWithArgmax = op({ maxPoolWithArgmax_: maxPoolWithArgmax_ });

  /**
   * @license
   * Copyright 2020 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the mean of elements across dimensions of a `tf.Tensor`.
   *
   * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is
   * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.
   * If `keepDims` is true, the reduced dimensions are retained with length 1.
   * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with
   * a single element is returned.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3]);
   *
   * x.mean().print();  // or tf.mean(a)
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   *
   * const axis = 1;
   * x.mean(axis).print();  // or tf.mean(x, axis)
   * ```
   *
   * @param x The input tensor.
   * @param axis The dimension(s) to reduce. By default it reduces
   *     all dimensions.
   * @param keepDims If true, retains reduced dimensions with size 1.
   */
  /** @doc {heading: 'Operations', subheading: 'Reduction'} */
  function mean_(x, axis, keepDims) {
      if (axis === void 0) { axis = null; }
      if (keepDims === void 0) { keepDims = false; }
      var $x = convertToTensor(x, 'x', 'mean');
      var axes = parseAxisParam(axis, $x.shape);
      var shapes = computeOutAndReduceShapes($x.shape, axes);
      var reduceShape = shapes[1];
      var reduceSize = sizeFromShape(reduceShape);
      // Use a custom gradient to bypass 2 gradient backprops since mean is used
      // extremely often.
      var customOp = customGrad(function (x) {
          var reduceSizeScalar = scalar(reduceSize);
          // Cast if needed.
          var xReduce = reduceSizeScalar.dtype === x.dtype ?
              x :
              cast(x, reduceSizeScalar.dtype);
          var res = div(xReduce, reduceSizeScalar);
          var value = sum$1(res, axis, keepDims);
          var gradFunc = function (dy) {
              var expandedDyShape = x.shape.slice();
              axes.forEach(function (axis) {
                  expandedDyShape[axis] = 1;
              });
              var expandedDy = reshape(dy, expandedDyShape);
              var derX = div(mul(expandedDy, ones$1(x.shape, 'float32')), reduceSize);
              return derX;
          };
          return { value: value, gradFunc: gradFunc };
      });
      return customOp($x);
  }
  var mean = op({ mean_: mean_ });

  /**
   * Computes the minimum value from the input.
   *
   * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
   * is true, the rank of the array is reduced by 1 for each entry in `axes`.
   * If `keepDims` is true, the reduced dimensions are retained with length 1.
   * If `axes` has no entries, all dimensions are reduced, and an array with a
   * single element is returned.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3]);
   *
   * x.min().print();  // or tf.min(x)
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   *
   * const axis = 1;
   * x.min(axis).print();  // or tf.min(x, axis)
   * ```
   *
   * @param x The input Tensor.
   * @param axis The dimension(s) to reduce. By default it reduces
   *     all dimensions.
   * @param keepDims If true, retains reduced dimensions with size 1.
   */
  /** @doc {heading: 'Operations', subheading: 'Reduction'} */
  function min_(x, axis, keepDims) {
      if (axis === void 0) { axis = null; }
      if (keepDims === void 0) { keepDims = false; }
      var $x = convertToTensor(x, 'x', 'min');
      var forward = function (backend, save) {
          var origAxes = parseAxisParam(axis, $x.shape);
          var axes = origAxes;
          var permutedAxes = getAxesPermutation(axes, $x.rank);
          var minInput = $x;
          if (permutedAxes != null) {
              minInput = transpose($x, permutedAxes);
              axes = getInnerMostAxes(axes.length, $x.rank);
          }
          var y = backend.min(minInput, axes);
          if (permutedAxes != null) {
              minInput.dispose();
          }
          var res = y;
          if (keepDims) {
              var expandedShape = expandShapeToKeepDim(res.shape, origAxes);
              res = reshape(y, expandedShape);
              y.dispose();
          }
          save([$x, res]);
          return res;
      };
      var inputs = { x: $x };
      var attrs = { axis: axis, keepDims: keepDims };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Min, attrs);
  }
  var min = op({ min_: min_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the min of a and b (`a < b ? a : b`) element-wise.
   * Supports broadcasting.
   *
   * We also expose `minimumStrict` which has the same signature as this op and
   * asserts that `a` and `b` are the same shape (does not broadcast).
   *
   * ```js
   * const a = tf.tensor1d([1, 4, 3, 16]);
   * const b = tf.tensor1d([1, 2, 9, 4]);
   *
   * a.minimum(b).print();  // or tf.minimum(a, b)
   * ```
   *
   * ```js
   * // Broadcast minimum a with b.
   * const a = tf.tensor1d([2, 4, 6, 8]);
   * const b = tf.scalar(5);
   *
   * a.minimum(b).print();  // or tf.minimum(a, b)
   * ```
   *
   * @param a The first tensor.
   * @param b The second tensor. Must have the same type as `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */
  function minimum_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'minimum');
      var $b = convertToTensor(b, 'b', 'minimum');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      if ($a.dtype === 'bool') {
          $a = cast($a, 'int32');
          $b = cast($b, 'int32');
      }
      assertAndGetBroadcastShape($a.shape, $b.shape);
      var forward = function (backend, save) {
          var res = backend.minimum($a, $b);
          save([$a, $b]);
          return res;
      };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Minimum);
  }
  var minimum = op({ minimum_: minimum_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the mod of a and b element-wise.
   * `floor(x / y) * y + mod(x, y) = x`
   * Supports broadcasting.
   *
   * We also expose `tf.modStrict` which has the same signature as this op and
   * asserts that `a` and `b` are the same shape (does not broadcast).
   *
   * ```js
   * const a = tf.tensor1d([1, 4, 3, 16]);
   * const b = tf.tensor1d([1, 2, 9, 4]);
   *
   * a.mod(b).print();  // or tf.mod(a, b)
   * ```
   *
   * ```js
   * // Broadcast a mod b.
   * const a = tf.tensor1d([2, 4, 6, 8]);
   * const b = tf.scalar(5);
   *
   * a.mod(b).print();  // or tf.mod(a, b)
   * ```
   *
   * @param a The first tensor.
   * @param b The second tensor. Must have the same type as `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */
  function mod_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'mod');
      var $b = convertToTensor(b, 'b', 'mod');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      var forward = function (backend, save) {
          var res = backend.mod($a, $b);
          save([$a, $b]);
          return res;
      };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Mod);
  }
  var mod = op({ mod_: mod_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Calculates the mean and variance of `x`. The mean and variance are
   * calculated by aggregating the contents of `x` across `axes`. If `x` is
   * 1-D and `axes = [0]` this is just the mean and variance of a vector.
   *
   * @param x The input tensor.
   * @param axis The dimension(s) along with to compute mean and
   *     variance. By default it reduces all dimensions.
   * @param keepDims If true, the moments have the same dimensionality as the
   *     input.
   * @return An object with two keys: `mean` and `variance`.
   */
  /** @doc {heading: 'Operations', subheading: 'Normalization'} */
  function moments_(x, axis, keepDims) {
      if (axis === void 0) { axis = null; }
      if (keepDims === void 0) { keepDims = false; }
      x = convertToTensor(x, 'x', 'moments');
      var axes = parseAxisParam(axis, x.shape);
      var xMean = mean(x, axes, keepDims);
      var keepDimsShape = xMean.shape;
      if (!keepDims) {
          keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);
      }
      var devSquared = square(sub(cast(x, 'float32'), reshape(xMean, keepDimsShape)));
      var variance = mean(devSquared, axes, keepDims);
      return { mean: xMean, variance: variance };
  }
  var moments = op({ moments_: moments_ });

  /**
   * Computes the next states and outputs of a stack of LSTMCells.
   *
   * Each cell output is used as input to the next cell.
   *
   * Returns `[cellState, cellOutput]`.
   *
   * Derived from tf.contrib.rn.MultiRNNCell.
   *
   * @param lstmCells Array of LSTMCell functions.
   * @param data The input to the cell.
   * @param c Array of previous cell states.
   * @param h Array of previous cell outputs.
   */
  /** @doc {heading: 'Operations', subheading: 'RNN'} */
  function multiRNNCell_(lstmCells, data, c, h) {
      var $data = convertToTensor(data, 'data', 'multiRNNCell');
      var $c = convertToTensorArray(c, 'c', 'multiRNNCell');
      var $h = convertToTensorArray(h, 'h', 'multiRNNCell');
      var input = $data;
      var newStates = [];
      for (var i = 0; i < lstmCells.length; i++) {
          var output = lstmCells[i](input, $c[i], $h[i]);
          newStates.push(output[0]);
          newStates.push(output[1]);
          input = output[1];
      }
      var newC = [];
      var newH = [];
      for (var i = 0; i < newStates.length; i += 2) {
          newC.push(newStates[i]);
          newH.push(newStates[i + 1]);
      }
      return [newC, newH];
  }
  var multiRNNCell = op({ multiRNNCell_: multiRNNCell_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a `tf.Tensor` with values drawn from a multinomial distribution.
   *
   * ```js
   * const probs = tf.tensor([.75, .25]);
   * tf.multinomial(probs, 3).print();
   * ```
   *
   * @param logits 1D array with unnormalized log-probabilities, or
   *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`
   *     parameter.
   * @param numSamples Number of samples to draw for each row slice.
   * @param seed The seed number.
   * @param normalized Whether the provided `logits` are normalized true
   *     probabilities (sum to 1). Defaults to false.
   * @return 1D array of shape `[numSamples]`, or 2D array of shape
   *     `[batchSize, numSamples]`, depending on the rank of the input.
   */
  /** @doc {heading: 'Tensors', subheading: 'Random'} */
  function multinomial_(logits, numSamples, seed, normalized) {
      if (normalized === void 0) { normalized = false; }
      var $logits = convertToTensor(logits, 'logits', 'multinomial');
      var numOutcomes = $logits.size;
      var origRank = $logits.rank;
      if (numOutcomes < 2) {
          throw new Error("Error in multinomial: you need at least 2 outcomes, but got " +
              (numOutcomes + "."));
      }
      if (origRank > 2) {
          throw new Error("Rank of probabilities must be 1 or 2, but is " + origRank);
      }
      seed = seed || Math.random();
      var logits2D = origRank === 1 ? $logits.as2D(1, -1) : $logits;
      var res = ENGINE.runKernelFunc(function (backend) { return backend.multinomial(logits2D, normalized, numSamples, seed); }, { logits2D: logits2D });
      return origRank === 1 ? res.as1D() : res;
  }
  var multinomial = op({ multinomial_: multinomial_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns the truth value of (a != b) element-wise. Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([1, 2, 3]);
   * const b = tf.tensor1d([0, 2, 3]);
   *
   * a.notEqual(b).print();
   * ```
   * @param a The first input tensor.
   * @param b The second input tensor. Must have the same dtype as `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Logical'} */
  function notEqual_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'notEqual');
      var $b = convertToTensor(b, 'b', 'notEqual');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      assertAndGetBroadcastShape($a.shape, $b.shape);
      var forward = function (backend) { return backend.notEqual($a, $b); };
      var inputs = { a: $a, b: $b };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, NotEqual);
  }
  var notEqual = op({ notEqual_: notEqual_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the
   * given tensor.
   *
   * ```js
   * const x = tf.tensor([1, 2]);
   * tf.onesLike(x).print();
   * ```
   * @param x A tensor.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function onesLike_(x) {
      var $x = convertToTensor(x, 'x', 'onesLike');
      var forward = function (backend, save) {
          if ($x.dtype === 'complex64') {
              var r = onesLike(real($x));
              var i = zerosLike(imag($x));
              return complex(r, i);
          }
          return backend.onesLike($x);
      };
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, OnesLike);
  }
  var onesLike = op({ onesLike_: onesLike_ });

  /**
   * Computes the outer product of two vectors, `v1` and `v2`.
   *
   * ```js
   * const a = tf.tensor1d([1, 2, 3]);
   * const b = tf.tensor1d([3, 4, 5]);
   *
   * tf.outerProduct(a, b).print();
   * ```
   * @param v1 The first vector in the outer product operation.
   * @param v2 The second vector in the outer product operation.
   */
  /** @doc {heading: 'Operations', subheading: 'Matrices'} */
  function outerProduct_(v1, v2) {
      var $v1 = convertToTensor(v1, 'v1', 'outerProduct');
      var $v2 = convertToTensor(v2, 'v2', 'outerProduct');
      assert($v1.rank === 1 && $v2.rank === 1, function () { return "Error in outerProduct: inputs must be rank 1, but got ranks " +
          ($v1.rank + " and " + $v2.rank + "."); });
      var v12D = reshape($v1, [-1, 1]);
      var v22D = reshape($v2, [1, -1]);
      return matMul(v12D, v22D);
  }
  var outerProduct = op({ outerProduct_: outerProduct_ });

  /**
   * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.
   */
  function pad1d_(x, paddings, constantValue) {
      if (constantValue === void 0) { constantValue = 0; }
      assert(paddings.length === 2, function () { return 'Invalid number of paddings. Must be length of 2.'; });
      return pad(x, [paddings], constantValue);
  }
  var pad1d = op({ pad1d_: pad1d_ });

  /**
   * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.
   */
  function pad2d_(x, paddings, constantValue) {
      if (constantValue === void 0) { constantValue = 0; }
      assert(paddings.length === 2 && paddings[0].length === 2 &&
          paddings[1].length === 2, function () { return 'Invalid number of paddings. Must be length of 2 each.'; });
      return pad(x, paddings, constantValue);
  }
  var pad2d = op({ pad2d_: pad2d_ });

  /**
   * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.
   */
  function pad3d_(x, paddings, constantValue) {
      if (constantValue === void 0) { constantValue = 0; }
      assert(paddings.length === 3 && paddings[0].length === 2 &&
          paddings[1].length === 2 && paddings[2].length === 2, function () { return 'Invalid number of paddings. Must be length of 2 each.'; });
      return pad(x, paddings, constantValue);
  }
  var pad3d = op({ pad3d_: pad3d_ });

  /**
   * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.
   */
  function pad4d_(x, paddings, constantValue) {
      if (constantValue === void 0) { constantValue = 0; }
      assert(paddings.length === 4 && paddings[0].length === 2 &&
          paddings[1].length === 2 && paddings[2].length === 2 &&
          paddings[3].length === 2, function () { return 'Invalid number of paddings. Must be length of 2 each.'; });
      return pad(x, paddings, constantValue);
  }
  var pad4d = op({ pad4d_: pad4d_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Performs an N-D pooling operation
   *
   * @param input The input tensor, of rank 4 or rank 3 of shape
   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
   * @param windowShape The filter size: `[filterHeight, filterWidth]`. If
   *     `filterSize` is a single number, then `filterHeight == filterWidth`.
   * @param poolingType The type of pooling, either 'max' or 'avg'.
   * @param pad The type of padding algorithm:
   *    - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *    - `valid`: output will be smaller than input if filter is larger
   *       than 1x1.
   *    - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
   *     in which we sample input values across the height and width dimensions
   *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single
   *     number, then `dilationHeight == dilationWidth`. If it is greater than
   *     1, then all values of `strides` must be 1.
   * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
   *     `strides` is a single number, then `strideHeight == strideWidth`.
   */
  /** @doc {heading: 'Operations', subheading: 'Convolution'} */
  function pool_(input, windowShape, poolingType, pad, dilations, strides) {
      if (dilations == null) {
          dilations = [1, 1];
      }
      if (strides == null) {
          strides = 1;
      }
      if (pad === 0) {
          pad = 'valid';
      }
      var $x = convertToTensor(input, 'x', 'maxPool');
      var x4D = $x;
      var reshapedTo4D = false;
      if ($x.rank === 3) {
          reshapedTo4D = true;
          x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
      }
      assert(eitherStridesOrDilationsAreOne(strides, dilations), function () { return 'Error in pool: Either strides or dilations must be 1. ' +
          ("Got strides " + strides + " and dilations '" + dilations + "'"); });
      var convInfo = computePool2DInfo(x4D.shape, windowShape, strides, dilations, pad);
      var dilation = [convInfo.dilationHeight, convInfo.dilationWidth];
      // The following implementation does batchToSpace(pool(spaceToBatch(x)))
      // whenever dilation > 1 since the TF kernels do not support dilation > 1.
      // tslint:disable-next-line:max-line-length
      // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037
      var basePadding;
      if (pad === 'same') {
          basePadding = withSpaceToBatchBasePaddings([convInfo.filterHeight, convInfo.filterWidth], dilation);
      }
      else {
          basePadding = [[0, 0], [0, 0]];
      }
      var isDilationOne = dilation[0] === 1 && dilation[1] === 1;
      var _a = requiredSpaceToBatchPaddings([convInfo.inHeight, convInfo.inWidth], dilation, basePadding), adjustedPadding = _a[0], adjustedCrops = _a[1];
      var convertedPad = isDilationOne ? pad : 'valid';
      var convertedX = isDilationOne ? x4D : spaceToBatchND(x4D, dilation, adjustedPadding);
      var forwardOp = poolingType === 'avg' ?
          function () { return avgPool(convertedX, windowShape, strides, convertedPad); } :
          function () { return maxPool(convertedX, windowShape, strides, convertedPad); };
      var y = forwardOp();
      var res = isDilationOne ? y : batchToSpaceND(y, dilation, adjustedCrops);
      if (reshapedTo4D) {
          return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);
      }
      return res;
  }
  // Helper function to compute crops and paddings for pool with dilation > 1.
  // tslint:disable-next-line:max-line-length
  // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184
  function requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {
      var padStart = basePadding.map(function (b) { return b[0]; });
      var origPadEnd = basePadding.map(function (b) { return b[1]; });
      var fullInputShape = inputShape.concat(padStart, origPadEnd);
      var padEndExtra = blockShape.map(function (b, i) { return (b - fullInputShape[i] % b) % b; });
      var padEnd = origPadEnd.map(function (s, i) { return s + padEndExtra[i]; });
      var paddings = blockShape.map(function (_, i) { return [padStart[i], padEnd[i]]; });
      var crops = blockShape.map(function (_, i) { return [0, padEndExtra[i]]; });
      return [paddings, crops];
  }
  // Helper function to compute base paddings for pool with dilation > 1.
  // tslint:disable-next-line:max-line-length
  // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524
  function withSpaceToBatchBasePaddings(filterShape, dilation) {
      // Spatial dimensions of the filters and the upsampled filters in which we
      // introduce (rate - 1) zeros between consecutive filter values.
      var dilatedFilterShape = filterShape.map(function (s, i) {
          return s + (s - 1) * (dilation[i] - 1);
      });
      var padExtraShape = dilatedFilterShape.map(function (s) { return s - 1; });
      // When padding is odd, we pad more at end, following the same
      // convention as conv2d.
      var padExtraStart = padExtraShape.map(function (s) { return Math.floor(s / 2); });
      var padExtraEnd = padExtraShape.map(function (s, i) { return s - padExtraStart[i]; });
      return padExtraShape.map(function (_, i) {
          return [padExtraStart[i], padExtraEnd[i]];
      });
  }
  var pool = op({ pool_: pool_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes leaky rectified linear element-wise with parametric alphas.
   *
   * `x < 0 ? alpha * x : f(x) = x`
   *
   * ```js
   * const x = tf.tensor1d([-1, 2, -3, 4]);
   * const alpha = tf.scalar(0.1);
   *
   * x.prelu(alpha).print();  // or tf.prelu(x, alpha)
   * ```
   * @param x The input tensor.
   * @param alpha Scaling factor for negative values.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function prelu_(x, alpha) {
      var $x = convertToTensor(x, 'x', 'prelu');
      var $alpha = convertToTensor(alpha, 'alpha', 'prelu');
      var forward = function (backend, save) {
          var res = backend.prelu($x, $alpha);
          save([$x, $alpha]);
          return res;
      };
      var inputs = { x: $x, alpha: $alpha };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Prelu);
  }
  var prelu = op({ prelu_: prelu_ });

  /**
   * @license
   * Copyright 2020 Google Inc. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Prints information about the `tf.Tensor` including its data.
   *
   * ```js
   * const verbose = true;
   * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);
   * ```
   * @param x The tensor to be printed.
   * @param verbose Whether to print verbose information about the ` Tensor`,
   * including dtype and size.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function print(x, verbose) {
      if (verbose === void 0) { verbose = false; }
      console.log(x.toString(verbose));
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the product of elements across dimensions of a `tf.Tensor`.
   *
   * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
   * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
   * `axes`. If `keepDims` is true, the reduced dimensions are retained with
   * length 1. If `axes` has no entries, all dimensions are reduced, and a
   * `tf.Tensor` with a single element is returned.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3]);
   *
   * x.prod().print();  // or tf.prod(x)
   * ```
   *
   * ```js
   * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   *
   * const axis = 1;
   * x.prod(axis).print();  // or tf.prod(x, axis)
   * ```
   *
   * @param x The input tensor to compute the product over. If the dtype is `bool`
   *   it will be converted to `int32` and the output dtype will be `int32`.
   * @param axis The dimension(s) to reduce. By default it reduces
   *     all dimensions.
   * @param keepDims If true, retains reduced dimensions with size 1.
   */
  /** @doc {heading: 'Operations', subheading: 'Reduction'} */
  function prod_(x, axis, keepDims) {
      if (axis === void 0) { axis = null; }
      if (keepDims === void 0) { keepDims = false; }
      var $x = convertToTensor(x, 'x', 'prod');
      var forward = function (backend) {
          if ($x.dtype === 'bool') {
              $x = $x.toInt();
          }
          var axes = parseAxisParam(axis, $x.shape);
          var permutation = getAxesPermutation(axes, $x.rank);
          var reductionAxes = axes;
          var permutedX = $x;
          if (permutation != null) {
              permutedX = $x.transpose(permutation);
              reductionAxes = getInnerMostAxes(reductionAxes.length, $x.rank);
          }
          var value = backend.prod(permutedX, reductionAxes);
          if (keepDims) {
              var newShape = expandShapeToKeepDim(value.shape, axes);
              value = value.reshape(newShape);
          }
          return value;
      };
      var inputs = { x: $x };
      var attrs = { axis: axis, keepDims: keepDims };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Prod, attrs);
  }
  var prod = op({ prod_: prod_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a `tf.Tensor` with values sampled from a random number generator
   * function defined by the user.
   *
   * @param shape An array of integers defining the output tensor shape.
   * @param randFunction A random number generator function which is called
   * for each element in the output tensor.
   * @param dtype The data type of the output tensor. Defaults to 'float32'.
   */
  function rand_(shape, randFunction, dtype) {
      var size = sizeFromShape(shape);
      var values = null;
      if (dtype == null || dtype === 'float32') {
          values = new Float32Array(size);
      }
      else if (dtype === 'int32') {
          values = new Int32Array(size);
      }
      else if (dtype === 'bool') {
          values = new Uint8Array(size);
      }
      else {
          throw new Error("Unknown data type " + dtype);
      }
      for (var i = 0; i < size; i++) {
          values[i] = randFunction();
      }
      return ENGINE.makeTensor(values, shape, dtype);
  }
  var rand = op({ rand_: rand_ });

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
    return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var alea = createCommonjsModule(function (module) {
  // A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
  // http://baagoe.com/en/RandomMusings/javascript/
  // https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
  // Original work is under MIT license -

  // Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the "Software"), to deal
  // in the Software without restriction, including without limitation the rights
  // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  // copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  // 
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  // 
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  // THE SOFTWARE.



  (function(global, module, define) {

  function Alea(seed) {
    var me = this, mash = Mash();

    me.next = function() {
      var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
      me.s0 = me.s1;
      me.s1 = me.s2;
      return me.s2 = t - (me.c = t | 0);
    };

    // Apply the seeding algorithm from Baagoe.
    me.c = 1;
    me.s0 = mash(' ');
    me.s1 = mash(' ');
    me.s2 = mash(' ');
    me.s0 -= mash(seed);
    if (me.s0 < 0) { me.s0 += 1; }
    me.s1 -= mash(seed);
    if (me.s1 < 0) { me.s1 += 1; }
    me.s2 -= mash(seed);
    if (me.s2 < 0) { me.s2 += 1; }
    mash = null;
  }

  function copy(f, t) {
    t.c = f.c;
    t.s0 = f.s0;
    t.s1 = f.s1;
    t.s2 = f.s2;
    return t;
  }

  function impl(seed, opts) {
    var xg = new Alea(seed),
        state = opts && opts.state,
        prng = xg.next;
    prng.int32 = function() { return (xg.next() * 0x100000000) | 0; };
    prng.double = function() {
      return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
    };
    prng.quick = prng;
    if (state) {
      if (typeof(state) == 'object') copy(state, xg);
      prng.state = function() { return copy(xg, {}); };
    }
    return prng;
  }

  function Mash() {
    var n = 0xefc8249d;

    var mash = function(data) {
      data = data.toString();
      for (var i = 0; i < data.length; i++) {
        n += data.charCodeAt(i);
        var h = 0.02519603282416938 * n;
        n = h >>> 0;
        h -= n;
        h *= n;
        n = h >>> 0;
        h -= n;
        n += h * 0x100000000; // 2^32
      }
      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
    };

    return mash;
  }


  if (module && module.exports) {
    module.exports = impl;
  } else if (define && define.amd) {
    define(function() { return impl; });
  } else {
    this.alea = impl;
  }

  })(
    commonjsGlobal,
     module,    // present in node.js
    (typeof undefined) == 'function'    // present with an AMD loader
  );
  });

  var xor128 = createCommonjsModule(function (module) {
  // A Javascript implementaion of the "xor128" prng algorithm by
  // George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

  (function(global, module, define) {

  function XorGen(seed) {
    var me = this, strseed = '';

    me.x = 0;
    me.y = 0;
    me.z = 0;
    me.w = 0;

    // Set up generator function.
    me.next = function() {
      var t = me.x ^ (me.x << 11);
      me.x = me.y;
      me.y = me.z;
      me.z = me.w;
      return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
    };

    if (seed === (seed | 0)) {
      // Integer seed.
      me.x = seed;
    } else {
      // String seed.
      strseed += seed;
    }

    // Mix in string seed, then discard an initial batch of 64 values.
    for (var k = 0; k < strseed.length + 64; k++) {
      me.x ^= strseed.charCodeAt(k) | 0;
      me.next();
    }
  }

  function copy(f, t) {
    t.x = f.x;
    t.y = f.y;
    t.z = f.z;
    t.w = f.w;
    return t;
  }

  function impl(seed, opts) {
    var xg = new XorGen(seed),
        state = opts && opts.state,
        prng = function() { return (xg.next() >>> 0) / 0x100000000; };
    prng.double = function() {
      do {
        var top = xg.next() >>> 11,
            bot = (xg.next() >>> 0) / 0x100000000,
            result = (top + bot) / (1 << 21);
      } while (result === 0);
      return result;
    };
    prng.int32 = xg.next;
    prng.quick = prng;
    if (state) {
      if (typeof(state) == 'object') copy(state, xg);
      prng.state = function() { return copy(xg, {}); };
    }
    return prng;
  }

  if (module && module.exports) {
    module.exports = impl;
  } else if (define && define.amd) {
    define(function() { return impl; });
  } else {
    this.xor128 = impl;
  }

  })(
    commonjsGlobal,
     module,    // present in node.js
    (typeof undefined) == 'function'    // present with an AMD loader
  );
  });

  var xorwow = createCommonjsModule(function (module) {
  // A Javascript implementaion of the "xorwow" prng algorithm by
  // George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

  (function(global, module, define) {

  function XorGen(seed) {
    var me = this, strseed = '';

    // Set up generator function.
    me.next = function() {
      var t = (me.x ^ (me.x >>> 2));
      me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
      return (me.d = (me.d + 362437 | 0)) +
         (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
    };

    me.x = 0;
    me.y = 0;
    me.z = 0;
    me.w = 0;
    me.v = 0;

    if (seed === (seed | 0)) {
      // Integer seed.
      me.x = seed;
    } else {
      // String seed.
      strseed += seed;
    }

    // Mix in string seed, then discard an initial batch of 64 values.
    for (var k = 0; k < strseed.length + 64; k++) {
      me.x ^= strseed.charCodeAt(k) | 0;
      if (k == strseed.length) {
        me.d = me.x << 10 ^ me.x >>> 4;
      }
      me.next();
    }
  }

  function copy(f, t) {
    t.x = f.x;
    t.y = f.y;
    t.z = f.z;
    t.w = f.w;
    t.v = f.v;
    t.d = f.d;
    return t;
  }

  function impl(seed, opts) {
    var xg = new XorGen(seed),
        state = opts && opts.state,
        prng = function() { return (xg.next() >>> 0) / 0x100000000; };
    prng.double = function() {
      do {
        var top = xg.next() >>> 11,
            bot = (xg.next() >>> 0) / 0x100000000,
            result = (top + bot) / (1 << 21);
      } while (result === 0);
      return result;
    };
    prng.int32 = xg.next;
    prng.quick = prng;
    if (state) {
      if (typeof(state) == 'object') copy(state, xg);
      prng.state = function() { return copy(xg, {}); };
    }
    return prng;
  }

  if (module && module.exports) {
    module.exports = impl;
  } else if (define && define.amd) {
    define(function() { return impl; });
  } else {
    this.xorwow = impl;
  }

  })(
    commonjsGlobal,
     module,    // present in node.js
    (typeof undefined) == 'function'    // present with an AMD loader
  );
  });

  var xorshift7 = createCommonjsModule(function (module) {
  // A Javascript implementaion of the "xorshift7" algorithm by
  // François Panneton and Pierre L'ecuyer:
  // "On the Xorgshift Random Number Generators"
  // http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

  (function(global, module, define) {

  function XorGen(seed) {
    var me = this;

    // Set up generator function.
    me.next = function() {
      // Update xor generator.
      var X = me.x, i = me.i, t, v;
      t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
      t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
      t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
      t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
      t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
      X[i] = v;
      me.i = (i + 1) & 7;
      return v;
    };

    function init(me, seed) {
      var j, w, X = [];

      if (seed === (seed | 0)) {
        // Seed state array using a 32-bit integer.
        w = X[0] = seed;
      } else {
        // Seed state using a string.
        seed = '' + seed;
        for (j = 0; j < seed.length; ++j) {
          X[j & 7] = (X[j & 7] << 15) ^
              (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
        }
      }
      // Enforce an array length of 8, not all zeroes.
      while (X.length < 8) X.push(0);
      for (j = 0; j < 8 && X[j] === 0; ++j);
      if (j == 8) w = X[7] = -1; else w = X[j];

      me.x = X;
      me.i = 0;

      // Discard an initial 256 values.
      for (j = 256; j > 0; --j) {
        me.next();
      }
    }

    init(me, seed);
  }

  function copy(f, t) {
    t.x = f.x.slice();
    t.i = f.i;
    return t;
  }

  function impl(seed, opts) {
    if (seed == null) seed = +(new Date);
    var xg = new XorGen(seed),
        state = opts && opts.state,
        prng = function() { return (xg.next() >>> 0) / 0x100000000; };
    prng.double = function() {
      do {
        var top = xg.next() >>> 11,
            bot = (xg.next() >>> 0) / 0x100000000,
            result = (top + bot) / (1 << 21);
      } while (result === 0);
      return result;
    };
    prng.int32 = xg.next;
    prng.quick = prng;
    if (state) {
      if (state.x) copy(state, xg);
      prng.state = function() { return copy(xg, {}); };
    }
    return prng;
  }

  if (module && module.exports) {
    module.exports = impl;
  } else if (define && define.amd) {
    define(function() { return impl; });
  } else {
    this.xorshift7 = impl;
  }

  })(
    commonjsGlobal,
     module,    // present in node.js
    (typeof undefined) == 'function'    // present with an AMD loader
  );
  });

  var xor4096 = createCommonjsModule(function (module) {
  // A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
  //
  // This fast non-cryptographic random number generator is designed for
  // use in Monte-Carlo algorithms. It combines a long-period xorshift
  // generator with a Weyl generator, and it passes all common batteries
  // of stasticial tests for randomness while consuming only a few nanoseconds
  // for each prng generated.  For background on the generator, see Brent's
  // paper: "Some long-period random number generators using shifts and xors."
  // http://arxiv.org/pdf/1004.3115v1.pdf
  //
  // Usage:
  //
  // var xor4096 = require('xor4096');
  // random = xor4096(1);                        // Seed with int32 or string.
  // assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
  // assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
  //
  // For nonzero numeric keys, this impelementation provides a sequence
  // identical to that by Brent's xorgens 3 implementaion in C.  This
  // implementation also provides for initalizing the generator with
  // string seeds, or for saving and restoring the state of the generator.
  //
  // On Chrome, this prng benchmarks about 2.1 times slower than
  // Javascript's built-in Math.random().

  (function(global, module, define) {

  function XorGen(seed) {
    var me = this;

    // Set up generator function.
    me.next = function() {
      var w = me.w,
          X = me.X, i = me.i, t, v;
      // Update Weyl generator.
      me.w = w = (w + 0x61c88647) | 0;
      // Update xor generator.
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      // Update Xor generator array state.
      v = X[i] = v ^ t;
      me.i = i;
      // Result is the combination.
      return (v + (w ^ (w >>> 16))) | 0;
    };

    function init(me, seed) {
      var t, v, i, j, w, X = [], limit = 128;
      if (seed === (seed | 0)) {
        // Numeric seeds initialize v, which is used to generates X.
        v = seed;
        seed = null;
      } else {
        // String seeds are mixed into v and X one character at a time.
        seed = seed + '\0';
        v = 0;
        limit = Math.max(limit, seed.length);
      }
      // Initialize circular array and weyl value.
      for (i = 0, j = -32; j < limit; ++j) {
        // Put the unicode characters into the array, and shuffle them.
        if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
        // After 32 shuffles, take v as the starting w value.
        if (j === 0) w = v;
        v ^= v << 10;
        v ^= v >>> 15;
        v ^= v << 4;
        v ^= v >>> 13;
        if (j >= 0) {
          w = (w + 0x61c88647) | 0;     // Weyl.
          t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
          i = (0 == t) ? i + 1 : 0;     // Count zeroes.
        }
      }
      // We have detected all zeroes; make the key nonzero.
      if (i >= 128) {
        X[(seed && seed.length || 0) & 127] = -1;
      }
      // Run the generator 512 times to further mix the state before using it.
      // Factoring this as a function slows the main generator, so it is just
      // unrolled here.  The weyl generator is not advanced while warming up.
      i = 127;
      for (j = 4 * 128; j > 0; --j) {
        v = X[(i + 34) & 127];
        t = X[i = ((i + 1) & 127)];
        v ^= v << 13;
        t ^= t << 17;
        v ^= v >>> 15;
        t ^= t >>> 12;
        X[i] = v ^ t;
      }
      // Storing state as object members is faster than using closure variables.
      me.w = w;
      me.X = X;
      me.i = i;
    }

    init(me, seed);
  }

  function copy(f, t) {
    t.i = f.i;
    t.w = f.w;
    t.X = f.X.slice();
    return t;
  }
  function impl(seed, opts) {
    if (seed == null) seed = +(new Date);
    var xg = new XorGen(seed),
        state = opts && opts.state,
        prng = function() { return (xg.next() >>> 0) / 0x100000000; };
    prng.double = function() {
      do {
        var top = xg.next() >>> 11,
            bot = (xg.next() >>> 0) / 0x100000000,
            result = (top + bot) / (1 << 21);
      } while (result === 0);
      return result;
    };
    prng.int32 = xg.next;
    prng.quick = prng;
    if (state) {
      if (state.X) copy(state, xg);
      prng.state = function() { return copy(xg, {}); };
    }
    return prng;
  }

  if (module && module.exports) {
    module.exports = impl;
  } else if (define && define.amd) {
    define(function() { return impl; });
  } else {
    this.xor4096 = impl;
  }

  })(
    commonjsGlobal,                                     // window object or global
     module,    // present in node.js
    (typeof undefined) == 'function'    // present with an AMD loader
  );
  });

  var tychei = createCommonjsModule(function (module) {
  // A Javascript implementaion of the "Tyche-i" prng algorithm by
  // Samuel Neves and Filipe Araujo.
  // See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

  (function(global, module, define) {

  function XorGen(seed) {
    var me = this, strseed = '';

    // Set up generator function.
    me.next = function() {
      var b = me.b, c = me.c, d = me.d, a = me.a;
      b = (b << 25) ^ (b >>> 7) ^ c;
      c = (c - d) | 0;
      d = (d << 24) ^ (d >>> 8) ^ a;
      a = (a - b) | 0;
      me.b = b = (b << 20) ^ (b >>> 12) ^ c;
      me.c = c = (c - d) | 0;
      me.d = (d << 16) ^ (c >>> 16) ^ a;
      return me.a = (a - b) | 0;
    };

    /* The following is non-inverted tyche, which has better internal
     * bit diffusion, but which is about 25% slower than tyche-i in JS.
    me.next = function() {
      var a = me.a, b = me.b, c = me.c, d = me.d;
      a = (me.a + me.b | 0) >>> 0;
      d = me.d ^ a; d = d << 16 ^ d >>> 16;
      c = me.c + d | 0;
      b = me.b ^ c; b = b << 12 ^ d >>> 20;
      me.a = a = a + b | 0;
      d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
      me.c = c = c + d | 0;
      b = b ^ c;
      return me.b = (b << 7 ^ b >>> 25);
    }
    */

    me.a = 0;
    me.b = 0;
    me.c = 2654435769 | 0;
    me.d = 1367130551;

    if (seed === Math.floor(seed)) {
      // Integer seed.
      me.a = (seed / 0x100000000) | 0;
      me.b = seed | 0;
    } else {
      // String seed.
      strseed += seed;
    }

    // Mix in string seed, then discard an initial batch of 64 values.
    for (var k = 0; k < strseed.length + 20; k++) {
      me.b ^= strseed.charCodeAt(k) | 0;
      me.next();
    }
  }

  function copy(f, t) {
    t.a = f.a;
    t.b = f.b;
    t.c = f.c;
    t.d = f.d;
    return t;
  }
  function impl(seed, opts) {
    var xg = new XorGen(seed),
        state = opts && opts.state,
        prng = function() { return (xg.next() >>> 0) / 0x100000000; };
    prng.double = function() {
      do {
        var top = xg.next() >>> 11,
            bot = (xg.next() >>> 0) / 0x100000000,
            result = (top + bot) / (1 << 21);
      } while (result === 0);
      return result;
    };
    prng.int32 = xg.next;
    prng.quick = prng;
    if (state) {
      if (typeof(state) == 'object') copy(state, xg);
      prng.state = function() { return copy(xg, {}); };
    }
    return prng;
  }

  if (module && module.exports) {
    module.exports = impl;
  } else if (define && define.amd) {
    define(function() { return impl; });
  } else {
    this.tychei = impl;
  }

  })(
    commonjsGlobal,
     module,    // present in node.js
    (typeof undefined) == 'function'    // present with an AMD loader
  );
  });

  var seedrandom = createCommonjsModule(function (module) {
  /*
  Copyright 2014 David Bau.

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  */

  (function (pool, math) {
  //
  // The following constants are related to IEEE 754 limits.
  //
  var global = this,
      width = 256,        // each RC4 output is 0 <= x < 256
      chunks = 6,         // at least six RC4 outputs for each double
      digits = 52,        // there are 52 significant digits in a double
      rngname = 'random', // rngname: name for Math.random and Math.seedrandom
      startdenom = math.pow(width, chunks),
      significance = math.pow(2, digits),
      overflow = significance * 2,
      mask = width - 1,
      nodecrypto;         // node.js crypto module, initialized at the bottom.

  //
  // seedrandom()
  // This is the seedrandom function described above.
  //
  function seedrandom(seed, options, callback) {
    var key = [];
    options = (options == true) ? { entropy: true } : (options || {});

    // Flatten the seed string or build one from local entropy if needed.
    var shortseed = mixkey(flatten(
      options.entropy ? [seed, tostring(pool)] :
      (seed == null) ? autoseed() : seed, 3), key);

    // Use the seed to initialize an ARC4 generator.
    var arc4 = new ARC4(key);

    // This function returns a random double in [0, 1) that contains
    // randomness in every bit of the mantissa of the IEEE 754 value.
    var prng = function() {
      var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
          d = startdenom,                 //   and denominator d = 2 ^ 48.
          x = 0;                          //   and no 'extra last byte'.
      while (n < significance) {          // Fill up all significant digits by
        n = (n + x) * width;              //   shifting numerator and
        d *= width;                       //   denominator and generating a
        x = arc4.g(1);                    //   new least-significant-byte.
      }
      while (n >= overflow) {             // To avoid rounding up, before adding
        n /= 2;                           //   last byte, shift everything
        d /= 2;                           //   right using integer math until
        x >>>= 1;                         //   we have exactly the desired bits.
      }
      return (n + x) / d;                 // Form the number within [0, 1).
    };

    prng.int32 = function() { return arc4.g(4) | 0; };
    prng.quick = function() { return arc4.g(4) / 0x100000000; };
    prng.double = prng;

    // Mix the randomness into accumulated entropy.
    mixkey(tostring(arc4.S), pool);

    // Calling convention: what to return as a function of prng, seed, is_math.
    return (options.pass || callback ||
        function(prng, seed, is_math_call, state) {
          if (state) {
            // Load the arc4 state from the given state if it has an S array.
            if (state.S) { copy(state, arc4); }
            // Only provide the .state method if requested via options.state.
            prng.state = function() { return copy(arc4, {}); };
          }

          // If called as a method of Math (Math.seedrandom()), mutate
          // Math.random because that is how seedrandom.js has worked since v1.0.
          if (is_math_call) { math[rngname] = prng; return seed; }

          // Otherwise, it is a newer calling convention, so return the
          // prng directly.
          else return prng;
        })(
    prng,
    shortseed,
    'global' in options ? options.global : (this == math),
    options.state);
  }
  math['seed' + rngname] = seedrandom;

  //
  // ARC4
  //
  // An ARC4 implementation.  The constructor takes a key in the form of
  // an array of at most (width) integers that should be 0 <= x < (width).
  //
  // The g(count) method returns a pseudorandom integer that concatenates
  // the next (count) outputs from ARC4.  Its return value is a number x
  // that is in the range 0 <= x < (width ^ count).
  //
  function ARC4(key) {
    var t, keylen = key.length,
        me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

    // The empty key [] is treated as [0].
    if (!keylen) { key = [keylen++]; }

    // Set up S using the standard key scheduling algorithm.
    while (i < width) {
      s[i] = i++;
    }
    for (i = 0; i < width; i++) {
      s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
      s[j] = t;
    }

    // The "g" method returns the next (count) outputs as one number.
    (me.g = function(count) {
      // Using instance members instead of closure state nearly doubles speed.
      var t, r = 0,
          i = me.i, j = me.j, s = me.S;
      while (count--) {
        t = s[i = mask & (i + 1)];
        r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
      }
      me.i = i; me.j = j;
      return r;
      // For robust unpredictability, the function call below automatically
      // discards an initial batch of values.  This is called RC4-drop[256].
      // See http://google.com/search?q=rsa+fluhrer+response&btnI
    })(width);
  }

  //
  // copy()
  // Copies internal state of ARC4 to or from a plain object.
  //
  function copy(f, t) {
    t.i = f.i;
    t.j = f.j;
    t.S = f.S.slice();
    return t;
  }
  //
  // flatten()
  // Converts an object tree to nested arrays of strings.
  //
  function flatten(obj, depth) {
    var result = [], typ = (typeof obj), prop;
    if (depth && typ == 'object') {
      for (prop in obj) {
        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
      }
    }
    return (result.length ? result : typ == 'string' ? obj : obj + '\0');
  }

  //
  // mixkey()
  // Mixes a string seed into a key that is an array of integers, and
  // returns a shortened string seed that is equivalent to the result key.
  //
  function mixkey(seed, key) {
    var stringseed = seed + '', smear, j = 0;
    while (j < stringseed.length) {
      key[mask & j] =
        mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
    }
    return tostring(key);
  }

  //
  // autoseed()
  // Returns an object for autoseeding, using window.crypto and Node crypto
  // module if available.
  //
  function autoseed() {
    try {
      var out;
      if (nodecrypto && (out = nodecrypto.randomBytes)) {
        // The use of 'out' to remember randomBytes makes tight minified code.
        out = out(width);
      } else {
        out = new Uint8Array(width);
        (global.crypto || global.msCrypto).getRandomValues(out);
      }
      return tostring(out);
    } catch (e) {
      var browser = global.navigator,
          plugins = browser && browser.plugins;
      return [+new Date, global, plugins, global.screen, tostring(pool)];
    }
  }

  //
  // tostring()
  // Converts an array of charcodes to a string
  //
  function tostring(a) {
    return String.fromCharCode.apply(0, a);
  }

  //
  // When seedrandom.js is loaded, we immediately mix a few bits
  // from the built-in RNG into the entropy pool.  Because we do
  // not want to interfere with deterministic PRNG state later,
  // seedrandom will not call math.random on its own again after
  // initialization.
  //
  mixkey(math.random(), pool);

  //
  // Nodejs and AMD support: export the implementation as a module using
  // either convention.
  //
  if ( module.exports) {
    module.exports = seedrandom;
    // When in node.js, try using crypto package for autoseeding.
    try {
      nodecrypto = require('crypto');
    } catch (ex) {}
  }

  // End anonymous scope, and pass initial values.
  })(
    [],     // pool: entropy pool starts empty
    Math    // math: package containing random, pow, and seedrandom
  );
  });

  // A library of seedable RNGs implemented in Javascript.
  //
  // Usage:
  //
  // var seedrandom = require('seedrandom');
  // var random = seedrandom(1); // or any seed.
  // var x = random();       // 0 <= x < 1.  Every bit is random.
  // var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

  // alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
  // Period: ~2^116
  // Reported to pass all BigCrush tests.


  // xor128, a pure xor-shift generator by George Marsaglia.
  // Period: 2^128-1.
  // Reported to fail: MatrixRank and LinearComp.


  // xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
  // Period: 2^192-2^32
  // Reported to fail: CollisionOver, SimpPoker, and LinearComp.


  // xorshift7, by François Panneton and Pierre L'ecuyer, takes
  // a different approach: it adds robustness by allowing more shifts
  // than Marsaglia's original three.  It is a 7-shift generator
  // with 256 bits, that passes BigCrush with no systmatic failures.
  // Period 2^256-1.
  // No systematic BigCrush failures reported.


  // xor4096, by Richard Brent, is a 4096-bit xor-shift with a
  // very long period that also adds a Weyl generator. It also passes
  // BigCrush with no systematic failures.  Its long period may
  // be useful if you have many generators and need to avoid
  // collisions.
  // Period: 2^4128-2^32.
  // No systematic BigCrush failures reported.


  // Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
  // number generator derived from ChaCha, a modern stream cipher.
  // https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
  // Period: ~2^127
  // No systematic BigCrush failures reported.


  // The original ARC4-based prng included in this library.
  // Period: ~2^1600


  seedrandom.alea = alea;
  seedrandom.xor128 = xor128;
  seedrandom.xorwow = xorwow;
  seedrandom.xorshift7 = xorshift7;
  seedrandom.xor4096 = xor4096;
  seedrandom.tychei = tychei;

  var seedrandom$1 = seedrandom;
  var seedrandom_1 = seedrandom$1.alea;

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // https://en.wikipedia.org/wiki/Marsaglia_polar_method
  var MPRandGauss = /** @class */ (function () {
      function MPRandGauss(mean, stdDeviation, dtype, truncated, seed) {
          this.mean = mean;
          this.stdDev = stdDeviation;
          this.dtype = dtype;
          this.nextVal = NaN;
          this.truncated = truncated;
          if (this.truncated) {
              this.upper = this.mean + this.stdDev * 2;
              this.lower = this.mean - this.stdDev * 2;
          }
          var seedValue = seed ? seed : Math.random();
          this.random = seedrandom_1(seedValue.toString());
      }
      /** Returns next sample from a Gaussian distribution. */
      MPRandGauss.prototype.nextValue = function () {
          if (!isNaN(this.nextVal)) {
              var value = this.nextVal;
              this.nextVal = NaN;
              return value;
          }
          var resultX, resultY;
          var isValid = false;
          while (!isValid) {
              var v1 = void 0, v2 = void 0, s = void 0;
              do {
                  v1 = 2 * this.random() - 1;
                  v2 = 2 * this.random() - 1;
                  s = v1 * v1 + v2 * v2;
              } while (s >= 1 || s === 0);
              var mul = Math.sqrt(-2.0 * Math.log(s) / s);
              resultX = this.mean + this.stdDev * v1 * mul;
              resultY = this.mean + this.stdDev * v2 * mul;
              if (!this.truncated || this.isValidTruncated(resultX)) {
                  isValid = true;
              }
          }
          if (!this.truncated || this.isValidTruncated(resultY)) {
              this.nextVal = this.convertValue(resultY);
          }
          return this.convertValue(resultX);
      };
      /** Handles proper rounding for non-floating-point numbers. */
      MPRandGauss.prototype.convertValue = function (value) {
          if (this.dtype == null || this.dtype === 'float32') {
              return value;
          }
          return Math.round(value);
      };
      /** Returns true if less than 2-standard-deviations from the mean. */
      MPRandGauss.prototype.isValidTruncated = function (value) {
          return value <= this.upper && value >= this.lower;
      };
      return MPRandGauss;
  }());
  // Marsaglia, George, and Wai Wan Tsang. 2000. "A Simple Method for Generating
  // Gamma Variables."
  var RandGamma = /** @class */ (function () {
      function RandGamma(alpha, beta, dtype, seed) {
          this.alpha = alpha;
          this.beta = 1 / beta; // convert rate to scale parameter
          this.dtype = dtype;
          var seedValue = seed ? seed : Math.random();
          this.randu = seedrandom_1(seedValue.toString());
          this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());
          if (alpha < 1) {
              this.d = alpha + (2 / 3);
          }
          else {
              this.d = alpha - (1 / 3);
          }
          this.c = 1 / Math.sqrt(9 * this.d);
      }
      /** Returns next sample from a gamma distribution. */
      RandGamma.prototype.nextValue = function () {
          var x2, v0, v1, x, u, v;
          while (true) {
              do {
                  x = this.randn.nextValue();
                  v = 1 + (this.c * x);
              } while (v <= 0);
              v *= v * v;
              x2 = x * x;
              v0 = 1 - (0.331 * x2 * x2);
              v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));
              u = this.randu();
              if (u < v0 || Math.log(u) < v1) {
                  break;
              }
          }
          v = (1 / this.beta) * this.d * v;
          if (this.alpha < 1) {
              v *= Math.pow(this.randu(), 1 / this.alpha);
          }
          return this.convertValue(v);
      };
      /** Handles proper rounding for non-floating-point numbers. */
      RandGamma.prototype.convertValue = function (value) {
          if (this.dtype === 'float32') {
              return value;
          }
          return Math.round(value);
      };
      return RandGamma;
  }());
  var UniformRandom = /** @class */ (function () {
      function UniformRandom(min, max, dtype, seed) {
          var _this = this;
          if (min === void 0) { min = 0; }
          if (max === void 0) { max = 1; }
          /** Handles proper rounding for non floating point numbers. */
          this.canReturnFloat = function () {
              return (_this.dtype == null || _this.dtype === 'float32');
          };
          this.min = min;
          this.range = max - min;
          this.dtype = dtype;
          if (seed == null) {
              seed = Math.random();
          }
          if (typeof seed === 'number') {
              seed = seed.toString();
          }
          if (!this.canReturnFloat() && this.range <= 1) {
              throw new Error("The difference between " + min + " - " + max + " <= 1 and dtype is not float");
          }
          this.random = seedrandom_1(seed);
      }
      UniformRandom.prototype.convertValue = function (value) {
          if (this.canReturnFloat()) {
              return value;
          }
          return Math.round(value);
      };
      UniformRandom.prototype.nextValue = function () {
          return this.convertValue(this.min + this.range * this.random());
      };
      return UniformRandom;
  }());

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a `tf.Tensor` with values sampled from a gamma distribution.
   *
   * ```js
   * tf.randomGamma([2, 2], 1).print();
   * ```
   *
   * @param shape An array of integers defining the output tensor shape.
   * @param alpha The shape parameter of the gamma distribution.
   * @param beta The inverse scale parameter of the gamma distribution. Defaults
   *     to 1.
   * @param dtype The data type of the output. Defaults to float32.
   * @param seed The seed for the random number generator.
   */
  /** @doc {heading: 'Tensors', subheading: 'Random'} */
  function randomGamma_(shape, alpha, beta, dtype, seed) {
      if (beta === void 0) { beta = 1; }
      if (dtype === void 0) { dtype = 'float32'; }
      if (beta == null) {
          beta = 1;
      }
      if (dtype == null) {
          dtype = 'float32';
      }
      if (dtype !== 'float32' && dtype !== 'int32') {
          throw new Error("Unsupported data type " + dtype);
      }
      var rgamma = new RandGamma(alpha, beta, dtype, seed);
      var res = buffer(shape, dtype);
      for (var i = 0; i < res.values.length; i++) {
          res.values[i] = rgamma.nextValue();
      }
      return res.toTensor();
  }
  var randomGamma = op({ randomGamma_: randomGamma_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a `tf.Tensor` with values sampled from a normal distribution.
   *
   * ```js
   * tf.randomNormal([2, 2]).print();
   * ```
   *
   * @param shape An array of integers defining the output tensor shape.
   * @param mean The mean of the normal distribution.
   * @param stdDev The standard deviation of the normal distribution.
   * @param dtype The data type of the output.
   * @param seed The seed for the random number generator.
   */
  /** @doc {heading: 'Tensors', subheading: 'Random'} */
  function randomNormal_(shape, mean, stdDev, dtype, seed) {
      if (mean === void 0) { mean = 0; }
      if (stdDev === void 0) { stdDev = 1; }
      if (dtype != null && dtype === 'bool') {
          throw new Error("Unsupported data type " + dtype);
      }
      var randGauss = new MPRandGauss(mean, stdDev, dtype, false /* truncated */, seed);
      var res = buffer(shape, dtype);
      for (var i = 0; i < res.values.length; i++) {
          res.values[i] = randGauss.nextValue();
      }
      return res.toTensor();
  }
  var randomNormal = op({ randomNormal_: randomNormal_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a `tf.Tensor` with values sampled from a uniform distribution.
   *
   * The generated values follow a uniform distribution in the range [minval,
   * maxval). The lower bound minval is included in the range, while the upper
   * bound maxval is excluded.
   *
   * ```js
   * tf.randomUniform([2, 2]).print();
   * ```
   *
   * @param shape An array of integers defining the output tensor shape.
   * @param minval The lower bound on the range of random values to generate.
   *   Defaults to 0.
   * @param maxval The upper bound on the range of random values to generate.
   *   Defaults to 1.
   * @param dtype The data type of the output tensor. Defaults to 'float32'.
   */
  /** @doc {heading: 'Tensors', subheading: 'Random'} */
  function randomUniform_(shape, minval, maxval, dtype, seed) {
      if (minval === void 0) { minval = 0; }
      if (maxval === void 0) { maxval = 1; }
      if (dtype === void 0) { dtype = 'float32'; }
      var res = buffer(shape, dtype);
      var random = new UniformRandom(minval, maxval, null, seed);
      for (var i = 0; i < res.values.length; i++) {
          res.values[i] = random.nextValue();
      }
      return res.toTensor();
  }
  var randomUniform = op({ randomUniform_: randomUniform_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.
   *
   * The same functionality can be achieved with `tf.tensor`, but in general
   * we recommend using `tf.tensor1d` as it makes the code more readable.
   *
   * ```js
   * tf.tensor1d([1, 2, 3]).print();
   * ```
   *
   * @param values The values of the tensor. Can be array of numbers,
   *     or a `TypedArray`.
   * @param dtype The data type.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function tensor1d(values, dtype) {
      assertNonNull(values);
      var inferredShape = inferShape(values, dtype);
      if (inferredShape.length !== 1) {
          throw new Error('tensor1d() requires values to be a flat/TypedArray');
      }
      var shape = null;
      return makeTensor(values, shape, inferredShape, dtype);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.
   *
   * The tensor is a is half-open interval meaning it includes start, but
   * excludes stop. Decrementing ranges and negative step values are also
   * supported.sv
   *
   *
   * ```js
   * tf.range(0, 9, 2).print();
   * ```
   *
   * @param start An integer start value
   * @param stop An integer stop value
   * @param step An integer increment (will default to 1 or -1)
   * @param dtype The data type of the output tensor. Defaults to 'float32'.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function range(start, stop, step, dtype) {
      if (step === void 0) { step = 1; }
      if (dtype === void 0) { dtype = 'float32'; }
      if (step === 0) {
          throw new Error('Cannot have a step of zero');
      }
      var forward = function () {
          var sameStartStop = start === stop;
          var increasingRangeNegativeStep = start < stop && step < 0;
          var decreasingRangePositiveStep = stop < start && step > 1;
          if (sameStartStop || increasingRangeNegativeStep ||
              decreasingRangePositiveStep) {
              return zeros([0], dtype);
          }
          var numElements = Math.abs(Math.ceil((stop - start) / step));
          var values = makeZerosTypedArray(numElements, dtype);
          if (stop < start && step === 1) {
              // Auto adjust the step's sign if it hasn't been set
              // (or was set to 1)
              step = -1;
          }
          values[0] = start;
          for (var i = 1; i < values.length; i++) {
              values[i] = values[i - 1] + step;
          }
          return tensor1d(values, dtype);
      };
      var attrs = { start: start, stop: stop, step: step, dtype: dtype };
      return ENGINE.runKernelFunc(forward, {} /* inputs */, null /* grad */, Range, attrs);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes reciprocal of x element-wise: `1 / x`
   *
   * ```js
   * const x = tf.tensor1d([0, 1, 2]);
   *
   * x.reciprocal().print();  // or tf.reciprocal(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function reciprocal_(x) {
      var $x = convertToTensor(x, 'x', 'reciprocal');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.reciprocal($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Reciprocal);
  }
  var reciprocal = op({ reciprocal_: reciprocal_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes rectified linear element-wise: `max(x, 0)`.
   *
   * ```js
   * const x = tf.tensor1d([-1, 2, -3, 4]);
   *
   * x.relu().print();  // or tf.relu(x)
   * ```
   * @param x The input tensor. If the dtype is `bool`, the output dtype will be
   *     `int32'.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function relu_(x) {
      var $x = convertToTensor(x, 'x', 'relu');
      var forward = function (backend, save) {
          save([$x]);
          if ($x.dtype === 'bool') {
              return $x.toInt();
          }
          return backend.relu($x);
      };
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Relu);
  }
  var relu = op({ relu_: relu_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.
   *
   * ```js
   * const x = tf.tensor1d([-1, 2, -3, 8]);
   *
   * x.relu6().print();  // or tf.relu6(x)
   * ```
   * @param x The input tensor. If the dtype is `bool`, the output dtype will be
   *     `int32'.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function relu6_(x) {
      var $x = convertToTensor(x, 'x', 'relu6');
      var forward = function (backend, save) {
          save([$x]);
          if ($x.dtype === 'bool') {
              return cast($x, 'int32');
          }
          return backend.relu6($x);
      };
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Relu6);
  }
  var relu6 = op({ relu6_: relu6_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Reverses a `tf.Tensor1D`.
   *
   * @param x The input tensor.
   */
  function reverse1d_(x) {
      var $x = convertToTensor(x, 'x', 'reverse');
      assert($x.rank === 1, function () { return "Error in reverse1D: x must be rank 1 but got rank " + $x.rank + "."; });
      return reverse($x, 0);
  }
  var reverse1d = op({ reverse1d_: reverse1d_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Reverses a `tf.Tensor2D` along a specified axis.
   *
   * @param x The input tensor.
   * @param axis The set of dimensions to reverse. Must be in the
   *     range [-rank(x), rank(x)). Defaults to all axes.
   */
  function reverse2d_(x, axis) {
      var $x = convertToTensor(x, 'x', 'reverse');
      assert($x.rank === 2, function () { return "Error in reverse2D: x must be rank 2 but got rank " + $x.rank + "."; });
      return reverse($x, axis);
  }
  var reverse2d = op({ reverse2d_: reverse2d_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Reverses a `tf.Tensor3D` along a specified axis.
   *
   * @param x The input tensor.
   * @param axis The set of dimensions to reverse. Must be in the
   *     range [-rank(x), rank(x)). Defaults to all axes.
   */
  function reverse3d_(x, axis) {
      var $x = convertToTensor(x, 'x', 'reverse');
      assert($x.rank === 3, function () { return "Error in reverse3D: x must be rank 3 but got rank " + $x.rank + "."; });
      return reverse($x, axis);
  }
  var reverse3d = op({ reverse3d_: reverse3d_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Reverses a `tf.Tensor4D` along a specified axis.
   *
   * @param x The input tensor.
   * @param axis The set of dimensions to reverse. Must be in the
   *     range [-rank(x), rank(x)). Defaults to all axes.
   */
  function reverse4d_(x, axis) {
      var $x = convertToTensor(x, 'x', 'reverse');
      assert($x.rank === 4, function () { return "Error in reverse4D: x must be rank 4 but got rank " + $x.rank + "."; });
      return reverse($x, axis);
  }
  var reverse4d = op({ reverse4d_: reverse4d_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Real value input fast Fourier transform.
   *
   * Computes the 1-dimensional discrete Fourier transform over the
   * inner-most dimension of the real input.
   *
   * ```js
   * const real = tf.tensor1d([1, 2, 3]);
   *
   * real.rfft().print();
   * ```
   * @param input The real value input to compute an rfft over.
   */
  /**
   * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
   */
  function rfft_(input, fftLength) {
      assert(input.dtype === 'float32', function () { return "The dtype for rfft() must be real value but got " + input.dtype; });
      var innerDimensionSize = input.shape[input.shape.length - 1];
      var batch = input.size / innerDimensionSize;
      var adjustedInput;
      if (fftLength != null && fftLength < innerDimensionSize) {
          // Need to crop
          var begin = input.shape.map(function (v) { return 0; });
          var size = input.shape.map(function (v) { return v; });
          size[input.shape.length - 1] = fftLength;
          adjustedInput = slice(input, begin, size);
          innerDimensionSize = fftLength;
      }
      else if (fftLength != null && fftLength > innerDimensionSize) {
          // Need to pad with zeros
          var zerosShape = input.shape.map(function (v) { return v; });
          zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;
          adjustedInput = concat([input, zeros(zerosShape)], input.shape.length - 1);
          innerDimensionSize = fftLength;
      }
      else {
          adjustedInput = input;
      }
      // Complement the input with zero imaginary numbers.
      var zerosInput = zerosLike(adjustedInput);
      var complexInput = reshape(complex(adjustedInput, zerosInput), [batch, innerDimensionSize]);
      var ret = fft(complexInput);
      // Exclude complex conjugations. These conjugations are put symmetrically.
      var half = Math.floor(innerDimensionSize / 2) + 1;
      var realValues = real(ret);
      var imagValues = imag(ret);
      var realComplexConjugate = split(realValues, [half, innerDimensionSize - half], realValues.shape.length - 1);
      var imagComplexConjugate = split(imagValues, [half, innerDimensionSize - half], imagValues.shape.length - 1);
      var outputShape = adjustedInput.shape.slice();
      outputShape[adjustedInput.shape.length - 1] = half;
      return reshape(complex(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);
  }
  var rfft = op({ rfft_: rfft_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes round of input `tf.Tensor` element-wise: `round(x)`.
   * It implements banker's rounding.
   *
   * ```js
   * const x = tf.tensor1d([.6, 1.1, -3.3]);
   *
   * x.round().print();  // or tf.round(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function round_(x) {
      var $x = convertToTensor(x, 'x', 'round');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend) { return backend.round($x); }, inputs, null /* grad */, Round);
  }
  var round = op({ round_: round_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes scaled exponential linear element-wise.
   *
   * `x < 0 ? scale * alpha * (exp(x) - 1) : x`
   *
   * ```js
   * const x = tf.tensor1d([-1, 2, -3, 4]);
   *
   * x.selu().print();  // or tf.selu(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function selu_(x) {
      var $x = convertToTensor(x, 'x', 'selu');
      var forward = function (backend, save) {
          var res = backend.selu($x);
          save([$x]);
          return res;
      };
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Selu);
  }
  var selu = op({ selu_: selu_ });

  /**
   * 2-D convolution with separable filters.
   *
   * Performs a depthwise convolution that acts separately on channels followed
   * by a pointwise convolution that mixes channels. Note that this is
   * separability between dimensions [1, 2] and 3, not spatial separability
   * between dimensions 1 and 2.
   *
   * See
   * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](
   *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)
   * for more details.
   *
   * @param x The input tensor, of rank 4 or rank 3, of shape
   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
   * assumed.
   * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape
   *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is
   *     the filter used in the first step.
   * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape
   *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is
   *     the filter used in the second step.
   * @param strides The strides of the convolution: `[strideHeight,
   * strideWidth]`. If strides is a single number, then `strideHeight ==
   * strideWidth`.
   * @param pad The type of padding algorithm.
   *   - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *   - `valid`: output will be smaller than input if filter is larger
   *       than 1x1.
   *   - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
   *     in which we sample input values across the height and width dimensions
   *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
   *     number, then `dilationHeight == dilationWidth`. If it is greater than
   *     1, then all values of `strides` must be 1.
   * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
   *     "NHWC". Specify the data format of the input and output data. With the
   *     default format "NHWC", the data is stored in the order of: [batch,
   *     height, width, channels]. Only "NHWC" is currently supported.
   */
  /** @doc {heading: 'Operations', subheading: 'Convolution'} */
  function separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat) {
      if (dilation === void 0) { dilation = [1, 1]; }
      if (dataFormat === void 0) { dataFormat = 'NHWC'; }
      var $x = convertToTensor(x, 'x', 'separableConv2d');
      var $depthwiseFilter = convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');
      var $pointwiseFilter = convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');
      var x4D = $x;
      var reshapedTo4D = false;
      if ($x.rank === 3) {
          reshapedTo4D = true;
          x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);
      }
      if (dataFormat === 'NCHW') {
          throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' +
              'NHWC is supported');
      }
      assert(x4D.rank === 4, function () { return "Error in separableConv2d: input must be rank 4, but got " +
          ("rank " + x4D.rank + "."); });
      assert($depthwiseFilter.rank === 4, function () { return "Error in separableConv2d: depthwise filter must be rank 4, but " +
          ("got rank " + $depthwiseFilter.rank + "."); });
      assert($pointwiseFilter.rank === 4, function () { return "Error in separableConv2d: pointwise filter must be rank 4, but " +
          ("got rank " + $depthwiseFilter.rank + "."); });
      assert($pointwiseFilter.shape[0] === 1, function () {
          return "Error in separableConv2d: the first dimension of pointwise filter " +
              (" must be 1, but got " + $pointwiseFilter.shape[0] + ".");
      });
      assert($pointwiseFilter.shape[1] === 1, function () { return "Error in separableConv2d: the second dimension of pointwise " +
          ("filter must be 1, but got " + $pointwiseFilter.shape[1] + "."); });
      var inChannels = $depthwiseFilter.shape[2];
      var channelMultiplier = $depthwiseFilter.shape[3];
      assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, function () {
          return "Error in separableConv2d: the third dimension of pointwise filter " +
              ("must be " + inChannels * channelMultiplier + ", ") +
              ("but got " + $pointwiseFilter.shape[2] + ".");
      });
      var depthwise = depthwiseConv2d(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);
      var pointwiseStride = 1;
      var res = conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);
      if (reshapedTo4D) {
          return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
      }
      return res;
  }
  var separableConv2d = op({ separableConv2d_: separableConv2d_ });

  /**
   * Computes the difference between two lists of numbers.
   *
   * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`
   * that represents all values that are in `x` but not in `y`. The returned
   * Tensor `out` is sorted in the same order that the numbers appear in `x`
   * (duplicates are preserved). This operation also returns a Tensor indices that
   * represents the position of each out element in `x`. In other words:
   *
   * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`
   *
   * ```js
   * const x = [1, 2, 3, 4, 5, 6];
   * const y = [1, 3, 5];
   *
   * const [out, indices] = await tf.setdiff1dAsync(x, y);
   * out.print(); // [2, 4, 6]
   * indices.print(); // [1, 3, 5]
   * ```
   *
   * @param x 1-D Tensor. Values to keep.
   * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the
   *     output.
   * @returns Promise of Tensor tuple [out, indices].
   *  out: Tensor with the same type as x.
   *  indices: A Tensor of type int32.
   */
  /** @doc {heading: 'Tensors', subheading: 'Transformations'} */
  function setdiff1dAsync_(x, y) {
      return __awaiter(this, void 0, void 0, function () {
          var $x, $y, xVals, yVals, ySet, outputSize, i, buffer, indices, i, p;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      $x = convertToTensor(x, 'x', 'setdiff1d');
                      $y = convertToTensor(y, 'y', 'setdiff1d');
                      assert($x.dtype === $y.dtype, function () { return "x and y should have the same dtype, but got x (" + $x.dtype + ") and y (" + $y.dtype + ")."; });
                      assert($x.rank === 1, function () { return "x should be 1D tensor, but got x (" + $x.shape + ")."; });
                      assert($y.rank === 1, function () { return "y should be 1D tensor, but got y (" + $y.shape + ")."; });
                      return [4 /*yield*/, $x.data()];
                  case 1:
                      xVals = _a.sent();
                      return [4 /*yield*/, $y.data()];
                  case 2:
                      yVals = _a.sent();
                      ySet = new Set(yVals);
                      outputSize = 0;
                      for (i = 0; i < xVals.length; i++) {
                          if (!ySet.has(xVals[i])) {
                              outputSize++;
                          }
                      }
                      buffer = new TensorBuffer([outputSize], $x.dtype);
                      indices = new TensorBuffer([outputSize], 'int32');
                      for (i = 0, p = 0; i < xVals.length; i++) {
                          if (!ySet.has(xVals[i])) {
                              buffer.values[p] = xVals[i];
                              indices.values[p] = i;
                              p++;
                          }
                      }
                      return [2 /*return*/, [buffer.toTensor(), indices.toTensor()]];
              }
          });
      });
  }
  var setdiff1dAsync = setdiff1dAsync_;

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns an element-wise indication of the sign of a number.
   *
   * ```js
   * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);
   *
   * x.sign().print();  // or tf.sign(x)
   * ```
   * @param x The input Tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function sign_(x) {
      var $x = convertToTensor(x, 'x', 'sign');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend) { return backend.sign($x); }, inputs, null /* grad */, Sign);
  }
  var sign = op({ sign_: sign_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Extracts a 1D slice from 1D array starting at coordinates `begin` and is
   * of length `size`. See `slice` for details.
   */
  function slice1d_(x, begin, size) {
      var $x = convertToTensor(x, 'x', 'slice1d');
      assert($x.rank === 1, function () {
          return "slice1d expects a rank-1 tensor, but got a rank-" + $x.rank + " tensor";
      });
      return slice($x, [begin], [size]);
  }
  var slice1d = op({ slice1d_: slice1d_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Extracts a 2D slice from a 2D array starting at coordinates `begin` and
   * is of size `size`. See `slice` for details.
   */
  function slice2d_(x, begin, size) {
      var $x = convertToTensor(x, 'x', 'slice2d');
      assert($x.rank === 2, function () {
          return "slice2d expects a rank-2 tensor, but got a rank-" + $x.rank + " tensor";
      });
      return slice($x, begin, size);
  }
  var slice2d = op({ slice2d_: slice2d_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Extracts a 3D slice from a 3D array starting at coordinates `begin` and
   * is of size `size`. See `slice` for details.
   */
  function slice3d_(x, begin, size) {
      var $x = convertToTensor(x, 'x', 'slice3d');
      assert($x.rank === 3, function () {
          return "slice3d expects a rank-3 tensor, but got a rank-" + $x.rank + " tensor";
      });
      return slice($x, begin, size);
  }
  var slice3d = op({ slice3d_: slice3d_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Extracts a 4D slice from a 4D array starting at coordinates `begin` and
   * is of size `size`. See `slice` for details.
   */
  function slice4d_(x, begin, size) {
      var $x = convertToTensor(x, 'x', 'slice4d');
      assert($x.rank === 4, function () {
          return "slice4d expects a rank-4 tensor, but got a rank-" + $x.rank + " tensor";
      });
      return slice($x, begin, size);
  }
  var slice4d = op({ slice4d_: slice4d_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the softmax normalized vector given the logits.
   *
   * ```js
   * const a = tf.tensor1d([1, 2, 3]);
   *
   * a.softmax().print();  // or tf.softmax(a)
   * ```
   *
   * ```js
   * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
   *
   * a.softmax().print();  // or tf.softmax(a)
   * ```
   *
   * @param logits The logits array.
   * @param dim The dimension softmax would be performed on. Defaults to `-1`
   *     which indicates the last dimension.
   */
  /** @doc {heading: 'Operations', subheading: 'Normalization'} */
  function softmax_(logits, dim) {
      if (dim === void 0) { dim = -1; }
      var $logits = convertToTensor(logits, 'logits', 'softmax', 'float32');
      if (dim === -1) {
          dim = $logits.rank - 1;
      }
      if (dim !== $logits.rank - 1) {
          throw Error('Softmax along a non-last dimension is not yet supported. ' +
              ("Logits was rank " + $logits.rank + " and dim was " + dim));
      }
      var inputs = { logits: $logits };
      var attrs = { dim: dim };
      return ENGINE.runKernelFunc(function (backend, save) {
          var y = backend.softmax($logits, dim);
          save([y]);
          return y;
      }, inputs, null /* grad */, Softmax, attrs);
  }
  var softmax = op({ softmax_: softmax_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`
   *
   * ```js
   * const x = tf.tensor1d([0, 1, -1, .7]);
   *
   * x.softplus().print();  // or tf.softplus(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function softplus_(x) {
      var $x = convertToTensor(x, 'x', 'softplus');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.softplus($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Softplus);
  }
  var softplus = op({ softplus_: softplus_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns (a - b) * (a - b) element-wise.
   * Supports broadcasting.
   *
   * ```js
   * const a = tf.tensor1d([1, 4, 3, 16]);
   * const b = tf.tensor1d([1, 2, 9, 4]);
   *
   * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
   * ```
   *
   * ```js
   * // Broadcast squared difference  a with b.
   * const a = tf.tensor1d([2, 4, 6, 8]);
   * const b = tf.scalar(5);
   *
   * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
   * ```
   *
   * @param a The first tensor.
   * @param b The second tensor. Must have the same type as `a`.
   */
  /** @doc {heading: 'Operations', subheading: 'Arithmetic'} */
  function squaredDifference_(a, b) {
      var _a;
      var $a = convertToTensor(a, 'a', 'squaredDifference');
      var $b = convertToTensor(b, 'b', 'squaredDifference');
      _a = makeTypesMatch($a, $b), $a = _a[0], $b = _a[1];
      assertAndGetBroadcastShape($a.shape, $b.shape);
      var forward = function (backend, save) {
          var res = backend.squaredDifference($a, $b);
          save([$a, $b]);
          return res;
      };
      var inputs = { a: $a, b: $b };
      var attrs = {};
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, SquaredDifference, attrs);
  }
  var squaredDifference = op({ squaredDifference_: squaredDifference_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Removes dimensions of size 1 from the shape of a `tf.Tensor`.
   *
   * ```js
   * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);
   * x.squeeze().print();
   * ```
   *
   * @param x The input tensor to be squeezed.
   * @param axis An optional list of numbers. If specified, only
   *     squeezes the dimensions listed. The dimension index starts at 0. It
   * is an error to squeeze a dimension that is not 1.
   */
  /** @doc {heading: 'Tensors', subheading: 'Transformations'} */
  function squeeze_(x, axis) {
      var $x = convertToTensor(x, 'x', 'squeeze');
      return reshape($x, squeezeShape($x.shape, axis).newShape);
  }
  var squeeze = op({ squeeze_: squeeze_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Extracts a strided slice of a tensor.
   *
   * Roughly speaking, this op extracts a slice of size (end-begin)/stride from
   * the given input tensor (x). Starting at the location specified by begin the
   * slice continues by adding stride to the index until all dimensions are not
   * less than end. Note that a stride can be negative, which causes a reverse
   * slice.
   *
   * ```js
   * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],
   *    [3, 2, 3]);
   * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]
   * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],
   *                                                     // [4, 4, 4]]]
   * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],
   *                                                     // [3, 3, 3]]]
   * ```
   *
   * @param x The tensor to stride slice.
   * @param begin The coordinates to start the slice from.
   * @param end: The coordinates to end the slice at.
   * @param strides: The size of the slice.
   * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored
   *      and the fullest possible range in that dimension is used instead.
   * @param endMask: If the ith bit of endMask is set, end[i] is ignored
   *      and the fullest possible range in that dimension is used instead.
   * @param shrinkAxisMask: a bitmask where bit i implies that
   * the ith specification should shrink the dimensionality. begin and end must
   * imply a slice of size 1 in the dimension.
   */
  /** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */
  function stridedSlice_(x, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {
      if (beginMask === void 0) { beginMask = 0; }
      if (endMask === void 0) { endMask = 0; }
      if (ellipsisMask === void 0) { ellipsisMask = 0; }
      if (newAxisMask === void 0) { newAxisMask = 0; }
      if (shrinkAxisMask === void 0) { shrinkAxisMask = 0; }
      if (strides == null) {
          strides = new Array(begin.length);
      }
      var $x = convertToTensor(x, 'x', 'stridedSlice');
      var forward = function (backend) {
          var ellipsisAxes = maskToAxes(ellipsisMask);
          if (ellipsisAxes.length > 1) {
              throw new Error('Multiple ellipses in slice is not allowed.');
          }
          if (ellipsisMask !== 0 && newAxisMask !== 0) {
              throw new Error('Using both ellipsisMask and newAxisMask is not yet supported.');
          }
          if (ellipsisMask !== 0 && shrinkAxisMask !== 0) {
              throw new Error('Using both ellipsisMask and shrinkAxisMask is not yet supported.');
          }
          var numInterpolatedAxes = $x.rank - begin.length;
          // Expand the dims of x based on the newAxisMask.
          var expandAxes = maskToAxes(newAxisMask);
          var newShape = $x.shape.slice();
          expandAxes.forEach(function (axis) {
              begin[axis] = 0;
              end[axis] = 1;
              newShape.splice(axis, 0, 1);
          });
          $x = reshape($x, newShape);
          // Normalize the start, end and strides.
          if (ellipsisAxes.length && numInterpolatedAxes > 0) {
              var fullIndex = ellipsisAxes[0];
              // The ellipsis applies to the masked index as well as any dimensions
              // that are interpolated.
              var numElidedAxes = numInterpolatedAxes + 1;
              begin = startIndicesWithElidedDims(beginMask, fullIndex, numElidedAxes, begin, $x.shape);
              end = stopIndicesWithElidedDims(endMask, fullIndex, numElidedAxes, end, $x.shape);
              strides =
                  stridesWithElidedDims(strides, fullIndex, numElidedAxes, $x.shape);
          }
          else {
              for (var axis = 0; axis < $x.rank; axis++) {
                  begin[axis] = startForAxis(beginMask, begin, strides, $x.shape, axis, ellipsisMask);
                  end[axis] =
                      stopForAxis(endMask, end, strides, $x.shape, axis, ellipsisMask);
                  strides[axis] = stridesForAxis(strides, axis, ellipsisMask);
              }
          }
          var shrinkAxes = maskToAxes(shrinkAxisMask);
          // Adjust the ends based on the shrink mask.
          shrinkAxes.forEach(function (axis) {
              end[axis] = begin[axis] + 1;
              strides[axis] = 1;
          });
          // Figure out the output shape.
          var size = computeOutShape(begin, end, strides);
          // Remove the axes based on shrinkMask.
          var outShape = size.filter(function (_, axis) { return shrinkAxes.indexOf(axis) === -1; });
          var nonStrided = strides.every(function (v) { return v === 1; });
          if (nonStrided) {
              return reshape(slice($x, begin, size), outShape);
          }
          var res = backend.stridedSlice($x, begin, end, strides);
          return res.reshape(outShape);
      };
      var inputs = { x: $x };
      var attrs = {
          begin: begin,
          end: end,
          strides: strides,
          beginMask: beginMask,
          endMask: endMask,
          ellipsisMask: ellipsisMask,
          newAxisMask: newAxisMask,
          shrinkAxisMask: shrinkAxisMask
      };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, StridedSlice, attrs);
  }
  var stridedSlice = op({ stridedSlice_: stridedSlice_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`
   *
   * ```js
   * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
   *
   * x.tan().print();  // or tf.tan(x)
   * ```
   * @param x The input tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Basic math'} */
  function tan_(x) {
      var $x = convertToTensor(x, 'x', 'tan');
      var inputs = { x: $x };
      return ENGINE.runKernelFunc(function (backend, save) {
          var res = backend.tan($x);
          save([$x]);
          return res;
      }, inputs, null /* grad */, Tan);
  }
  var tan = op({ tan_: tan_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.
   *
   * The same functionality can be achieved with `tf.tensor`, but in general
   * we recommend using `tf.tensor2d` as it makes the code more readable.
   *
   *  ```js
   * // Pass a nested array.
   * tf.tensor2d([[1, 2], [3, 4]]).print();
   * ```
   * ```js
   * // Pass a flat array and specify a shape.
   * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();
   * ```
   *
   * @param values The values of the tensor. Can be nested array of numbers,
   *     or a flat array, or a `TypedArray`.
   * @param shape The shape of the tensor. If not provided, it is inferred from
   *     `values`.
   * @param dtype The data type.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function tensor2d(values, shape, dtype) {
      assertNonNull(values);
      if (shape != null && shape.length !== 2) {
          throw new Error('tensor2d() requires shape to have two numbers');
      }
      var inferredShape = inferShape(values, dtype);
      if (inferredShape.length !== 2 && inferredShape.length !== 1) {
          throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');
      }
      if (inferredShape.length === 1 && shape == null) {
          throw new Error('tensor2d() requires shape to be provided when `values` ' +
              'are a flat/TypedArray');
      }
      return makeTensor(values, shape, inferredShape, dtype);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.
   *
   * The same functionality can be achieved with `tf.tensor`, but in general
   * we recommend using `tf.tensor4d` as it makes the code more readable.
   *
   *  ```js
   * // Pass a nested array.
   * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();
   * ```
   * ```js
   * // Pass a flat array and specify a shape.
   * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();
   * ```
   *
   * @param values The values of the tensor. Can be nested array of numbers,
   *     or a flat array, or a `TypedArray`.
   * @param shape The shape of the tensor. Optional. If not provided,
   *   it is inferred from `values`.
   * @param dtype The data type.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function tensor4d(values, shape, dtype) {
      assertNonNull(values);
      if (shape != null && shape.length !== 4) {
          throw new Error('tensor4d() requires shape to have four numbers');
      }
      var inferredShape = inferShape(values, dtype);
      if (inferredShape.length !== 4 && inferredShape.length !== 1) {
          throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');
      }
      if (inferredShape.length === 1 && shape == null) {
          throw new Error('tensor4d() requires shape to be provided when `values` ' +
              'are a flat array');
      }
      return makeTensor(values, shape, inferredShape, dtype);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.
   *
   * The same functionality can be achieved with `tf.tensor`, but in general
   * we recommend using `tf.tensor5d` as it makes the code more readable.
   *
   *  ```js
   * // Pass a nested array.
   * tf.tensor5d([[[[[1], [2]], [[3], [4]]]]]).print();
   * ```
   * ```js
   * // Pass a flat array and specify a shape.
   * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();
   * ```
   *
   * @param values The values of the tensor. Can be nested array of numbers,
   *     or a flat array, or a `TypedArray`.
   * @param shape The shape of the tensor. Optional. If not provided,
   *   it is inferred from `values`.
   * @param dtype The data type.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function tensor5d(values, shape, dtype) {
      assertNonNull(values);
      if (shape != null && shape.length !== 5) {
          throw new Error('tensor5d() requires shape to have five numbers');
      }
      var inferredShape = inferShape(values, dtype);
      if (inferredShape.length !== 5 && inferredShape.length !== 1) {
          throw new Error('tensor5d() requires values to be ' +
              'number[][][][][] or flat/TypedArray');
      }
      if (inferredShape.length === 1 && shape == null) {
          throw new Error('tensor5d() requires shape to be provided when `values` ' +
              'are a flat array');
      }
      return makeTensor(values, shape, inferredShape, dtype);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.
   *
   * The same functionality can be achieved with `tf.tensor`, but in general
   * we recommend using `tf.tensor6d` as it makes the code more readable.
   *
   *  ```js
   * // Pass a nested array.
   * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();
   * ```
   * ```js
   * // Pass a flat array and specify a shape.
   * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();
   * ```
   *
   * @param values The values of the tensor. Can be nested array of numbers,
   *     or a flat array, or a `TypedArray`.
   * @param shape The shape of the tensor. Optional. If not provided,
   *   it is inferred from `values`.
   * @param dtype The data type.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function tensor6d(values, shape, dtype) {
      assertNonNull(values);
      if (shape != null && shape.length !== 6) {
          throw new Error('tensor6d() requires shape to have six numbers');
      }
      var inferredShape = inferShape(values, dtype);
      if (inferredShape.length !== 6 && inferredShape.length !== 1) {
          throw new Error('tensor6d() requires values to be number[][][][][][] or ' +
              'flat/TypedArray');
      }
      if (inferredShape.length === 1 && shape == null) {
          throw new Error('tensor6d() requires shape to be provided when `values` ' +
              'are a flat array');
      }
      shape = shape ||
          inferredShape;
      return makeTensor(values, shape, inferredShape, dtype);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Finds the values and indices of the `k` largest entries along the last
   * dimension.
   *
   * If the input is a vector (rank=1), finds the k largest entries in the vector
   * and outputs their values and indices as vectors. Thus values[j] is the j-th
   * largest entry in input, and its index is indices[j].
   * For higher rank inputs, computes the top k entries along the last dimension.
   *
   * If two elements are equal, the lower-index element appears first.
   *
   * ```js
   * const a = tf.tensor2d([[1, 5], [4, 3]]);
   * const {values, indices} = tf.topk(a);
   * values.print();
   * indices.print();
   * ```
   * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.
   * @param k Number of top elements to look for along the last dimension.
   * @param sorted If true, the resulting `k` elements will be sorted by the
   *     values in descending order.
   */
  /** @doc {heading: 'Operations', subheading: 'Evaluation'} */
  function topk_(x, k, sorted) {
      if (k === void 0) { k = 1; }
      if (sorted === void 0) { sorted = true; }
      var $x = convertToTensor(x, 'x', 'topk');
      if ($x.rank === 0) {
          throw new Error('topk() expects the input to be of rank 1 or higher');
      }
      var lastDim = $x.shape[$x.shape.length - 1];
      if (k > lastDim) {
          throw new Error("'k' passed to topk() must be <= the last dimension (" + lastDim + ") " +
              ("but got " + k));
      }
      var inputs = { x: $x };
      var attrs = { k: k, sorted: sorted };
      var _a = ENGINE.runKernelFunc(function (b) { return b.topk($x, k, sorted); }, inputs, null /* grad */, TopK, attrs), values = _a[0], indices = _a[1];
      return { values: values, indices: indices };
  }
  var topk = op({ topk_: topk_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a `tf.Tensor` with values sampled from a truncated normal
   * distribution.
   *
   * ```js
   * tf.truncatedNormal([2, 2]).print();
   * ```
   *
   * The generated values follow a normal distribution with specified mean and
   * standard deviation, except that values whose magnitude is more than 2
   * standard deviations from the mean are dropped and re-picked.
   *
   * @param shape An array of integers defining the output tensor shape.
   * @param mean The mean of the normal distribution.
   * @param stdDev The standard deviation of the normal distribution.
   * @param dtype The data type of the output tensor.
   * @param seed The seed for the random number generator.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function truncatedNormal_(shape, mean, stdDev, dtype, seed) {
      if (mean === void 0) { mean = 0; }
      if (stdDev === void 0) { stdDev = 1; }
      if (dtype != null && dtype === 'bool') {
          throw new Error("Unsupported data type $ { dtype }");
      }
      var randGauss = new MPRandGauss(mean, stdDev, dtype, true /* truncated */, seed);
      var res = buffer(shape, dtype);
      for (var i = 0; i < res.values.length; i++) {
          res.values[i] = randGauss.nextValue();
      }
      return res.toTensor();
  }
  var truncatedNormal = op({ truncatedNormal_: truncatedNormal_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.
   *
   * ```js
   * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   *
   * tf.unstack(a).forEach(tensor => tensor.print());
   * ```
   *
   * @param x A tensor object.
   * @param axis The axis to unstack along. Defaults to 0 (the first dim).
   */
  /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */
  function unstack_(x, axis) {
      if (axis === void 0) { axis = 0; }
      var $x = convertToTensor(x, 'x', 'unstack');
      assert(axis >= -$x.shape.length && axis < $x.shape.length, function () {
          return "Axis = " + axis + " is not in [-" + $x.shape.length + ", " + $x.shape.length + ")";
      });
      if (axis < 0) {
          axis += $x.shape.length;
      }
      var inputs = { value: $x };
      var attrs = { axis: axis };
      var forward = function (backend) {
          return backend.unstack($x, axis);
      };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Unpack, attrs);
  }
  var unstack = op({ unstack_: unstack_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a new variable with the provided initial value.
   * ```js
   * const x = tf.variable(tf.tensor([1, 2, 3]));
   * x.assign(tf.tensor([4, 5, 6]));
   *
   * x.print();
   * ```
   *
   * @param initialValue Initial value for the tensor.
   * @param trainable If true, optimizers are allowed to update it.
   * @param name Name of the variable. Defaults to a unique id.
   * @param dtype If set, initialValue will be converted to the given type.
   */
  /** @doc {heading: 'Tensors', subheading: 'Creation'} */
  function variable(initialValue, trainable, name, dtype) {
      if (trainable === void 0) { trainable = true; }
      return ENGINE.makeVariable(initialValue, trainable, name, dtype);
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function whereImpl(condShape, condVals) {
      var indices = [];
      for (var i = 0; i < condVals.length; i++) {
          if (condVals[i]) {
              indices.push(i);
          }
      }
      var inBuffer = buffer(condShape, 'int32');
      var out = buffer([indices.length, condShape.length], 'int32');
      for (var i = 0; i < indices.length; i++) {
          var loc = inBuffer.indexToLoc(indices[i]);
          var offset = i * condShape.length;
          out.values.set(loc, offset);
      }
      return out.toTensor();
  }

  /**
   * Returns the coordinates of true elements of condition.
   *
   * The coordinates are returned in a 2-D tensor where the first dimension (rows)
   * represents the number of true elements, and the second dimension (columns)
   * represents the coordinates of the true elements. Keep in mind, the shape of
   * the output tensor can vary depending on how many true values there are in
   * input. Indices are output in row-major order. The resulting tensor has the
   * shape `[numTrueElems, condition.rank]`.
   *
   * This is analogous to calling the python `tf.where(cond)` without an x or y.
   *
   * ```js
   * const cond = tf.tensor1d([false, false, true], 'bool');
   * const result = await tf.whereAsync(cond);
   * result.print();
   * ```
   */
  /** @doc {heading: 'Operations', subheading: 'Logical'} */
  function whereAsync_(condition) {
      return __awaiter(this, void 0, void 0, function () {
          var $condition, vals, res;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      $condition = convertToTensor(condition, 'condition', 'whereAsync', 'bool');
                      return [4 /*yield*/, $condition.data()];
                  case 1:
                      vals = _a.sent();
                      res = whereImpl($condition.shape, vals);
                      if (condition !== $condition) {
                          $condition.dispose();
                      }
                      return [2 /*return*/, res];
              }
          });
      });
  }
  var whereAsync = whereAsync_;

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Apply boolean mask to tensor.
   *
   * ```js
   * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);
   * const mask = tf.tensor1d([1, 0, 1], 'bool');
   * const result = await tf.booleanMaskAsync(tensor, mask);
   * result.print();
   * ```
   *
   * @param tensor N-D tensor.
   * @param mask K-D boolean tensor, K <= N and K must be known statically.
   * @param axis A 0-D int Tensor representing the axis in tensor to mask from.
   *     By default, axis is 0 which will mask from the first dimension.
   *     Otherwise K + axis <= N.
   */
  /** @doc {heading: 'Tensors', subheading: 'Slicing and Joining'} */
  function booleanMaskAsync_(tensor, mask, axis) {
      return __awaiter(this, void 0, void 0, function () {
          var $tensor, $mask, axisFrom, maskDim, tensorShape, leadingSize, i, targetTensorShape, reshapedTensor, reshapedMask, positivePositions, indices, res;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      $tensor = convertToTensor(tensor, 'tensor', 'boolMask');
                      $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');
                      axisFrom = axis == null ? 0 : axis;
                      maskDim = $mask.rank;
                      tensorShape = $tensor.shape;
                      assert(maskDim > 0, function () { return 'mask cannot be scalar'; });
                      assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, "mask's shape must match the first K dimensions of tensor's shape,");
                      leadingSize = 1;
                      for (i = axisFrom; i < axisFrom + maskDim; i++) {
                          leadingSize *= tensorShape[i];
                      }
                      targetTensorShape = tensorShape.slice(0, axisFrom)
                          .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));
                      reshapedTensor = $tensor.reshape(targetTensorShape);
                      reshapedMask = $mask.reshape([-1]);
                      return [4 /*yield*/, whereAsync(reshapedMask)];
                  case 1:
                      positivePositions = _a.sent();
                      indices = positivePositions.squeeze([1]);
                      res = gather(reshapedTensor, indices, axisFrom);
                      // Ensure no memory leak.
                      if (tensor !== $tensor) {
                          $tensor.dispose();
                      }
                      if (mask !== $mask) {
                          $mask.dispose();
                      }
                      indices.dispose();
                      reshapedTensor.dispose();
                      reshapedMask.dispose();
                      positivePositions.dispose();
                      return [2 /*return*/, res];
              }
          });
      });
  }
  var booleanMaskAsync = booleanMaskAsync_;

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated
   * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same
   * shape.
   *
   * @param a The first input tensor.
   * @param b The second input tensor. Must have the same shape and dtype as
   *     `a`.
   */
  function notEqualStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'notEqualStrict');
      var $b = convertToTensor(b, 'b', 'notEqualStrict');
      assertShapesMatch($a.shape, $b.shape, 'Error in notEqualStrict: ');
      return $a.notEqual($b);
  }
  /**
   * @deprecated
   * Strict version of `tf.less` that forces `a` and `b` to be of the same
   * shape.
   *
   * @param a The first input tensor.
   * @param b The second input tensor. Must have the same shape and dtype as
   *     `a`.
   */
  function lessStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'lessStrict');
      var $b = convertToTensor(b, 'b', 'lessStrict');
      assertShapesMatch($a.shape, $b.shape, 'Error in lessStrict: ');
      return $a.less($b);
  }
  function equalStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'equalStrict');
      var $b = convertToTensor(b, 'b', 'equalStrict');
      assertShapesMatch($a.shape, $b.shape, 'Error in equalStrict: ');
      return $a.equal($b);
  }
  function lessEqualStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'lessEqualStrict');
      var $b = convertToTensor(b, 'b', 'lessEqualStrict');
      assertShapesMatch($a.shape, $b.shape, 'Error in lessEqualStrict: ');
      return $a.lessEqual($b);
  }
  function greaterStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'greaterStrict');
      var $b = convertToTensor(b, 'b', 'greaterStrict');
      assertShapesMatch($a.shape, $b.shape, 'Error in greaterStrict: ');
      return $a.greater($b);
  }
  function greaterEqualStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'greaterEqualStrict');
      var $b = convertToTensor(b, 'b', 'greaterEqualStrict');
      assertShapesMatch($a.shape, $b.shape, 'Error in greaterEqualStrict: ');
      return $a.greaterEqual($b);
  }
  var equalStrict = op({ equalStrict_: equalStrict_ });
  var greaterEqualStrict = op({ greaterEqualStrict_: greaterEqualStrict_ });
  var greaterStrict = op({ greaterStrict_: greaterStrict_ });
  var lessEqualStrict = op({ lessEqualStrict_: lessEqualStrict_ });
  var lessStrict = op({ lessStrict_: lessStrict_ });
  var notEqualStrict = op({ notEqualStrict_: notEqualStrict_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated
   * Adds two `tf.Tensor`s element-wise, A + B.
   *
   * Inputs must be the same shape. For broadcasting support, use add() instead.
   *
   * @param a The first Tensor to add element-wise.
   * @param b The second Tensor to add element-wise.
   */
  function addStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'addStrict');
      var $b = convertToTensor(b, 'b', 'addStrict');
      assertShapesMatch($a.shape, $b.shape, 'Error in addStrict: ');
      return $a.add($b);
  }
  /**
   * @deprecated
   * Subtracts two `tf.Tensor`s element-wise, A - B. Inputs must
   * be the same shape.
   *
   * For broadcasting support, use `tf.sub` instead.
   *
   * @param a The first Tensor to subtract element-wise.
   * @param b The second Tensor to subtract element-wise.
   */
  function subStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'subStrict');
      var $b = convertToTensor(b, 'b', 'subStrict');
      assertShapesMatch($a.shape, $b.shape, 'Error in subStrict: ');
      return $a.sub($b);
  }
  /**
   * @deprecated
   * Computes the power of one `tf.Tensor` to another. Inputs must
   * be the same shape.
   *
   * For broadcasting support, use `tf.pow` instead.
   *
   * @param base The base tensor to pow element-wise.
   * @param exp The exponent tensor to pow element-wise.
   */
  function powStrict_(base, exp) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      assertShapesMatch(base.shape, exp.shape, 'Error in powStrict: ');
      return base.pow(exp);
  }
  /**
   * @deprecated
   * Multiplies two `tf.Tensor`s element-wise, A * B.
   *
   * Inputs must be the same shape. For broadcasting support, use `tf.mul`.
   *
   * @param a The first tensor to multiply.
   * @param b The first tensor to multiply. Must have the same
   *    dtype as `a`.
   */
  function mulStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'mul');
      var $b = convertToTensor(b, 'b', 'mul');
      assertShapesMatch($a.shape, $b.shape, 'Error in multiplyStrict: ');
      return $a.mul($b);
  }
  /**
   * @deprecated
   * Divides two `tf.Tensor`s element-wise, A / B. Inputs must
   * be the same shape.
   *
   * @param a The first tensor as the numerator for element-wise division.
   * @param b The second tensor as the denominator for element-wise division.
   */
  function divStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'div');
      var $b = convertToTensor(b, 'b', 'div');
      assertShapesMatch($a.shape, $b.shape, 'Error in divideStrict: ');
      return $a.div($b);
  }
  /**
   * @deprecated
   * Returns the mod of a and b (`a < b ? a : b`) element-wise. Inputs must
   * be the same shape. For broadcasting support, use mod().
   *
   * @param a The first tensor.
   * @param b The second tensor. Must have the same dtype as `a`.
   */
  function modStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'modStrict');
      var $b = convertToTensor(b, 'b', 'modStrict');
      assertShapesMatch($a.shape, $b.shape, 'Error in modStrict: ');
      return $a.mod($b);
  }
  /**
   * @deprecated
   * Returns the min of a and b (`a < b ? a : b`) element-wise. Inputs must
   * be the same shape. For broadcasting support, use minimum().
   *
   * @param a The first tensor.
   * @param b The second tensor. Must have the same dtype as `a`.
   */
  function minimumStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'minimumStrict');
      var $b = convertToTensor(b, 'b', 'minimumStrict');
      assertShapesMatch($a.shape, $b.shape, 'Error in minimumStrict: ');
      return $a.minimum($b);
  }
  /**
   * @deprecated
   * Returns the max of a and b (`a > b ? a : b`) element-wise. Inputs must
   * be the same shape. For broadcasting support, use maximum().
   *
   * @param a The first tensor.
   * @param b The second tensor. Must have the same dtype as `a`.
   */
  function maximumStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'maximumStrict');
      var $b = convertToTensor(b, 'b', 'maximumStrict');
      assertShapesMatch($a.shape, $b.shape, 'Error in maximumStrict: ');
      return $a.maximum($b);
  }
  /**
   * @deprecated
   * Returns (a - b) * (a - b) element-wise.
   *
   * Inputs must be the same shape. For broadcasting support, use
   * `tf.squaredDifference` instead.
   *
   * @param a The first tensor.
   * @param b The second tensor. Must have the same type as `a`.
   */
  function squaredDifferenceStrict_(a, b) {
      deprecationWarn('strict variants of ops have been deprecated ' +
          'and will be removed in future');
      var $a = convertToTensor(a, 'a', 'squaredDifferenceStrict');
      var $b = convertToTensor(b, 'b', 'squaredDifferenceStrict');
      assertShapesMatch($a.shape, $b.shape, 'Error in squaredDifferenceStrict: ');
      return $a.squaredDifference($b);
  }
  var addStrict = op({ addStrict_: addStrict_ });
  var divStrict = op({ divStrict_: divStrict_ });
  var maximumStrict = op({ maximumStrict_: maximumStrict_ });
  var minimumStrict = op({ minimumStrict_: minimumStrict_ });
  var modStrict = op({ modStrict_: modStrict_ });
  var mulStrict = op({ mulStrict_: mulStrict_ });
  var powStrict = op({ powStrict_: powStrict_ });
  var squaredDifferenceStrict = op({ squaredDifferenceStrict_: squaredDifferenceStrict_ });
  var subStrict = op({ subStrict_: subStrict_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the norm of scalar, vectors, and matrices.
   * This function can compute several different vector norms (the 1-norm, the
   * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)
   * and matrix norms (Frobenius, 1-norm, and inf-norm).
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 3, 4]);
   *
   * x.norm().print();  // or tf.norm(x)
   * ```
   *
   * @param x The input array.
   * @param ord Optional. Order of the norm. Supported norm types are
   * following:
   *
   *  | ord        | norm for matrices         | norm for vectors
   *  |------------|---------------------------|---------------------
   *  |'euclidean' |Frobenius norm             |2-norm
   *  |'fro'       |Frobenius norm	           |
   *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))
   *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))
   *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))
   *  |2           |                           |sum(abs(x)^2)^1/2*
   *
   * @param axis Optional. If axis is null (the default), the input is
   * considered a vector and a single vector norm is computed over the entire
   * set of values in the Tensor, i.e. norm(x, ord) is equivalent
   * to norm(x.reshape([-1]), ord). If axis is a integer, the input
   * is considered a batch of vectors, and axis determines the axis in x
   * over which to compute vector norms. If axis is a 2-tuple of integer it is
   * considered a batch of matrices and axis determines the axes in NDArray
   * over which to compute a matrix norm.
   * @param keepDims Optional. If true, the norm have the same dimensionality
   * as the input.
   */
  /** @doc {heading: 'Operations', subheading: 'Matrices'} */
  function norm_(x, ord, axis, keepDims) {
      if (ord === void 0) { ord = 'euclidean'; }
      if (axis === void 0) { axis = null; }
      if (keepDims === void 0) { keepDims = false; }
      x = convertToTensor(x, 'x', 'norm');
      var norm = normImpl(x, ord, axis);
      var keepDimsShape = norm.shape;
      if (keepDims) {
          var axes = parseAxisParam(axis, x.shape);
          keepDimsShape = expandShapeToKeepDim(norm.shape, axes);
      }
      return norm.reshape(keepDimsShape);
  }
  function normImpl(x, p, axis) {
      if (axis === void 0) { axis = null; }
      if (x.rank === 0) {
          return abs(x);
      }
      // consider vector when no axis is specified
      if (x.rank !== 1 && axis === null) {
          return normImpl(reshape(x, [-1]), p, axis);
      }
      // vector
      if (x.rank === 1 || typeof axis === 'number' ||
          Array.isArray(axis) && axis.length === 1) {
          if (p === 1) {
              return sum$1(abs(x), axis);
          }
          if (p === Infinity) {
              return max(abs(x), axis);
          }
          if (p === -Infinity) {
              return min(abs(x), axis);
          }
          if (p === 'euclidean' || p === 2) {
              // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2
              return sqrt(sum$1(pow(abs(x), scalar(2, 'int32')), axis));
          }
          throw new Error("Error in norm: invalid ord value: " + p);
      }
      // matrix (assumption axis[0] < axis[1])
      if (Array.isArray(axis) && axis.length === 2) {
          if (p === 1) {
              return max(sum$1(abs(x), axis[0]), axis[1] - 1);
          }
          if (p === Infinity) {
              return max(sum$1(abs(x), axis[1]), axis[0]);
          }
          if (p === -Infinity) {
              return min(sum$1(abs(x), axis[1]), axis[0]);
          }
          if (p === 'fro' || p === 'euclidean') {
              // norm(x) = sqrt(sum(pow(x, 2)))
              return sqrt(sum$1(square(x), axis));
          }
          throw new Error("Error in norm: invalid ord value: " + p);
      }
      throw new Error("Error in norm: invalid axis: " + axis);
  }
  var norm = op({ norm_: norm_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Compute the moving average of a variable.
   *
   * Without zeroDebias, the moving average operation is defined by:
   *   `v += delta`
   * where
   *   `delta = (1 - decay) * (x - v)`
   *
   * With zeroDebias (default), the `delta` term is scaled to debias the
   * effect of the (assumed) zero-initialization of `v`.
   *   `delta /= (1 - decay ^ step)`
   *
   * For more details on the zero-debiasing algorithm, see:
   *   https://arxiv.org/abs/1412.6980
   *
   * Note that this function is completely stateless and does not keep track of
   * step count. The step count needs to be maintained by the caller and passed
   * in as `step`.
   *
   * @param v The current moving average value.
   * @param x New input value, must have the same shape and dtype as `v`.
   * @param decay The decay factor. Typical values are 0.95 and 0.99.
   * @param step Step count.
   * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).
   * @returns The new moving average value.
   */
  /** @doc {heading: 'Operations', subheading: 'Moving Average'} */
  function movingAverage_(v, x, decay, step, zeroDebias) {
      if (zeroDebias === void 0) { zeroDebias = true; }
      var $v = convertToTensor(v, 'v', 'movingAverage');
      var $x = convertToTensor(x, 'x', 'movingAverage');
      var $decay = convertToTensor(decay, 'decay', 'movingAverage');
      assertTypesMatch($v, $x);
      assert(arraysEqual($v.shape, $x.shape), function () { return 'Shape mismatch in v and x'; });
      var one = scalar(1);
      var oneMinusDecay = sub(one, $decay);
      var update = mul(sub($x, $v), oneMinusDecay);
      if (zeroDebias) {
          assert(step != null, function () { return 'When using zeroDebias: true, step is required.'; });
          var $step = convertToTensor(step, 'step', 'movingAverage');
          update = div(update, sub(one, pow($decay, $step)));
      }
      return add($v, update);
  }
  var movingAverage = op({ movingAverage_: movingAverage_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Creates a new tensor by applying sparse updates to individual
   * values or slices within a zero tensor of the given shape tensor according to
   * indices. This operator is the inverse of the `tf.gatherND` operator which
   * extracts values or slices from a given tensor.
   *
   * ```js
   * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');
   * const updates = tf.tensor1d([9, 10, 11, 12]);
   * const shape = [8];
   * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]
   * ```
   *
   * @param indices The tensor contains the indices into the output tensor.
   * @param updates The tensor contains the value for the indices.
   * @param shape: The shape of the output tensor.
   */
  /** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */
  function scatterND_(indices, updates, shape) {
      var $indices = convertToTensor(indices, 'indices', 'scatterND', 'int32');
      var $updates = convertToTensor(updates, 'updates', 'scatterND');
      validateInput($updates, $indices, shape);
      var forward = function (backend) {
          return backend.scatterND($indices, $updates, shape);
      };
      var inputs = { indices: $indices, updates: $updates };
      var attrs = { shape: shape };
      return ENGINE.runKernelFunc(forward, inputs, null /* grad */, ScatterNd, attrs);
  }
  var scatterND = op({ scatterND_: scatterND_ });

  /**
   * Validate sparseToDense inputs.
   *
   * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
   * sparseIndices[i] contains the complete index where sparseValues[i] will be
   * placed.
   * @param sparseValues A 0-D or 1-D Tensor. Values
   * corresponding to each row of sparseIndices, or a scalar value to be used for
   * all sparse indices.
   * @param outputShape number[]. Shape of the dense output tensor.
   * @param validateIndices boolean. indice validation is not supported, error
   * will be thrown if it is set.
   */
  function validateInput$1(sparseIndices, sparseValues, outputShape, defaultValues) {
      if (sparseIndices.dtype !== 'int32') {
          throw new Error('tf.sparseToDense() expects the indices to be int32 type,' +
              (" but the dtype was " + sparseIndices.dtype + "."));
      }
      if (sparseIndices.rank > 2) {
          throw new Error('sparseIndices should be a scalar, vector, or matrix,' +
              (" but got shape " + sparseIndices.shape + "."));
      }
      var numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;
      var numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;
      if (outputShape.length !== numDims) {
          throw new Error('outputShape has incorrect number of elements:,' +
              (" " + outputShape.length + ", should be: " + numDims + "."));
      }
      var numValues = sparseValues.size;
      if (!(sparseValues.rank === 0 ||
          sparseValues.rank === 1 && numValues === numElems)) {
          throw new Error('sparseValues has incorrect shape ' +
              (sparseValues.shape + ", should be [] or [" + numElems + "]"));
      }
      if (sparseValues.dtype !== defaultValues.dtype) {
          throw new Error('sparseValues.dtype must match defaultValues.dtype');
      }
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Converts a sparse representation into a dense tensor.
   *
   * Builds an array dense with shape outputShape such that:
   *
   * // If sparseIndices is scalar
   * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)
   *
   * // If sparseIndices is a vector, then for each i
   * dense[sparseIndices[i]] = sparseValues[i]
   *
   * // If sparseIndices is an n by d matrix, then for each i in [0, n)
   * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]
   * All other values in dense are set to defaultValue. If sparseValues is a
   * scalar, all sparse indices are set to this single value.
   *
   * If indices are repeated the final value is summed over all values for those
   * indices.
   *
   * ```js
   * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');
   * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');
   * const shape = [8];
   * tf.sparseToDense(indices, values, shape).print();
   * ```
   *
   * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
   * sparseIndices[i] contains the complete index where sparseValues[i] will be
   * placed.
   * @param sparseValues A 0-D or 1-D Tensor. Values
   * corresponding to each row of sparseIndices, or a scalar value to be used for
   * all sparse indices.
   * @param outputShape Shape of the dense output tensor. the type is inferred.
   * @param defaultValue Scalar. Value to set for indices not specified in
   * sparseIndices. Defaults to zero.
   */
  /** @doc {heading: 'Operations', subheading: 'Normalization'} */
  function sparseToDense_(sparseIndices, sparseValues, outputShape, defaultValue) {
      if (defaultValue === void 0) { defaultValue = 0; }
      var $sparseIndices = convertToTensor(sparseIndices, 'sparseIndices', 'sparseToDense', 'int32');
      var $sparseValues = convertToTensor(sparseValues, 'sparseValues', 'sparseToDense');
      var $defaultValue = convertToTensor(defaultValue, 'defaultValue', 'sparseToDense', $sparseValues.dtype);
      validateInput$1($sparseIndices, $sparseValues, outputShape, $defaultValue);
      var inputs = {
          sparseIndices: $sparseIndices,
          sparseValues: $sparseValues,
          defaultValue: $defaultValue
      };
      var attrs = { outputShape: outputShape };
      return ENGINE.runKernelFunc(function (backend) { return backend.sparseToDense($sparseIndices, $sparseValues, outputShape, $defaultValue); }, inputs, null /* grad */, SparseToDense, attrs);
  }
  var sparseToDense = op({ sparseToDense_: sparseToDense_ });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Gather slices from input tensor into a Tensor with shape specified by
   * `indices`.
   *
   * `indices` is an K-dimensional integer tensor, best thought of as a
   * (K-1)-dimensional tensor of indices into input, where each element defines a
   * slice of input:
   * output[\\(i_0, ..., i_{K-2}\\)] = input[indices[\\(i_0, ..., i_{K-2}\\)]]
   *
   * Whereas in `tf.gather`, `indices` defines slices into the first dimension of
   * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions
   * of input, where N = indices.shape[-1].
   *
   * The last dimension of indices can be at most the rank of input:
   * indices.shape[-1] <= input.rank
   *
   * The last dimension of `indices` corresponds to elements
   * (if indices.shape[-1] == input.rank) or slices
   * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of
   * input.
   * The output tensor has shape
   * indices.shape[:-1] + input.shape[indices.shape[-1]:]
   *
   * Note that on CPU, if an out of bound index is found, an error is returned. On
   * GPU, if an out of bound index is found, a 0 is stored in the corresponding
   * output value.
   *
   * ```js
   * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');
   * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);
   * tf.gatherND(input, indices).print() // [10, 11]
   * ```
   *
   * @param x The tensor from which to gather values.
   * @param indices Index tensor, must be of type int32.
   */
  /** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */
  function gatherND_(x, indices) {
      var $indices = convertToTensor(indices, 'indices', 'gatherND', 'int32');
      var $x = convertToTensor(x, 'x', 'gatherND');
      var forward = function (backend) {
          return backend.gatherND($x, $indices);
      };
      var inputs = { params: $x, indices: $indices };
      return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, GatherNd);
  }
  var gatherND = op({ gatherND_: gatherND_ });

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Normalize noise shape based on provided tensor and noise shape.
   *
   * @param x Tensor.
   * @param noiseShape The shape for the randomly generated keep/drop flags, as
   *   an array of numbers. Optional.
   * @returns Normalized noise shape.
   */
  function getNoiseShape(x, noiseShape) {
      if (noiseShape == null) {
          return x.shape.slice();
      }
      if (arraysEqual(x.shape, noiseShape)) {
          return noiseShape;
      }
      if (x.shape.length === noiseShape.length) {
          var newDimension = [];
          for (var i = 0; i < x.shape.length; i++) {
              if (noiseShape[i] == null && x.shape[i] != null) {
                  newDimension.push(x.shape[i]);
              }
              else {
                  newDimension.push(noiseShape[i]);
              }
          }
          return newDimension;
      }
      return noiseShape;
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes dropout.
   *
   * ```js
   * const x = tf.tensor1d([1, 2, 2, 1]);
   * const rate = 0.75;
   * const output = tf.dropout(x, rate);
   * output.print();
   * ```
   *
   * @param x A floating point Tensor or TensorLike.
   * @param rate A float in the range [0, 1). The probability that each element
   *   of x is discarded.
   * @param noiseShape An array of numbers of type int32, representing the
   * shape for randomly generated keep/drop flags. If the noiseShape has null
   * value, it will be automatically replaced with the x's relative dimension
   * size. Optional.
   * @param seed Used to create random seeds. Optional.
   * @returns A Tensor of the same shape of x.
   */
  /** @doc {heading: 'Operations', subheading: 'Dropout'} */
  function dropout_(x, rate, noiseShape, seed) {
      var $x = convertToTensor(x, 'x', 'dropout');
      assert($x.dtype === 'float32', function () { return "x has to be a floating point tensor since it's going to be " +
          ("scaled, but got a " + $x.dtype + " tensor instead."); });
      assert(rate >= 0 && rate < 1, function () { return "rate must be a float in the range [0, 1), but got " + rate + "."; });
      if (rate === 0) {
          return x instanceof Tensor ? $x.clone() : $x;
      }
      var $noiseShape = getNoiseShape($x, noiseShape);
      var keepProb = 1 - rate;
      var multiplier = randomUniform($noiseShape, 0, 1, 'float32', seed)
          .add(keepProb)
          .floor()
          .div(keepProb);
      return $x.mul(multiplier);
  }
  var dropout = op({ dropout_: dropout_ });

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function enclosingPowerOfTwo(value) {
      // Return 2**N for integer N such that 2**N >= value.
      return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));
  }
  function cosineWindow(windowLength, a, b) {
      var even = 1 - windowLength % 2;
      var newValues = new Float32Array(windowLength);
      for (var i = 0; i < windowLength; ++i) {
          var cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);
          newValues[i] = a - b * Math.cos(cosArg);
      }
      return tensor1d(newValues, 'float32');
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Returns whether the targets are in the top K predictions.
   *
   * ```js
   * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);
   * const targets = tf.tensor1d([2, 0]);
   * const precision = await tf.inTopKAsync(predictions, targets);
   * precision.print();
   * ```
   * @param predictions 2-D or higher `tf.Tensor` with last dimension being
   *     at least `k`.
   * @param targets 1-D or higher `tf.Tensor`.
   * @param k Optional Number of top elements to look at for computing precision,
   *     default to 1.
   */
  /** @doc {heading: 'Operations', subheading: 'Evaluation'} */
  function inTopKAsync_(predictions, targets, k) {
      if (k === void 0) { k = 1; }
      return __awaiter(this, void 0, void 0, function () {
          var $predictions, $targets, lastDim, predictionsVals, targetsVals, _a, batch, size, precision, b, offset, vals, valAndInd, i, i;
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      $predictions = convertToTensor(predictions, 'predictions', 'inTopK');
                      $targets = convertToTensor(targets, 'targets', 'inTopK');
                      assert($predictions.rank > 1, function () { return 'inTopK() expects the predictions to be of rank 2 or higher, ' +
                          ("but got " + $predictions.rank); });
                      assert($predictions.rank - 1 === $targets.rank, function () { return "predictions rank should be 1 larger than " +
                          "targets rank, but got predictions rank " +
                          ($predictions.rank + " and targets rank " + $targets.rank); });
                      assertShapesMatch($predictions.shape.slice(0, $predictions.shape.length - 1), $targets.shape, "predictions's shape should be align with the targets' shape, " +
                          'except the last dimension.');
                      lastDim = $predictions.shape[$predictions.shape.length - 1];
                      assert(k > 0 && k <= lastDim, function () { return "'k' passed to inTopK() must be > 0 && <= the predictions last " +
                          ("dimension (" + lastDim + "), but got " + k); });
                      return [4 /*yield*/, $predictions.data()];
                  case 1:
                      predictionsVals = _b.sent();
                      return [4 /*yield*/, $targets.data()];
                  case 2:
                      targetsVals = _b.sent();
                      _a = [predictionsVals.length / lastDim, lastDim], batch = _a[0], size = _a[1];
                      precision = getTypedArrayFromDType('bool', batch);
                      for (b = 0; b < batch; b++) {
                          offset = b * size;
                          vals = predictionsVals.subarray(offset, offset + size);
                          valAndInd = [];
                          for (i = 0; i < vals.length; i++) {
                              valAndInd.push({ value: vals[i], index: i });
                          }
                          valAndInd.sort(function (a, b) { return b.value - a.value; });
                          precision[b] = 0;
                          for (i = 0; i < k; i++) {
                              if (valAndInd[i].index === targetsVals[b]) {
                                  precision[b] = 1;
                                  break;
                              }
                          }
                      }
                      if (predictions !== $predictions) {
                          $predictions.dispose();
                      }
                      if (targets !== $targets) {
                          $targets.dispose();
                      }
                      // Output precision has the same shape as targets.
                      return [2 /*return*/, tensor(precision, $targets.shape, 'bool')];
              }
          });
      });
  }
  var inTopKAsync = inTopKAsync_;

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // Returns gradient for fused activation.
  function getFusedDyActivation(dy, y, activation) {
      if (activation == null || activation === 'linear') {
          return dy;
      }
      if (activation === 'relu') {
          return dy.mul(y.step());
      }
      throw new Error("Cannot compute gradient for fused activation " + activation + ".");
  }
  // Returns gradient for fused bias.
  function getFusedBiasGradient(bias, dyActivation) {
      var res = dyActivation;
      var reduceAxes = getReductionAxes(bias.shape, dyActivation.shape);
      if (reduceAxes.length > 0) {
          res = res.sum(reduceAxes);
      }
      return res.reshape(bias.shape);
  }
  function applyActivation(x, activation, preluActivationWeights) {
      if (activation === 'linear') {
          return x;
      }
      else if (activation === 'relu') {
          return relu(x);
      }
      else if (activation === 'elu') {
          return elu(x);
      }
      else if (activation === 'relu6') {
          return relu6(x);
      }
      else if (activation === 'prelu') {
          return prelu(x, preluActivationWeights);
      }
      throw new Error("Unknown fused activation " + activation + ".");
  }
  // Whether we should call fused ops.
  var shouldFuse = function (gradientDepth, activation) {
      var gradientMode = gradientDepth > 0;
      return !gradientMode || activation === 'linear';
  };

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes a 2D convolution over the input x, optionally fused with adding a
   * bias and applying an activation.
   *
   * ```js
   * const inputDepth = 2;
   * const inShape = [2, 2, 2, inputDepth];
   * const outputDepth = 2;
   * const fSize = 1;
   * const pad = 0;
   * const strides = 1;
   *
   * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
   * 16], inShape);
   * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,
   * outputDepth]);
   *
   * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',
   * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();
   * ```
   *
   * @param obj An object with the following properties:
   * @param x The input tensor, of rank 4 or rank 3, of shape
   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
   * assumed.
   * @param filter The filter, rank 4, of shape
   *     `[filterHeight, filterWidth, inDepth, outDepth]`.
   * @param strides The strides of the convolution: `[strideHeight,
   * strideWidth]`.
   * @param pad The type of padding algorithm.
   *   - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *   - `valid` output will be smaller than input if filter is larger
   *       than 1x1.
   *   - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to
   *     "NHWC". Specify the data format of the input and output data. With the
   *     default format "NHWC", the data is stored in the order of: [batch,
   *     height, width, channels]. Only "NHWC" is currently supported.
   * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
   *     in which we sample input values across the height and width dimensions
   *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
   *     number, then `dilationHeight == dilationWidth`. If it is greater than
   *     1, then all values of `strides` must be 1.
   * @param dimRoundingMode The rounding mode used when computing output
   *     dimensions if pad is a number. If none is provided, it will not round
   *     and error if the output is of fractional size.
   * @param bias Tensor to be added to the result.
   * @param activation Name of activation kernel (defaults to `linear`) to be
   *     applied
   *      after biasAdd.
   * @param preluActivationWeights Tensor of prelu weights to be applied as part
   *     of a `prelu` activation, typically the same shape as `x`.
   */
  function fusedConv2d_(_a) {
      var x = _a.x, filter = _a.filter, strides = _a.strides, pad = _a.pad, _b = _a.dataFormat, dataFormat = _b === void 0 ? 'NHWC' : _b, _c = _a.dilations, dilations = _c === void 0 ? [1, 1] : _c, dimRoundingMode = _a.dimRoundingMode, bias = _a.bias, _d = _a.activation, activation = _d === void 0 ? 'linear' : _d, preluActivationWeights = _a.preluActivationWeights;
      activation = activation || 'linear';
      if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {
          var result = conv2d(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
          if (bias != null) {
              result = add(result, bias);
          }
          return applyActivation(result, activation, preluActivationWeights);
      }
      var $x = convertToTensor(x, 'x', 'conv2d');
      var $filter = convertToTensor(filter, 'filter', 'conv2d');
      var x4D = $x;
      var reshapedTo4D = false;
      if ($x.rank === 3) {
          reshapedTo4D = true;
          x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);
      }
      assert(x4D.rank === 4, function () { return "Error in fused conv2d: input must be rank 4, but got rank " +
          (x4D.rank + "."); });
      assert($filter.rank === 4, function () { return "Error in fused conv2d: filter must be rank 4, but got rank " +
          ($filter.rank + "."); });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in fused conv2d: pad must be an integer when using, " +
              ("dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      assert(x4D.shape[3] === $filter.shape[2], function () { return "Error in conv2d: depth of input (" + x4D.shape[3] + ") must match " +
          ("input depth for filter " + $filter.shape[2] + "."); });
      assert(eitherStridesOrDilationsAreOne(strides, dilations), function () { return 'Error in conv2D: Either strides or dilations must be 1. ' +
          ("Got strides " + strides + " and dilations '" + dilations + "'"); });
      assert(dataFormat === 'NHWC', function () { return "Error in conv2d: got dataFormat of " + dataFormat + " but only NHWC is currently supported."; });
      var convInfo = computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);
      var $bias;
      if (bias != null) {
          $bias = convertToTensor(bias, 'bias', 'fused conv2d');
          $bias = makeTypesMatch($bias, $x)[0];
          assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
      }
      var $preluActivationWeights;
      if (preluActivationWeights != null) {
          $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused conv2d');
      }
      var grad = function (dy, saved) {
          var _a = saved, $filter = _a[0], x4D = _a[1], y = _a[2], $bias = _a[3];
          var dyActivation = getFusedDyActivation(dy, y, activation);
          assert(tupleValuesAreOne(dilations), function () { return 'Error in gradient of fused conv2D: ' +
              "dilation rates greater than 1 " +
              ("are not yet supported in gradients. Got dilations '" + dilations + "'"); });
          var xDer = conv2DBackpropInput(x4D.shape, dyActivation, $filter, strides, pad);
          var filterDer = conv2DBackpropFilter(x4D, dyActivation, $filter.shape, strides, pad);
          var der = [xDer, filterDer];
          if ($bias != null) {
              var biasDer = getFusedBiasGradient($bias, dyActivation);
              der.push(biasDer);
          }
          return der;
      };
      var forward = function (backend) {
          var res = backend.fusedConv2d({
              input: x4D,
              filter: $filter,
              convInfo: convInfo,
              bias: $bias,
              activation: activation,
              preluActivationWeights: $preluActivationWeights
          });
          return res;
      };
      var inputs = {
          x: x4D,
          filter: $filter,
          bias: $bias,
          preluActivationWeights: $preluActivationWeights
      };
      var attrs = { strides: strides, pad: pad, dataFormat: dataFormat, dilations: dilations, dimRoundingMode: dimRoundingMode, activation: activation };
      // Depending on the the params passed in we will have different number of
      // inputs and thus a a different number of elements in the gradient.
      if (bias == null) {
          var customOp = customGrad(function (x4D, filter, save) {
              var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, FusedConv2D, attrs);
              save([filter, x4D, res]);
              if (reshapedTo4D) {
                  res = res.as3D(res.shape[1], res.shape[2], res.shape[3]);
              }
              return { value: res, gradFunc: grad };
          });
          return customOp(x4D, $filter);
      }
      else {
          var customOpWithBias = customGrad(function (x4D, filter, bias, save) {
              var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, FusedConv2D, attrs);
              save([filter, x4D, res, bias]);
              if (reshapedTo4D) {
                  res = res.as3D(res.shape[1], res.shape[2], res.shape[3]);
              }
              return { value: res, gradFunc: grad };
          });
          return customOpWithBias(x4D, $filter, $bias);
      }
  }
  var conv2d$1 = op({ fusedConv2d_: fusedConv2d_ });

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes depthwise 2D convolution, optionally fused with adding a
   * bias and applying an activation.
   *
   * Given a 4D `input` array and a `filter` array of shape
   * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
   * `inChannels` convolutional filters of depth 1, this op applies a
   * different filter to each input channel (expanding from 1 channel to
   * `channelMultiplier` channels for each), then concatenates the results
   * together. The output has `inChannels * channelMultiplier` channels.
   *
   * See
   * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
   *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
   * for more details.
   *
   * @param obj An object with the following properties:
   * @param x The input tensor, of rank 4 or rank 3, of shape
   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
   * assumed.
   * @param filter The filter tensor, rank 4, of shape
   *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
   * @param strides The strides of the convolution: `[strideHeight,
   * strideWidth]`. If strides is a single number, then `strideHeight ==
   * strideWidth`.
   * @param pad The type of padding algorithm.
   *   - `same` and stride 1: output will be of same size as input,
   *       regardless of filter size.
   *   - `valid`: output will be smaller than input if filter is larger
   *       than 1x1.
   *   - For more info, see this guide:
   *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
   *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
   * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
   *     in which we sample input values across the height and width dimensions
   *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
   *     number, then `dilationHeight == dilationWidth`. If it is greater than
   *     1, then all values of `strides` must be 1.
   * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
   *     "NHWC". Specify the data format of the input and output data. With the
   *     default format "NHWC", the data is stored in the order of: [batch,
   *     height, width, channels]. Only "NHWC" is currently supported.
   * @param dimRoundingMode The rounding mode used when computing output
   *     dimensions if pad is a number. If none is provided, it will not round
   *     and error if the output is of fractional size.
   * @param bias Tensor to be added to the result.
   * @param activation Name of activation kernel (defaults to `linear`).
   * @param preluActivationWeights Tensor of prelu weights to be applied as part
   *     of a `prelu` activation, typically the same shape as `x`.
   */
  function fusedDepthwiseConv2d_(_a) {
      var x = _a.x, filter = _a.filter, strides = _a.strides, pad = _a.pad, _b = _a.dataFormat, dataFormat = _b === void 0 ? 'NHWC' : _b, _c = _a.dilations, dilations = _c === void 0 ? [1, 1] : _c, dimRoundingMode = _a.dimRoundingMode, bias = _a.bias, _d = _a.activation, activation = _d === void 0 ? 'linear' : _d, preluActivationWeights = _a.preluActivationWeights;
      if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {
          var result = depthwiseConv2d(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
          if (bias != null) {
              result = add(result, bias);
          }
          return applyActivation(result, activation, preluActivationWeights);
      }
      var $x = convertToTensor(x, 'x', 'depthwiseConv2d');
      var $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d');
      var x4D = $x;
      var reshapedTo4D = false;
      if ($x.rank === 3) {
          reshapedTo4D = true;
          x4D = $x.as4D(1, $x.shape[0], $x.shape[1], $x.shape[2]);
      }
      assert(x4D.rank === 4, function () { return "Error in fused depthwiseConv2d: input must be rank 4, but got " +
          ("rank " + x4D.rank + "."); });
      assert($filter.rank === 4, function () { return "Error in fused depthwiseConv2d: filter must be rank 4, " +
          ("but got rank " + $filter.rank + "."); });
      assert(x4D.shape[3] === $filter.shape[2], function () { return "Error in fused depthwiseConv2d: number of input channels " +
          ("(" + x4D.shape[3] + ") must match the inChannels dimension in ") +
          ("filter " + $filter.shape[2] + "."); });
      if (dilations == null) {
          dilations = [1, 1];
      }
      assert(eitherStridesOrDilationsAreOne(strides, dilations), function () {
          return 'Error in fused depthwiseConv2d: Either strides or dilations must ' +
              ("be 1. Got strides " + strides + " and dilations '" + dilations + "'");
      });
      if (dimRoundingMode != null) {
          assert(isInt(pad), function () { return "Error in fused depthwiseConv2d: pad must be an integer when " +
              ("using dimRoundingMode " + dimRoundingMode + " but got pad " + pad + "."); });
      }
      var convInfo = computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
      var $bias;
      if (bias != null) {
          $bias = convertToTensor(bias, 'bias', 'fused conv2d');
          $bias = makeTypesMatch($bias, $x)[0];
          assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
      }
      var $preluActivationWeights;
      if (preluActivationWeights != null) {
          $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');
      }
      var grad = function (dy, saved) {
          assert(tupleValuesAreOne(dilations), function () { return 'Error in gradient of fused depthwiseConv2d: dilation rates ' +
              "greater than 1 are not yet supported. Got dilations " +
              ("'" + dilations + "'"); });
          var $filter = saved[0], x4D = saved[1], y = saved[2], bias = saved[3];
          var dyActivation = getFusedDyActivation(dy, y, activation);
          var xDer = depthwiseConv2dNativeBackpropInput(x4D.shape, dyActivation, $filter, convInfo);
          var filterDer = depthwiseConv2dNativeBackpropFilter(x4D, dyActivation, $filter.shape, convInfo);
          if (bias != null) {
              var biasDer = getFusedBiasGradient($bias, dyActivation);
              return [xDer, filterDer, biasDer];
          }
          return [xDer, filterDer];
      };
      var forward = function (backend) {
          var res = backend.fusedDepthwiseConv2D({
              input: x4D,
              filter: $filter,
              convInfo: convInfo,
              bias: $bias,
              activation: activation,
              preluActivationWeights: $preluActivationWeights
          });
          return res;
      };
      var inputs = {
          x: x4D,
          filter: $filter,
          bias: $bias,
          preluActivationWeights: $preluActivationWeights
      };
      var attrs = { strides: strides, pad: pad, dataFormat: dataFormat, dilations: dilations, dimRoundingMode: dimRoundingMode, activation: activation };
      // Depending on the the params passed in we will have different number of
      // inputs and thus a a different number of elements in the gradient.
      if (bias == null) {
          var customOp = customGrad(function (x4D, filter, save) {
              var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, FusedDepthwiseConv2D, attrs);
              save([filter, x4D, res]);
              if (reshapedTo4D) {
                  res = res.as3D(res.shape[1], res.shape[2], res.shape[3]);
              }
              return { value: res, gradFunc: grad };
          });
          return customOp(x4D, $filter);
      }
      else {
          var customOpWithBias = customGrad(function (x4D, filter, bias, save) {
              var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, FusedDepthwiseConv2D, attrs);
              save([filter, x4D, res, bias]);
              if (reshapedTo4D) {
                  res = res.as3D(res.shape[1], res.shape[2], res.shape[3]);
              }
              return { value: res, gradFunc: grad };
          });
          return customOpWithBias(x4D, $filter, $bias);
      }
  }
  var depthwiseConv2d$1 = op({ fusedDepthwiseConv2d_: fusedDepthwiseConv2d_ });

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the dot product of two matrices with optional activation and bias.
   *
   * ```js
   * const a = tf.tensor2d([-1, -2], [1, 2]);
   * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
   * const bias = tf.tensor2d([1, 2], [1, 2]);
   *
   * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();
   * ```
   *
   * @param obj An object with the following properties:
   * - `a` First matrix in dot product operation.
   * - `b` Second matrix in dot product operation.
   * - `transposeA` If true, `a` is transposed before multiplication.
   * - `transposeB` If true, `b` is transposed before multiplication.
   * - `bias` Matrix to be added to the result.
   * - `activation` Name of activation kernel (defaults to `linear`).
   * - `preluActivationWeights` Tensor of prelu weights.
   */
  function fusedMatMul_(_a) {
      var _b;
      var a = _a.a, b = _a.b, _c = _a.transposeA, transposeA = _c === void 0 ? false : _c, _d = _a.transposeB, transposeB = _d === void 0 ? false : _d, bias = _a.bias, _e = _a.activation, activation = _e === void 0 ? 'linear' : _e, preluActivationWeights = _a.preluActivationWeights;
      if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {
          var result = matMul(a, b, transposeA, transposeB);
          if (bias != null) {
              result = add(result, bias);
          }
          return applyActivation(result, activation, preluActivationWeights);
      }
      var $a = convertToTensor(a, 'a', 'fused matMul');
      var $b = convertToTensor(b, 'b', 'fused matMul');
      _b = makeTypesMatch($a, $b), $a = _b[0], $b = _b[1];
      var innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];
      var innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];
      var outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];
      var outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];
      var outerDimsA = $a.shape.slice(0, -2);
      var outerDimsB = $b.shape.slice(0, -2);
      var batchDimA = sizeFromShape(outerDimsA);
      var batchDimB = sizeFromShape(outerDimsB);
      assert($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, function () {
          return "Error in fused matMul: inputs must have the same rank of at least " +
              ("2, got ranks " + $a.rank + " and " + $b.rank + ".");
      });
      assert(arraysEqual(outerDimsA, outerDimsB), function () { return "Error in fused matMul: outer dimensions (" + outerDimsA + ") and (" +
          (outerDimsB + ") of Tensors with shapes " + $a.shape + " and ") +
          ($b.shape + " must match."); });
      assert(innerShapeA === innerShapeB, function () { return "Error in fused matMul: inner shapes (" + innerShapeA + ") and (" +
          (innerShapeB + ") of Tensors with shapes " + $a.shape + " and ") +
          ($b.shape + " and transposeA=" + transposeA) +
          (" and transposeB=" + transposeB + " must match."); });
      var outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);
      var a3D = transposeA ? $a.as3D(batchDimA, innerShapeA, outerShapeA) :
          $a.as3D(batchDimA, outerShapeA, innerShapeA);
      var b3D = transposeB ? $b.as3D(batchDimB, outerShapeB, innerShapeB) :
          $b.as3D(batchDimB, innerShapeB, outerShapeB);
      var $bias;
      if (bias != null) {
          $bias = convertToTensor(bias, 'bias', 'fused matMul');
          $bias = makeTypesMatch($bias, $a)[0];
          assertAndGetBroadcastShape(outShape, $bias.shape);
      }
      var $preluActivationWeights;
      if (preluActivationWeights != null) {
          $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused matMul');
      }
      var grad = function (dy, saved) {
          var a3D = saved[0], b3D = saved[1], y = saved[2], $bias = saved[3];
          // we reshape dy because the result of the forward is not
          // necessarily going to be a 3d tensor due to a reshape done at the end of
          // the customOp.
          var dyActivation = getFusedDyActivation(reshape(dy, y.shape), y, activation);
          var aDer;
          var bDer;
          if (!transposeA && !transposeB) {
              aDer = matMul(dyActivation, b3D, false, true);
              bDer = matMul(a3D, dyActivation, true, false);
          }
          else if (!transposeA && transposeB) {
              aDer = matMul(dyActivation, b3D, false, false);
              bDer = matMul(dyActivation, a3D, true, false);
          }
          else if (transposeA && !transposeB) {
              aDer = matMul(b3D, dyActivation, false, true);
              bDer = matMul(a3D, dyActivation, false, false);
          }
          else {
              aDer = matMul(b3D, dyActivation, true, true);
              bDer = matMul(dyActivation, a3D, true, true);
          }
          if (bias != null) {
              var biasDer = getFusedBiasGradient($bias, dyActivation);
              return [aDer, bDer, biasDer];
          }
          else {
              return [aDer, bDer];
          }
      };
      var forward = function (backend) {
          var y = backend.fusedBatchMatMul({
              a: a3D,
              b: b3D,
              transposeA: transposeA,
              transposeB: transposeB,
              bias: $bias,
              activation: activation,
              preluActivationWeights: $preluActivationWeights
          });
          return y;
      };
      var inputs = {
          a: a3D,
          b: b3D,
          bias: $bias,
          preluActivationWeights: $preluActivationWeights
      };
      var attrs = { transposeA: transposeA, transposeB: transposeB, activation: activation };
      // Depending on the the params passed in we will have different number of
      // inputs and thus a a different number of elements in the gradient.
      if (bias == null) {
          var customOp = customGrad(function (a3D, b3D, save) {
              var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, _FusedMatMul, attrs);
              save([a3D, b3D, res]);
              return { value: reshape(res, outShape), gradFunc: grad };
          });
          return customOp(a3D, b3D);
      }
      else {
          var customOpWithBias = customGrad(function (a3D, b3D, $bias, save) {
              var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, _FusedMatMul, attrs);
              save([a3D, b3D, res, $bias]);
              return { value: reshape(res, outShape), gradFunc: grad };
          });
          return customOpWithBias(a3D, b3D, $bias);
      }
  }
  var matMul$1 = op({ fusedMatMul_: fusedMatMul_ });

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */

  var fused_ops = {
      __proto__: null,
      conv2d: conv2d$1,
      depthwiseConv2d: depthwiseConv2d$1,
      matMul: matMul$1
  };

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Generate a hamming window.
   *
   * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
   *
   * ```js
   * tf.signal.hammingWindow(10).print();
   * ```
   * @param The length of window
   */
  /**
   * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
   */
  function hammingWindow_(windowLength) {
      return cosineWindow(windowLength, 0.54, 0.46);
  }
  var hammingWindow = op({ hammingWindow_: hammingWindow_ });

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Generate a Hann window.
   *
   * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
   *
   * ```js
   * tf.signal.hannWindow(10).print();
   * ```
   * @param The length of window
   */
  /**
   * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
   */
  function hannWindow_(windowLength) {
      return cosineWindow(windowLength, 0.5, 0.5);
  }
  var hannWindow = op({ hannWindow_: hannWindow_ });

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Expands input into frames of frameLength.
   * Slides a window size with frameStep.
   *
   * ```js
   * tf.signal.frame([1, 2, 3], 2, 1).print();
   * ```
   * @param signal The input tensor to be expanded
   * @param frameLength Length of each frame
   * @param frameStep The frame hop size in samples.
   * @param padEnd Whether to pad the end of signal with padValue.
   * @param padValue An number to use where the input signal does
   *     not exist when padEnd is True.
   */
  /**
   * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
   */
  function frame_(signal, frameLength, frameStep, padEnd, padValue) {
      if (padEnd === void 0) { padEnd = false; }
      if (padValue === void 0) { padValue = 0; }
      var start = 0;
      var output = [];
      while (start + frameLength <= signal.size) {
          output.push(slice(signal, start, frameLength));
          start += frameStep;
      }
      if (padEnd) {
          while (start < signal.size) {
              var padLen = (start + frameLength) - signal.size;
              var pad = concat([
                  slice(signal, start, frameLength - padLen), fill([padLen], padValue)
              ]);
              output.push(pad);
              start += frameStep;
          }
      }
      if (output.length === 0) {
          return tensor2d([], [0, frameLength]);
      }
      return reshape(concat(output), [output.length, frameLength]);
  }
  var frame = op({ frame_: frame_ });

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the Short-time Fourier Transform of signals
   * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform
   *
   * ```js
   * const input = tf.tensor1d([1, 1, 1, 1, 1])
   * tf.signal.stft(input, 3, 1).print();
   * ```
   * @param signal 1-dimensional real value tensor.
   * @param frameLength The window length of samples.
   * @param frameStep The number of samples to step.
   * @param fftLength The size of the FFT to apply.
   * @param windowFn A callable that takes a window length and returns 1-d tensor.
   */
  /**
   * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
   */
  function stft_(signal, frameLength, frameStep, fftLength, windowFn) {
      if (windowFn === void 0) { windowFn = hannWindow; }
      if (fftLength == null) {
          fftLength = enclosingPowerOfTwo(frameLength);
      }
      var framedSignal = frame(signal, frameLength, frameStep);
      var windowedSignal = mul(framedSignal, windowFn(frameLength));
      var output = [];
      for (var i = 0; i < framedSignal.shape[0]; i++) {
          output.push(rfft(slice(windowedSignal, [i, 0], [1, frameLength]), fftLength));
      }
      return concat(output);
  }
  var stft = op({ stft_: stft_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Extracts crops from the input image tensor and resizes them using bilinear
   * sampling or nearest neighbor sampling (possibly with aspect ratio change)
   * to a common output size specified by crop_size.
   *
   * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,
   *     where imageHeight and imageWidth must be positive, specifying the
   *     batch of images from which to take crops
   * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is
   *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized
   *     coordinates of the box in the boxInd[i]'th image in the batch
   * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range
   *     `[0, batch)` that specifies the image that the `i`-th box refers to.
   * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`
   *     specifying the size to which all crops are resized to.
   * @param method Optional string from `'bilinear' | 'nearest'`,
   *     defaults to bilinear, which specifies the sampling method for resizing
   * @param extrapolationValue A threshold for deciding when to remove boxes based
   *     on score. Defaults to 0.
   * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`
   */
  /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
  function cropAndResize_(image, boxes, boxInd, cropSize, method, extrapolationValue) {
      var $image = convertToTensor(image, 'image', 'cropAndResize');
      var $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');
      var $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');
      method = method || 'bilinear';
      extrapolationValue = extrapolationValue || 0;
      var numBoxes = $boxes.shape[0];
      assert($image.rank === 4, function () { return 'Error in cropAndResize: image must be rank 4,' +
          ("but got rank " + $image.rank + "."); });
      assert($boxes.rank === 2 && $boxes.shape[1] === 4, function () { return "Error in cropAndResize: boxes must be have size [" + numBoxes + ",4] " +
          ("but had shape " + $boxes.shape + "."); });
      assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, function () { return "Error in cropAndResize: boxInd must be have size [" + numBoxes + "] " +
          ("but had shape " + $boxes.shape + "."); });
      assert(cropSize.length === 2, function () { return "Error in cropAndResize: cropSize must be of length 2, but got " +
          ("length " + cropSize.length + "."); });
      assert(cropSize[0] >= 1 && cropSize[1] >= 1, function () { return "cropSize must be atleast [1,1], but was " + cropSize; });
      assert(method === 'bilinear' || method === 'nearest', function () { return "method must be bilinear or nearest, but was " + method; });
      var forward = function (backend) { return backend.cropAndResize($image, $boxes, $boxInd, cropSize, method, extrapolationValue); };
      var inputs = { image: $image, boxes: $boxes, boxInd: $boxInd };
      var attrs = { method: method, extrapolationValue: extrapolationValue, cropSize: cropSize };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, CropAndResize, attrs);
      return res;
  }
  var cropAndResize = op({ cropAndResize_: cropAndResize_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Rotates the input image tensor counter-clockwise with an optional offset
   * center of rotation. Currently available in the CPU, WebGL, and WASM backends.
   *
   * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
   * @param radians The amount of rotation.
   * @param fillValue The value to fill in the empty space leftover
   *     after rotation. Can be either a single grayscale value (0-255), or an
   *     array of three numbers `[red, green, blue]` specifying the red, green,
   *     and blue channels. Defaults to `0` (black).
   * @param center The center of rotation. Can be either a single value (0-1), or
   *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates
   *     the image around its center).
   */
  /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
  function rotateWithOffset_(image, radians, fillValue, center) {
      if (fillValue === void 0) { fillValue = 0; }
      if (center === void 0) { center = 0.5; }
      var $image = convertToTensor(image, 'image', 'rotateWithOffset', 'float32');
      assert($image.rank === 4, function () { return 'Error in rotateWithOffset: image must be rank 4,' +
          ("but got rank " + $image.rank + "."); });
      var inputs = { image: $image };
      var attrs = { radians: radians, fillValue: fillValue, center: center };
      var res = ENGINE.runKernel(RotateWithOffset, inputs, attrs);
      return res;
  }
  var rotateWithOffset = op({ rotateWithOffset_: rotateWithOffset_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
      if (iouThreshold == null) {
          iouThreshold = 0.5;
      }
      if (scoreThreshold == null) {
          scoreThreshold = Number.NEGATIVE_INFINITY;
      }
      if (softNmsSigma == null) {
          softNmsSigma = 0.0;
      }
      var numBoxes = boxes.shape[0];
      maxOutputSize = Math.min(maxOutputSize, numBoxes);
      assert(0 <= iouThreshold && iouThreshold <= 1, function () { return "iouThreshold must be in [0, 1], but was '" + iouThreshold + "'"; });
      assert(boxes.rank === 2, function () { return "boxes must be a 2D tensor, but was of rank '" + boxes.rank + "'"; });
      assert(boxes.shape[1] === 4, function () {
          return "boxes must have 4 columns, but 2nd dimension was " + boxes.shape[1];
      });
      assert(scores.rank === 1, function () { return 'scores must be a 1D tensor'; });
      assert(scores.shape[0] === numBoxes, function () { return "scores has incompatible shape with boxes. Expected " + numBoxes + ", " +
          ("but was " + scores.shape[0]); });
      assert(0 <= softNmsSigma && softNmsSigma <= 1, function () { return "softNmsSigma must be in [0, 1], but was '" + softNmsSigma + "'"; });
      return { maxOutputSize: maxOutputSize, iouThreshold: iouThreshold, scoreThreshold: scoreThreshold, softNmsSigma: softNmsSigma };
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
      if (iouThreshold === void 0) { iouThreshold = 0.5; }
      if (scoreThreshold === void 0) { scoreThreshold = Number.NEGATIVE_INFINITY; }
      var $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');
      var $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');
      var inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
      maxOutputSize = inputs.maxOutputSize;
      iouThreshold = inputs.iouThreshold;
      scoreThreshold = inputs.scoreThreshold;
      var attrs = { maxOutputSize: maxOutputSize, iouThreshold: iouThreshold, scoreThreshold: scoreThreshold };
      return ENGINE.runKernelFunc(function (b) { return b.nonMaxSuppression($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold); }, { boxes: $boxes, scores: $scores }, null /* grad */, NonMaxSuppressionV3, attrs);
  }
  var nonMaxSuppression = op({ nonMaxSuppression_: nonMaxSuppression_ });

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Inserts a value into a sorted array. This method allows duplicate, meaning it
   * allows inserting duplicate value, in which case, the element will be inserted
   * at the lowest index of the value.
   * @param arr The array to modify.
   * @param element The element to insert.
   * @param comparator Optional. If no comparator is specified, elements are
   * compared using array_util.defaultComparator, which is suitable for Strings
   * and Numbers in ascending arrays. If the array contains multiple instances of
   * the target value, the left-most instance will be returned. To provide a
   * comparator, it should take 2 arguments to compare and return a negative,
   * zero, or a positive number.
   */
  function binaryInsert(arr, element, comparator) {
      var index = binarySearch(arr, element, comparator);
      var insertionPoint = index < 0 ? -(index + 1) : index;
      arr.splice(insertionPoint, 0, element);
  }
  /**
   * Searches the array for the target using binary search, returns the index
   * of the found element, or position to insert if element not found. If no
   * comparator is specified, elements are compared using array_
   * util.defaultComparator, which is suitable for Strings and Numbers in
   * ascending arrays. If the array contains multiple instances of the target
   * value, the left-most instance will be returned.
   * @param arr The array to be searched in.
   * @param target The target to be searched for.
   * @param comparator Should take 2 arguments to compare and return a negative,
   *    zero, or a positive number.
   * @return Lowest index of the target value if found, otherwise the insertion
   *    point where the target should be inserted, in the form of
   *    (-insertionPoint - 1).
   */
  function binarySearch(arr, target, comparator) {
      return binarySearch_(arr, target, comparator || defaultComparator);
  }
  /**
   * Compares its two arguments for order.
   * @param a The first element to be compared.
   * @param b The second element to be compared.
   * @return A negative number, zero, or a positive number as the first
   *     argument is less than, equal to, or greater than the second.
   */
  function defaultComparator(a, b) {
      return a > b ? 1 : a < b ? -1 : 0;
  }
  function binarySearch_(arr, target, comparator) {
      var left = 0;
      var right = arr.length;
      var middle = 0;
      var found = false;
      while (left < right) {
          middle = left + ((right - left) >>> 1);
          var compareResult = comparator(target, arr[middle]);
          if (compareResult > 0) {
              left = middle + 1;
          }
          else {
              right = middle;
              // If compareResult is 0, the value is found. We record it is found,
              // and then keep looking because there may be duplicate.
              found = !compareResult;
          }
      }
      return found ? left : -left - 1;
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
      return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */)
          .selectedIndices;
  }
  function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {
      return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */, false /* returnScoresTensor */, padToMaxOutputSize /* padToMaxOutputSize */, true
      /* returnValidOutputs */ );
  }
  function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
      return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true /* returnScoresTensor */);
  }
  function nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor, padToMaxOutputSize, returnValidOutputs) {
      if (returnScoresTensor === void 0) { returnScoresTensor = false; }
      if (padToMaxOutputSize === void 0) { padToMaxOutputSize = false; }
      if (returnValidOutputs === void 0) { returnValidOutputs = false; }
      // The list is sorted in ascending order, so that we can always pop the
      // candidate with the largest score in O(1) time.
      var candidates = [];
      for (var i = 0; i < scores.length; i++) {
          if (scores[i] > scoreThreshold) {
              candidates.push({ score: scores[i], boxIndex: i, suppressBeginIndex: 0 });
          }
      }
      candidates.sort(ascendingComparator);
      // If softNmsSigma is 0, the outcome of this algorithm is exactly same as
      // before.
      var scale = softNmsSigma > 0 ? (-0.5 / softNmsSigma) : 0.0;
      var selectedIndices = [];
      var selectedScores = [];
      while (selectedIndices.length < maxOutputSize && candidates.length > 0) {
          var candidate = candidates.pop();
          var originalScore = candidate.score, boxIndex = candidate.boxIndex, suppressBeginIndex = candidate.suppressBeginIndex;
          if (originalScore < scoreThreshold) {
              break;
          }
          // Overlapping boxes are likely to have similar scores, therefore we
          // iterate through the previously selected boxes backwards in order to
          // see if candidate's score should be suppressed. We use
          // suppressBeginIndex to track and ensure a candidate can be suppressed
          // by a selected box no more than once. Also, if the overlap exceeds
          // iouThreshold, we simply ignore the candidate.
          var ignoreCandidate = false;
          for (var j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {
              var iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);
              if (iou >= iouThreshold) {
                  ignoreCandidate = true;
                  break;
              }
              candidate.score =
                  candidate.score * suppressWeight(iouThreshold, scale, iou);
              if (candidate.score <= scoreThreshold) {
                  break;
              }
          }
          // At this point, if `candidate.score` has not dropped below
          // `scoreThreshold`, then we know that we went through all of the
          // previous selections and can safely update `suppressBeginIndex` to the
          // end of the selected array. Then we can re-insert the candidate with
          // the updated score and suppressBeginIndex back in the candidate list.
          // If on the other hand, `candidate.score` has dropped below the score
          // threshold, we will not add it back to the candidates list.
          candidate.suppressBeginIndex = selectedIndices.length;
          if (!ignoreCandidate) {
              // Candidate has passed all the tests, and is not suppressed, so
              // select the candidate.
              if (candidate.score === originalScore) {
                  selectedIndices.push(boxIndex);
                  selectedScores.push(candidate.score);
              }
              else if (candidate.score > scoreThreshold) {
                  // Candidate's score is suppressed but is still high enough to be
                  // considered, so add back to the candidates list.
                  binaryInsert(candidates, candidate, ascendingComparator);
              }
          }
      }
      // NonMaxSuppressionV4 feature: padding output to maxOutputSize.
      var validOutputs = selectedIndices.length;
      var elemsToPad = maxOutputSize - validOutputs;
      if (padToMaxOutputSize && elemsToPad > 0) {
          selectedIndices.push.apply(selectedIndices, new Array(elemsToPad).fill(0));
          selectedScores.push.apply(selectedScores, new Array(elemsToPad).fill(0.0));
      }
      var result = { selectedIndices: tensor1d(selectedIndices, 'int32') };
      if (returnScoresTensor) {
          result['selectedScores'] = tensor1d(selectedScores, 'float32');
      }
      if (returnValidOutputs) {
          result['validOutputs'] = scalar(validOutputs, 'int32');
      }
      return result;
  }
  function intersectionOverUnion(boxes, i, j) {
      var iCoord = boxes.subarray(i * 4, i * 4 + 4);
      var jCoord = boxes.subarray(j * 4, j * 4 + 4);
      var yminI = Math.min(iCoord[0], iCoord[2]);
      var xminI = Math.min(iCoord[1], iCoord[3]);
      var ymaxI = Math.max(iCoord[0], iCoord[2]);
      var xmaxI = Math.max(iCoord[1], iCoord[3]);
      var yminJ = Math.min(jCoord[0], jCoord[2]);
      var xminJ = Math.min(jCoord[1], jCoord[3]);
      var ymaxJ = Math.max(jCoord[0], jCoord[2]);
      var xmaxJ = Math.max(jCoord[1], jCoord[3]);
      var areaI = (ymaxI - yminI) * (xmaxI - xminI);
      var areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);
      if (areaI <= 0 || areaJ <= 0) {
          return 0.0;
      }
      var intersectionYmin = Math.max(yminI, yminJ);
      var intersectionXmin = Math.max(xminI, xminJ);
      var intersectionYmax = Math.min(ymaxI, ymaxJ);
      var intersectionXmax = Math.min(xmaxI, xmaxJ);
      var intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *
          Math.max(intersectionXmax - intersectionXmin, 0.0);
      return intersectionArea / (areaI + areaJ - intersectionArea);
  }
  // A Gaussian penalty function, this method always returns values in [0, 1].
  // The weight is a function of similarity, the more overlap two boxes are, the
  // smaller the weight is, meaning highly overlapping boxe will be significantly
  // penalized. On the other hand, a non-overlapping box will not be penalized.
  function suppressWeight(iouThreshold, scale, iou) {
      var weight = Math.exp(scale * iou * iou);
      return iou <= iouThreshold ? weight : 0.0;
  }
  function ascendingComparator(c1, c2) {
      // For objects with same scores, we make the object with the larger index go
      // first. In an array that pops from the end, this means that the object with
      // the smaller index will be popped first. This ensures the same output as
      // the TensorFlow python version.
      return (c1.score - c2.score) ||
          ((c1.score === c2.score) && (c2.boxIndex - c1.boxIndex));
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Performs non maximum suppression of bounding boxes based on
   * iou (intersection over union).
   *
   * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
   *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
   *     the bounding box.
   * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
   * @param maxOutputSize The maximum number of boxes to be selected.
   * @param iouThreshold A float representing the threshold for deciding whether
   *     boxes overlap too much with respect to IOU. Must be between [0, 1].
   *     Defaults to 0.5 (50% box overlap).
   * @param scoreThreshold A threshold for deciding when to remove boxes based
   *     on score. Defaults to -inf, which means any score is accepted.
   * @return A 1D tensor with the selected box indices.
   */
  /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
  /** This is the async version of `nonMaxSuppression` */
  function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
      if (iouThreshold === void 0) { iouThreshold = 0.5; }
      if (scoreThreshold === void 0) { scoreThreshold = Number.NEGATIVE_INFINITY; }
      return __awaiter(this, void 0, void 0, function () {
          var $boxes, $scores, inputs, boxesAndScores, boxesVals, scoresVals, res;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');
                      $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');
                      inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
                      maxOutputSize = inputs.maxOutputSize;
                      iouThreshold = inputs.iouThreshold;
                      scoreThreshold = inputs.scoreThreshold;
                      return [4 /*yield*/, Promise.all([$boxes.data(), $scores.data()])];
                  case 1:
                      boxesAndScores = _a.sent();
                      boxesVals = boxesAndScores[0];
                      scoresVals = boxesAndScores[1];
                      res = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
                      if ($boxes !== boxes) {
                          $boxes.dispose();
                      }
                      if ($scores !== scores) {
                          $scores.dispose();
                      }
                      return [2 /*return*/, res];
              }
          });
      });
  }
  var nonMaxSuppressionAsync = nonMaxSuppressionAsync_;

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Performs non maximum suppression of bounding boxes based on
   * iou (intersection over union).
   *
   * This op also supports a Soft-NMS mode (c.f.
   * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
   * of other overlapping boxes, therefore favoring different regions of the image
   * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
   * parameter to be larger than 0.
   *
   * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
   *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
   *     the bounding box.
   * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
   * @param maxOutputSize The maximum number of boxes to be selected.
   * @param iouThreshold A float representing the threshold for deciding whether
   *     boxes overlap too much with respect to IOU. Must be between [0, 1].
   *     Defaults to 0.5 (50% box overlap).
   * @param scoreThreshold A threshold for deciding when to remove boxes based
   *     on score. Defaults to -inf, which means any score is accepted.
   * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
   *     When sigma is 0, it falls back to nonMaxSuppression.
   * @return A map with the following properties:
   *     - selectedIndices: A 1D tensor with the selected box indices.
   *     - selectedScores: A 1D tensor with the corresponding scores for each
   *       selected box.
   */
  /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
  function nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
      if (iouThreshold === void 0) { iouThreshold = 0.5; }
      if (scoreThreshold === void 0) { scoreThreshold = Number.NEGATIVE_INFINITY; }
      if (softNmsSigma === void 0) { softNmsSigma = 0.0; }
      var $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');
      var $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');
      var params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
      maxOutputSize = params.maxOutputSize;
      iouThreshold = params.iouThreshold;
      scoreThreshold = params.scoreThreshold;
      softNmsSigma = params.softNmsSigma;
      var inputs = { boxes: $boxes, scores: $scores };
      var attrs = { maxOutputSize: maxOutputSize, iouThreshold: iouThreshold, scoreThreshold: scoreThreshold, softNmsSigma: softNmsSigma };
      var result = ENGINE.runKernel(NonMaxSuppressionV5, inputs, attrs);
      return { selectedIndices: result[0], selectedScores: result[1] };
  }
  var nonMaxSuppressionWithScore = op({ nonMaxSuppressionWithScore_: nonMaxSuppressionWithScore_ });

  /**
   * Asynchronously performs non maximum suppression of bounding boxes based on
   * iou (intersection over union).
   *
   * This op also supports a Soft-NMS mode (c.f.
   * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
   * of other overlapping boxes, therefore favoring different regions of the image
   * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
   * parameter to be larger than 0.
   *
   * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
   *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
   *     the bounding box.
   * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
   * @param maxOutputSize The maximum number of boxes to be selected.
   * @param iouThreshold A float representing the threshold for deciding whether
   *     boxes overlap too much with respect to IOU. Must be between [0, 1].
   *     Defaults to 0.5 (50% box overlap).
   * @param scoreThreshold A threshold for deciding when to remove boxes based
   *     on score. Defaults to -inf, which means any score is accepted.
   * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
   *     When sigma is 0, it falls back to nonMaxSuppression.
   * @return A map with the following properties:
   *     - selectedIndices: A 1D tensor with the selected box indices.
   *     - selectedScores: A 1D tensor with the corresponding scores for each
   *       selected box.
   */
  /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
  function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
      if (iouThreshold === void 0) { iouThreshold = 0.5; }
      if (scoreThreshold === void 0) { scoreThreshold = Number.NEGATIVE_INFINITY; }
      if (softNmsSigma === void 0) { softNmsSigma = 0.0; }
      return __awaiter(this, void 0, void 0, function () {
          var $boxes, $scores, params, boxesAndScores, boxesVals, scoresVals, res;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');
                      $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');
                      params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
                      maxOutputSize = params.maxOutputSize;
                      iouThreshold = params.iouThreshold;
                      scoreThreshold = params.scoreThreshold;
                      softNmsSigma = params.softNmsSigma;
                      return [4 /*yield*/, Promise.all([$boxes.data(), $scores.data()])];
                  case 1:
                      boxesAndScores = _a.sent();
                      boxesVals = boxesAndScores[0];
                      scoresVals = boxesAndScores[1];
                      res = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
                      if ($boxes !== boxes) {
                          $boxes.dispose();
                      }
                      if ($scores !== scores) {
                          $scores.dispose();
                      }
                      return [2 /*return*/, res];
              }
          });
      });
  }
  var nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Asynchronously performs non maximum suppression of bounding boxes based on
   * iou (intersection over union), with an option to pad results.
   *
   * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
   *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
   *     the bounding box.
   * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
   * @param maxOutputSize The maximum number of boxes to be selected.
   * @param iouThreshold A float representing the threshold for deciding whether
   *     boxes overlap too much with respect to IOU. Must be between [0, 1].
   *     Defaults to 0.5 (50% box overlap).
   * @param scoreThreshold A threshold for deciding when to remove boxes based
   *     on score. Defaults to -inf, which means any score is accepted.
   * @param padToMaxOutputSize Defalts to false. If true, size of output
   *     `selectedIndices` is padded to maxOutputSize.
   * @return A map with the following properties:
   *     - selectedIndices: A 1D tensor with the selected box indices.
   *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
   *       are valid. Valid elements occur first, then padding.
   */
  /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
  function nonMaxSuppressionPadded_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {
      if (iouThreshold === void 0) { iouThreshold = 0.5; }
      if (scoreThreshold === void 0) { scoreThreshold = Number.NEGATIVE_INFINITY; }
      if (padToMaxOutputSize === void 0) { padToMaxOutputSize = false; }
      var $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');
      var $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');
      var params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);
      var $maxOutputSize = params.maxOutputSize;
      var $iouThreshold = params.iouThreshold;
      var $scoreThreshold = params.scoreThreshold;
      var inputs = { boxes: $boxes, scores: $scores };
      var attrs = {
          maxOutputSize: $maxOutputSize,
          iouThreshold: $iouThreshold,
          scoreThreshold: $scoreThreshold,
          padToMaxOutputSize: padToMaxOutputSize
      };
      var result = ENGINE.runKernel(NonMaxSuppressionV4, inputs, attrs);
      return { selectedIndices: result[0], validOutputs: result[1] };
  }
  var nonMaxSuppressionPadded = op({ nonMaxSuppressionPadded_: nonMaxSuppressionPadded_ });

  /**
   * Asynchronously performs non maximum suppression of bounding boxes based on
   * iou (intersection over union), with an option to pad results.
   *
   * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
   *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
   *     the bounding box.
   * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
   * @param maxOutputSize The maximum number of boxes to be selected.
   * @param iouThreshold A float representing the threshold for deciding whether
   *     boxes overlap too much with respect to IOU. Must be between [0, 1].
   *     Defaults to 0.5 (50% box overlap).
   * @param scoreThreshold A threshold for deciding when to remove boxes based
   *     on score. Defaults to -inf, which means any score is accepted.
   * @param padToMaxOutputSize Defalts to false. If true, size of output
   *     `selectedIndices` is padded to maxOutputSize.
   * @return A map with the following properties:
   *     - selectedIndices: A 1D tensor with the selected box indices.
   *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
   *       are valid. Valid elements occur first, then padding.
   */
  /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
  function nonMaxSuppressionPaddedAsync_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {
      if (iouThreshold === void 0) { iouThreshold = 0.5; }
      if (scoreThreshold === void 0) { scoreThreshold = Number.NEGATIVE_INFINITY; }
      if (padToMaxOutputSize === void 0) { padToMaxOutputSize = false; }
      return __awaiter(this, void 0, void 0, function () {
          var $boxes, $scores, params, $maxOutputSize, $iouThreshold, $scoreThreshold, _a, boxesVals, scoresVals, res;
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');
                      $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');
                      params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);
                      $maxOutputSize = params.maxOutputSize;
                      $iouThreshold = params.iouThreshold;
                      $scoreThreshold = params.scoreThreshold;
                      return [4 /*yield*/, Promise.all([$boxes.data(), $scores.data()])];
                  case 1:
                      _a = _b.sent(), boxesVals = _a[0], scoresVals = _a[1];
                      res = nonMaxSuppressionV4Impl(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);
                      if ($boxes !== boxes) {
                          $boxes.dispose();
                      }
                      if ($scores !== scores) {
                          $scores.dispose();
                      }
                      return [2 /*return*/, res];
              }
          });
      });
  }
  var nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Bilinear resize a batch of 3D images to a new shape.
   *
   * @param images The images, of rank 4 or rank 3, of shape
   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
   * @param size The new shape `[newHeight, newWidth]` to resize the
   *     images to. Each channel is resized individually.
   * @param alignCorners Defaults to False. If true, rescale
   *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
   *     corners of images and resized images. If false, rescale by
   *     `new_height / height`. Treat similarly the width dimension.
   */
  /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
  function resizeBilinear_(images, size, alignCorners) {
      if (alignCorners === void 0) { alignCorners = false; }
      var $images = convertToTensor(images, 'images', 'resizeBilinear');
      assert($images.rank === 3 || $images.rank === 4, function () { return "Error in resizeBilinear: x must be rank 3 or 4, but got " +
          ("rank " + $images.rank + "."); });
      assert(size.length === 2, function () { return "Error in resizeBilinear: new shape must 2D, but got shape " +
          (size + "."); });
      var batchImages = $images;
      var reshapedTo4D = false;
      if ($images.rank === 3) {
          reshapedTo4D = true;
          batchImages =
              $images.as4D(1, $images.shape[0], $images.shape[1], $images.shape[2]);
      }
      var newHeight = size[0], newWidth = size[1];
      var forward = function (backend, save) {
          save([batchImages]);
          return backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners);
      };
      var inputs = { images: batchImages };
      var attrs = { alignCorners: alignCorners, size: size };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* gradient */, ResizeBilinear, attrs);
      if (reshapedTo4D) {
          return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
      }
      return res;
  }
  var resizeBilinear = op({ resizeBilinear_: resizeBilinear_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * NearestNeighbor resize a batch of 3D images to a new shape.
   *
   * @param images The images, of rank 4 or rank 3, of shape
   *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
   * @param size The new shape `[newHeight, newWidth]` to resize the
   *     images to. Each channel is resized individually.
   * @param alignCorners Defaults to False. If true, rescale
   *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
   *     corners of images and resized images. If false, rescale by
   *     `new_height / height`. Treat similarly the width dimension.
   */
  /** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
  function resizeNearestNeighbor_(images, size, alignCorners) {
      if (alignCorners === void 0) { alignCorners = false; }
      var $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');
      assert($images.rank === 3 || $images.rank === 4, function () { return "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got " +
          ("rank " + $images.rank + "."); });
      assert(size.length === 2, function () {
          return "Error in resizeNearestNeighbor: new shape must 2D, but got shape " +
              (size + ".");
      });
      assert($images.dtype === 'float32' || $images.dtype === 'int32', function () { return '`images` must have `int32` or `float32` as dtype'; });
      var batchImages = $images;
      var reshapedTo4D = false;
      if ($images.rank === 3) {
          reshapedTo4D = true;
          batchImages =
              $images.as4D(1, $images.shape[0], $images.shape[1], $images.shape[2]);
      }
      var newHeight = size[0], newWidth = size[1];
      var inputs = { images: batchImages };
      var attrs = { alignCorners: alignCorners, size: size };
      var forward = function (backend, save) {
          save([batchImages]);
          return backend.resizeNearestNeighbor(batchImages, newHeight, newWidth, alignCorners);
      };
      var res = ENGINE.runKernelFunc(forward, inputs, null /* gradient */, ResizeNearestNeighbor, attrs);
      if (reshapedTo4D) {
          return res.as3D(res.shape[1], res.shape[2], res.shape[3]);
      }
      return res;
  }
  var resizeNearestNeighbor = op({ resizeNearestNeighbor_: resizeNearestNeighbor_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Copy a tensor setting everything outside a central band in each innermost
   * matrix to zero.
   *
   * The band part is computed as follows: Assume input has `k` dimensions
   * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where
   * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.
   * The indicator function
   * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`
   * `&& (num_upper < 0 || (n-m) <= num_upper)`
   *
   * ```js
   * const x = tf.tensor2d([[ 0,  1,  2, 3],
   *                        [-1,  0,  1, 2],
   *                        [-2, -1,  0, 1],
   *                        [-3, -2, -1, 0]]);
   * let y = tf.linalg.bandPart(x, 1, -1);
   * y.print(); // [[ 0,  1,  2, 3],
   *            //  [-1,  0,  1, 2],
   *            //  [ 0, -1,  0, 1],
   *            //  [ 0, 0 , -1, 0]]
   * let z = tf.linalg.bandPart(x, 2, 1);
   * z.print(); // [[ 0,  1,  0, 0],
   *            //  [-1,  0,  1, 0],
   *            //  [-2, -1,  0, 1],
   *            //  [ 0, -2, -1, 0]]
   * ```
   *
   * @param x Rank `k` tensor
   * @param numLower Number of subdiagonals to keep.
   *   If negative, keep entire lower triangle.
   * @param numUpper Number of subdiagonals to keep.
   *   If negative, keep entire upper triangle.
   * @returns Rank `k` tensor of the same shape as input.
   *   The extracted banded tensor.
   */
  /**
   * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
   */
  function bandPart_(a, numLower, numUpper) {
      assert(numLower % 1 === 0, function () { return "bandPart(): numLower must be an integer, got " + numLower + "."; });
      assert(numUpper % 1 === 0, function () { return "bandPart(): numUpper must be an integer, got " + numUpper + "."; });
      var $a = convertToTensor(a, 'a', 'bandPart');
      assert($a.rank >= 2, function () { return "bandPart(): Rank must be at least 2, got " + $a.rank + "."; });
      var shape = $a.shape;
      var _a = $a.shape.slice(-2), M = _a[0], N = _a[1];
      if (!(numLower <= M)) {
          throw new Error("bandPart(): numLower (" + numLower + ")" +
              (" must not be greater than the number of rows (" + M + ")."));
      }
      if (!(numUpper <= N)) {
          throw new Error("bandPart(): numUpper (" + numUpper + ")" +
              (" must not be greater than the number of columns (" + N + ")."));
      }
      if (numLower < 0) {
          numLower = M;
      }
      if (numUpper < 0) {
          numUpper = N;
      }
      var i = reshape(range(0, M, 1, 'int32'), [-1, 1]);
      var j = range(0, N, 1, 'int32');
      var ij = sub(i, j);
      var inBand = logicalAnd(lessEqual(ij, scalar(+numLower, 'int32')), greaterEqual(ij, scalar(-numUpper, 'int32')));
      var zero = zeros([M, N], $a.dtype);
      return reshape(stack(unstack(reshape($a, [-1, M, N]))
          .map(function (mat) { return where(inBand, mat, zero); })), shape);
  }
  var bandPart = op({ bandPart_: bandPart_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Gram-Schmidt orthogonalization.
   *
   * ```js
   * const x = tf.tensor2d([[1, 2], [3, 4]]);
   * let y = tf.linalg.gramSchmidt(x);
   * y.print();
   * console.log('Othogonalized:');
   * y.dot(y.transpose()).print();  // should be nearly the identity matrix.
   * console.log('First row direction maintained:');
   * const data = await y.array();
   * console.log(data[0][1] / data[0][0]);  // should be nearly 2.
   * ```
   *
   * @param xs The vectors to be orthogonalized, in one of the two following
   *   formats:
   *   - An Array of `tf.Tensor1D`.
   *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows
   *     of `xs`.
   *   In each case, all the vectors must have the same length and the length
   *   must be greater than or equal to the number of vectors.
   * @returns The orthogonalized and normalized vectors or matrix.
   *   Orthogonalization means that the vectors or the rows of the matrix
   *   are orthogonal (zero inner products). Normalization means that each
   *   vector or each row of the matrix has an L2 norm that equals `1`.
   */
  /**
   * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
   */
  function gramSchmidt_(xs) {
      var inputIsTensor2D;
      if (Array.isArray(xs)) {
          inputIsTensor2D = false;
          assert(xs != null && xs.length > 0, function () { return 'Gram-Schmidt process: input must not be null, undefined, or ' +
              'empty'; });
          var dim_1 = xs[0].shape[0];
          var _loop_1 = function (i) {
              assert(xs[i].shape[0] === dim_1, function () {
                  return 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +
                      ("(" + xs[i].shape[0] + " vs. " + dim_1 + ")");
              });
          };
          for (var i = 1; i < xs.length; ++i) {
              _loop_1(i);
          }
      }
      else {
          inputIsTensor2D = true;
          xs = split(xs, xs.shape[0], 0).map(function (x) { return squeeze(x, [0]); });
      }
      assert(xs.length <= xs[0].shape[0], function () { return "Gram-Schmidt: Number of vectors (" + xs.length + ") exceeds " +
          ("number of dimensions (" + xs[0].shape[0] + ")."); });
      var ys = [];
      var xs1d = xs;
      var _loop_2 = function (i) {
          ys.push(ENGINE.tidy(function () {
              var x = xs1d[i];
              if (i > 0) {
                  for (var j = 0; j < i; ++j) {
                      var proj = mul(sum$1(mul(ys[j], x)), ys[j]);
                      x = sub(x, proj);
                  }
              }
              return div(x, norm(x, 'euclidean'));
          }));
      };
      for (var i = 0; i < xs.length; ++i) {
          _loop_2(i);
      }
      if (inputIsTensor2D) {
          return stack(ys, 0);
      }
      else {
          return ys;
      }
  }
  var gramSchmidt = op({ gramSchmidt_: gramSchmidt_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Compute QR decomposition of m-by-n matrix using Householder transformation.
   *
   * Implementation based on
   *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]
   * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)
   *
   * ```js
   * const a = tf.tensor2d([[1, 2], [3, 4]]);
   * let [q, r] = tf.linalg.qr(a);
   * console.log('Q');
   * q.print();
   * console.log('R');
   * r.print();
   * console.log('Orthogonalized');
   * q.dot(q.transpose()).print()  // should be nearly the identity matrix.
   * console.log('Reconstructed');
   * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];
   * ```
   *
   * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose
   *   it has the shape `[..., M, N]`.
   * @param fullMatrices An optional boolean parameter. Defaults to `false`.
   *   If `true`, compute full-sized `Q`. If `false` (the default),
   *   compute only the leading N columns of `Q` and `R`.
   * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,
   *   i.e., its columns all have unit norm and are mutually orthogonal.
   *   If `M >= N`,
   *     If `fullMatrices` is `false` (default),
   *       - `Q` has a shape of `[..., M, N]`,
   *       - `R` has a shape of `[..., N, N]`.
   *     If `fullMatrices` is `true` (default),
   *       - `Q` has a shape of `[..., M, M]`,
   *       - `R` has a shape of `[..., M, N]`.
   *   If `M < N`,
   *     - `Q` has a shape of `[..., M, M]`,
   *     - `R` has a shape of `[..., M, N]`.
   * @throws If the rank of `x` is less than 2.
   */
  /**
   * @doc {heading:'Operations',
   *       subheading:'Linear Algebra',
   *       namespace:'linalg'}
   */
  function qr_(x, fullMatrices) {
      if (fullMatrices === void 0) { fullMatrices = false; }
      assert(x.rank >= 2, function () { return "qr() requires input tensor to have a rank >= 2, but got rank " + x.rank; });
      if (x.rank === 2) {
          return qr2d(x, fullMatrices);
      }
      else {
          // Rank > 2.
          // TODO(cais): Below we split the input into individual 2D tensors,
          //   perform QR decomposition on them and then stack the results back
          //   together. We should explore whether this can be parallelized.
          var outerDimsProd = x.shape.slice(0, x.shape.length - 2)
              .reduce(function (value, prev) { return value * prev; });
          var x2ds = unstack(reshape(x, [
              outerDimsProd, x.shape[x.shape.length - 2],
              x.shape[x.shape.length - 1]
          ]), 0);
          var q2ds_1 = [];
          var r2ds_1 = [];
          x2ds.forEach(function (x2d) {
              var _a = qr2d(x2d, fullMatrices), q2d = _a[0], r2d = _a[1];
              q2ds_1.push(q2d);
              r2ds_1.push(r2d);
          });
          var q = reshape(stack(q2ds_1, 0), x.shape);
          var r = reshape(stack(r2ds_1, 0), x.shape);
          return [q, r];
      }
  }
  function qr2d(x, fullMatrices) {
      if (fullMatrices === void 0) { fullMatrices = false; }
      return ENGINE.tidy(function () {
          assert(x.shape.length === 2, function () { return "qr2d() requires a 2D Tensor, but got a " + x.shape.length + "D Tensor."; });
          var m = x.shape[0];
          var n = x.shape[1];
          var q = eye(m); // Orthogonal transform so far.
          var r = clone(x); // Transformed matrix so far.
          var one2D = tensor2d([[1]], [1, 1]);
          var w = clone(one2D);
          var iters = m >= n ? n : m;
          var _loop_1 = function (j) {
              var _a;
              // This tidy within the for-loop ensures we clean up temporary
              // tensors as soon as they are no longer needed.
              var rTemp = r;
              var wTemp = w;
              var qTemp = q;
              _a = ENGINE.tidy(function () {
                  // Find H = I - tau * w * w', to put zeros below R(j, j).
                  var rjEnd1 = slice(r, [j, j], [m - j, 1]);
                  var normX = norm(rjEnd1);
                  var rjj = slice(r, [j, j], [1, 1]);
                  // The sign() function returns 0 on 0, which causes division by zero.
                  var s = where(greater(rjj, 0), tensor2d([[-1]]), tensor2d([[1]]));
                  var u1 = sub(rjj, mul(s, normX));
                  var wPre = div(rjEnd1, u1);
                  if (wPre.shape[0] === 1) {
                      w = clone(one2D);
                  }
                  else {
                      w = concat([
                          one2D,
                          slice(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])
                      ], 0);
                  }
                  var tau = neg(div(matMul(s, u1), normX));
                  // -- R := HR, Q := QH.
                  var rjEndAll = slice(r, [j, 0], [m - j, n]);
                  var tauTimesW = mul(tau, w);
                  var wT = transpose(w);
                  if (j === 0) {
                      r = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));
                  }
                  else {
                      var rTimesTau = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));
                      r = concat([slice(r, [0, 0], [j, n]), rTimesTau], 0);
                  }
                  var tawTimesWT = transpose(tauTimesW);
                  var qAllJEnd = slice(q, [0, j], [m, q.shape[1] - j]);
                  if (j === 0) {
                      q = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));
                  }
                  else {
                      var qTimesTau = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));
                      q = concat([slice(q, [0, 0], [m, j]), qTimesTau], 1);
                  }
                  return [w, r, q];
              }), w = _a[0], r = _a[1], q = _a[2];
              dispose([rTemp, wTemp, qTemp]);
          };
          for (var j = 0; j < iters; ++j) {
              _loop_1(j);
          }
          if (!fullMatrices && m > n) {
              q = slice(q, [0, 0], [m, n]);
              r = slice(r, [0, 0], [n, n]);
          }
          return [q, r];
      });
  }
  var qr = op({ qr_: qr_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  (function (Reduction) {
      Reduction[Reduction["NONE"] = 0] = "NONE";
      Reduction[Reduction["MEAN"] = 1] = "MEAN";
      Reduction[Reduction["SUM"] = 2] = "SUM";
      Reduction[Reduction["SUM_BY_NONZERO_WEIGHTS"] = 3] = "SUM_BY_NONZERO_WEIGHTS";
  })(exports.Reduction || (exports.Reduction = {}));

  /**
   * Computes the weighted loss between two tensors.
   *
   * @param losses Tensor of shape `[batch_size, d1, ... dN]`.
   * @param weights Tensor whose rank is either 0, or the same rank as
   *    `losses`, and must be broadcastable to `losses` (i.e., all
   *    dimensions must be either `1`, or the same as the corresponding
   *    `losses` dimension).
   */
  /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */
  function computeWeightedLoss_(losses, weights, reduction) {
      if (reduction === void 0) { reduction = exports.Reduction.SUM_BY_NONZERO_WEIGHTS; }
      var $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');
      var $weights = null;
      if (weights != null) {
          $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');
      }
      var weightedLoss = ($weights == null) ? $losses : mul($losses, $weights);
      if (reduction === exports.Reduction.NONE) {
          return weightedLoss;
      }
      if (reduction === exports.Reduction.SUM) {
          return sum$1(weightedLoss);
      }
      if (reduction === exports.Reduction.MEAN) {
          if ($weights == null) {
              return mean(weightedLoss);
          }
          else {
              var broadcastFactor = $losses.size / $weights.size;
              var result = div(sum$1(weightedLoss), sum$1($weights));
              return broadcastFactor > 1 ? div(result, scalar(broadcastFactor)) :
                  result;
          }
      }
      if (reduction === exports.Reduction.SUM_BY_NONZERO_WEIGHTS) {
          if ($weights == null) {
              return div(sum$1(weightedLoss), scalar($losses.size));
          }
          else {
              var broadcastedWeights = mul($weights, ones$1($losses.shape));
              var numNonZeros = cast(sum$1(notEqual(broadcastedWeights, scalar(0))), 'float32');
              return div(sum$1(weightedLoss), numNonZeros);
          }
      }
      throw Error("Unknown reduction: " + reduction);
  }
  var computeWeightedLoss = op({ computeWeightedLoss_: computeWeightedLoss_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the absolute difference loss between two tensors.
   *
   * @param labels The ground truth output tensor, same dimensions as
   *    'predictions'.
   * @param predictions The predicted outputs.
   * @param weights Tensor whose rank is either 0, or the same rank as
   *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
   *    must be either `1`, or the same as the corresponding `losses`
   *    dimension).
   * @param reduction Type of reduction to apply to loss. Should be of type
   *    `Reduction`
   */
  /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */
  function absoluteDifference_(labels, predictions, weights, reduction) {
      if (reduction === void 0) { reduction = exports.Reduction.SUM_BY_NONZERO_WEIGHTS; }
      var $labels = convertToTensor(labels, 'labels', 'absoluteDifference');
      var $predictions = convertToTensor(predictions, 'predictions', 'absoluteDifference');
      var $weights = null;
      if (weights != null) {
          $weights = convertToTensor(weights, 'weights', 'absoluteDifference');
      }
      assertShapesMatch($labels.shape, $predictions.shape, 'Error in absoluteDifference: ');
      var losses = abs(sub($labels, $predictions));
      return computeWeightedLoss(losses, $weights, reduction);
  }
  var absoluteDifference = op({ absoluteDifference_: absoluteDifference_ });

  /**
   * Computes the cosine distance loss between two tensors.
   *
   * @param labels The ground truth output tensor, same dimensions as
   *    'predictions'.
   * @param predictions The predicted outputs.
   * @param axis The dimension along which the cosine distance is computed.
   * @param weights Tensor whose rank is either 0, or the same rank as
   *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
   *    must be either `1`, or the same as the corresponding `losses`
   *    dimension).
   * @param reduction Type of reduction to apply to loss. Should be of type
   *    `Reduction`
   */
  /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */
  function cosineDistance_(labels, predictions, axis, weights, reduction) {
      if (reduction === void 0) { reduction = exports.Reduction.SUM_BY_NONZERO_WEIGHTS; }
      var $labels = convertToTensor(labels, 'labels', 'cosineDistance');
      var $predictions = convertToTensor(predictions, 'predictions', 'cosineDistance');
      var $weights = null;
      if (weights != null) {
          $weights = convertToTensor(weights, 'weights', 'cosineDistance');
      }
      assertShapesMatch($labels.shape, $predictions.shape, 'Error in cosineDistance: ');
      var one = scalar(1);
      var losses = sub(one, sum$1(mul($labels, $predictions), axis, true));
      return computeWeightedLoss(losses, $weights, reduction);
  }
  var cosineDistance = op({ cosineDistance_: cosineDistance_ });

  /**
   * Computes the Hinge loss between two tensors.
   *
   * @param labels The ground truth output tensor, same dimensions as
   *    'predictions'.
   * @param predictions The predicted outputs.
   * @param weights Tensor whose rank is either 0, or the same rank as
   *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
   *    must be either `1`, or the same as the corresponding `losses`
   *    dimension).
   * @param reduction Type of reduction to apply to loss. Should be of type
   *    `Reduction`
   */
  /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */
  function hingeLoss_(labels, predictions, weights, reduction) {
      if (reduction === void 0) { reduction = exports.Reduction.SUM_BY_NONZERO_WEIGHTS; }
      var $labels = convertToTensor(labels, 'labels', 'hingeLoss');
      var $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');
      var $weights = null;
      if (weights != null) {
          $weights = convertToTensor(weights, 'weights', 'hingeLoss');
      }
      assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');
      var one = scalar(1);
      // Convert binary labels to (-1, 1)
      $labels = sub(mul(scalar(2), $labels), one);
      var losses = relu(sub(one, mul($labels, $predictions)));
      return computeWeightedLoss(losses, $weights, reduction);
  }
  var hingeLoss = op({ hingeLoss_: hingeLoss_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the huber loss between two tensors.
   *
   * @param labels The ground truth output tensor, same dimensions as
   *    'predictions'.
   * @param predictions The predicted outputs.
   * @param weights Tensor whose rank is either 0, or the same rank as
   *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
   *    must be either `1`, or the same as the corresponding `losses`
   *    dimension).
   * @param delta Point where huber loss changes from quadratic to linear.
   * @param reduction Type of reduction to apply to loss. Should be of type
   *    `Reduction`.
   */
  /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */
  function huberLoss_(labels, predictions, weights, delta, reduction) {
      if (delta === void 0) { delta = 1.0; }
      if (reduction === void 0) { reduction = exports.Reduction.SUM_BY_NONZERO_WEIGHTS; }
      var $labels = convertToTensor(labels, 'labels', 'huberLoss');
      var $predictions = convertToTensor(predictions, 'predictions', 'huberLoss');
      var $weights = null;
      if (weights != null) {
          $weights = convertToTensor(weights, 'weights', 'huberLoss');
      }
      assertShapesMatch($labels.shape, $predictions.shape, 'Error in huberLoss: ');
      var deltaScalar = scalar(delta);
      var error = abs(sub($predictions, $labels));
      var quadratic = minimum(error, deltaScalar);
      var linear = sub(error, quadratic);
      var losses = add(mul(scalar(0.5), square(quadratic)), mul(deltaScalar, linear));
      return computeWeightedLoss(losses, $weights, reduction);
  }
  var huberLoss = op({ huberLoss_: huberLoss_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the log loss between two tensors.
   *
   * @param labels The ground truth output tensor, same dimensions as
   *    'predictions'.
   * @param predictions The predicted outputs.
   * @param weights Tensor whose rank is either 0, or the same rank as
   *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
   *    must be either `1`, or the same as the corresponding `losses`
   *    dimension).
   * @param epsilon A small increment to avoid taking log of zero
   * @param reduction Type of reduction to apply to loss. Should be of type
   *    `Reduction`
   */
  /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */
  function logLoss_(labels, predictions, weights, epsilon, reduction) {
      if (epsilon === void 0) { epsilon = 1e-7; }
      if (reduction === void 0) { reduction = exports.Reduction.SUM_BY_NONZERO_WEIGHTS; }
      var $labels = convertToTensor(labels, 'labels', 'logLoss');
      var $predictions = convertToTensor(predictions, 'predictions', 'logLoss');
      var $weights = null;
      if (weights != null) {
          $weights = convertToTensor(weights, 'weights', 'logLoss');
      }
      assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');
      var one = scalar(1);
      var epsilonScalar = scalar(epsilon);
      var l1 = neg(mul($labels, log(add($predictions, epsilonScalar))));
      var l2 = mul(sub(one, $labels), log(add(sub(one, $predictions), epsilonScalar)));
      var losses = sub(l1, l2);
      return computeWeightedLoss(losses, $weights, reduction);
  }
  var logLoss = op({ logLoss_: logLoss_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes the mean squared error between two tensors.
   *
   * @param labels The ground truth output tensor, same dimensions as
   *    'predictions'.
   * @param predictions The predicted outputs.
   * @param weights Tensor whose rank is either 0, or the same rank as
   *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
   *    must be either `1`, or the same as the corresponding `losses`
   *    dimension).
   * @param reduction Type of reduction to apply to loss. Should be of type
   *    `Reduction`
   */
  /** @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'} */
  function meanSquaredError_(labels, predictions, weights, reduction) {
      if (reduction === void 0) { reduction = exports.Reduction.SUM_BY_NONZERO_WEIGHTS; }
      var $labels = convertToTensor(labels, 'labels', 'meanSquaredError');
      var $predictions = convertToTensor(predictions, 'predictions', 'meanSquaredError');
      var $weights = null;
      if (weights != null) {
          $weights = convertToTensor(weights, 'weights', 'meanSquaredError');
      }
      assertShapesMatch($labels.shape, $predictions.shape, 'Error in meanSquaredError: ');
      var losses = squaredDifference($labels, $predictions);
      return computeWeightedLoss(losses, $weights, reduction);
  }
  var meanSquaredError = op({ meanSquaredError_: meanSquaredError_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function sigmoidCrossEntropyWithLogits_(labels, logits) {
      var $labels = convertToTensor(labels, 'labels', 'sigmoidCrossEntropyWithLogits');
      var $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropyWithLogits');
      assertShapesMatch($labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');
      /**
       * Implementation Details:
       *
       * For brevity, let `x = logits`, `z = labels`.  The logistic loss is
       *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))
       *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))
       *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))
       *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))
       *   = (1 - z) * x + log(1 + exp(-x))
       *   = x - x * z + log(1 + exp(-x))
       *
       *   For x < 0, to avoid overflow in exp(-x), we reformulate the above
       *     x - x * z + log(1 + exp(-x))
       *   = log(exp(x)) - x * z + log(1 + exp(-x))
       *   = - x * z + log(1 + exp(x))
       *
       * Hence, to ensure stability and avoid overflow, the implementation uses
       * this equivalent formulation:
       *     max(x, 0) - x * z + log(1 + exp(-abs(x)))
       */
      var maxOutput = relu($logits);
      var outputXTarget = mul($logits, $labels);
      var sigmoidOutput = log1p(exp(neg(abs($logits))));
      return add(sub(maxOutput, outputXTarget), sigmoidOutput);
  }
  /**
   * Computes the sigmoid cross entropy loss between two tensors.
   *
   * If labelSmoothing is nonzero, smooth the labels towards 1/2:
   *
   *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)
   *                         + 0.5 * labelSmoothing
   *
   * @param multiClassLabels The ground truth output tensor of shape
   * [batch_size, num_classes], same dimensions as 'predictions'.
   * @param logits The predicted outputs.
   * @param weights Tensor whose rank is either 0, or the same rank as
   *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
   *    must be either `1`, or the same as the corresponding `losses`
   *    dimension).
   * @param labelSmoothing If greater than 0, then smooth the labels.
   * @param reduction Type of reduction to apply to loss. Should be of type
   *    `Reduction`
   */
  /** @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' } */
  function sigmoidCrossEntropy_(multiClassLabels, logits, weights, labelSmoothing, reduction) {
      if (labelSmoothing === void 0) { labelSmoothing = 0; }
      if (reduction === void 0) { reduction = exports.Reduction.SUM_BY_NONZERO_WEIGHTS; }
      var $multiClassLabels = convertToTensor(multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');
      var $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropy');
      var $weights = null;
      if (weights != null) {
          $weights = convertToTensor(weights, 'weights', 'sigmoidCrossEntropy');
      }
      assertShapesMatch($multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');
      if (labelSmoothing > 0) {
          var labelSmoothingScalar = scalar(labelSmoothing);
          var one = scalar(1);
          var half = scalar(0.5);
          $multiClassLabels =
              add(mul($multiClassLabels, sub(one, labelSmoothingScalar)), mul(half, labelSmoothingScalar));
      }
      var losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);
      return computeWeightedLoss(losses, $weights, reduction);
  }
  var sigmoidCrossEntropy = op({ sigmoidCrossEntropy_: sigmoidCrossEntropy_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Computes softmax cross entropy between logits and labels.
   *
   * Measures the probability error in discrete classification tasks in which
   * the classes are mutually exclusive (each entry is in exactly one class).
   * For example, each CIFAR-10 image is labeled with one and only one label: an
   * image can be a dog or a truck, but not both.
   *
   * `NOTE`: While the classes are mutually exclusive, their probabilities need
   * not be. All that is required is that each row of labels is a valid
   * probability distribution. If they are not, the computation of the gradient
   * will be incorrect.
   *
   * `WARNING`: This op expects unscaled logits, since it performs a softmax on
   * logits internally for efficiency. Do not call this op with the output of
   * softmax, as it will produce incorrect results.
   *
   * logits and labels must have the same shape, e.g. [batch_size, num_classes]
   * and the same dtype.
   * @param labels The labels array.
   * @param logits The logits array.
   * @param dim The dimension softmax would be performed on. Defaults to `-1`
   *     which indicates the last dimension.
   */
  function softmaxCrossEntropyWithLogits_(labels, logits, dim) {
      if (dim === void 0) { dim = -1; }
      if (dim === -1) {
          dim = logits.rank - 1;
      }
      if (dim !== logits.rank - 1) {
          throw Error("Softmax cross entropy along a non-last dimension is not yet " +
              ("supported. Labels / logits was rank " + logits.rank + " ") +
              ("and dim was " + dim));
      }
      // Use a custom gradient for numerical stability.
      var customOp = customGrad(function (labels, logits, save) {
          // Reference:
          //   1. http://cs231n.github.io/linear-classify/#softmax
          //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/
          var keepDims = true;
          var lse = logSumExp(logits, [dim], keepDims);
          var logResult = sub(cast(logits, 'float32'), lse);
          save([labels, logResult]);
          var costVector = neg(mul(logResult, labels));
          var value = sum$1(costVector, [dim]);
          var gradFunc = function (dy, saved) {
              var labels = saved[0], logResult = saved[1];
              var dyShape = expandShapeToKeepDim(dy.shape, [dim]);
              return [
                  mul(reshape(dy, dyShape), sub(cast(labels, 'float32'), exp(logResult))),
                  mul(reshape(dy, dyShape), sub(exp(logResult), cast(labels, 'float32'))),
              ];
          };
          return { value: value, gradFunc: gradFunc };
      });
      return customOp(labels, logits);
  }
  /**
   * Computes the softmax cross entropy loss between two tensors.
   *
   * If labelSmoothing is nonzero, smooth the labels towards 1/2:
   *
   *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)
   *                         + labelSmoothing / numClasses
   *
   * @param onehotLabels One hot encoded labels
   *    [batch_size, num_classes], same dimensions as 'predictions'.
   * @param logits The predicted outputs.
   * @param weights Tensor whose rank is either 0, or 1, and must be
   *    broadcastable to `loss`  of shape [batch_size]
   * @param labelSmoothing If greater than 0, then smooth the labels.
   * @param reduction Type of reduction to apply to loss. Should be of type
   *    `Reduction`
   */
  /** @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' } */
  function softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing, reduction) {
      if (labelSmoothing === void 0) { labelSmoothing = 0; }
      if (reduction === void 0) { reduction = exports.Reduction.SUM_BY_NONZERO_WEIGHTS; }
      var $onehotLabels = convertToTensor(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');
      var $logits = convertToTensor(logits, 'logits', 'softmaxCrossEntropy');
      var $weights = null;
      if (weights != null) {
          $weights = convertToTensor(weights, 'weights', 'softmaxCrossEntropy');
      }
      assertShapesMatch($onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');
      if (labelSmoothing > 0) {
          var labelSmoothingScalar = scalar(labelSmoothing);
          var one = scalar(1);
          var numClasses = scalar($onehotLabels.shape[1]);
          $onehotLabels =
              add(mul($onehotLabels, sub(one, labelSmoothingScalar)), div(labelSmoothingScalar, numClasses));
      }
      var losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);
      return computeWeightedLoss(losses, $weights, reduction);
  }
  var softmaxCrossEntropy = op({ softmaxCrossEntropy_: softmaxCrossEntropy_ });

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var spectral = {
      fft: fft,
      ifft: ifft,
      rfft: rfft,
      irfft: irfft
  };
  var signal = {
      hammingWindow: hammingWindow,
      hannWindow: hannWindow,
      frame: frame,
      stft: stft,
  };
  var image = {
      resizeNearestNeighbor: resizeNearestNeighbor,
      resizeBilinear: resizeBilinear,
      rotateWithOffset: rotateWithOffset,
      cropAndResize: cropAndResize,
      nonMaxSuppression: nonMaxSuppression,
      nonMaxSuppressionAsync: nonMaxSuppressionAsync,
      nonMaxSuppressionWithScore: nonMaxSuppressionWithScore,
      nonMaxSuppressionWithScoreAsync: nonMaxSuppressionWithScoreAsync,
      nonMaxSuppressionPadded: nonMaxSuppressionPadded,
      nonMaxSuppressionPaddedAsync: nonMaxSuppressionPaddedAsync
  };
  var linalg = {
      bandPart: bandPart,
      gramSchmidt: gramSchmidt,
      qr: qr
  };
  var losses = {
      absoluteDifference: absoluteDifference,
      computeWeightedLoss: computeWeightedLoss,
      cosineDistance: cosineDistance,
      hingeLoss: hingeLoss,
      huberLoss: huberLoss,
      logLoss: logLoss,
      meanSquaredError: meanSquaredError,
      sigmoidCrossEntropy: sigmoidCrossEntropy,
      softmaxCrossEntropy: softmaxCrossEntropy
  };

  var ops = {
      __proto__: null,
      image: image,
      linalg: linalg,
      losses: losses,
      spectral: spectral,
      fused: fused_ops,
      signal: signal,
      abs: abs,
      acos: acos,
      acosh: acosh,
      add: add,
      addN: addN,
      all: all,
      any: any,
      argMax: argMax,
      argMin: argMin,
      asin: asin,
      asinh: asinh,
      atan: atan,
      atan2: atan2,
      atanh: atanh,
      avgPool: avgPool,
      avgPool3d: avgPool3d,
      basicLSTMCell: basicLSTMCell,
      batchToSpaceND: batchToSpaceND,
      batchNorm: batchNorm,
      batchNorm2d: batchNorm2d,
      batchNorm3d: batchNorm3d,
      batchNorm4d: batchNorm4d,
      broadcastTo: broadcastTo,
      buffer: buffer,
      cast: cast,
      ceil: ceil,
      clipByValue: clipByValue,
      clone: clone,
      complex: complex,
      concat: concat,
      concat1d: concat1d,
      concat2d: concat2d,
      concat3d: concat3d,
      concat4d: concat4d,
      conv1d: conv1d,
      conv2d: conv2d,
      conv2dTranspose: conv2dTranspose,
      conv3d: conv3d,
      conv3dTranspose: conv3dTranspose,
      cos: cos,
      cosh: cosh,
      cumsum: cumsum,
      depthToSpace: depthToSpace,
      depthwiseConv2d: depthwiseConv2d,
      diag: diag,
      dilation2d: dilation2d,
      div: div,
      divNoNan: divNoNan,
      dot: dot,
      elu: elu,
      equal: equal,
      erf: erf,
      exp: exp,
      expandDims: expandDims,
      expm1: expm1,
      eye: eye,
      fft: fft,
      fill: fill,
      floor: floor,
      floorDiv: floorDiv,
      gather: gather,
      greater: greater,
      greaterEqual: greaterEqual,
      ifft: ifft,
      imag: imag,
      irfft: irfft,
      isFinite: isFinite$1,
      isInf: isInf,
      isNaN: isNaN$1,
      leakyRelu: leakyRelu,
      less: less,
      lessEqual: lessEqual,
      linspace: linspace,
      localResponseNormalization: localResponseNormalization,
      log: log,
      log1p: log1p,
      logSigmoid: logSigmoid,
      logSoftmax: logSoftmax,
      logSumExp: logSumExp,
      logicalAnd: logicalAnd,
      logicalNot: logicalNot,
      logicalOr: logicalOr,
      logicalXor: logicalXor,
      matMul: matMul,
      max: max,
      maxPool: maxPool,
      maxPool3d: maxPool3d,
      maxPoolWithArgmax: maxPoolWithArgmax,
      maximum: maximum,
      mean: mean,
      min: min,
      minimum: minimum,
      mod: mod,
      moments: moments,
      mul: mul,
      multiRNNCell: multiRNNCell,
      multinomial: multinomial,
      neg: neg,
      notEqual: notEqual,
      oneHot: oneHot,
      ones: ones$1,
      onesLike: onesLike,
      outerProduct: outerProduct,
      pad: pad,
      pad1d: pad1d,
      pad2d: pad2d,
      pad3d: pad3d,
      pad4d: pad4d,
      pool: pool,
      pow: pow,
      prelu: prelu,
      print: print,
      prod: prod,
      rand: rand,
      randomGamma: randomGamma,
      randomNormal: randomNormal,
      randomUniform: randomUniform,
      range: range,
      real: real,
      reciprocal: reciprocal,
      relu: relu,
      relu6: relu6,
      reshape: reshape,
      reverse: reverse,
      reverse1d: reverse1d,
      reverse2d: reverse2d,
      reverse3d: reverse3d,
      reverse4d: reverse4d,
      rfft: rfft,
      round: round,
      rsqrt: rsqrt,
      scalar: scalar,
      selu: selu,
      separableConv2d: separableConv2d,
      setdiff1dAsync: setdiff1dAsync,
      sigmoid: sigmoid,
      sign: sign,
      sin: sin,
      sinh: sinh,
      slice: slice,
      slice1d: slice1d,
      slice2d: slice2d,
      slice3d: slice3d,
      slice4d: slice4d,
      softmax: softmax,
      softplus: softplus,
      spaceToBatchND: spaceToBatchND,
      split: split,
      sqrt: sqrt,
      square: square,
      squaredDifference: squaredDifference,
      squeeze: squeeze,
      stack: stack,
      step: step,
      stridedSlice: stridedSlice,
      sub: sub,
      sum: sum$1,
      tan: tan,
      tanh: tanh$1,
      tensor: tensor,
      tensor1d: tensor1d,
      tensor2d: tensor2d,
      tensor3d: tensor3d,
      tensor4d: tensor4d,
      tensor5d: tensor5d,
      tensor6d: tensor6d,
      tile: tile,
      topk: topk,
      truncatedNormal: truncatedNormal,
      unsortedSegmentSum: unsortedSegmentSum,
      unstack: unstack,
      variable: variable,
      where: where,
      whereAsync: whereAsync,
      zeros: zeros,
      zerosLike: zerosLike,
      op: op,
      booleanMaskAsync: booleanMaskAsync,
      equalStrict: equalStrict,
      greaterEqualStrict: greaterEqualStrict,
      greaterStrict: greaterStrict,
      lessEqualStrict: lessEqualStrict,
      lessStrict: lessStrict,
      notEqualStrict: notEqualStrict,
      addStrict: addStrict,
      divStrict: divStrict,
      maximumStrict: maximumStrict,
      minimumStrict: minimumStrict,
      modStrict: modStrict,
      mulStrict: mulStrict,
      powStrict: powStrict,
      squaredDifferenceStrict: squaredDifferenceStrict,
      subStrict: subStrict,
      transpose: transpose,
      norm: norm,
      movingAverage: movingAverage,
      scatterND: scatterND,
      sparseToDense: sparseToDense,
      gatherND: gatherND,
      dropout: dropout,
      enclosingPowerOfTwo: enclosingPowerOfTwo,
      cosineWindow: cosineWindow,
      inTopKAsync: inTopKAsync
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */
  var Optimizer = /** @class */ (function (_super) {
      __extends(Optimizer, _super);
      function Optimizer() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      /**
       * Executes `f()` and minimizes the scalar output of `f()` by computing
       * gradients of y with respect to the list of trainable variables provided by
       * `varList`. If no list is provided, it defaults to all trainable variables.
       *
       * @param f The function to execute and whose output to minimize.
       * @param returnCost Whether to return the scalar cost value produced by
       * executing `f()`.
       * @param varList An optional list of variables to update. If specified, only
       * the trainable variables in varList will be updated by minimize. Defaults to
       * all trainable variables.
       */
      /** @doc {heading: 'Training', subheading: 'Optimizers'} */
      Optimizer.prototype.minimize = function (f, returnCost, varList) {
          if (returnCost === void 0) { returnCost = false; }
          var _a = this.computeGradients(f, varList), value = _a.value, grads = _a.grads;
          if (varList != null) {
              var gradArray = varList.map(function (v) { return ({ name: v.name, tensor: grads[v.name] }); });
              this.applyGradients(gradArray);
          }
          else {
              this.applyGradients(grads);
          }
          // Dispose gradients.
          dispose(grads);
          if (returnCost) {
              return value;
          }
          else {
              value.dispose();
              return null;
          }
      };
      Object.defineProperty(Optimizer.prototype, "iterations", {
          /**
           * The number of iterations that this optimizer instance has been invoked for.
           */
          get: function () {
              if (this.iterations_ == null) {
                  this.iterations_ = 0;
              }
              return this.iterations_;
          },
          enumerable: true,
          configurable: true
      });
      Optimizer.prototype.incrementIterations = function () {
          this.iterations_ = this.iterations + 1;
      };
      /**
       * Executes f() and computes the gradient of the scalar output of f() with
       * respect to the list of trainable variables provided by `varList`. If no
       * list is provided, it defaults to all trainable variables.
       *
       * @param f The function to execute and whose output to use for computing
       * gradients with respect to variables.
       * @param varList An optional list of variables to compute gradients with
       * respect to. If specified, only the trainable variables in varList will have
       * gradients computed with respect to. Defaults to all trainable variables.
       */
      /** @doc {heading: 'Training', subheading: 'Optimizers'} */
      Optimizer.prototype.computeGradients = function (f, varList) {
          return variableGrads(f, varList);
      };
      /**
       * Dispose the variables (if any) owned by this optimizer instance.
       */
      Optimizer.prototype.dispose = function () {
          if (this.iterations_ != null) {
              dispose(this.iterations_);
          }
      };
      Optimizer.prototype.saveIterations = function () {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  if (this.iterations_ == null) {
                      this.iterations_ = 0;
                  }
                  return [2 /*return*/, {
                          name: 'iter',
                          // TODO(cais): Use 'int64' type when available.
                          tensor: scalar(this.iterations_, 'int32')
                      }];
              });
          });
      };
      Optimizer.prototype.getWeights = function () {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  throw new Error('getWeights() is not implemented for this optimizer yet.');
              });
          });
      };
      Optimizer.prototype.setWeights = function (weightValues) {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  throw new Error("setWeights() is not implemented for this optimizer class " +
                      ("" + this.getClassName()));
              });
          });
      };
      /**
       * Extract the first element of the weight values and set it
       * as the iterations counter variable of this instance of optimizer.
       *
       * @param weightValues
       * @returns Weight values with the first element consumed and excluded.
       */
      Optimizer.prototype.extractIterations = function (weightValues) {
          return __awaiter(this, void 0, void 0, function () {
              var _a;
              return __generator(this, function (_b) {
                  switch (_b.label) {
                      case 0:
                          _a = this;
                          return [4 /*yield*/, weightValues[0].tensor.data()];
                      case 1:
                          _a.iterations_ = (_b.sent())[0];
                          return [2 /*return*/, weightValues.slice(1)];
                  }
              });
          });
      };
      return Optimizer;
  }(Serializable));
  Object.defineProperty(Optimizer, Symbol.hasInstance, {
      value: function (instance) {
          return instance.minimize != null && instance.computeGradients != null &&
              instance.applyGradients != null;
      }
  });

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** @doclink Optimizer */
  var AdadeltaOptimizer = /** @class */ (function (_super) {
      __extends(AdadeltaOptimizer, _super);
      function AdadeltaOptimizer(learningRate, rho, epsilon) {
          if (epsilon === void 0) { epsilon = null; }
          var _this = _super.call(this) || this;
          _this.learningRate = learningRate;
          _this.rho = rho;
          _this.epsilon = epsilon;
          _this.accumulatedGrads = [];
          _this.accumulatedUpdates = [];
          if (epsilon == null) {
              _this.epsilon = ENGINE.backend.epsilon();
          }
          return _this;
      }
      AdadeltaOptimizer.prototype.applyGradients = function (variableGradients) {
          var _this = this;
          var variableNames = Array.isArray(variableGradients) ?
              variableGradients.map(function (item) { return item.name; }) :
              Object.keys(variableGradients);
          variableNames.forEach(function (name, i) {
              var value = ENGINE.registeredVariables[name];
              var trainable = false;
              if (_this.accumulatedGrads[i] == null) {
                  _this.accumulatedGrads[i] = {
                      originalName: name + "/accum_grad",
                      variable: tidy(function () { return zerosLike(value).variable(trainable); })
                  };
              }
              if (_this.accumulatedUpdates[i] == null) {
                  _this.accumulatedUpdates[i] = {
                      originalName: name + "/accum_var",
                      variable: tidy(function () { return zerosLike(value).variable(trainable); })
                  };
              }
              var gradient = Array.isArray(variableGradients) ?
                  variableGradients[i].tensor :
                  variableGradients[name];
              if (gradient == null) {
                  return;
              }
              var accumulatedGrad = _this.accumulatedGrads[i].variable;
              var accumulatedUpdate = _this.accumulatedUpdates[i].variable;
              tidy(function () {
                  var newAccumulatedGrad = accumulatedGrad.mul(_this.rho).add(gradient.square().mul(1 - _this.rho));
                  var updates = accumulatedUpdate.add(_this.epsilon)
                      .sqrt()
                      .div(accumulatedGrad.add(_this.epsilon).sqrt())
                      .mul(gradient);
                  var newAccumulatedUpdate = accumulatedUpdate.mul(_this.rho).add(updates.square().mul(1 - _this.rho));
                  accumulatedGrad.assign(newAccumulatedGrad);
                  accumulatedUpdate.assign(newAccumulatedUpdate);
                  var newValue = updates.mul(-_this.learningRate).add(value);
                  value.assign(newValue);
              });
          });
          this.incrementIterations();
      };
      AdadeltaOptimizer.prototype.dispose = function () {
          if (this.accumulatedUpdates != null) {
              dispose(this.accumulatedGrads.map(function (v) { return v.variable; }));
              dispose(this.accumulatedUpdates.map(function (v) { return v.variable; }));
          }
      };
      AdadeltaOptimizer.prototype.getWeights = function () {
          return __awaiter(this, void 0, void 0, function () {
              var variables;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          variables = this.accumulatedGrads.concat(this.accumulatedUpdates);
                          return [4 /*yield*/, this.saveIterations()];
                      case 1: return [2 /*return*/, [_a.sent()].concat(variables.map(function (v) { return ({ name: v.originalName, tensor: v.variable }); }))];
                  }
              });
          });
      };
      AdadeltaOptimizer.prototype.setWeights = function (weightValues) {
          return __awaiter(this, void 0, void 0, function () {
              var variableCount, trainable;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.extractIterations(weightValues)];
                      case 1:
                          weightValues = _a.sent();
                          variableCount = weightValues.length / 2;
                          trainable = false;
                          this.accumulatedGrads =
                              weightValues.slice(0, variableCount).map(function (v) { return ({
                                  originalName: v.name,
                                  variable: v.tensor.variable(trainable)
                              }); });
                          this.accumulatedUpdates =
                              weightValues.slice(variableCount, variableCount * 2)
                                  .map(function (v) { return ({
                                  originalName: v.name,
                                  variable: v.tensor.variable(trainable)
                              }); });
                          return [2 /*return*/];
                  }
              });
          });
      };
      AdadeltaOptimizer.prototype.getConfig = function () {
          return {
              'learningRate': this.learningRate,
              'rho': this.rho,
              'epsilon': this.epsilon
          };
      };
      /** @nocollapse */
      AdadeltaOptimizer.fromConfig = function (cls, config) {
          return new cls(config['learningRate'], config['rho'], config['epsilon']);
      };
      /** @nocollapse */
      AdadeltaOptimizer.className = 'Adadelta'; // Name matters for Python compatibility.
      return AdadeltaOptimizer;
  }(Optimizer));
  registerClass(AdadeltaOptimizer);

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** @doclink Optimizer */
  var AdagradOptimizer = /** @class */ (function (_super) {
      __extends(AdagradOptimizer, _super);
      function AdagradOptimizer(learningRate, initialAccumulatorValue) {
          if (initialAccumulatorValue === void 0) { initialAccumulatorValue = 0.1; }
          var _this = _super.call(this) || this;
          _this.learningRate = learningRate;
          _this.initialAccumulatorValue = initialAccumulatorValue;
          _this.accumulatedGrads = [];
          return _this;
      }
      AdagradOptimizer.prototype.applyGradients = function (variableGradients) {
          var _this = this;
          var variableNames = Array.isArray(variableGradients) ?
              variableGradients.map(function (item) { return item.name; }) :
              Object.keys(variableGradients);
          variableNames.forEach(function (name, i) {
              var value = ENGINE.registeredVariables[name];
              if (_this.accumulatedGrads[i] == null) {
                  var trainable_1 = false;
                  _this.accumulatedGrads[i] = {
                      originalName: name + "/accumulator",
                      variable: tidy(function () { return fill(value.shape, _this.initialAccumulatorValue)
                          .variable(trainable_1); })
                  };
              }
              var gradient = Array.isArray(variableGradients) ?
                  variableGradients[i].tensor :
                  variableGradients[name];
              if (gradient == null) {
                  return;
              }
              var accumulatedGrad = _this.accumulatedGrads[i].variable;
              tidy(function () {
                  var newAccumulatedGrad = accumulatedGrad.add(gradient.square());
                  accumulatedGrad.assign(newAccumulatedGrad);
                  var newValue = gradient
                      .div(newAccumulatedGrad.add(ENGINE.backend.epsilon()).sqrt())
                      .mul(-_this.learningRate)
                      .add(value);
                  value.assign(newValue);
              });
          });
          this.incrementIterations();
      };
      AdagradOptimizer.prototype.dispose = function () {
          if (this.accumulatedGrads != null) {
              dispose(this.accumulatedGrads.map(function (v) { return v.variable; }));
          }
      };
      AdagradOptimizer.prototype.getWeights = function () {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.saveIterations()];
                      case 1: 
                      // Order matters for Python compatibility.
                      return [2 /*return*/, [_a.sent()].concat(this.accumulatedGrads.map(function (v) { return ({ name: v.originalName, tensor: v.variable }); }))];
                  }
              });
          });
      };
      AdagradOptimizer.prototype.setWeights = function (weightValues) {
          return __awaiter(this, void 0, void 0, function () {
              var trainable;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.extractIterations(weightValues)];
                      case 1:
                          weightValues = _a.sent();
                          trainable = false;
                          this.accumulatedGrads = weightValues.map(function (v) { return ({ originalName: v.name, variable: v.tensor.variable(trainable) }); });
                          return [2 /*return*/];
                  }
              });
          });
      };
      AdagradOptimizer.prototype.getConfig = function () {
          return {
              'learningRate': this.learningRate,
              'initialAccumulatorValue': this.initialAccumulatorValue,
          };
      };
      /** @nocollapse */
      AdagradOptimizer.fromConfig = function (cls, config) {
          return new cls(config['learningRate'], config['initialAccumulatorValue']);
      };
      /** @nocollapse */
      AdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.
      return AdagradOptimizer;
  }(Optimizer));
  registerClass(AdagradOptimizer);

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var AdamOptimizer = /** @class */ (function (_super) {
      __extends(AdamOptimizer, _super);
      function AdamOptimizer(learningRate, beta1, beta2, epsilon) {
          if (epsilon === void 0) { epsilon = null; }
          var _this = _super.call(this) || this;
          _this.learningRate = learningRate;
          _this.beta1 = beta1;
          _this.beta2 = beta2;
          _this.epsilon = epsilon;
          _this.accumulatedFirstMoment = [];
          _this.accumulatedSecondMoment = [];
          tidy(function () {
              // accB* will be updated by batch.
              _this.accBeta1 = scalar(beta1).variable();
              _this.accBeta2 = scalar(beta2).variable();
          });
          if (epsilon == null) {
              _this.epsilon = ENGINE.backend.epsilon();
          }
          return _this;
      }
      AdamOptimizer.prototype.applyGradients = function (variableGradients) {
          var _this = this;
          var varNames = Array.isArray(variableGradients) ?
              variableGradients.map(function (v) { return v.name; }) :
              Object.keys(variableGradients);
          tidy(function () {
              var oneMinusAccBeta1 = sub(1, _this.accBeta1);
              var oneMinusAccBeta2 = sub(1, _this.accBeta2);
              varNames.forEach(function (name, i) {
                  var value = ENGINE.registeredVariables[name];
                  var trainable = false;
                  if (_this.accumulatedFirstMoment[i] == null) {
                      _this.accumulatedFirstMoment[i] = {
                          originalName: name + "/m",
                          variable: tidy(function () { return zerosLike(value).variable(trainable); })
                      };
                  }
                  if (_this.accumulatedSecondMoment[i] == null) {
                      _this.accumulatedSecondMoment[i] = {
                          originalName: name + "/v",
                          variable: tidy(function () { return zerosLike(value).variable(trainable); })
                      };
                  }
                  var gradient = Array.isArray(variableGradients) ?
                      variableGradients[i].tensor :
                      variableGradients[name];
                  if (gradient == null) {
                      return;
                  }
                  var firstMoment = _this.accumulatedFirstMoment[i].variable;
                  var secondMoment = _this.accumulatedSecondMoment[i].variable;
                  var newFirstMoment = firstMoment.mul(_this.beta1).add(gradient.mul(1 - _this.beta1));
                  var newSecondMoment = secondMoment.mul(_this.beta2)
                      .add(gradient.square().mul(1 - _this.beta2));
                  var biasCorrectedFirstMoment = newFirstMoment.div(oneMinusAccBeta1);
                  var biasCorrectedSecondMoment = newSecondMoment.div(oneMinusAccBeta2);
                  firstMoment.assign(newFirstMoment);
                  secondMoment.assign(newSecondMoment);
                  var newValue = biasCorrectedFirstMoment
                      .div(biasCorrectedSecondMoment.sqrt().add(_this.epsilon))
                      .mul(-_this.learningRate)
                      .add(value);
                  value.assign(newValue);
              });
              _this.accBeta1.assign(_this.accBeta1.mul(_this.beta1));
              _this.accBeta2.assign(_this.accBeta2.mul(_this.beta2));
          });
          this.incrementIterations();
      };
      AdamOptimizer.prototype.dispose = function () {
          this.accBeta1.dispose();
          this.accBeta2.dispose();
          if (this.accumulatedFirstMoment != null) {
              dispose(this.accumulatedFirstMoment.map(function (v) { return v.variable; }));
          }
          if (this.accumulatedSecondMoment != null) {
              dispose(this.accumulatedSecondMoment.map(function (v) { return v.variable; }));
          }
      };
      AdamOptimizer.prototype.getWeights = function () {
          return __awaiter(this, void 0, void 0, function () {
              var variables;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          variables = this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment);
                          return [4 /*yield*/, this.saveIterations()];
                      case 1: return [2 /*return*/, [_a.sent()].concat(variables.map(function (v) { return ({ name: v.originalName, tensor: v.variable }); }))];
                  }
              });
          });
      };
      AdamOptimizer.prototype.setWeights = function (weightValues) {
          return __awaiter(this, void 0, void 0, function () {
              var variableCount, trainable;
              var _this = this;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.extractIterations(weightValues)];
                      case 1:
                          weightValues = _a.sent();
                          tidy(function () {
                              _this.accBeta1.assign(pow(_this.beta1, _this.iterations_ + 1));
                              _this.accBeta2.assign(pow(_this.beta2, _this.iterations_ + 1));
                          });
                          variableCount = weightValues.length / 2;
                          trainable = false;
                          this.accumulatedFirstMoment =
                              weightValues.slice(0, variableCount).map(function (v) { return ({
                                  originalName: v.name,
                                  variable: v.tensor.variable(trainable)
                              }); });
                          this.accumulatedSecondMoment =
                              weightValues.slice(variableCount, variableCount * 2)
                                  .map(function (v) { return ({
                                  originalName: v.name,
                                  variable: v.tensor.variable(trainable)
                              }); });
                          return [2 /*return*/];
                  }
              });
          });
      };
      AdamOptimizer.prototype.getConfig = function () {
          return {
              'learningRate': this.learningRate,
              'beta1': this.beta1,
              'beta2': this.beta2,
              'epsilon': this.epsilon,
          };
      };
      /** @nocollapse */
      AdamOptimizer.fromConfig = function (cls, config) {
          return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);
      };
      /** @nocollapse */
      AdamOptimizer.className = 'Adam'; // Note: Name matters for Python compatibility.
      return AdamOptimizer;
  }(Optimizer));
  registerClass(AdamOptimizer);

  /**
  * @license
  * Copyright 2018 Google LLC. All Rights Reserved.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  * =============================================================================
  */
  var AdamaxOptimizer = /** @class */ (function (_super) {
      __extends(AdamaxOptimizer, _super);
      function AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay) {
          if (epsilon === void 0) { epsilon = null; }
          if (decay === void 0) { decay = 0.0; }
          var _this = _super.call(this) || this;
          _this.learningRate = learningRate;
          _this.beta1 = beta1;
          _this.beta2 = beta2;
          _this.epsilon = epsilon;
          _this.decay = decay;
          _this.accumulatedFirstMoment = [];
          _this.accumulatedWeightedInfNorm = [];
          tidy(function () {
              _this.iteration = scalar(0).variable();
              _this.accBeta1 = scalar(beta1).variable();
          });
          if (epsilon == null) {
              _this.epsilon = ENGINE.backend.epsilon();
          }
          return _this;
      }
      AdamaxOptimizer.prototype.applyGradients = function (variableGradients) {
          var _this = this;
          var variableNames = Array.isArray(variableGradients) ?
              variableGradients.map(function (item) { return item.name; }) :
              Object.keys(variableGradients);
          tidy(function () {
              var oneMinusAccBeta1 = sub(1, _this.accBeta1);
              var lr = div(-_this.learningRate, _this.iteration.mul(_this.decay).add(1));
              variableNames.forEach(function (name, i) {
                  var value = ENGINE.registeredVariables[name];
                  var trainable = false;
                  if (_this.accumulatedFirstMoment[i] == null) {
                      _this.accumulatedFirstMoment[i] = {
                          originalName: name + "/m",
                          variable: zerosLike(value).variable(trainable)
                      };
                  }
                  if (_this.accumulatedWeightedInfNorm[i] == null) {
                      _this.accumulatedWeightedInfNorm[i] = {
                          originalName: name + "/v",
                          variable: zerosLike(value).variable(trainable)
                      };
                  }
                  var gradient = Array.isArray(variableGradients) ?
                      variableGradients[i].tensor :
                      variableGradients[name];
                  if (gradient == null) {
                      return;
                  }
                  var firstMoment = _this.accumulatedFirstMoment[i].variable;
                  var weightedInfNorm = _this.accumulatedWeightedInfNorm[i].variable;
                  var newFirstMoment = firstMoment.mul(_this.beta1).add(gradient.mul(1 - _this.beta1));
                  var ut0 = weightedInfNorm.mul(_this.beta2);
                  var ut1 = gradient.abs();
                  var newWeightedInfNorm = ut0.maximum(ut1);
                  firstMoment.assign(newFirstMoment);
                  weightedInfNorm.assign(newWeightedInfNorm);
                  var newValue = lr.div(oneMinusAccBeta1)
                      .mul(newFirstMoment.div(newWeightedInfNorm.add(_this.epsilon)))
                      .add(value);
                  value.assign(newValue);
              });
              _this.iteration.assign(_this.iteration.add(1));
              _this.accBeta1.assign(_this.accBeta1.mul(_this.beta1));
          });
          this.incrementIterations();
      };
      AdamaxOptimizer.prototype.dispose = function () {
          this.accBeta1.dispose();
          this.iteration.dispose();
          if (this.accumulatedFirstMoment != null) {
              dispose(this.accumulatedFirstMoment.map(function (v) { return v.variable; }));
          }
          if (this.accumulatedWeightedInfNorm != null) {
              dispose(this.accumulatedWeightedInfNorm.map(function (v) { return v.variable; }));
          }
      };
      AdamaxOptimizer.prototype.getWeights = function () {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  throw new Error('getWeights() is not implemented for Adamax yet.');
              });
          });
      };
      AdamaxOptimizer.prototype.setWeights = function (weightValues) {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  throw new Error('setWeights() is not implemented for Adamax yet.');
              });
          });
      };
      AdamaxOptimizer.prototype.getConfig = function () {
          return {
              'learningRate': this.learningRate,
              'beta1': this.beta1,
              'beta2': this.beta2,
              'epsilon': this.epsilon,
              'decay': this.decay
          };
      };
      /** @nocollapse */
      AdamaxOptimizer.fromConfig = function (cls, config) {
          return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);
      };
      /** @nocollapse */
      AdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.
      return AdamaxOptimizer;
  }(Optimizer));
  registerClass(AdamaxOptimizer);

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** @doclink Optimizer */
  var SGDOptimizer = /** @class */ (function (_super) {
      __extends(SGDOptimizer, _super);
      function SGDOptimizer(learningRate) {
          var _this = _super.call(this) || this;
          _this.learningRate = learningRate;
          _this.setLearningRate(learningRate);
          return _this;
      }
      SGDOptimizer.prototype.applyGradients = function (variableGradients) {
          var _this = this;
          var varNames = Array.isArray(variableGradients) ?
              variableGradients.map(function (v) { return v.name; }) :
              Object.keys(variableGradients);
          varNames.forEach(function (name, i) {
              var gradient = Array.isArray(variableGradients) ?
                  variableGradients[i].tensor :
                  variableGradients[name];
              if (gradient == null) {
                  return;
              }
              var value = ENGINE.registeredVariables[name];
              tidy(function () {
                  var newValue = _this.c.mul(gradient).add(value);
                  value.assign(newValue);
              });
          });
          this.incrementIterations();
      };
      /**
       * Sets the learning rate of the optimizer.
       */
      SGDOptimizer.prototype.setLearningRate = function (learningRate) {
          this.learningRate = learningRate;
          if (this.c != null) {
              this.c.dispose();
          }
          this.c = keep(scalar(-learningRate));
      };
      SGDOptimizer.prototype.dispose = function () {
          this.c.dispose();
      };
      SGDOptimizer.prototype.getWeights = function () {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.saveIterations()];
                      case 1: return [2 /*return*/, [_a.sent()]];
                  }
              });
          });
      };
      SGDOptimizer.prototype.setWeights = function (weightValues) {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.extractIterations(weightValues)];
                      case 1:
                          weightValues = _a.sent();
                          if (weightValues.length !== 0) {
                              throw new Error('SGD optimizer does not have settable weights.');
                          }
                          return [2 /*return*/];
                  }
              });
          });
      };
      SGDOptimizer.prototype.getConfig = function () {
          return { 'learningRate': this.learningRate };
      };
      /** @nocollapse */
      SGDOptimizer.fromConfig = function (cls, config) {
          return new cls(config['learningRate']);
      };
      /** @nocollapse */
      SGDOptimizer.className = 'SGD'; // Note: Name matters for Python compatibility.
      return SGDOptimizer;
  }(Optimizer));
  registerClass(SGDOptimizer);

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** @doclink Optimizer */
  var MomentumOptimizer = /** @class */ (function (_super) {
      __extends(MomentumOptimizer, _super);
      function MomentumOptimizer(learningRate, momentum, useNesterov) {
          if (useNesterov === void 0) { useNesterov = false; }
          var _this = _super.call(this, learningRate) || this;
          _this.learningRate = learningRate;
          _this.momentum = momentum;
          _this.useNesterov = useNesterov;
          _this.accumulations = [];
          _this.m = scalar(_this.momentum);
          return _this;
      }
      MomentumOptimizer.prototype.applyGradients = function (variableGradients) {
          var _this = this;
          var variableNames = Array.isArray(variableGradients) ?
              variableGradients.map(function (item) { return item.name; }) :
              Object.keys(variableGradients);
          variableNames.forEach(function (name, i) {
              var value = ENGINE.registeredVariables[name];
              if (_this.accumulations[i] == null) {
                  var trainable_1 = false;
                  _this.accumulations[i] = {
                      originalName: name + "/momentum",
                      variable: tidy(function () { return zerosLike(value).variable(trainable_1); })
                  };
              }
              var accumulation = _this.accumulations[i].variable;
              var gradient = Array.isArray(variableGradients) ?
                  variableGradients[i].tensor :
                  variableGradients[name];
              if (gradient == null) {
                  return;
              }
              tidy(function () {
                  var newValue;
                  var newAccumulation = _this.m.mul(accumulation).add(gradient);
                  if (_this.useNesterov) {
                      newValue =
                          _this.c.mul(gradient.add(newAccumulation.mul(_this.m))).add(value);
                  }
                  else {
                      newValue = _this.c.mul(newAccumulation).add(value);
                  }
                  accumulation.assign(newAccumulation);
                  value.assign(newValue);
              });
          });
          this.incrementIterations();
      };
      MomentumOptimizer.prototype.dispose = function () {
          this.m.dispose();
          if (this.accumulations != null) {
              dispose(this.accumulations.map(function (v) { return v.variable; }));
          }
      };
      /**
       * Sets the momentum of the optimizer.
       *
       * @param momentum
       */
      MomentumOptimizer.prototype.setMomentum = function (momentum) {
          this.momentum = momentum;
      };
      MomentumOptimizer.prototype.getWeights = function () {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.saveIterations()];
                      case 1: 
                      // Order matters for Python compatibility.
                      return [2 /*return*/, [_a.sent()].concat(this.accumulations.map(function (v) { return ({ name: v.originalName, tensor: v.variable }); }))];
                  }
              });
          });
      };
      MomentumOptimizer.prototype.setWeights = function (weightValues) {
          return __awaiter(this, void 0, void 0, function () {
              var trainable;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.extractIterations(weightValues)];
                      case 1:
                          weightValues = _a.sent();
                          trainable = false;
                          this.accumulations = weightValues.map(function (v) { return ({ originalName: v.name, variable: v.tensor.variable(trainable) }); });
                          return [2 /*return*/];
                  }
              });
          });
      };
      MomentumOptimizer.prototype.getConfig = function () {
          return {
              'learningRate': this.learningRate,
              'momentum': this.momentum,
              'useNesterov': this.useNesterov
          };
      };
      /** @nocollapse */
      MomentumOptimizer.fromConfig = function (cls, config) {
          return new cls(config['learningRate'], config['momentum'], config['useNesterov']);
      };
      /** @nocollapse */
      MomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.
      return MomentumOptimizer;
  }(SGDOptimizer));
  registerClass(MomentumOptimizer);

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** @doclink Optimizer */
  var RMSPropOptimizer = /** @class */ (function (_super) {
      __extends(RMSPropOptimizer, _super);
      function RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered) {
          if (decay === void 0) { decay = 0.9; }
          if (momentum === void 0) { momentum = 0.0; }
          if (epsilon === void 0) { epsilon = null; }
          if (centered === void 0) { centered = false; }
          var _this = _super.call(this) || this;
          _this.learningRate = learningRate;
          _this.decay = decay;
          _this.momentum = momentum;
          _this.epsilon = epsilon;
          _this.accumulatedMeanSquares = [];
          _this.accumulatedMoments = [];
          _this.accumulatedMeanGrads = [];
          _this.centered = centered;
          if (epsilon == null) {
              _this.epsilon = ENGINE.backend.epsilon();
          }
          if (learningRate == null) {
              throw new Error("learningRate for RMSPropOptimizer must be defined.");
          }
          return _this;
      }
      RMSPropOptimizer.prototype.applyGradients = function (variableGradients) {
          var _this = this;
          var variableNames = Array.isArray(variableGradients) ?
              variableGradients.map(function (item) { return item.name; }) :
              Object.keys(variableGradients);
          variableNames.forEach(function (name, i) {
              var value = ENGINE.registeredVariables[name];
              var trainable = false;
              if (_this.accumulatedMeanSquares[i] == null) {
                  _this.accumulatedMeanSquares[i] = {
                      originalName: name + "/rms",
                      variable: tidy(function () { return zerosLike(value).variable(trainable); })
                  };
              }
              if (_this.accumulatedMoments[i] == null) {
                  _this.accumulatedMoments[i] = {
                      originalName: name + "/momentum",
                      variable: tidy(function () { return zerosLike(value).variable(trainable); })
                  };
              }
              if (_this.accumulatedMeanGrads[i] == null && _this.centered) {
                  _this.accumulatedMeanGrads[i] = {
                      originalName: name + "/mg",
                      variable: tidy(function () { return zerosLike(value).variable(trainable); })
                  };
              }
              var gradient = Array.isArray(variableGradients) ?
                  variableGradients[i].tensor :
                  variableGradients[name];
              if (gradient == null) {
                  return;
              }
              var accumulatedMeanSquare = _this.accumulatedMeanSquares[i].variable;
              var accumulatedMoments = _this.accumulatedMoments[i].variable;
              tidy(function () {
                  var newAccumulatedMeanSquare = accumulatedMeanSquare.mul(_this.decay)
                      .add(gradient.square().mul(1 - _this.decay));
                  if (_this.centered) {
                      var accumulatedMeanGrad = _this.accumulatedMeanGrads[i].variable;
                      // Centered gradient
                      var newAccumulatedMeanGrad = accumulatedMeanGrad.mul(_this.decay)
                          .add(gradient.mul(1 - _this.decay));
                      var newAccumulatedMoments = accumulatedMoments.mul(_this.momentum)
                          .add(gradient.mul(_this.learningRate)
                          .div(newAccumulatedMeanSquare
                          .sub(newAccumulatedMeanGrad.square().add(_this.epsilon))
                          .sqrt()));
                      accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
                      accumulatedMeanGrad.assign(newAccumulatedMeanGrad);
                      accumulatedMoments.assign(newAccumulatedMoments);
                      var newValue = value.sub(newAccumulatedMoments);
                      value.assign(newValue);
                  }
                  else {
                      // Plain gradient
                      var newAccumulatedMeanSquare_1 = accumulatedMeanSquare.mul(_this.decay)
                          .add(gradient.square().mul(1 - _this.decay));
                      var newAccumulatedMoments = accumulatedMoments.mul(_this.momentum)
                          .add(gradient.mul(_this.learningRate)
                          .div(newAccumulatedMeanSquare_1.add(_this.epsilon)
                          .sqrt()));
                      accumulatedMeanSquare.assign(newAccumulatedMeanSquare_1);
                      accumulatedMoments.assign(newAccumulatedMoments);
                      var newValue = value.sub(newAccumulatedMoments);
                      value.assign(newValue);
                  }
              });
          });
          this.incrementIterations();
      };
      RMSPropOptimizer.prototype.dispose = function () {
          if (this.accumulatedMeanSquares != null) {
              dispose(this.accumulatedMeanSquares.map(function (v) { return v.variable; }));
          }
          if (this.accumulatedMeanGrads != null && this.centered) {
              dispose(this.accumulatedMeanGrads.map(function (v) { return v.variable; }));
          }
          if (this.accumulatedMoments != null) {
              dispose(this.accumulatedMoments.map(function (v) { return v.variable; }));
          }
      };
      RMSPropOptimizer.prototype.getWeights = function () {
          return __awaiter(this, void 0, void 0, function () {
              var variables;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          variables = this.accumulatedMeanSquares.concat(this.accumulatedMoments);
                          if (this.centered) {
                              variables.push.apply(variables, this.accumulatedMeanGrads);
                          }
                          return [4 /*yield*/, this.saveIterations()];
                      case 1: return [2 /*return*/, [_a.sent()].concat(variables.map(function (v) { return ({ name: v.originalName, tensor: v.variable }); }))];
                  }
              });
          });
      };
      RMSPropOptimizer.prototype.setWeights = function (weightValues) {
          return __awaiter(this, void 0, void 0, function () {
              var variableCount, trainable;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, this.extractIterations(weightValues)];
                      case 1:
                          weightValues = _a.sent();
                          variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;
                          trainable = false;
                          this.accumulatedMeanSquares =
                              weightValues.slice(0, variableCount).map(function (v) { return ({
                                  originalName: v.name,
                                  variable: v.tensor.variable(trainable)
                              }); });
                          this.accumulatedMoments =
                              weightValues.slice(variableCount, variableCount * 2)
                                  .map(function (v) { return ({
                                  originalName: v.name,
                                  variable: v.tensor.variable(trainable)
                              }); });
                          if (this.centered) {
                              this.accumulatedMeanGrads =
                                  weightValues.slice(variableCount * 2, variableCount * 3)
                                      .map(function (v) { return ({
                                      originalName: v.name,
                                      variable: v.tensor.variable(trainable)
                                  }); });
                          }
                          return [2 /*return*/];
                  }
              });
          });
      };
      RMSPropOptimizer.prototype.getConfig = function () {
          return {
              'learningRate': this.learningRate,
              'decay': this.decay,
              'momentum': this.momentum,
              'epsilon': this.epsilon,
              'centered': this.centered
          };
      };
      /** @nocollapse */
      RMSPropOptimizer.fromConfig = function (cls, config) {
          return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);
      };
      /** @nocollapse */
      RMSPropOptimizer.className = 'RMSProp'; // Note: Name matters for Python compatibility.
      return RMSPropOptimizer;
  }(Optimizer));
  registerClass(RMSPropOptimizer);

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var OptimizerConstructors = /** @class */ (function () {
      function OptimizerConstructors() {
      }
      /**
       * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
       *
       * ```js
       * // Fit a quadratic function by learning the coefficients a, b, c.
       * const xs = tf.tensor1d([0, 1, 2, 3]);
       * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
       *
       * const a = tf.scalar(Math.random()).variable();
       * const b = tf.scalar(Math.random()).variable();
       * const c = tf.scalar(Math.random()).variable();
       *
       * // y = a * x^2 + b * x + c.
       * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
       * const loss = (pred, label) => pred.sub(label).square().mean();
       *
       * const learningRate = 0.01;
       * const optimizer = tf.train.sgd(learningRate);
       *
       * // Train the model.
       * for (let i = 0; i < 10; i++) {
       *   optimizer.minimize(() => loss(f(xs), ys));
       * }
       *
       * // Make predictions.
       * console.log(
       *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
       * const preds = f(xs).dataSync();
       * preds.forEach((pred, i) => {
       *   console.log(`x: ${i}, pred: ${pred}`);
       * });
       * ```
       *
       * @param learningRate The learning rate to use for the SGD algorithm.
       */
      /**
       * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
       */
      OptimizerConstructors.sgd = function (learningRate) {
          return new SGDOptimizer(learningRate);
      };
      /**
       * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
       * descent.
       *
       * See
       * [http://proceedings.mlr.press/v28/sutskever13.pdf](
       * http://proceedings.mlr.press/v28/sutskever13.pdf)
       *
       * @param learningRate The learning rate to use for the Momentum gradient
       * descent algorithm.
       * @param momentum The momentum to use for the momentum gradient descent
       * algorithm.
       */
      /**
       * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
       */
      OptimizerConstructors.momentum = function (learningRate, momentum, useNesterov) {
          if (useNesterov === void 0) { useNesterov = false; }
          return new MomentumOptimizer(learningRate, momentum, useNesterov);
      };
      /**
       * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
       * descent. This implementation uses plain momentum and is not centered
       * version of RMSProp.
       *
       * See
       * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
       * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
       *
       * @param learningRate The learning rate to use for the RMSProp gradient
       * descent algorithm.
       * @param decay The discounting factor for the history/coming gradient.
       * @param momentum The momentum to use for the RMSProp gradient descent
       * algorithm.
       * @param epsilon Small value to avoid zero denominator.
       * @param centered If true, gradients are normalized by the estimated
       * variance of the gradient.
       */
      /**
       * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
       */
      OptimizerConstructors.rmsprop = function (learningRate, decay, momentum, epsilon, centered) {
          if (decay === void 0) { decay = .9; }
          if (momentum === void 0) { momentum = 0.0; }
          if (epsilon === void 0) { epsilon = null; }
          if (centered === void 0) { centered = false; }
          return new RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered);
      };
      /**
       * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
       * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
       *
       * @param learningRate The learning rate to use for the Adam gradient
       * descent algorithm.
       * @param beta1 The exponential decay rate for the 1st moment estimates.
       * @param beta2 The exponential decay rate for the 2nd moment estimates.
       * @param epsilon A small constant for numerical stability.
       */
      /**
       * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
       */
      OptimizerConstructors.adam = function (learningRate, beta1, beta2, epsilon) {
          if (learningRate === void 0) { learningRate = 0.001; }
          if (beta1 === void 0) { beta1 = 0.9; }
          if (beta2 === void 0) { beta2 = 0.999; }
          if (epsilon === void 0) { epsilon = null; }
          return new AdamOptimizer(learningRate, beta1, beta2, epsilon);
      };
      /**
       * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
       * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
       *
       * @param learningRate The learning rate to use for the Adadelta gradient
       * descent algorithm.
       * @param rho The learning rate decay over each update.
       * @param epsilon A constant epsilon used to better condition the grad
       * update.
       */
      /**
       * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
       */
      OptimizerConstructors.adadelta = function (learningRate, rho, epsilon) {
          if (learningRate === void 0) { learningRate = .001; }
          if (rho === void 0) { rho = .95; }
          if (epsilon === void 0) { epsilon = null; }
          return new AdadeltaOptimizer(learningRate, rho, epsilon);
      };
      /**
       * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
       * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
       *
       * @param learningRate The learning rate to use for the Adamax gradient
       * descent algorithm.
       * @param beta1 The exponential decay rate for the 1st moment estimates.
       * @param beta2 The exponential decay rate for the 2nd moment estimates.
       * @param epsilon A small constant for numerical stability.
       * @param decay The learning rate decay over each update.
       */
      /**
       * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
       */
      OptimizerConstructors.adamax = function (learningRate, beta1, beta2, epsilon, decay) {
          if (learningRate === void 0) { learningRate = 0.002; }
          if (beta1 === void 0) { beta1 = 0.9; }
          if (beta2 === void 0) { beta2 = 0.999; }
          if (epsilon === void 0) { epsilon = null; }
          if (decay === void 0) { decay = 0.0; }
          return new AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay);
      };
      /**
       * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
       * See
       * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
       * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
       * or
       * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
       * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
       *
       * @param learningRate The learning rate to use for the Adagrad gradient
       * descent algorithm.
       * @param initialAccumulatorValue Starting value for the accumulators, must be
       * positive.
       */
      /**
       * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
       */
      OptimizerConstructors.adagrad = function (learningRate, initialAccumulatorValue) {
          if (initialAccumulatorValue === void 0) { initialAccumulatorValue = 0.1; }
          return new AdagradOptimizer(learningRate, initialAccumulatorValue);
      };
      return OptimizerConstructors;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var train = {
      sgd: OptimizerConstructors.sgd,
      momentum: OptimizerConstructors.momentum,
      adadelta: OptimizerConstructors.adadelta,
      adagrad: OptimizerConstructors.adagrad,
      rmsprop: OptimizerConstructors.rmsprop,
      adamax: OptimizerConstructors.adamax,
      adam: OptimizerConstructors.adam
  };

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var delayCallback = (function () {
      if (typeof requestAnimationFrame !== 'undefined') {
          return requestAnimationFrame;
      }
      else if (typeof setImmediate !== 'undefined') {
          return setImmediate;
      }
      return function (f) { return f(); }; // no delays
  })();
  /**
   * Returns a promise that resolve when a requestAnimationFrame has completed.
   *
   * On Node.js this uses setImmediate instead of requestAnimationFrame.
   *
   * This is simply a sugar method so that users can do the following:
   * `await tf.nextFrame();`
   */
  /** @doc {heading: 'Performance', subheading: 'Timing'} */
  function nextFrame() {
      return new Promise(function (resolve) { return delayCallback(function () { return resolve(); }); });
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // Returns the image center in pixels.
  function getImageCenter(center, imageHeight, imageWidth) {
      var centerX = imageWidth * (typeof center === 'number' ? center : center[0]);
      var centerY = imageHeight * (typeof center === 'number' ? center : center[1]);
      return [centerX, centerY];
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Gets the new shape of the input Tensor after it's been reshaped
   * to:
   * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),
   * inputShape[1], ..., inputShape[N-1]]
   *
   * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
   */
  function getReshaped(inputShape, blockShape, prod, batchToSpace) {
      if (batchToSpace === void 0) { batchToSpace = true; }
      var reshaped = [];
      if (batchToSpace) {
          reshaped = reshaped.concat(blockShape.slice(0));
          reshaped.push(inputShape[0] / prod);
          reshaped = reshaped.concat(inputShape.slice(1));
      }
      else {
          reshaped = reshaped.concat(inputShape[0]);
          var spatialLength = blockShape.length;
          for (var i = 0; i < spatialLength; ++i) {
              reshaped =
                  reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);
          }
          reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));
      }
      return reshaped;
  }
  /**
   * Gets the permutation that will transpose the dimensions of the
   * reshaped tensor to shape:
   *
   * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,
   * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
   *
   * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
   */
  function getPermuted(reshapedRank, blockShapeRank, batchToSpace) {
      if (batchToSpace === void 0) { batchToSpace = true; }
      var permuted = [];
      if (batchToSpace) {
          permuted.push(blockShapeRank);
          for (var i = blockShapeRank + 1; i < reshapedRank; ++i) {
              if (i <= 2 * blockShapeRank) {
                  permuted.push(i);
                  permuted.push(i - (blockShapeRank + 1));
              }
              else {
                  permuted.push(i);
              }
          }
      }
      else {
          var permutedBeforeBatch = [];
          var permutedAfterBatch = [];
          for (var i = 1; i < reshapedRank; ++i) {
              if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {
                  permutedAfterBatch.push(i);
              }
              else {
                  permutedBeforeBatch.push(i);
              }
          }
          permuted.push.apply(permuted, permutedBeforeBatch);
          permuted.push(0);
          permuted.push.apply(permuted, permutedAfterBatch);
      }
      return permuted;
  }
  /**
   * Gets the shape of the reshaped and permuted input Tensor before any cropping
   * is applied.  The new shape will be:
   *
   * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,
   * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
   *
   * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
   */
  function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace) {
      if (batchToSpace === void 0) { batchToSpace = true; }
      var reshapedPermuted = [];
      if (batchToSpace) {
          reshapedPermuted.push(inputShape[0] / prod);
      }
      else {
          reshapedPermuted.push(inputShape[0] * prod);
      }
      for (var i = 1; i < inputShape.length; ++i) {
          if (i <= blockShape.length) {
              if (batchToSpace) {
                  reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);
              }
              else {
                  reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);
              }
          }
          else {
              reshapedPermuted.push(inputShape[i]);
          }
      }
      return reshapedPermuted;
  }
  /**
   * Converts the crops argument into the beginning coordinates of a slice
   * operation.
   */
  function getSliceBeginCoords(crops, blockShape) {
      var sliceBeginCoords = [0];
      for (var i = 0; i < blockShape; ++i) {
          sliceBeginCoords.push(crops[i][0]);
      }
      return sliceBeginCoords;
  }
  /**
   * Converts the crops argument into the size of a slice operation.  When
   * combined with getSliceBeginCoords this function allows the reshaped and
   * permuted Tensor to be cropped to its final output shape of:
   *
   * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,
   * inputShape[M] * blockShape[M-1] -crops[M-1,0] -
   * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]
   *
   * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
   */
  function getSliceSize(uncroppedShape, crops, blockShape) {
      var sliceSize = uncroppedShape.slice(0, 1);
      for (var i = 0; i < blockShape; ++i) {
          sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);
      }
      return sliceSize;
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ERF_P = 0.3275911;
  var ERF_A1 = 0.254829592;
  var ERF_A2 = -0.284496736;
  var ERF_A3 = 1.421413741;
  var ERF_A4 = -1.453152027;
  var ERF_A5 = 1.061405429;

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function warn() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          msg[_i] = arguments[_i];
      }
      if (!env().getBool('IS_TEST')) {
          console.warn.apply(console, msg);
      }
  }
  function log$1() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          msg[_i] = arguments[_i];
      }
      if (!env().getBool('IS_TEST')) {
          console.log.apply(console, msg);
      }
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Merges real and imaginary Float32Arrays into a single complex Float32Array.
   *
   * The memory layout is interleaved as follows:
   * real: [r0, r1, r2]
   * imag: [i0, i1, i2]
   * complex: [r0, i0, r1, i1, r2, i2]
   *
   * This is the inverse of splitRealAndImagArrays.
   *
   * @param real The real values of the complex tensor values.
   * @param imag The imag values of the complex tensor values.
   * @returns A complex tensor as a Float32Array with merged values.
   */
  function mergeRealAndImagArrays(real, imag) {
      if (real.length !== imag.length) {
          throw new Error("Cannot merge real and imag arrays of different lengths. real:" +
              (real.length + ", imag: " + imag.length + "."));
      }
      var result = new Float32Array(real.length * 2);
      for (var i = 0; i < result.length; i += 2) {
          result[i] = real[i / 2];
          result[i + 1] = imag[i / 2];
      }
      return result;
  }
  /**
   * Splits a complex Float32Array into real and imag parts.
   *
   * The memory layout is interleaved as follows:
   * complex: [r0, i0, r1, i1, r2, i2]
   * real: [r0, r1, r2]
   * imag: [i0, i1, i2]
   *
   * This is the inverse of mergeRealAndImagArrays.
   *
   * @param complex The complex tensor values.
   * @returns An object with real and imag Float32Array components of the complex
   *     tensor.
   */
  function splitRealAndImagArrays(complex) {
      var real = new Float32Array(complex.length / 2);
      var imag = new Float32Array(complex.length / 2);
      for (var i = 0; i < complex.length; i += 2) {
          real[i / 2] = complex[i];
          imag[i / 2] = complex[i + 1];
      }
      return { real: real, imag: imag };
  }
  /**
   * Extracts even indexed complex values in the given array.
   * @param complex The complex tensor values
   */
  function complexWithEvenIndex(complex) {
      var len = Math.ceil(complex.length / 4);
      var real = new Float32Array(len);
      var imag = new Float32Array(len);
      for (var i = 0; i < complex.length; i += 4) {
          real[Math.floor(i / 4)] = complex[i];
          imag[Math.floor(i / 4)] = complex[i + 1];
      }
      return { real: real, imag: imag };
  }
  /**
   * Extracts odd indexed comple values in the given array.
   * @param complex The complex tensor values
   */
  function complexWithOddIndex(complex) {
      var len = Math.floor(complex.length / 4);
      var real = new Float32Array(len);
      var imag = new Float32Array(len);
      for (var i = 2; i < complex.length; i += 4) {
          real[Math.floor(i / 4)] = complex[i];
          imag[Math.floor(i / 4)] = complex[i + 1];
      }
      return { real: real, imag: imag };
  }
  /**
   * Get the map representing a complex value in the given array.
   * @param complex The complex tensor values.
   * @param index An index of the target complex value.
   */
  function getComplexWithIndex(complex, index) {
      var real = complex[index * 2];
      var imag = complex[index * 2 + 1];
      return { real: real, imag: imag };
  }
  /**
   * Insert a given complex value into the TypedArray.
   * @param data The array in which the complex value is inserted.
   * @param c The complex value to be inserted.
   * @param index An index of the target complex value.
   */
  function assignToTypedArray(data, real, imag, index) {
      data[index * 2] = real;
      data[index * 2 + 1] = imag;
  }
  /**
   * Make the list of exponent terms used by FFT.
   */
  function exponents(n, inverse) {
      var real = new Float32Array(n / 2);
      var imag = new Float32Array(n / 2);
      for (var i = 0; i < Math.ceil(n / 2); i++) {
          var x = (inverse ? 2 : -2) * Math.PI * (i / n);
          real[i] = Math.cos(x);
          imag[i] = Math.sin(x);
      }
      return { real: real, imag: imag };
  }
  /**
   * Make the exponent term used by FFT.
   */
  function exponent(k, n, inverse) {
      var x = (inverse ? 2 : -2) * Math.PI * (k / n);
      var real = Math.cos(x);
      var imag = Math.sin(x);
      return { real: real, imag: imag };
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function castTensor(x, dtype, backend) {
      if (dtype === 'complex64') {
          if (x.dtype === 'complex64') {
              return x.clone();
          }
          var zerosTensor = zeros(x.shape);
          var floatX = x.toFloat();
          var result = backend.complex(floatX, zerosTensor);
          zerosTensor.dispose();
          floatX.dispose();
          return result;
      }
      if (!hasEncodingLoss(x.dtype, dtype)) {
          // We don't change the underlying data, since we cast to higher
          // precision.
          return ENGINE.makeTensorFromDataId(x.dataId, x.shape, dtype);
      }
      if (x.dtype === 'complex64') {
          var real = backend.real(x);
          var result = real.cast(dtype);
          real.dispose();
          return result;
      }
      if (dtype === 'int32') {
          return backend.int(x);
      }
      else if (dtype === 'bool') {
          var zero = scalar(0, x.dtype);
          var result = backend.notEqual(x, zero);
          zero.dispose();
          return result;
      }
      else {
          throw new Error("Error in Cast: failed to cast " + x.dtype + " to " + dtype);
      }
  }
  function reshapeTensor(x, shape) {
      return ENGINE.makeTensorFromDataId(x.dataId, shape, x.dtype);
  }
  function linspaceImpl(start, stop, num) {
      var step = (stop - start) / (num - 1);
      var values = makeZerosTypedArray(num, 'float32');
      values[0] = start;
      for (var i = 1; i < values.length; i++) {
          values[i] = values[i - 1] + step;
      }
      return tensor1d(values, 'float32');
  }

  var backend_util = {
      __proto__: null,
      segment_util: segment_util,
      castTensor: castTensor,
      reshapeTensor: reshapeTensor,
      linspaceImpl: linspaceImpl,
      upcastType: upcastType,
      axesAreInnerMostDims: axesAreInnerMostDims,
      combineLocations: combineLocations,
      computeOutAndReduceShapes: computeOutAndReduceShapes,
      expandShapeToKeepDim: expandShapeToKeepDim,
      assertAxesAreInnerMostDims: assertAxesAreInnerMostDims,
      getAxesPermutation: getAxesPermutation,
      getUndoAxesPermutation: getUndoAxesPermutation,
      getInnerMostAxes: getInnerMostAxes,
      getBroadcastDims: getBroadcastDims,
      getReductionAxes: getReductionAxes,
      assertAndGetBroadcastShape: assertAndGetBroadcastShape,
      assertParamsConsistent: assertParamsConsistent,
      computeOutShape: computeOutShape$1,
      computeDilation2DInfo: computeDilation2DInfo,
      computePool2DInfo: computePool2DInfo,
      computePool3DInfo: computePool3DInfo,
      computeConv2DInfo: computeConv2DInfo,
      computeConv3DInfo: computeConv3DInfo,
      computeDefaultPad: computeDefaultPad,
      tupleValuesAreOne: tupleValuesAreOne,
      eitherStridesOrDilationsAreOne: eitherStridesOrDilationsAreOne,
      convertConv2DDataFormat: convertConv2DDataFormat,
      getFusedDyActivation: getFusedDyActivation,
      getFusedBiasGradient: getFusedBiasGradient,
      applyActivation: applyActivation,
      shouldFuse: shouldFuse,
      PARALLELIZE_THRESHOLD: PARALLELIZE_THRESHOLD,
      computeOptimalWindowSize: computeOptimalWindowSize,
      getImageCenter: getImageCenter,
      getReshaped: getReshaped,
      getPermuted: getPermuted,
      getReshapedPermuted: getReshapedPermuted,
      getSliceBeginCoords: getSliceBeginCoords,
      getSliceSize: getSliceSize,
      prepareAndValidate: prepareAndValidate,
      validateUpdateShape: validateUpdateShape,
      validateInput: validateInput,
      calculateShapes: calculateShapes,
      SELU_SCALEALPHA: SELU_SCALEALPHA,
      SELU_SCALE: SELU_SCALE,
      ERF_P: ERF_P,
      ERF_A1: ERF_A1,
      ERF_A2: ERF_A2,
      ERF_A3: ERF_A3,
      ERF_A4: ERF_A4,
      ERF_A5: ERF_A5,
      warn: warn,
      log: log$1,
      mergeRealAndImagArrays: mergeRealAndImagArrays,
      splitRealAndImagArrays: splitRealAndImagArrays,
      complexWithEvenIndex: complexWithEvenIndex,
      complexWithOddIndex: complexWithOddIndex,
      getComplexWithIndex: getComplexWithIndex,
      assignToTypedArray: assignToTypedArray,
      exponents: exponents,
      exponent: exponent,
      prepareSplitSize: prepareSplitSize
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // TODO(annxingyuan): Use this helper in WASM Split kernel once intermediate
  // kernels have been modularized in WebGL and CPU
  // https://github.com/tensorflow/tfjs/issues/2822.
  /** Shared implementation of the split kernel across WebGL and CPU. */
  function split$1(x, sizeSplits, axis) {
      var begin = new Array(x.rank).fill(0);
      var size = x.shape.slice();
      return sizeSplits.map(function (s) {
          var sliceSize = size.slice();
          sliceSize[axis] = s;
          var slice = x.slice(begin, sliceSize);
          begin[axis] += s;
          return slice;
      });
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function tile$1(xBuf, reps) {
      var newShape = new Array(xBuf.rank);
      for (var i = 0; i < newShape.length; i++) {
          newShape[i] = xBuf.shape[i] * reps[i];
      }
      var result = buffer(newShape, xBuf.dtype);
      for (var i = 0; i < result.values.length; ++i) {
          var newLoc = result.indexToLoc(i);
          var originalLoc = new Array(xBuf.rank);
          for (var j = 0; j < originalLoc.length; j++) {
              originalLoc[j] = newLoc[j] % xBuf.shape[j];
          }
          var originalIndex = xBuf.locToIndex(originalLoc);
          result.values[i] = xBuf.values[originalIndex];
      }
      return result.toTensor();
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function topkImpl(x, xShape, xDtype, k, sorted) {
      // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.
      var lastDim = xShape[xShape.length - 1];
      var _a = [x.length / lastDim, lastDim], batch = _a[0], size = _a[1];
      var allTopKVals = getTypedArrayFromDType(xDtype, batch * k);
      var allTopKIndices = getTypedArrayFromDType('int32', batch * k);
      for (var b = 0; b < batch; b++) {
          var offset = b * size;
          var vals = x.subarray(offset, offset + size);
          var valAndInd = [];
          for (var i = 0; i < vals.length; i++) {
              valAndInd.push({ value: vals[i], index: i });
          }
          valAndInd.sort(function (a, b) { return b.value - a.value; });
          var outOffset = b * k;
          var topKVals = allTopKVals.subarray(outOffset, outOffset + k);
          var topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);
          for (var i = 0; i < k; i++) {
              topKVals[i] = valAndInd[i].value;
              topKIndices[i] = valAndInd[i].index;
          }
      }
      // Reshape back to the original input shape, except that the last
      // dimension is k.
      var outputShape = xShape.slice();
      outputShape[outputShape.length - 1] = k;
      return [
          tensor(allTopKVals, outputShape, xDtype),
          tensor(allTopKIndices, outputShape, 'int32')
      ];
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */

  var kernel_impls = {
      __proto__: null,
      nonMaxSuppressionV3Impl: nonMaxSuppressionV3Impl,
      nonMaxSuppressionV4Impl: nonMaxSuppressionV4Impl,
      nonMaxSuppressionV5Impl: nonMaxSuppressionV5Impl,
      split: split$1,
      tile: tile$1,
      topkImpl: topkImpl,
      whereImpl: whereImpl
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var EPSILON_FLOAT32 = 1e-7;
  var EPSILON_FLOAT16 = 1e-4;
  /** Convenient class for storing tensor-related data. */
  var DataStorage = /** @class */ (function () {
      function DataStorage(backend, dataMover) {
          this.backend = backend;
          this.dataMover = dataMover;
          this.data = new WeakMap();
          this.dataIdsCount = 0;
      }
      DataStorage.prototype.get = function (dataId) {
          if (!this.data.has(dataId)) {
              this.dataMover.moveData(this.backend, dataId);
          }
          return this.data.get(dataId);
      };
      DataStorage.prototype.set = function (dataId, value) {
          this.dataIdsCount++;
          this.data.set(dataId, value);
      };
      DataStorage.prototype.has = function (dataId) {
          return this.data.has(dataId);
      };
      DataStorage.prototype.delete = function (dataId) {
          this.dataIdsCount--;
          return this.data.delete(dataId);
      };
      DataStorage.prototype.numDataIds = function () {
          return this.dataIdsCount;
      };
      return DataStorage;
  }());
  /**
   * The interface that defines the kernels that should be implemented when
   * adding a new backend. New backends don't need to implement every one of the
   * methods, this can be done gradually (throw an error for unimplemented
   * methods).
   */
  var KernelBackend = /** @class */ (function () {
      function KernelBackend() {
      }
      KernelBackend.prototype.time = function (f) {
          return notYetImplemented('time');
      };
      KernelBackend.prototype.read = function (dataId) {
          return notYetImplemented('read');
      };
      KernelBackend.prototype.readSync = function (dataId) {
          return notYetImplemented('readSync');
      };
      KernelBackend.prototype.numDataIds = function () {
          return notYetImplemented('numDataIds');
      };
      KernelBackend.prototype.disposeData = function (dataId) {
          return notYetImplemented('disposeData');
      };
      KernelBackend.prototype.write = function (values, shape, dtype) {
          return notYetImplemented('write');
      };
      KernelBackend.prototype.move = function (dataId, values, shape, dtype) {
          return notYetImplemented('move');
      };
      KernelBackend.prototype.memory = function () {
          return notYetImplemented('memory');
      };
      /** Returns the highest precision for floats in bits (e.g. 16 or 32) */
      KernelBackend.prototype.floatPrecision = function () {
          return notYetImplemented('floatPrecision');
      };
      /** Returns the smallest representable number.  */
      KernelBackend.prototype.epsilon = function () {
          return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
      };
      KernelBackend.prototype.batchMatMul = function (a, b, transposeA, transposeB) {
          return notYetImplemented('batchMatMul');
      };
      KernelBackend.prototype.fusedBatchMatMul = function (_a) {
          var a = _a.a, b = _a.b, transposeA = _a.transposeA, transposeB = _a.transposeB, bias = _a.bias, activation = _a.activation, preluActivationWeights = _a.preluActivationWeights;
          return notYetImplemented('fusedBatchMatMul');
      };
      KernelBackend.prototype.slice = function (x, begin, size) {
          return notYetImplemented('slice');
      };
      KernelBackend.prototype.stridedSlice = function (x, begin, end, strides) {
          return notYetImplemented('stridedSlice');
      };
      KernelBackend.prototype.unstack = function (x, axis) {
          return notYetImplemented('unstack');
      };
      KernelBackend.prototype.reverse = function (a, axis) {
          return notYetImplemented('reverse');
      };
      KernelBackend.prototype.concat = function (tensors, axis) {
          return notYetImplemented('concat');
      };
      KernelBackend.prototype.neg = function (a) {
          return notYetImplemented('neg');
      };
      KernelBackend.prototype.add = function (a, b) {
          return notYetImplemented('add');
      };
      KernelBackend.prototype.addN = function (tensors) {
          return notYetImplemented('addN');
      };
      KernelBackend.prototype.subtract = function (a, b) {
          return notYetImplemented('subtract');
      };
      KernelBackend.prototype.multiply = function (a, b) {
          return notYetImplemented('multiply');
      };
      KernelBackend.prototype.realDivide = function (a, b) {
          return notYetImplemented('realDivide');
      };
      KernelBackend.prototype.floorDiv = function (a, b) {
          return notYetImplemented('floorDiv');
      };
      KernelBackend.prototype.sum = function (x, axes) {
          return notYetImplemented('sum');
      };
      KernelBackend.prototype.prod = function (x, axes) {
          return notYetImplemented('prod');
      };
      KernelBackend.prototype.unsortedSegmentSum = function (x, segmentIds, numSegments) {
          return notYetImplemented('unsortedSegmentSum');
      };
      KernelBackend.prototype.argMin = function (x, axis) {
          return notYetImplemented('argMin');
      };
      KernelBackend.prototype.argMax = function (x, axis) {
          return notYetImplemented('argMax');
      };
      KernelBackend.prototype.equal = function (a, b) {
          return notYetImplemented('equal');
      };
      KernelBackend.prototype.notEqual = function (a, b) {
          return notYetImplemented('notEqual');
      };
      KernelBackend.prototype.less = function (a, b) {
          return notYetImplemented('less');
      };
      KernelBackend.prototype.lessEqual = function (a, b) {
          return notYetImplemented('lessEqual');
      };
      KernelBackend.prototype.greater = function (a, b) {
          return notYetImplemented('greater');
      };
      KernelBackend.prototype.greaterEqual = function (a, b) {
          return notYetImplemented('greaterEqual');
      };
      KernelBackend.prototype.logicalNot = function (a) {
          return notYetImplemented('logicalNot');
      };
      KernelBackend.prototype.logicalAnd = function (a, b) {
          return notYetImplemented('logicalAnd');
      };
      KernelBackend.prototype.logicalOr = function (a, b) {
          return notYetImplemented('logicalOr');
      };
      KernelBackend.prototype.where = function (condition) {
          return notYetImplemented('where');
      };
      KernelBackend.prototype.select = function (condition, a, b) {
          return notYetImplemented('select');
      };
      KernelBackend.prototype.topk = function (x, k, sorted) {
          return notYetImplemented('topk');
      };
      KernelBackend.prototype.min = function (x, axes) {
          return notYetImplemented('min');
      };
      KernelBackend.prototype.minimum = function (a, b) {
          return notYetImplemented('minimum');
      };
      KernelBackend.prototype.mod = function (a, b) {
          return notYetImplemented('mod');
      };
      KernelBackend.prototype.max = function (x, axes) {
          return notYetImplemented('max');
      };
      KernelBackend.prototype.maximum = function (a, b) {
          return notYetImplemented('maximum');
      };
      KernelBackend.prototype.all = function (x, axes) {
          return notYetImplemented('all');
      };
      KernelBackend.prototype.any = function (x, axes) {
          return notYetImplemented('any');
      };
      KernelBackend.prototype.squaredDifference = function (a, b) {
          return notYetImplemented('squaredDifference');
      };
      KernelBackend.prototype.ceil = function (x) {
          return notYetImplemented('ceil');
      };
      KernelBackend.prototype.floor = function (x) {
          return notYetImplemented('floor');
      };
      KernelBackend.prototype.round = function (x) {
          return notYetImplemented('round');
      };
      KernelBackend.prototype.sign = function (x) {
          return notYetImplemented('sign');
      };
      KernelBackend.prototype.isNaN = function (x) {
          return notYetImplemented('isNaN');
      };
      KernelBackend.prototype.isInf = function (x) {
          return notYetImplemented('isInf');
      };
      KernelBackend.prototype.isFinite = function (x) {
          return notYetImplemented('isFinite');
      };
      KernelBackend.prototype.pow = function (a, b) {
          return notYetImplemented('pow');
      };
      KernelBackend.prototype.exp = function (x) {
          return notYetImplemented('exp');
      };
      KernelBackend.prototype.expm1 = function (x) {
          return notYetImplemented('expm1');
      };
      KernelBackend.prototype.softmax = function (x, dim) {
          return notYetImplemented('softmax');
      };
      KernelBackend.prototype.log = function (x) {
          return notYetImplemented('log');
      };
      KernelBackend.prototype.log1p = function (x) {
          return notYetImplemented('log1p');
      };
      KernelBackend.prototype.sqrt = function (x) {
          return notYetImplemented('sqrt');
      };
      KernelBackend.prototype.rsqrt = function (x) {
          return notYetImplemented('rsqrt');
      };
      KernelBackend.prototype.square = function (x) {
          return notYetImplemented('square');
      };
      KernelBackend.prototype.reciprocal = function (x) {
          return notYetImplemented('reciprocal');
      };
      KernelBackend.prototype.relu = function (x) {
          return notYetImplemented('relu');
      };
      KernelBackend.prototype.relu6 = function (x) {
          return notYetImplemented('relu6');
      };
      KernelBackend.prototype.prelu = function (x, a) {
          return notYetImplemented('prelu');
      };
      KernelBackend.prototype.elu = function (x) {
          return notYetImplemented('elu');
      };
      KernelBackend.prototype.eluDer = function (dy, y) {
          return notYetImplemented('eluDer');
      };
      KernelBackend.prototype.selu = function (x) {
          return notYetImplemented('selu');
      };
      KernelBackend.prototype.int = function (x) {
          return notYetImplemented('int');
      };
      KernelBackend.prototype.clip = function (x, min, max) {
          return notYetImplemented('clip');
      };
      KernelBackend.prototype.abs = function (x) {
          return notYetImplemented('abs');
      };
      KernelBackend.prototype.complexAbs = function (x) {
          return notYetImplemented('complexAbs');
      };
      KernelBackend.prototype.sigmoid = function (x) {
          return notYetImplemented('sigmoid');
      };
      KernelBackend.prototype.softplus = function (x) {
          return notYetImplemented('softplus');
      };
      KernelBackend.prototype.sin = function (x) {
          return notYetImplemented('sin');
      };
      KernelBackend.prototype.cos = function (x) {
          return notYetImplemented('cos');
      };
      KernelBackend.prototype.tan = function (x) {
          return notYetImplemented('tan');
      };
      KernelBackend.prototype.asin = function (x) {
          return notYetImplemented('asin');
      };
      KernelBackend.prototype.acos = function (x) {
          return notYetImplemented('acos');
      };
      KernelBackend.prototype.atan = function (x) {
          return notYetImplemented('atan');
      };
      KernelBackend.prototype.atan2 = function (a, b) {
          return notYetImplemented('atan2');
      };
      KernelBackend.prototype.sinh = function (x) {
          return notYetImplemented('sinh');
      };
      KernelBackend.prototype.cosh = function (x) {
          return notYetImplemented('cosh');
      };
      KernelBackend.prototype.tanh = function (x) {
          return notYetImplemented('tanh');
      };
      KernelBackend.prototype.asinh = function (x) {
          return notYetImplemented('asinh');
      };
      KernelBackend.prototype.acosh = function (x) {
          return notYetImplemented('acosh');
      };
      KernelBackend.prototype.atanh = function (x) {
          return notYetImplemented('atanh');
      };
      KernelBackend.prototype.erf = function (x) {
          return notYetImplemented('erf');
      };
      KernelBackend.prototype.step = function (x, alpha) {
          return notYetImplemented('step');
      };
      KernelBackend.prototype.fusedConv2d = function (_a) {
          var input = _a.input, filter = _a.filter, convInfo = _a.convInfo, bias = _a.bias, activation = _a.activation, preluActivationWeights = _a.preluActivationWeights;
          return notYetImplemented('fusedConv2d');
      };
      KernelBackend.prototype.conv2d = function (x, filter, convInfo) {
          return notYetImplemented('conv2d');
      };
      KernelBackend.prototype.conv2dDerInput = function (dy, filter, convInfo) {
          return notYetImplemented('conv2dDerInput');
      };
      KernelBackend.prototype.conv2dDerFilter = function (x, dY, convInfo) {
          return notYetImplemented('conv2dDerFilter');
      };
      KernelBackend.prototype.fusedDepthwiseConv2D = function (_a) {
          var input = _a.input, filter = _a.filter, convInfo = _a.convInfo, bias = _a.bias, activation = _a.activation, preluActivationWeights = _a.preluActivationWeights;
          return notYetImplemented('fusedDepthwiseConv2D');
      };
      KernelBackend.prototype.depthwiseConv2D = function (input, filter, convInfo) {
          return notYetImplemented('depthwiseConv2D');
      };
      KernelBackend.prototype.depthwiseConv2DDerInput = function (dy, filter, convInfo) {
          return notYetImplemented('depthwiseConv2DDerInput');
      };
      KernelBackend.prototype.depthwiseConv2DDerFilter = function (x, dY, convInfo) {
          return notYetImplemented('depthwiseConv2DDerFilter');
      };
      KernelBackend.prototype.conv3d = function (x, filter, convInfo) {
          return notYetImplemented('conv3d');
      };
      KernelBackend.prototype.conv3dDerInput = function (dy, filter, convInfo) {
          return notYetImplemented('conv3dDerInput');
      };
      KernelBackend.prototype.conv3dDerFilter = function (x, dY, convInfo) {
          return notYetImplemented('conv3dDerFilter');
      };
      KernelBackend.prototype.maxPool = function (x, convInfo) {
          return notYetImplemented('maxPool');
      };
      KernelBackend.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {
          return notYetImplemented('maxPoolBackprop');
      };
      KernelBackend.prototype.avgPool = function (x, convInfo) {
          return notYetImplemented('avgPool');
      };
      KernelBackend.prototype.avgPoolBackprop = function (dy, x, convInfo) {
          return notYetImplemented('avgPoolBackprop');
      };
      KernelBackend.prototype.avgPool3d = function (x, convInfo) {
          return notYetImplemented('avgPool3d');
      };
      KernelBackend.prototype.avgPool3dBackprop = function (dy, x, convInfo) {
          return notYetImplemented('avgPool3dBackprop');
      };
      KernelBackend.prototype.maxPool3d = function (x, convInfo) {
          return notYetImplemented('maxPool3d');
      };
      KernelBackend.prototype.maxPool3dBackprop = function (dy, x, y, convInfo) {
          return notYetImplemented('maxPool3dBackprop');
      };
      KernelBackend.prototype.reshape = function (x, shape) {
          return notYetImplemented('reshape');
      };
      KernelBackend.prototype.cast = function (x, dtype) {
          return notYetImplemented('cast');
      };
      KernelBackend.prototype.tile = function (x, reps) {
          return notYetImplemented('tile');
      };
      KernelBackend.prototype.pad = function (x, paddings, constantValue) {
          return notYetImplemented('pad');
      };
      KernelBackend.prototype.transpose = function (x, perm) {
          return notYetImplemented('transpose');
      };
      KernelBackend.prototype.gather = function (x, indices, axis) {
          return notYetImplemented('gather');
      };
      KernelBackend.prototype.gatherND = function (x, indices) {
          return notYetImplemented('gatherND');
      };
      KernelBackend.prototype.scatterND = function (indices, updates, shape) {
          return notYetImplemented('scatterND');
      };
      KernelBackend.prototype.batchToSpaceND = function (x, blockShape, crops) {
          return notYetImplemented('batchToSpaceND');
      };
      KernelBackend.prototype.spaceToBatchND = function (x, blockShape, paddings) {
          return notYetImplemented('spaceToBatchND');
      };
      KernelBackend.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {
          return notYetImplemented('resizeBilinear');
      };
      KernelBackend.prototype.resizeBilinearBackprop = function (dy, x, alignCorners) {
          return notYetImplemented('resizeBilinearBackprop');
      };
      KernelBackend.prototype.resizeNearestNeighbor = function (x, newHEight, newWidth, alignCorners) {
          return notYetImplemented('resizeNearestNeighbor');
      };
      KernelBackend.prototype.resizeNearestNeighborBackprop = function (dy, x, alignCorners) {
          return notYetImplemented('resizeNearestNeighborBackprop');
      };
      KernelBackend.prototype.batchNorm = function (x, mean, variance, offset, scale, varianceEpsilon) {
          return notYetImplemented('batchNorm');
      };
      KernelBackend.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {
          return notYetImplemented('localResponseNormalization4D');
      };
      KernelBackend.prototype.LRNGrad = function (dy, inputImage, outputImage, radius, bias, alpha, beta) {
          return notYetImplemented('LRNGrad');
      };
      KernelBackend.prototype.multinomial = function (logits, normalized, numSamples, seed) {
          return notYetImplemented('multinomial');
      };
      KernelBackend.prototype.oneHot = function (indices, depth, onValue, offValue) {
          return notYetImplemented('oneHot');
      };
      KernelBackend.prototype.cumsum = function (x, axis, exclusive, reverse) {
          return notYetImplemented('cumsum');
      };
      KernelBackend.prototype.nonMaxSuppression = function (boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
          return notYetImplemented('nonMaxSuppression');
      };
      KernelBackend.prototype.fft = function (x) {
          return notYetImplemented('fft');
      };
      KernelBackend.prototype.ifft = function (x) {
          return notYetImplemented('ifft');
      };
      KernelBackend.prototype.complex = function (real, imag) {
          return notYetImplemented('complex');
      };
      KernelBackend.prototype.real = function (input) {
          return notYetImplemented('real');
      };
      KernelBackend.prototype.imag = function (input) {
          return notYetImplemented('imag');
      };
      KernelBackend.prototype.cropAndResize = function (image, boxes, boxIndex, cropSize, method, extrapolationValue) {
          return notYetImplemented('cropAndResize');
      };
      KernelBackend.prototype.depthToSpace = function (x, blockSize, dataFormat) {
          return notYetImplemented('depthToSpace');
      };
      // Aligns with the "SplitV" kernel in TensorFlow.
      KernelBackend.prototype.split = function (value, sizeSplits, axis) {
          return notYetImplemented('split');
      };
      KernelBackend.prototype.sparseToDense = function (sparseIndices, sparseValues, outputShape, defaultValue) {
          return notYetImplemented('sparseToDense');
      };
      KernelBackend.prototype.diag = function (x) {
          return notYetImplemented('diag');
      };
      KernelBackend.prototype.fill = function (shape, value, dtype) {
          return notYetImplemented('fill');
      };
      KernelBackend.prototype.onesLike = function (x) {
          return notYetImplemented('onesLike');
      };
      KernelBackend.prototype.zerosLike = function (x) {
          return notYetImplemented('zerosLike');
      };
      KernelBackend.prototype.linspace = function (start, stop, num) {
          return notYetImplemented('linspace');
      };
      KernelBackend.prototype.dispose = function () {
          return notYetImplemented('dispose');
      };
      return KernelBackend;
  }());
  function notYetImplemented(kernelName) {
      throw new Error("'" + kernelName + "' not yet implemented or not found in the registry. " +
          "Did you forget to import the kernel?");
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.abs = function () {
      this.throwIfDisposed();
      return abs(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.acos = function () {
      this.throwIfDisposed();
      return acos(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.acosh = function () {
      this.throwIfDisposed();
      return acosh(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.addStrict = function (x) {
      this.throwIfDisposed();
      return addStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.add = function (b) {
      this.throwIfDisposed();
      return add(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.all = function (axis, keepDims) {
      this.throwIfDisposed();
      return all(this, axis, keepDims);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.any = function (axis, keepDims) {
      this.throwIfDisposed();
      return any(this, axis, keepDims);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.argMax = function (axis) {
      this.throwIfDisposed();
      return argMax(this, axis);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.argMin = function (axis) {
      this.throwIfDisposed();
      return argMin(this, axis);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** Converts a size-1 `tf.Tensor` to a `tf.Scalar`. */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  Tensor.prototype.asScalar = function () {
      this.throwIfDisposed();
      assert(this.size === 1, function () { return 'The array must have only 1 element.'; });
      return reshape(this, []);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Casts a `tf.Tensor` to a specified dtype.
   *
   * @param dtype Data-type to cast the tensor to.
   */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  Tensor.prototype.asType = function (dtype) {
      this.throwIfDisposed();
      return cast(this, dtype);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** Converts a `tf.Tensor` to a `tf.Tensor1D`. */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  Tensor.prototype.as1D = function () {
      this.throwIfDisposed();
      return reshape(this, [this.size]);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Converts a `tf.Tensor` to a `tf.Tensor2D`.
   *
   * @param rows Number of rows in `tf.Tensor2D`.
   * @param columns Number of columns in `tf.Tensor2D`.
   */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  Tensor.prototype.as2D = function (rows, columns) {
      this.throwIfDisposed();
      return reshape(this, [rows, columns]);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Converts a `tf.Tensor` to a `tf.Tensor3D`.
   *
   * @param rows Number of rows in `tf.Tensor3D`.
   * @param columns Number of columns in `tf.Tensor3D`.
   * @param depth Depth of `tf.Tensor3D`.
   */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  Tensor.prototype.as3D = function (rows, columns, depth) {
      this.throwIfDisposed();
      return reshape(this, [rows, columns, depth]);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Converts a `tf.Tensor` to a `tf.Tensor4D`.
   *
   * @param rows Number of rows in `tf.Tensor4D`.
   * @param columns Number of columns in `tf.Tensor4D`.
   * @param depth Depth of `tf.Tensor4D`.
   * @param depth2 4th dimension of `tf.Tensor4D`.
   */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  Tensor.prototype.as4D = function (rows, columns, depth, depth2) {
      this.throwIfDisposed();
      return reshape(this, [rows, columns, depth, depth2]);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Converts a `tf.Tensor` to a `tf.Tensor5D`.
   *
   * @param rows Number of rows in `tf.Tensor5D`.
   * @param columns Number of columns in `tf.Tensor5D`.
   * @param depth Depth of `tf.Tensor5D`.
   * @param depth2 4th dimension of `tf.Tensor5D`.
   * @param depth3 5th dimension of 'tf.Tensor5D'
   */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  Tensor.prototype.as5D = function (rows, columns, depth, depth2, depth3) {
      this.throwIfDisposed();
      return reshape(this, [rows, columns, depth, depth2, depth3]);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.asin = function () {
      this.throwIfDisposed();
      return asin(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.asinh = function () {
      this.throwIfDisposed();
      return asinh(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.atan = function () {
      this.throwIfDisposed();
      return atan(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.atan2 = function (b) {
      this.throwIfDisposed();
      return atan2(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.atanh = function () {
      this.throwIfDisposed();
      return atanh(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.avgPool = function (filterSize, strides, pad, dimRoundingMode) {
      this.throwIfDisposed();
      return avgPool(this, filterSize, strides, pad, dimRoundingMode);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.batchToSpaceND = function (blockShape, crops) {
      this.throwIfDisposed();
      return batchToSpaceND(this, blockShape, crops);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.batchNorm = function (mean, variance, offset, scale, varianceEpsilon) {
      this.throwIfDisposed();
      return batchNorm(this, mean, variance, offset, scale, varianceEpsilon);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.broadcastTo = function (shape) {
      this.throwIfDisposed();
      return broadcastTo(this, shape);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.cast = function (dtype) {
      this.throwIfDisposed();
      return cast(this, dtype);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.ceil = function () {
      this.throwIfDisposed();
      return ceil(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.clipByValue = function (min, max) {
      this.throwIfDisposed();
      return clipByValue(this, min, max);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.concat = function (x, axis) {
      this.throwIfDisposed();
      if (x instanceof Tensor) {
          x = [x];
      }
      return concat([this].concat(x), axis);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.conv1d = function (filter, stride, pad, dataFormat, dilation, dimRoundingMode) {
      this.throwIfDisposed();
      return conv1d(this, filter, stride, pad, dataFormat, dilation, dimRoundingMode);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.conv2dTranspose = function (filter, outputShape, strides, pad, dimRoundingMode) {
      this.throwIfDisposed();
      return conv2dTranspose(this, filter, outputShape, strides, pad, dimRoundingMode);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.conv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
      this.throwIfDisposed();
      return conv2d(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.cos = function () {
      this.throwIfDisposed();
      return cos(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.cosh = function () {
      this.throwIfDisposed();
      return cosh(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.cumsum = function (axis, exclusive, reverse) {
      this.throwIfDisposed();
      return cumsum(this, axis, exclusive, reverse);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.depthToSpace = function (blockSize, dataFormat) {
      this.throwIfDisposed();
      return depthToSpace(this, blockSize, dataFormat);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated Use `depthwiseConv2d` instead.
   */
  Tensor.prototype.depthwiseConv2D = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
      deprecationWarn('depthwiseConv2D is deprecated, use depthwiseConv2d instead');
      this.throwIfDisposed();
      return depthwiseConv2d(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.depthwiseConv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
      this.throwIfDisposed();
      return depthwiseConv2d(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.dilation2d = function (filter, strides, pad, dilations, dataFormat) {
      this.throwIfDisposed();
      return dilation2d(this, filter, strides, pad, dilations, dataFormat);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.divNoNan = function (b) {
      this.throwIfDisposed();
      return divNoNan(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.divStrict = function (x) {
      this.throwIfDisposed();
      return divStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.div = function (b) {
      this.throwIfDisposed();
      return div(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.dot = function (b) {
      this.throwIfDisposed();
      return dot(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.elu = function () {
      this.throwIfDisposed();
      return elu(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.equalStrict = function (x) {
      this.throwIfDisposed();
      return equalStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.equal = function (b) {
      this.throwIfDisposed();
      return equal(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.erf = function () {
      this.throwIfDisposed();
      return erf(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.exp = function () {
      this.throwIfDisposed();
      return exp(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.expandDims = function (axis) {
      this.throwIfDisposed();
      return expandDims(this, axis);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.expm1 = function () {
      this.throwIfDisposed();
      return expm1(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.fft = function () {
      this.throwIfDisposed();
      return fft(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** Flatten a Tensor to a 1D array. */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  Tensor.prototype.flatten = function () {
      this.throwIfDisposed();
      return reshape(this, [this.size]);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.floor = function () {
      this.throwIfDisposed();
      return floor(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.floorDiv = function (b) {
      this.throwIfDisposed();
      return floorDiv(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.gather = function (indices, axis) {
      this.throwIfDisposed();
      return gather(this, indices, axis);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.greaterEqualStrict = function (x) {
      this.throwIfDisposed();
      return greaterEqualStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.greaterEqual = function (b) {
      this.throwIfDisposed();
      return greaterEqual(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.greaterStrict = function (x) {
      this.throwIfDisposed();
      return greaterStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.greater = function (b) {
      this.throwIfDisposed();
      return greater(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.ifft = function () {
      this.throwIfDisposed();
      return ifft(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.irfft = function () {
      this.throwIfDisposed();
      return irfft(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.isFinite = function () {
      this.throwIfDisposed();
      return isFinite$1(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.isInf = function () {
      this.throwIfDisposed();
      return isInf(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.isNaN = function () {
      this.throwIfDisposed();
      return isNaN$1(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.leakyRelu = function (alpha) {
      this.throwIfDisposed();
      return leakyRelu(this, alpha);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.lessEqualStrict = function (x) {
      this.throwIfDisposed();
      return lessEqualStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.lessEqual = function (b) {
      this.throwIfDisposed();
      return lessEqual(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.lessStrict = function (x) {
      this.throwIfDisposed();
      return lessStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.less = function (b) {
      this.throwIfDisposed();
      return less(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.localResponseNormalization = function (depthRadius, bias, alpha, beta) {
      this.throwIfDisposed();
      return localResponseNormalization(this, depthRadius, bias, alpha, beta);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.logSigmoid = function () {
      this.throwIfDisposed();
      return logSigmoid(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.logSoftmax = function (axis) {
      this.throwIfDisposed();
      return logSoftmax(this, axis);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.logSumExp = function (axis, keepDims) {
      this.throwIfDisposed();
      return logSumExp(this, axis, keepDims);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.log = function () {
      this.throwIfDisposed();
      return log(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.log1p = function () {
      this.throwIfDisposed();
      return log1p(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.logicalAnd = function (b) {
      this.throwIfDisposed();
      return logicalAnd(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.logicalNot = function () {
      this.throwIfDisposed();
      return logicalNot(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.logicalOr = function (b) {
      this.throwIfDisposed();
      return logicalOr(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.logicalXor = function (b) {
      this.throwIfDisposed();
      return logicalXor(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.matMul = function (b, transposeA, transposeB) {
      this.throwIfDisposed();
      return matMul(this, b, transposeA, transposeB);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.maxPool = function (filterSize, strides, pad, dimRoundingMode) {
      this.throwIfDisposed();
      return maxPool(this, filterSize, strides, pad, dimRoundingMode);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.max = function (axis, keepDims) {
      this.throwIfDisposed();
      return max(this, axis, keepDims);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.maximumStrict = function (x) {
      this.throwIfDisposed();
      return maximumStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.maximum = function (b) {
      this.throwIfDisposed();
      return maximum(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.mean = function (axis, keepDims) {
      this.throwIfDisposed();
      return mean(this, axis, keepDims);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.min = function (axis, keepDims) {
      this.throwIfDisposed();
      return min(this, axis, keepDims);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.minimumStrict = function (x) {
      this.throwIfDisposed();
      return minimumStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.minimum = function (b) {
      this.throwIfDisposed();
      return minimum(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.modStrict = function (x) {
      this.throwIfDisposed();
      return modStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.mod = function (b) {
      this.throwIfDisposed();
      return mod(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.mulStrict = function (x) {
      this.throwIfDisposed();
      return mulStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.mul = function (b) {
      this.throwIfDisposed();
      return mul(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.neg = function () {
      this.throwIfDisposed();
      return neg(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.norm = function (ord, axis, keepDims) {
      this.throwIfDisposed();
      return norm(this, ord, axis, keepDims);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.notEqualStrict = function (x) {
      this.throwIfDisposed();
      return notEqualStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.notEqual = function (b) {
      this.throwIfDisposed();
      return notEqual(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.oneHot = function (depth, onValue, offValue) {
      if (onValue === void 0) { onValue = 1; }
      if (offValue === void 0) { offValue = 0; }
      this.throwIfDisposed();
      return oneHot(this, depth, onValue, offValue);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.onesLike = function () {
      this.throwIfDisposed();
      return onesLike(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.pad = function (paddings, constantValue) {
      this.throwIfDisposed();
      return pad(this, paddings, constantValue);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.pool = function (windowShape, poolingType, padding, dilationRate, strides) {
      this.throwIfDisposed();
      return pool(this, windowShape, poolingType, padding, dilationRate, strides);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.powStrict = function (exp) {
      this.throwIfDisposed();
      return powStrict(this, exp);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.pow = function (exp) {
      this.throwIfDisposed();
      return pow(this, exp);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.prelu = function (alpha) {
      this.throwIfDisposed();
      return prelu(this, alpha);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.prod = function (axis, keepDims) {
      this.throwIfDisposed();
      return prod(this, axis, keepDims);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.reciprocal = function () {
      this.throwIfDisposed();
      return reciprocal(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.relu = function () {
      this.throwIfDisposed();
      return relu(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.relu6 = function () {
      this.throwIfDisposed();
      return relu6(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Reshapes the tensor into the shape of the provided tensor.
   *
   * @param x The tensor of required shape.
   */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  Tensor.prototype.reshapeAs = function (x) {
      this.throwIfDisposed();
      return reshape(this, x.shape);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.reshape = function (shape) {
      this.throwIfDisposed();
      return reshape(this, shape);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.resizeBilinear = function (newShape2D, alignCorners) {
      this.throwIfDisposed();
      return resizeBilinear(this, newShape2D, alignCorners);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.resizeNearestNeighbor = function (newShape2D, alignCorners) {
      this.throwIfDisposed();
      return resizeNearestNeighbor(this, newShape2D, alignCorners);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.reverse = function (axis) {
      this.throwIfDisposed();
      return reverse(this, axis);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.rfft = function () {
      this.throwIfDisposed();
      return rfft(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.round = function () {
      this.throwIfDisposed();
      return round(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.rsqrt = function () {
      this.throwIfDisposed();
      return rsqrt(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.selu = function () {
      this.throwIfDisposed();
      return selu(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.separableConv2d = function (depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat) {
      this.throwIfDisposed();
      return separableConv2d(this, depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.sigmoid = function () {
      this.throwIfDisposed();
      return sigmoid(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.sign = function () {
      this.throwIfDisposed();
      return sign(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.sin = function () {
      this.throwIfDisposed();
      return sin(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.sinh = function () {
      this.throwIfDisposed();
      return sinh(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.slice = function (begin, size) {
      this.throwIfDisposed();
      return slice(this, begin, size);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.softmax = function (dim) {
      this.throwIfDisposed();
      return softmax(this, dim);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.softplus = function () {
      this.throwIfDisposed();
      return softplus(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.spaceToBatchND = function (blockShape, paddings) {
      this.throwIfDisposed();
      return spaceToBatchND(this, blockShape, paddings);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.split = function (numOrSizeSplits, axis) {
      this.throwIfDisposed();
      return split(this, numOrSizeSplits, axis);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.sqrt = function () {
      this.throwIfDisposed();
      return sqrt(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.square = function () {
      this.throwIfDisposed();
      return square(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.squaredDifference = function (b) {
      this.throwIfDisposed();
      return squaredDifference(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.squaredDifferenceStrict = function (x) {
      this.throwIfDisposed();
      return squaredDifferenceStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.squeeze = function (axis) {
      this.throwIfDisposed();
      return squeeze(this, axis);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.stack = function (x, axis) {
      this.throwIfDisposed();
      var tensorsToBeStacked = x instanceof Tensor ? [this, x] : [this].concat(x);
      return stack(tensorsToBeStacked, axis);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.step = function (alpha) {
      this.throwIfDisposed();
      return step(this, alpha);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.stridedSlice = function (begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {
      this.throwIfDisposed();
      return stridedSlice(this, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * @deprecated strict variants of ops have been deprecated
   */
  Tensor.prototype.subStrict = function (x) {
      this.throwIfDisposed();
      return subStrict(this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.sub = function (b) {
      this.throwIfDisposed();
      return sub(this, b);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.sum = function (axis, keepDims) {
      this.throwIfDisposed();
      return sum$1(this, axis, keepDims);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.tan = function () {
      this.throwIfDisposed();
      return tan(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.tanh = function () {
      this.throwIfDisposed();
      return tanh$1(this);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.tile = function (reps) {
      this.throwIfDisposed();
      return tile(this, reps);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** Casts the array to type `bool` */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  Tensor.prototype.toBool = function () {
      this.throwIfDisposed();
      return cast(this, 'bool');
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** Casts the array to type `float32` */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  Tensor.prototype.toFloat = function () {
      this.throwIfDisposed();
      return cast(this, 'float32');
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /** Casts the array to type `int32` */
  /** @doc {heading: 'Tensors', subheading: 'Classes'} */
  Tensor.prototype.toInt = function () {
      this.throwIfDisposed();
      return cast(this, 'int32');
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.topk = function (k, sorted) {
      this.throwIfDisposed();
      return topk(this, k, sorted);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.transpose = function (perm) {
      this.throwIfDisposed();
      return transpose(this, perm);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.unsortedSegmentSum = function (segmentIds, numSegments) {
      this.throwIfDisposed();
      return unsortedSegmentSum(this, segmentIds, numSegments);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.unstack = function (axis) {
      this.throwIfDisposed();
      return unstack(this, axis);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.where = function (condition, x) {
      this.throwIfDisposed();
      return where(condition, this, x);
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  Tensor.prototype.zerosLike = function () {
      this.throwIfDisposed();
      return zerosLike(this);
  };

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  setOpHandler(ops);

  exports.Abs = Abs;
  exports.Acos = Acos;
  exports.Acosh = Acosh;
  exports.AdadeltaOptimizer = AdadeltaOptimizer;
  exports.AdagradOptimizer = AdagradOptimizer;
  exports.AdamOptimizer = AdamOptimizer;
  exports.AdamaxOptimizer = AdamaxOptimizer;
  exports.Add = Add;
  exports.AddN = AddN;
  exports.All = All;
  exports.Any = Any;
  exports.ArgMax = ArgMax;
  exports.ArgMin = ArgMin;
  exports.Asin = Asin;
  exports.Asinh = Asinh;
  exports.Atan = Atan;
  exports.Atan2 = Atan2;
  exports.Atanh = Atanh;
  exports.AvgPool = AvgPool;
  exports.AvgPool3D = AvgPool3D;
  exports.AvgPool3DBackprop = AvgPool3DBackprop;
  exports.AvgPoolBackprop = AvgPoolBackprop;
  exports.BatchMatMul = BatchMatMul;
  exports.BatchToSpaceND = BatchToSpaceND;
  exports.BroadcastTo = BroadcastTo;
  exports.Cast = Cast;
  exports.Ceil = Ceil;
  exports.ClipByValue = ClipByValue;
  exports.Complex = Complex;
  exports.Concat = Concat;
  exports.Conv2D = Conv2D;
  exports.Conv2DBackpropFilter = Conv2DBackpropFilter;
  exports.Conv2DBackpropInput = Conv2DBackpropInput;
  exports.Conv3D = Conv3D;
  exports.Conv3DBackpropFilterV2 = Conv3DBackpropFilterV2;
  exports.Conv3DBackpropInputV2 = Conv3DBackpropInputV2;
  exports.Cos = Cos;
  exports.Cosh = Cosh;
  exports.CropAndResize = CropAndResize;
  exports.Cumsum = Cumsum;
  exports.DataStorage = DataStorage;
  exports.DepthToSpace = DepthToSpace;
  exports.DepthwiseConv2dNative = DepthwiseConv2dNative;
  exports.DepthwiseConv2dNativeBackpropFilter = DepthwiseConv2dNativeBackpropFilter;
  exports.DepthwiseConv2dNativeBackpropInput = DepthwiseConv2dNativeBackpropInput;
  exports.Diag = Diag;
  exports.Dilation2D = Dilation2D;
  exports.Dilation2DBackpropFilter = Dilation2DBackpropFilter;
  exports.Dilation2DBackpropInput = Dilation2DBackpropInput;
  exports.Div = Div;
  exports.Elu = Elu;
  exports.EluGrad = EluGrad;
  exports.Environment = Environment;
  exports.Equal = Equal;
  exports.Erf = Erf;
  exports.Exp = Exp;
  exports.Expm1 = Expm1;
  exports.FFT = FFT;
  exports.Fill = Fill;
  exports.Floor = Floor;
  exports.FloorDiv = FloorDiv;
  exports.FromPixels = FromPixels;
  exports.FusedBatchNorm = FusedBatchNorm;
  exports.FusedConv2D = FusedConv2D;
  exports.FusedDepthwiseConv2D = FusedDepthwiseConv2D;
  exports.GatherNd = GatherNd;
  exports.GatherV2 = GatherV2;
  exports.Greater = Greater;
  exports.GreaterEqual = GreaterEqual;
  exports.IFFT = IFFT;
  exports.Identity = Identity;
  exports.Imag = Imag;
  exports.IsFinite = IsFinite;
  exports.IsInf = IsInf;
  exports.IsNan = IsNan;
  exports.KernelBackend = KernelBackend;
  exports.LRN = LRN;
  exports.LRNBackprop = LRNBackprop;
  exports.Less = Less;
  exports.LessEqual = LessEqual;
  exports.LinSpace = LinSpace;
  exports.Log = Log;
  exports.Log1p = Log1p;
  exports.LogSoftmax = LogSoftmax;
  exports.LogicalAnd = LogicalAnd;
  exports.LogicalNot = LogicalNot;
  exports.LogicalOr = LogicalOr;
  exports.Max = Max;
  exports.MaxPool = MaxPool;
  exports.MaxPool3D = MaxPool3D;
  exports.MaxPool3DBackprop = MaxPool3DBackprop;
  exports.MaxPoolBackprop = MaxPoolBackprop;
  exports.MaxPoolWithArgmax = MaxPoolWithArgmax;
  exports.Maximum = Maximum;
  exports.Mean = Mean;
  exports.Min = Min;
  exports.Minimum = Minimum;
  exports.Mod = Mod;
  exports.MomentumOptimizer = MomentumOptimizer;
  exports.Multiply = Multiply;
  exports.Negate = Negate;
  exports.NonMaxSuppressionV3 = NonMaxSuppressionV3;
  exports.NonMaxSuppressionV4 = NonMaxSuppressionV4;
  exports.NonMaxSuppressionV5 = NonMaxSuppressionV5;
  exports.NotEqual = NotEqual;
  exports.OneHot = OneHot;
  exports.OnesLike = OnesLike;
  exports.Optimizer = Optimizer;
  exports.PadV2 = PadV2;
  exports.Pool = Pool;
  exports.Pow = Pow;
  exports.Prelu = Prelu;
  exports.Prod = Prod;
  exports.RMSPropOptimizer = RMSPropOptimizer;
  exports.Range = Range;
  exports.Real = Real;
  exports.Reciprocal = Reciprocal;
  exports.Relu = Relu;
  exports.Relu6 = Relu6;
  exports.Reshape = Reshape;
  exports.ResizeBilinear = ResizeBilinear;
  exports.ResizeBilinearGrad = ResizeBilinearGrad;
  exports.ResizeNearestNeighbor = ResizeNearestNeighbor;
  exports.ResizeNearestNeighborGrad = ResizeNearestNeighborGrad;
  exports.Reverse = Reverse;
  exports.RotateWithOffset = RotateWithOffset;
  exports.Round = Round;
  exports.Rsqrt = Rsqrt;
  exports.SGDOptimizer = SGDOptimizer;
  exports.ScatterNd = ScatterNd;
  exports.SelectV2 = SelectV2;
  exports.Selu = Selu;
  exports.Sigmoid = Sigmoid;
  exports.Sign = Sign;
  exports.Sin = Sin;
  exports.Sinh = Sinh;
  exports.Slice = Slice;
  exports.Softmax = Softmax;
  exports.Softplus = Softplus;
  exports.SpaceToBatchND = SpaceToBatchND;
  exports.SparseToDense = SparseToDense;
  exports.SplitV = SplitV;
  exports.Sqrt = Sqrt;
  exports.Square = Square;
  exports.SquaredDifference = SquaredDifference;
  exports.Step = Step;
  exports.StridedSlice = StridedSlice;
  exports.Sub = Sub;
  exports.Sum = Sum;
  exports.Tan = Tan;
  exports.Tanh = Tanh;
  exports.Tensor = Tensor;
  exports.TensorBuffer = TensorBuffer;
  exports.Tile = Tile;
  exports.TopK = TopK;
  exports.Transpose = Transpose;
  exports.Unpack = Unpack;
  exports.UnsortedSegmentSum = UnsortedSegmentSum;
  exports.Variable = Variable;
  exports.ZerosLike = ZerosLike;
  exports._FusedMatMul = _FusedMatMul;
  exports.abs = abs;
  exports.acos = acos;
  exports.acosh = acosh;
  exports.add = add;
  exports.addN = addN;
  exports.addStrict = addStrict;
  exports.all = all;
  exports.any = any;
  exports.argMax = argMax;
  exports.argMin = argMin;
  exports.asin = asin;
  exports.asinh = asinh;
  exports.atan = atan;
  exports.atan2 = atan2;
  exports.atanh = atanh;
  exports.avgPool = avgPool;
  exports.avgPool3d = avgPool3d;
  exports.backend = backend;
  exports.backend_util = backend_util;
  exports.basicLSTMCell = basicLSTMCell;
  exports.batchNorm = batchNorm;
  exports.batchNorm2d = batchNorm2d;
  exports.batchNorm3d = batchNorm3d;
  exports.batchNorm4d = batchNorm4d;
  exports.batchToSpaceND = batchToSpaceND;
  exports.booleanMaskAsync = booleanMaskAsync;
  exports.broadcastTo = broadcastTo;
  exports.browser = browser;
  exports.buffer = buffer;
  exports.cast = cast;
  exports.ceil = ceil;
  exports.clipByValue = clipByValue;
  exports.clone = clone;
  exports.complex = complex;
  exports.concat = concat;
  exports.concat1d = concat1d;
  exports.concat2d = concat2d;
  exports.concat3d = concat3d;
  exports.concat4d = concat4d;
  exports.conv1d = conv1d;
  exports.conv2d = conv2d;
  exports.conv2dTranspose = conv2dTranspose;
  exports.conv3d = conv3d;
  exports.conv3dTranspose = conv3dTranspose;
  exports.cos = cos;
  exports.cosh = cosh;
  exports.cosineWindow = cosineWindow;
  exports.cumsum = cumsum;
  exports.customGrad = customGrad;
  exports.deprecationWarn = deprecationWarn;
  exports.depthToSpace = depthToSpace;
  exports.depthwiseConv2d = depthwiseConv2d;
  exports.device_util = device_util;
  exports.diag = diag;
  exports.dilation2d = dilation2d;
  exports.disableDeprecationWarnings = disableDeprecationWarnings;
  exports.dispose = dispose;
  exports.disposeVariables = disposeVariables;
  exports.div = div;
  exports.divNoNan = divNoNan;
  exports.divStrict = divStrict;
  exports.dot = dot;
  exports.dropout = dropout;
  exports.elu = elu;
  exports.enableDebugMode = enableDebugMode;
  exports.enableProdMode = enableProdMode;
  exports.enclosingPowerOfTwo = enclosingPowerOfTwo;
  exports.engine = engine;
  exports.env = env;
  exports.equal = equal;
  exports.equalStrict = equalStrict;
  exports.erf = erf;
  exports.exp = exp;
  exports.expandDims = expandDims;
  exports.expm1 = expm1;
  exports.eye = eye;
  exports.fft = fft;
  exports.fill = fill;
  exports.findBackend = findBackend;
  exports.findBackendFactory = findBackendFactory;
  exports.floor = floor;
  exports.floorDiv = floorDiv;
  exports.fused = fused_ops;
  exports.gather = gather;
  exports.gatherND = gatherND;
  exports.gather_util = gather_nd_util;
  exports.getBackend = getBackend;
  exports.getGradient = getGradient;
  exports.getKernel = getKernel;
  exports.getKernelsForBackend = getKernelsForBackend;
  exports.grad = grad;
  exports.grads = grads;
  exports.greater = greater;
  exports.greaterEqual = greaterEqual;
  exports.greaterEqualStrict = greaterEqualStrict;
  exports.greaterStrict = greaterStrict;
  exports.ifft = ifft;
  exports.imag = imag;
  exports.image = image;
  exports.inTopKAsync = inTopKAsync;
  exports.io = io;
  exports.irfft = irfft;
  exports.isFinite = isFinite$1;
  exports.isInf = isInf;
  exports.isNaN = isNaN$1;
  exports.keep = keep;
  exports.kernel_impls = kernel_impls;
  exports.leakyRelu = leakyRelu;
  exports.less = less;
  exports.lessEqual = lessEqual;
  exports.lessEqualStrict = lessEqualStrict;
  exports.lessStrict = lessStrict;
  exports.linalg = linalg;
  exports.linspace = linspace;
  exports.localResponseNormalization = localResponseNormalization;
  exports.log = log;
  exports.log1p = log1p;
  exports.logSigmoid = logSigmoid;
  exports.logSoftmax = logSoftmax;
  exports.logSumExp = logSumExp;
  exports.logicalAnd = logicalAnd;
  exports.logicalNot = logicalNot;
  exports.logicalOr = logicalOr;
  exports.logicalXor = logicalXor;
  exports.losses = losses;
  exports.matMul = matMul;
  exports.math = math;
  exports.max = max;
  exports.maxPool = maxPool;
  exports.maxPool3d = maxPool3d;
  exports.maxPoolWithArgmax = maxPoolWithArgmax;
  exports.maximum = maximum;
  exports.maximumStrict = maximumStrict;
  exports.mean = mean;
  exports.memory = memory;
  exports.min = min;
  exports.minimum = minimum;
  exports.minimumStrict = minimumStrict;
  exports.mod = mod;
  exports.modStrict = modStrict;
  exports.moments = moments;
  exports.movingAverage = movingAverage;
  exports.mul = mul;
  exports.mulStrict = mulStrict;
  exports.multiRNNCell = multiRNNCell;
  exports.multinomial = multinomial;
  exports.neg = neg;
  exports.nextFrame = nextFrame;
  exports.norm = norm;
  exports.notEqual = notEqual;
  exports.notEqualStrict = notEqualStrict;
  exports.oneHot = oneHot;
  exports.ones = ones$1;
  exports.onesLike = onesLike;
  exports.op = op;
  exports.outerProduct = outerProduct;
  exports.pad = pad;
  exports.pad1d = pad1d;
  exports.pad2d = pad2d;
  exports.pad3d = pad3d;
  exports.pad4d = pad4d;
  exports.pool = pool;
  exports.pow = pow;
  exports.powStrict = powStrict;
  exports.prelu = prelu;
  exports.print = print;
  exports.prod = prod;
  exports.profile = profile;
  exports.rand = rand;
  exports.randomGamma = randomGamma;
  exports.randomNormal = randomNormal;
  exports.randomUniform = randomUniform;
  exports.range = range;
  exports.ready = ready;
  exports.real = real;
  exports.reciprocal = reciprocal;
  exports.registerBackend = registerBackend;
  exports.registerGradient = registerGradient;
  exports.registerKernel = registerKernel;
  exports.relu = relu;
  exports.relu6 = relu6;
  exports.removeBackend = removeBackend;
  exports.reshape = reshape;
  exports.reverse = reverse;
  exports.reverse1d = reverse1d;
  exports.reverse2d = reverse2d;
  exports.reverse3d = reverse3d;
  exports.reverse4d = reverse4d;
  exports.rfft = rfft;
  exports.round = round;
  exports.rsqrt = rsqrt;
  exports.scalar = scalar;
  exports.scatterND = scatterND;
  exports.scatter_util = scatter_nd_util;
  exports.selu = selu;
  exports.separableConv2d = separableConv2d;
  exports.serialization = serialization;
  exports.setBackend = setBackend;
  exports.setPlatform = setPlatform;
  exports.setdiff1dAsync = setdiff1dAsync;
  exports.sigmoid = sigmoid;
  exports.sign = sign;
  exports.signal = signal;
  exports.sin = sin;
  exports.sinh = sinh;
  exports.slice = slice;
  exports.slice1d = slice1d;
  exports.slice2d = slice2d;
  exports.slice3d = slice3d;
  exports.slice4d = slice4d;
  exports.slice_util = slice_util;
  exports.softmax = softmax;
  exports.softplus = softplus;
  exports.spaceToBatchND = spaceToBatchND;
  exports.sparseToDense = sparseToDense;
  exports.spectral = spectral;
  exports.split = split;
  exports.sqrt = sqrt;
  exports.square = square;
  exports.squaredDifference = squaredDifference;
  exports.squaredDifferenceStrict = squaredDifferenceStrict;
  exports.squeeze = squeeze;
  exports.stack = stack;
  exports.step = step;
  exports.stridedSlice = stridedSlice;
  exports.sub = sub;
  exports.subStrict = subStrict;
  exports.sum = sum$1;
  exports.sumOutType = sumOutType;
  exports.tan = tan;
  exports.tanh = tanh$1;
  exports.tensor = tensor;
  exports.tensor1d = tensor1d;
  exports.tensor2d = tensor2d;
  exports.tensor3d = tensor3d;
  exports.tensor4d = tensor4d;
  exports.tensor5d = tensor5d;
  exports.tensor6d = tensor6d;
  exports.tensor_util = tensor_util;
  exports.test_util = test_util;
  exports.tidy = tidy;
  exports.tile = tile;
  exports.time = time;
  exports.topk = topk;
  exports.train = train;
  exports.transpose = transpose;
  exports.truncatedNormal = truncatedNormal;
  exports.unregisterGradient = unregisterGradient;
  exports.unregisterKernel = unregisterKernel;
  exports.unsortedSegmentSum = unsortedSegmentSum;
  exports.unstack = unstack;
  exports.upcastType = upcastType;
  exports.util = util;
  exports.valueAndGrad = valueAndGrad;
  exports.valueAndGrads = valueAndGrads;
  exports.variable = variable;
  exports.variableGrads = variableGrads;
  exports.version_core = version;
  exports.where = where;
  exports.whereAsync = whereAsync;
  exports.zeros = zeros;
  exports.zerosLike = zerosLike;

  Object.defineProperty(exports, '__esModule', { value: true });

})));


/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tensorflow/tfjs-core')) :
  typeof define === 'function' && define.amd ? define(['exports', '@tensorflow/tfjs-core'], factory) :
  (global = global || self, factory(global.tf = global.tf || {}, global.tf));
}(this, (function (exports, tfc) { 'use strict';

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */

  var __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  };

  function __awaiter(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [0, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * =============================================================================
   */
  /** DataType enum. */
  var DataType;
  (function (DataType) {
      DataType[DataType["DT_INVALID"] = 0] = "DT_INVALID";
      DataType[DataType["DT_FLOAT"] = 1] = "DT_FLOAT";
      DataType[DataType["DT_DOUBLE"] = 2] = "DT_DOUBLE";
      DataType[DataType["DT_INT32"] = 3] = "DT_INT32";
      DataType[DataType["DT_UINT8"] = 4] = "DT_UINT8";
      DataType[DataType["DT_INT16"] = 5] = "DT_INT16";
      DataType[DataType["DT_INT8"] = 6] = "DT_INT8";
      DataType[DataType["DT_STRING"] = 7] = "DT_STRING";
      DataType[DataType["DT_COMPLEX64"] = 8] = "DT_COMPLEX64";
      DataType[DataType["DT_INT64"] = 9] = "DT_INT64";
      DataType[DataType["DT_BOOL"] = 10] = "DT_BOOL";
      DataType[DataType["DT_QINT8"] = 11] = "DT_QINT8";
      DataType[DataType["DT_QUINT8"] = 12] = "DT_QUINT8";
      DataType[DataType["DT_QINT32"] = 13] = "DT_QINT32";
      DataType[DataType["DT_BFLOAT16"] = 14] = "DT_BFLOAT16";
      DataType[DataType["DT_FLOAT_REF"] = 101] = "DT_FLOAT_REF";
      DataType[DataType["DT_DOUBLE_REF"] = 102] = "DT_DOUBLE_REF";
      DataType[DataType["DT_INT32_REF"] = 103] = "DT_INT32_REF";
      DataType[DataType["DT_UINT8_REF"] = 104] = "DT_UINT8_REF";
      DataType[DataType["DT_INT16_REF"] = 105] = "DT_INT16_REF";
      DataType[DataType["DT_INT8_REF"] = 106] = "DT_INT8_REF";
      DataType[DataType["DT_STRING_REF"] = 107] = "DT_STRING_REF";
      DataType[DataType["DT_COMPLEX64_REF"] = 108] = "DT_COMPLEX64_REF";
      DataType[DataType["DT_INT64_REF"] = 109] = "DT_INT64_REF";
      DataType[DataType["DT_BOOL_REF"] = 110] = "DT_BOOL_REF";
      DataType[DataType["DT_QINT8_REF"] = 111] = "DT_QINT8_REF";
      DataType[DataType["DT_QUINT8_REF"] = 112] = "DT_QUINT8_REF";
      DataType[DataType["DT_QINT32_REF"] = 113] = "DT_QINT32_REF";
      DataType[DataType["DT_BFLOAT16_REF"] = 114] = "DT_BFLOAT16_REF";
  })(DataType || (DataType = {}));
  var SaverDef;
  (function (SaverDef) {
      /** CheckpointFormatVersion enum. */
      var CheckpointFormatVersion;
      (function (CheckpointFormatVersion) {
          CheckpointFormatVersion[CheckpointFormatVersion["LEGACY"] = 0] = "LEGACY";
          CheckpointFormatVersion[CheckpointFormatVersion["V1"] = 1] = "V1";
          CheckpointFormatVersion[CheckpointFormatVersion["V2"] = 2] = "V2";
      })(CheckpointFormatVersion = SaverDef.CheckpointFormatVersion || (SaverDef.CheckpointFormatVersion = {}));
  })(SaverDef || (SaverDef = {}));

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var CUSTOM_OPS = {};
  /**
   * Register an Op for graph model executor. This allow you to register
   * TensorFlow custom op or override existing op.
   *
   * Here is an example of registering a new MatMul Op.
   * ```js
   * const customMatmul = (node) =>
   *    tf.matMul(
   *        node.inputs[0], node.inputs[1],
   *        node.attrs['transpose_a'], node.attrs['transpose_b']);
   *
   * tf.registerOp('MatMul', customMatmul);
   * ```
   * The inputs and attrs of the node object is based on the TensorFlow op
   * registry.
   *
   * @param name The Tensorflow Op name.
   * @param opFunc An op function which is called with the current graph node
   * during execution and needs to return a tensor or a list of tensors. The node
   * has the following attributes:
   *    - attr: A map from attribute name to its value
   *    - inputs: A list of input tensors
   */
  /** @doc {heading: 'Models', subheading: 'Op Registry'} */
  function registerOp(name, opFunc) {
      var opMapper = {
          tfOpName: name,
          category: 'custom',
          inputs: [],
          attrs: [],
          customExecutor: opFunc
      };
      CUSTOM_OPS[name] = opMapper;
  }
  /**
   * Retrieve the OpMapper object for the registered op.
   *
   * @param name The Tensorflow Op name.
   */
  /** @doc {heading: 'Models', subheading: 'Op Registry'} */
  function getRegisteredOp(name) {
      return CUSTOM_OPS[name];
  }
  /**
   * Deregister the Op for graph model executor.
   *
   * @param name The Tensorflow Op name.
   */
  /** @doc {heading: 'Models', subheading: 'Op Registry'} */
  function deregisterOp(name) {
      delete CUSTOM_OPS[name];
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function getParamValue(paramName, node, tensorMap, context) {
      var inputParam = node.inputParams[paramName];
      if (inputParam && inputParam.inputIndexStart !== undefined) {
          var start = inputParam.inputIndexStart;
          var end = inputParam.inputIndexEnd === 0 ?
              undefined :
              (inputParam.inputIndexEnd === undefined ? start + 1 :
                  inputParam.inputIndexEnd);
          if (inputParam.type === 'tensor') {
              return getTensor(node.inputNames[inputParam.inputIndexStart], tensorMap, context);
          }
          if (inputParam.type === 'tensors') {
              var inputs = node.inputNames.slice(start, end);
              return inputs.map(function (name) { return getTensor(name, tensorMap, context); });
          }
          var tensor = getTensor(node.inputNames.slice(start)[0], tensorMap, context);
          var data = tensor.dataSync();
          return inputParam.type === 'number' ?
              data[0] :
              tfc.util.toNestedArray(tensor.shape, data);
      }
      var attrParam = node.attrParams[paramName];
      return attrParam && attrParam.value;
  }
  /**
   * Retrieve the tensor based on input name by extracting the node name and
   * output index information.
   * @param name Node input name
   * @param tensorsMap Tensors map keyed by the node
   */
  function getTensor(name, tensorsMap, context) {
      var _a = parseNodeName(name), nodeName = _a[0], index = _a[1];
      var contextId = context.currentContextIds.find(function (contextId) {
          return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];
      });
      return contextId !== undefined ?
          tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :
          undefined;
  }
  /**
   * Retrieve the tensors based on input name for current context.
   * @param name Node input name
   * @param tensorsMap Tensors map keyed by the node
   */
  function getTensorsForCurrentContenxt(name, tensorsMap, context) {
      return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];
  }
  /**
   * Returns the node name and index from the Node input name.
   * @param inputName The input name of the node, in format of
   * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is
   * default to 0.
   */
  function getNodeNameAndIndex(inputName, context) {
      var _a = parseNodeName(inputName), nodeName = _a[0], index = _a[1];
      return [
          getNodeNameWithContextId(nodeName, context && context.currentContextId),
          index
      ];
  }
  function getNodeNameWithContextId(name, contextId) {
      return !!contextId ? name + "-" + contextId : name;
  }
  function parseNodeName(name) {
      var parts = name.split(':');
      if (parts.length === 1) {
          return [name, 0];
      }
      var nodeName = parts[0];
      return [nodeName, Number(parts[parts.length - 1])];
  }
  function getPadding(node, tensorMap, context) {
      var pad = getParamValue('pad', node, tensorMap, context);
      if (pad === 'explicit') {
          // This is 1d array, we need to convert it to 2d array
          pad = getParamValue('explicitPaddings', node, tensorMap, context);
          var explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];
          for (var i = 0; i < 4; i++) {
              explicitPadding[i][0] = pad[i * 2];
              explicitPadding[i][1] = pad[i * 2 + 1];
          }
          return explicitPadding;
      }
      return pad;
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json = [
      {
          'tfOpName': 'Add',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'AddV2',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'AddN',
          'category': 'arithmetic',
          'inputs': [{ 'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors' }]
      },
      {
          'tfOpName': 'BiasAdd',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Sub',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'RealDiv',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Div',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'DivNoNan',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'FloorDiv',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Mul',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Maximum',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' }
          ]
      },
      {
          'tfOpName': 'Minimum',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' }
          ]
      },
      {
          'tfOpName': 'Pow',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'SquaredDifference',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Mod',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'FloorMod',
          'category': 'arithmetic',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      }
  ];

  var arithmetic = {
      __proto__: null,
      json: json
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$1 = [
      {
          'tfOpName': 'Abs',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Acos',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Asin',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Atan',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Atan2',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'y', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Ceil',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'ClipByValue',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number' },
              { 'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number' }
          ]
      },
      {
          'tfOpName': 'Complex',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'real', 'type': 'tensor' },
              { 'start': 1, 'name': 'imag', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'ComplexAbs',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Cos',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Cosh',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Elu',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Exp',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Floor',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Log',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Imag',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                  'tfName': 'Tout',
                  'name': 'outputType',
                  'type': 'dtype',
                  'notSupported': true
              }
          ]
      },
      {
          'tfOpName': 'Neg',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Real',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                  'tfName': 'Tout',
                  'name': 'outputType',
                  'type': 'dtype',
                  'notSupported': true
              }
          ]
      },
      {
          'tfOpName': 'Prelu',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'alpha', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Relu',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Relu6',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                  'tfName': 'clipValueMin',
                  'name': 'clipValueMin',
                  'type': 'number',
                  'defaultValue': 0
              },
              {
                  'tfName': 'clipValueMax',
                  'name': 'clipValueMax',
                  'type': 'number',
                  'defaultValue': 6
              }
          ]
      },
      {
          'tfOpName': 'Selu',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Sigmoid',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Sin',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Sinh',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Sqrt',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Rsqrt',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Square',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Tan',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Tanh',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Sign',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Round',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Expm1',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Log1p',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Reciprocal',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Softplus',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Asinh',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Acosh',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Atanh',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Erf',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Prod',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axes', 'type': 'number[]' },
          ],
          'attrs': [
              {
                  'tfName': 'keep_dims',
                  'name': 'keepDims',
                  'type': 'bool',
                  'notSupported': true
              },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'LeakyRelu',
          'category': 'basic_math',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              {
                  'tfName': 'alpha',
                  'name': 'alpha',
                  'type': 'number',
                  'defaultValue': 0.2
              },
              {
                  'tfName': 'T',
                  'name': 'dtype',
                  'type': 'dtype',
                  'notSupported': true
              }
          ]
      }
  ];

  var basicMath = {
      __proto__: null,
      json: json$1
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$2 = [
      {
          'tfOpName': 'LoopCond',
          'category': 'control',
          'inputs': [{ 'start': 0, 'name': 'pred', 'type': 'tensor' }]
      },
      {
          'tfOpName': 'Switch',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'data', 'type': 'tensor' },
              { 'start': 1, 'name': 'pred', 'type': 'tensor' }
          ]
      },
      {
          'tfOpName': 'Merge',
          'category': 'control',
          'inputs': [{ 'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors' }]
      },
      {
          'tfOpName': 'Enter',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },
              { 'tfName': 'frame_name', 'name': 'frameName', 'type': 'string' },
              { 'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool' }
          ]
      },
      {
          'tfOpName': 'Exit',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'NextIteration',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'TensorArrayV3',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'size', 'type': 'number' },
          ],
          'attrs': [
              { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },
              { 'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape' },
              { 'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool' },
              { 'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool' },
              {
                  'tfName': 'identical_element_shapes',
                  'name': 'identicalElementShapes',
                  'type': 'bool'
              },
              { 'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string' }
          ]
      },
      {
          'tfOpName': 'TensorArrayWriteV3',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
              { 'start': 1, 'name': 'index', 'type': 'number' },
              { 'start': 2, 'name': 'tensor', 'type': 'tensor' },
              { 'start': 3, 'name': 'flowIn', 'type': 'number' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'TensorArrayReadV3',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
              { 'start': 1, 'name': 'index', 'type': 'number' },
              { 'start': 2, 'name': 'flowIn', 'type': 'number' },
          ],
          'attrs': [{
                  'tfName': 'dtype',
                  'name': 'dtype',
                  'type': 'dtype',
                  'notSupported': true
              }]
      },
      {
          'tfOpName': 'TensorArrayGatherV3',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
              { 'start': 1, 'name': 'indices', 'type': 'number[]' },
              { 'start': 2, 'name': 'flowIn', 'type': 'number' },
          ],
          'attrs': [
              { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },
              { 'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape' }
          ]
      },
      {
          'tfOpName': 'TensorArrayScatterV3',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
              { 'start': 1, 'name': 'indices', 'type': 'number[]' },
              { 'start': 2, 'name': 'tensor', 'type': 'tensor' },
              { 'start': 3, 'name': 'flowIn', 'type': 'number' },
          ],
          'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'TensorArrayConcatV3',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
              { 'start': 1, 'name': 'flowIn', 'type': 'number' },
          ],
          'attrs': [
              { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }, {
                  'tfName': 'element_shape_except0',
                  'name': 'elementShapeExcept0',
                  'type': 'shape',
                  'notSupported': true
              }
          ]
      },
      {
          'tfOpName': 'TensorArraySplitV3',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
              { 'start': 1, 'name': 'tensor', 'type': 'tensor' },
              { 'start': 2, 'name': 'lengths', 'type': 'number[]' },
              { 'start': 3, 'name': 'flowIn', 'type': 'number' },
          ],
          'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'TensorArraySizeV3',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
              { 'start': 1, 'name': 'flowIn', 'type': 'number' }
          ]
      },
      {
          'tfOpName': 'TensorArrayCloseV3',
          'category': 'control',
          'inputs': [{ 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' }]
      },
      {
          'tfOpName': 'StatelessIf',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'cond', 'type': 'tensor' },
              { 'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors' }
          ],
          'attrs': [
              { 'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func' },
              { 'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func' }
          ]
      },
      {
          'tfOpName': 'If',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'cond', 'type': 'tensor' },
              { 'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors' }
          ],
          'attrs': [
              { 'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func' },
              { 'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func' }
          ]
      },
      {
          'tfOpName': 'StatelessWhile',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors' },
          ],
          'attrs': [
              { 'tfName': 'cond', 'name': 'cond', 'type': 'func' },
              { 'tfName': 'body', 'name': 'body', 'type': 'func' }
          ]
      },
      {
          'tfOpName': 'While',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors' },
          ],
          'attrs': [
              { 'tfName': 'cond', 'name': 'cond', 'type': 'func' },
              { 'tfName': 'body', 'name': 'body', 'type': 'func' }
          ]
      },
      {
          'tfOpName': 'TensorListScatter',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
              { 'start': 1, 'name': 'indices', 'type': 'number[]' },
              { 'start': 2, 'name': 'elementShape', 'type': 'shape' }
          ],
          'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'TensorListScatterV2',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
              { 'start': 1, 'name': 'indices', 'type': 'number[]' },
              { 'start': 2, 'name': 'elementShape', 'type': 'shape' },
              { 'start': 3, 'name': 'numElements', 'type': 'number' },
          ],
          'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'TensorListGather',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
              { 'start': 1, 'name': 'indices', 'type': 'number[]' },
              { 'start': 2, 'name': 'elementShape', 'type': 'shape' },
          ],
          'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'TensorListGetItem',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
              { 'start': 1, 'name': 'index', 'type': 'number' },
              { 'start': 2, 'name': 'elementShape', 'type': 'shape' },
          ],
          'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'TensorListSetItem',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
              { 'start': 1, 'name': 'index', 'type': 'number' },
              { 'start': 2, 'name': 'tensor', 'type': 'tensor' },
          ],
          'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'TensorListReserve',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'elementShape', 'type': 'shape' },
              { 'start': 1, 'name': 'numElements', 'type': 'number' },
          ],
          'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'TensorListFromTensor',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
              { 'start': 1, 'name': 'elementShape', 'type': 'shape' }
          ],
          'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'TensorListStack',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
              { 'start': 1, 'name': 'elementShape', 'type': 'shape' },
          ],
          'attrs': [
              { 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' },
              { 'tfName': 'num_elements', 'name': 'numElements', 'type': 'dtype' }
          ]
      },
      {
          'tfOpName': 'TensorListSplit',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
              { 'start': 1, 'name': 'elementShape', 'type': 'shape' },
              { 'start': 2, 'name': 'lengths', 'type': 'number[]' },
          ],
          'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'TensorListConcat',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape' },
              { 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }
          ]
      },
      {
          'tfOpName': 'TensorListPopBack',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
              { 'start': 1, 'name': 'elementShape', 'type': 'shape' },
          ],
          'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'TensorListPushBack',
          'category': 'control',
          'inputs': [
              { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
              { 'start': 1, 'name': 'tensor', 'type': 'tensor' },
          ],
          'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
      },
  ];

  var control = {
      __proto__: null,
      json: json$2
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$3 = [
      {
          'tfOpName': 'AvgPool',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'notSupported': true
              },
              { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'MaxPool',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'notSupported': true
              },
              { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'MaxPoolWithArgmax',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },
              { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' }, {
                  'tfName': 'include_batch_in_index',
                  'name': 'includeBatchInIndex',
                  'type': 'bool'
              },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'AvgPool3D',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'notSupported': true
              },
              { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'MaxPool3D',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'notSupported': true
              },
              { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Conv1D',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'filter', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'stride', 'name': 'stride', 'type': 'number' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'defaultValue': 'NWC'
              },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                  'tfName': 'dilation',
                  'name': 'dilation',
                  'type': 'number',
                  'defaultValue': 1
              }
          ]
      },
      {
          'tfOpName': 'Conv2D',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'filter', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },
              { 'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool' }, {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'defaultValue': 'NHWC'
              },
              {
                  'tfName': 'explicit_paddings',
                  'name': 'explicitPaddings',
                  'type': 'number[]',
                  'defaultValue': []
              },
              { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }
          ]
      },
      {
          'tfOpName': '_FusedConv2D',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'filter', 'type': 'tensor' },
              { 'start': 2, end: 0, 'name': 'args', 'type': 'tensors' },
          ],
          'attrs': [
              { 'tfName': 'num_args', 'name': 'numArgs', 'type': 'number' },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },
              {
                  'tfName': 'explicit_paddings',
                  'name': 'explicitPaddings',
                  'type': 'number[]',
                  'defaultValue': []
              },
              {
                  'tfName': 'use_cudnn_on_gpu',
                  'name': 'useCudnnOnGpu',
                  'type': 'bool',
                  'defaultValue': true
              },
              {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'defaultValue': 'NHWC'
              },
              {
                  'tfName': 'dilations',
                  'name': 'dilations',
                  'type': 'number[]',
                  'defaultValue': [1, 1, 1, 1]
              },
              {
                  'tfName': 'fused_ops',
                  'name': 'fusedOps',
                  'type': 'string[]',
                  'defaultValue': []
              },
              {
                  'tfName': 'epsilon',
                  'name': 'epsilon',
                  'type': 'number',
                  'defaultValue': 0.0001
              },
          ]
      },
      {
          'tfOpName': 'Conv2DBackpropInput',
          'category': 'convolution',
          'inputs': [
              { 'start': 2, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'filter', 'type': 'tensor' },
              { 'start': 0, 'name': 'outputShape', 'type': 'number[]' },
          ],
          'attrs': [
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },
              {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'notSupported': true
              },
              {
                  'tfName': 'explicit_paddings',
                  'name': 'explicitPaddings',
                  'type': 'number[]',
                  'defaultValue': []
              },
          ]
      },
      {
          'tfOpName': 'DepthwiseConv2d',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'input', 'type': 'tensor' },
              { 'start': 1, 'name': 'filter', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'defaultValue': 'NHWC'
              },
              {
                  'tfName': 'explicit_paddings',
                  'name': 'explicitPaddings',
                  'type': 'number[]',
                  'defaultValue': []
              },
              { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }
          ]
      },
      {
          'tfOpName': 'DepthwiseConv2dNative',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'input', 'type': 'tensor' },
              { 'start': 1, 'name': 'filter', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'defaultValue': 'NHWC'
              },
              {
                  'tfName': 'explicit_paddings',
                  'name': 'explicitPaddings',
                  'type': 'number[]',
                  'defaultValue': []
              },
              { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }
          ]
      },
      {
          'tfOpName': 'FusedDepthwiseConv2dNative',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'filter', 'type': 'tensor' },
              { 'start': 2, end: 0, 'name': 'args', 'type': 'tensors' },
          ],
          'attrs': [
              { 'tfName': 'num_args', 'name': 'numArgs', 'type': 'number' },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'defaultValue': 'NHWC'
              },
              {
                  'tfName': 'dilations',
                  'name': 'dilations',
                  'type': 'number[]',
                  'defaultValue': [1, 1, 1, 1]
              },
              {
                  'tfName': 'fused_ops',
                  'name': 'fusedOps',
                  'type': 'string[]',
                  'defaultValue': []
              }
          ]
      },
      {
          'tfOpName': 'Conv3D',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'filter', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'defaultValue': 'NHWC'
              },
              { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }
          ],
      },
      {
          'tfOpName': 'Dilation2D',
          'category': 'convolution',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'filter', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
              { 'tfName': 'rates', 'name': 'dilations', 'type': 'number[]' },
              { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }
          ]
      }
  ];

  var convolution = {
      __proto__: null,
      json: json$3
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$4 = [
      {
          'tfOpName': 'Fill',
          'category': 'creation',
          'inputs': [
              { 'start': 0, 'name': 'shape', 'type': 'number[]' },
              { 'start': 1, 'name': 'value', 'type': 'number' },
          ],
          'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'LinSpace',
          'category': 'creation',
          'inputs': [
              { 'start': 0, 'name': 'start', 'type': 'number' },
              { 'start': 1, 'name': 'stop', 'type': 'number' },
              { 'start': 2, 'name': 'num', 'type': 'number' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'OneHot',
          'category': 'creation',
          'inputs': [
              { 'start': 0, 'name': 'indices', 'type': 'tensor' },
              { 'start': 1, 'name': 'depth', 'type': 'number' },
              { 'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1 },
              { 'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0 },
          ],
          'attrs': [
              {
                  'tfName': 'axis',
                  'name': 'axis',
                  'type': 'number',
                  'notSupported': true
              },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Ones',
          'category': 'creation',
          'inputs': [
              { 'start': 0, 'name': 'shape', 'type': 'number[]' },
          ],
          'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'OnesLike',
          'category': 'creation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [{ 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'RandomUniform',
          'category': 'creation',
          'inputs': [
              { 'start': 0, 'name': 'shape', 'type': 'number[]' },
          ],
          'attrs': [
              {
                  'tfName': 'minval',
                  'name': 'minval',
                  'type': 'number',
                  'defaultValue': 0
              },
              {
                  'tfName': 'maxval',
                  'name': 'maxval',
                  'type': 'number',
                  'defaultValue': 1
              },
              { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },
              { 'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0 }, {
                  'tfName': 'seed2',
                  'name': 'seed2',
                  'type': 'number',
                  'defaultValue': 0,
                  'notSupported': true
              },
              { 'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Range',
          'category': 'creation',
          'inputs': [
              { 'start': 0, 'name': 'start', 'type': 'number' },
              { 'start': 1, 'name': 'stop', 'type': 'number' },
              { 'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0 },
          ],
          'attrs': [{ 'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'TruncatedNormal',
          'category': 'creation',
          'inputs': [
              { 'start': 0, 'name': 'shape', 'type': 'number[]' },
          ],
          'attrs': [
              {
                  'tfName': 'means',
                  'name': 'mean',
                  'type': 'number',
                  'defaultValue': 0.0
              },
              {
                  'tfName': 'stddev',
                  'name': 'stdDev',
                  'type': 'number',
                  'defaultValue': 1.0
              },
              { 'tfName': 'seed', 'name': 'seed', 'type': 'number' }, {
                  'tfName': 'seed2',
                  'name': 'seed2',
                  'type': 'number',
                  'defaultValue': 0,
                  'notSupported': true
              },
              { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },
              { 'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Zeros',
          'category': 'creation',
          'inputs': [
              { 'start': 0, 'name': 'shape', 'type': 'number[]' },
          ],
          'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'ZerosLike',
          'category': 'creation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
      },
      {
          'tfOpName': 'Multinomial',
          'category': 'creation',
          'inputs': [
              { 'start': 0, 'name': 'logits', 'type': 'tensor' },
              { 'start': 1, 'name': 'numSamples', 'type': 'number' },
          ],
          'attrs': [
              { 'tfName': 'seed', 'name': 'seed', 'type': 'number' },
              { 'tfName': 'seed2', 'name': 'seed2', 'type': 'number' },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' },
              { 'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype' }
          ]
      }
  ];

  var creation = {
      __proto__: null,
      json: json$4
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$5 = [
      {
          'tfOpName': 'NonMaxSuppressionV2',
          'category': 'dynamic',
          'inputs': [
              { 'start': 0, 'name': 'boxes', 'type': 'tensor' },
              { 'start': 1, 'name': 'scores', 'type': 'tensor' },
              { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },
              { 'start': 3, 'name': 'iouThreshold', 'type': 'number' }
          ]
      },
      {
          'tfOpName': 'NonMaxSuppressionV3',
          'category': 'dynamic',
          'inputs': [
              { 'start': 0, 'name': 'boxes', 'type': 'tensor' },
              { 'start': 1, 'name': 'scores', 'type': 'tensor' },
              { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },
              { 'start': 3, 'name': 'iouThreshold', 'type': 'number' },
              { 'start': 4, 'name': 'scoreThreshold', 'type': 'number' }
          ]
      },
      {
          'tfOpName': 'NonMaxSuppressionV4',
          'category': 'dynamic',
          'inputs': [
              { 'start': 0, 'name': 'boxes', 'type': 'tensor' },
              { 'start': 1, 'name': 'scores', 'type': 'tensor' },
              { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },
              { 'start': 3, 'name': 'iouThreshold', 'type': 'number' },
              { 'start': 4, 'name': 'scoreThreshold', 'type': 'number' }
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                  'tfName': 'T_threshold',
                  'name': 'threshold',
                  'type': 'dtype',
                  'notSupported': true
              },
              {
                  'tfName': 'pad_to_max_output_size',
                  'name': 'padToMaxOutputSize',
                  'type': 'bool'
              }
          ]
      },
      {
          'tfOpName': 'NonMaxSuppressionV5',
          'category': 'dynamic',
          'inputs': [
              { 'start': 0, 'name': 'boxes', 'type': 'tensor' },
              { 'start': 1, 'name': 'scores', 'type': 'tensor' },
              { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },
              { 'start': 3, 'name': 'iouThreshold', 'type': 'number' },
              { 'start': 4, 'name': 'scoreThreshold', 'type': 'number' },
              { 'start': 5, 'name': 'softNmsSigma', 'type': 'number' }
          ]
      },
      {
          'tfOpName': 'Where',
          'category': 'dynamic',
          'inputs': [
              { 'start': 0, 'name': 'condition', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'ListDiff',
          'category': 'dynamic',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'y', 'type': 'tensor' },
          ],
          'attrs': [{
                  'tfName': 'T',
                  'name': 'dtype',
                  'type': 'dtype',
                  'notSupported': true
              }]
      }
  ];

  var dynamic = {
      __proto__: null,
      json: json$5
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$6 = [{
          'tfOpName': 'TopKV2',
          'category': 'evaluation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'k', 'type': 'number' },
          ],
          'attrs': [{ 'tfName': 'sorted', 'name': 'sorted', 'type': 'bool' }]
      }];

  var evaluation = {
      __proto__: null,
      json: json$6
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$7 = [
      {
          'tfOpName': 'PlaceholderWithDefault',
          'category': 'graph',
          'inputs': [
              { 'start': 0, 'name': 'default', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'shape', 'name': 'shape', 'type': 'shape' },
              { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }
          ]
      },
      {
          'tfOpName': 'Placeholder',
          'category': 'graph',
          'attrs': [
              { 'tfName': 'shape', 'name': 'shape', 'type': 'shape' },
              { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }
          ]
      },
      { 'tfOpName': 'Const', 'category': 'graph' }, {
          'tfOpName': 'Identity',
          'category': 'graph',
          'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
      },
      {
          'tfOpName': 'IdentityN',
          'category': 'graph',
          'inputs': [{ 'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors' }]
      },
      {
          'tfOpName': 'Snapshot',
          'category': 'graph',
          'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
      },
      {
          'tfOpName': 'Rank',
          'category': 'graph',
          'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
      },
      {
          'tfOpName': 'Size',
          'category': 'graph',
          'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
      },
      {
          'tfOpName': 'Shape',
          'category': 'graph',
          'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
      },
      {
          'tfOpName': 'ShapeN',
          'category': 'graph',
          'inputs': [{ 'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors' }]
      },
      {
          'tfOpName': 'Print',
          'category': 'graph',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'data', 'type': 'tensors' },
          ],
          'attrs': [
              { 'tfName': 'message', 'name': 'message', 'type': 'string' }, {
                  'tfName': 'first_n',
                  'name': 'firstN',
                  'type': 'number',
                  'notSupported': true
              },
              {
                  'tfName': 'summarize',
                  'name': 'summarize',
                  'type': 'number',
                  'defaultValue': 3
              }
          ]
      },
      { 'tfOpName': 'NoOp', 'category': 'graph', 'inputs': [] }, {
          'tfOpName': 'StopGradient',
          'category': 'graph',
          'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
      },
      {
          'tfOpName': 'FakeQuantWithMinMaxVars',
          'category': 'graph',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'min', 'name': 'min', 'type': 'number' },
              { 'tfName': 'max', 'name': 'max', 'type': 'number' }
          ]
      }
  ];

  var graph = {
      __proto__: null,
      json: json$7
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$8 = [
      {
          'tfOpName': 'ResizeBilinear',
          'category': 'image',
          'inputs': [
              { 'start': 0, 'name': 'images', 'type': 'tensor' },
              { 'start': 1, 'name': 'size', 'type': 'number[]' },
          ],
          'attrs': [
              { 'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool' },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'ResizeNearestNeighbor',
          'category': 'image',
          'inputs': [
              { 'start': 0, 'name': 'images', 'type': 'tensor' },
              { 'start': 1, 'name': 'size', 'type': 'number[]' },
          ],
          'attrs': [
              { 'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool' },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'CropAndResize',
          'category': 'image',
          'inputs': [
              { 'start': 0, 'name': 'image', 'type': 'tensor' },
              { 'start': 1, 'name': 'boxes', 'type': 'tensor' },
              { 'start': 2, 'name': 'boxInd', 'type': 'tensor' },
              { 'start': 3, 'name': 'cropSize', 'type': 'number[]' },
          ],
          'attrs': [
              { 'tfName': 'method', 'name': 'method', 'type': 'string' }, {
                  'tfName': 'extrapolation_value',
                  'name': 'extrapolationValue',
                  'type': 'number'
              }
          ]
      }
  ];

  var image = {
      __proto__: null,
      json: json$8
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$9 = [
      {
          'tfOpName': 'Equal',
          'category': 'logical',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'NotEqual',
          'category': 'logical',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Greater',
          'category': 'logical',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'GreaterEqual',
          'category': 'logical',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Less',
          'category': 'logical',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'LessEqual',
          'category': 'logical',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'LogicalAnd',
          'category': 'logical',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'LogicalNot',
          'category': 'logical',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'LogicalOr',
          'category': 'logical',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Select',
          'category': 'logical',
          'inputs': [
              { 'start': 0, 'name': 'condition', 'type': 'tensor' },
              { 'start': 1, 'name': 'a', 'type': 'tensor' },
              { 'start': 2, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'SelectV2',
          'category': 'logical',
          'inputs': [
              { 'start': 0, 'name': 'condition', 'type': 'tensor' },
              { 'start': 1, 'name': 'a', 'type': 'tensor' },
              { 'start': 2, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [{
                  'tfName': 'T',
                  'name': 'dtype',
                  'type': 'dtype',
                  'notSupported': true
              }]
      }
  ];

  var logical = {
      __proto__: null,
      json: json$9
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$a = [
      {
          'tfOpName': '_FusedMatMul',
          'category': 'matrices',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
              { 'start': 2, end: 0, 'name': 'args', 'type': 'tensors' },
          ],
          'attrs': [
              { 'tfName': 'num_args', 'name': 'numArgs', 'type': 'number' }, {
                  'tfName': 'fused_ops',
                  'name': 'fusedOps',
                  'type': 'string[]',
                  'defaultValue': []
              },
              {
                  'tfName': 'epsilon',
                  'name': 'epsilon',
                  'type': 'number',
                  'defaultValue': 0.0001
              },
              {
                  'tfName': 'transpose_a',
                  'name': 'transposeA',
                  'type': 'bool',
                  'defaultValue': false
              },
              {
                  'tfName': 'transpose_b',
                  'name': 'transposeB',
                  'type': 'bool',
                  'defaultValue': false
              },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'MatMul',
          'category': 'matrices',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              {
                  'tfName': 'transpose_a',
                  'name': 'transposeA',
                  'type': 'bool',
                  'defaultValue': false
              },
              {
                  'tfName': 'transpose_b',
                  'name': 'transposeB',
                  'type': 'bool',
                  'defaultValue': false
              },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'BatchMatMul',
          'category': 'matrices',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              {
                  'tfName': 'adj_x',
                  'name': 'transposeA',
                  'type': 'bool',
                  'defaultValue': false
              },
              {
                  'tfName': 'adj_y',
                  'name': 'transposeB',
                  'type': 'bool',
                  'defaultValue': false
              },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'BatchMatMulV2',
          'category': 'matrices',
          'inputs': [
              { 'start': 0, 'name': 'a', 'type': 'tensor' },
              { 'start': 1, 'name': 'b', 'type': 'tensor' },
          ],
          'attrs': [
              {
                  'tfName': 'adj_x',
                  'name': 'transposeA',
                  'type': 'bool',
                  'defaultValue': false
              },
              {
                  'tfName': 'adj_y',
                  'name': 'transposeB',
                  'type': 'bool',
                  'defaultValue': false
              },
              { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'Transpose',
          'category': 'matrices',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'perm', 'type': 'number[]' },
          ],
          'attrs': [{
                  'tfName': 'T',
                  'name': 'dtype',
                  'type': 'dtype',
                  'notSupported': true
              }]
      }
  ];

  var matrices = {
      __proto__: null,
      json: json$a
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$b = [
      {
          'tfOpName': 'FusedBatchNorm',
          'category': 'normalization',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'scale', 'type': 'tensor' },
              { 'start': 2, 'name': 'offset', 'type': 'tensor' },
              { 'start': 3, 'name': 'mean', 'type': 'tensor' },
              { 'start': 4, 'name': 'variance', 'type': 'tensor' },
          ],
          'attrs': [
              {
                  'tfName': 'epsilon',
                  'name': 'epsilon',
                  'type': 'number',
                  'defaultValue': 0.001
              },
              {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'notSupported': true
              }
          ]
      },
      {
          'tfOpName': 'FusedBatchNormV2',
          'category': 'normalization',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'scale', 'type': 'tensor' },
              { 'start': 2, 'name': 'offset', 'type': 'tensor' },
              { 'start': 3, 'name': 'mean', 'type': 'tensor' },
              { 'start': 4, 'name': 'variance', 'type': 'tensor' },
          ],
          'attrs': [
              {
                  'tfName': 'epsilon',
                  'name': 'epsilon',
                  'type': 'number',
                  'defaultValue': 0.001
              },
              {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'notSupported': true
              }
          ]
      },
      {
          'tfOpName': 'FusedBatchNormV3',
          'category': 'normalization',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'scale', 'type': 'tensor' },
              { 'start': 2, 'name': 'offset', 'type': 'tensor' },
              { 'start': 3, 'name': 'mean', 'type': 'tensor' },
              { 'start': 4, 'name': 'variance', 'type': 'tensor' },
          ],
          'attrs': [
              {
                  'tfName': 'epsilon',
                  'name': 'epsilon',
                  'type': 'number',
                  'defaultValue': 0.001
              },
              {
                  'tfName': 'data_format',
                  'name': 'dataFormat',
                  'type': 'string',
                  'notSupported': true
              }
          ]
      },
      {
          'tfOpName': 'LRN',
          'category': 'normalization',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              {
                  'tfName': 'depth_radius',
                  'name': 'radius',
                  'type': 'number',
                  'defaultValue': 5
              },
              { 'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0 },
              {
                  'tfName': 'alpha',
                  'name': 'alpha',
                  'type': 'number',
                  'defaultValue': 1.0
              },
              {
                  'tfName': 'beta',
                  'name': 'beta',
                  'type': 'number',
                  'defaultValue': 0.5
              }
          ]
      },
      {
          'tfOpName': 'Softmax',
          'category': 'normalization',
          'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
      },
      {
          'tfOpName': 'LogSoftmax',
          'category': 'normalization',
          'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
      },
      {
          'tfOpName': 'SparseToDense',
          'category': 'normalization',
          'inputs': [
              { 'start': 0, 'name': 'sparseIndices', 'type': 'tensor' },
              { 'start': 1, 'name': 'outputShape', 'type': 'number[]' },
              { 'start': 2, 'name': 'sparseValues', 'type': 'tensor' },
              { 'start': 3, 'name': 'defaultValue', 'type': 'tensor' },
          ],
          'attrs': [{
                  'tfName': 'validate_indices',
                  'name': 'validateIndices',
                  'type': 'bool',
                  'defaultValue': true,
                  'notSupported': true
              }]
      }
  ];

  var normalization = {
      __proto__: null,
      json: json$b
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$c = [
      {
          'tfOpName': 'Max',
          'category': 'reduction',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axis', 'type': 'number[]' },
          ],
          'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
      },
      {
          'tfOpName': 'Mean',
          'category': 'reduction',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axis', 'type': 'number[]' },
          ],
          'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
      },
      {
          'tfOpName': 'Min',
          'category': 'reduction',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axis', 'type': 'number[]' },
          ],
          'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
      },
      {
          'tfOpName': 'Sum',
          'category': 'reduction',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axis', 'type': 'number[]' },
          ],
          'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
      },
      {
          'tfOpName': 'All',
          'category': 'reduction',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axis', 'type': 'number[]' },
          ],
          'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
      },
      {
          'tfOpName': 'Any',
          'category': 'reduction',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axis', 'type': 'number[]' },
          ],
          'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
      },
      {
          'tfOpName': 'ArgMax',
          'category': 'reduction',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axis', 'type': 'number' }
          ]
      },
      {
          'tfOpName': 'ArgMin',
          'category': 'reduction',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axis', 'type': 'number' }
          ]
      },
      {
          'tfOpName': 'Prod',
          'category': 'reduction',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axis', 'type': 'number[]' },
          ],
          'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
      },
      {
          'tfOpName': 'Cumsum',
          'category': 'reduction',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axis', 'type': 'number' },
          ],
          'attrs': [
              { 'tfName': 'exclusive', 'name': 'exclusive', 'type': 'bool' },
              { 'tfName': 'reverse', 'name': 'reverse', 'type': 'bool' }
          ]
      }
  ];

  var reduction = {
      __proto__: null,
      json: json$c
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$d = [
      {
          'tfOpName': 'ConcatV2',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors' },
              { 'start': -1, 'name': 'axis', 'type': 'number' }
          ],
          'attrs': [{ 'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2 }]
      },
      {
          'tfOpName': 'Concat',
          'category': 'slice_join',
          'inputs': [
              { 'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors' },
              { 'start': 0, 'name': 'axis', 'type': 'number' }
          ],
          'attrs': [{ 'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2 }]
      },
      {
          'tfOpName': 'GatherV2',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'indices', 'type': 'tensor' },
              { 'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0 }
          ]
      },
      {
          'tfOpName': 'Gather',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'indices', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0 }, {
                  'tfName': 'validate_indices',
                  'name': 'validateIndices',
                  'type': 'bool',
                  'notSupported': true
              }
          ]
      },
      {
          'tfOpName': 'Reverse',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true }
          ]
      },
      {
          'tfOpName': 'ReverseV2',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axis', 'type': 'number[]' }
          ]
      },
      {
          'tfOpName': 'Slice',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'begin', 'type': 'number[]' },
              { 'start': 2, 'name': 'size', 'type': 'number[]' }
          ]
      },
      {
          'tfOpName': 'StridedSlice',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'begin', 'type': 'number[]' },
              { 'start': 2, 'name': 'end', 'type': 'number[]' },
              { 'start': 3, 'name': 'strides', 'type': 'number[]' },
          ],
          'attrs': [
              {
                  'tfName': 'begin_mask',
                  'name': 'beginMask',
                  'type': 'number',
                  'defaultValue': 0
              },
              {
                  'tfName': 'end_mask',
                  'name': 'endMask',
                  'type': 'number',
                  'defaultValue': 0
              },
              {
                  'tfName': 'new_axis_mask',
                  'name': 'newAxisMask',
                  'type': 'number',
                  'defaultValue': 0
              },
              {
                  'tfName': 'ellipsis_mask',
                  'name': 'ellipsisMask',
                  'type': 'number',
                  'defaultValue': 0
              },
              {
                  'tfName': 'shrink_axis_mask',
                  'name': 'shrinkAxisMask',
                  'type': 'number',
                  'defaultValue': 0
              }
          ]
      },
      {
          'tfOpName': 'Pack',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors' },
          ],
          'attrs': [
              { 'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0 }
          ]
      },
      {
          'tfOpName': 'Unpack',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0 }, {
                  'tfName': 'num',
                  'name': 'num',
                  'type': 'number',
                  'defaultValue': 0,
                  'notSupported': true
              }
          ]
      },
      {
          'tfOpName': 'Tile',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'reps', 'type': 'number[]' }
          ]
      },
      {
          'tfOpName': 'Split',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0 },
              { 'start': 1, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [{
                  'tfName': 'num_split',
                  'name': 'numOrSizeSplits',
                  'type': 'number',
                  'defaultValue': 1
              }]
      },
      {
          'tfOpName': 'SplitV',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]' },
              { 'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0 }
          ]
      },
      {
          'tfOpName': 'ScatterNd',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'indices', 'type': 'tensor' },
              { 'start': 1, 'name': 'values', 'type': 'tensor' },
              { 'start': 2, 'name': 'shape', 'type': 'number[]' }
          ]
      },
      {
          'tfOpName': 'GatherNd',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'indices', 'type': 'tensor' }
          ]
      },
      {
          'tfOpName': 'SparseToDense',
          'category': 'slice_join',
          'inputs': [
              { 'start': 0, 'name': 'sparseIndices', 'type': 'tensor' },
              { 'start': 1, 'name': 'outputShape', 'type': 'number[]' },
              { 'start': 2, 'name': 'sparseValues', 'type': 'tensor' },
              { 'start': 3, 'name': 'defaultValue', 'type': 'tensor' },
          ],
          'attrs': [{
                  'tfName': 'validate_indices',
                  'name': 'validateIndices',
                  'type': 'bool',
                  'defaultValue': false,
                  'notSupported': true
              }]
      }
  ];

  var sliceJoin = {
      __proto__: null,
      json: json$d
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$e = [
      {
          'tfOpName': 'FFT',
          'category': 'spectral',
          'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
      },
      {
          'tfOpName': 'IFFT',
          'category': 'spectral',
          'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
      },
      {
          'tfOpName': 'RFFT',
          'category': 'spectral',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' }, {
                  'start': 1,
                  'name': 'fft_length',
                  'type': 'number',
                  'notSupported': true
              }
          ]
      },
      {
          'tfOpName': 'IRFFT',
          'category': 'spectral',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' }, {
                  'start': 1,
                  'name': 'fft_length',
                  'type': 'number',
                  'notSupported': true
              }
          ]
      }
  ];

  var spectral = {
      __proto__: null,
      json: json$e
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var json$f = [
      {
          'tfOpName': 'Cast',
          'category': 'transformation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              {
                  'tfName': 'SrcT',
                  'name': 'sdtype',
                  'type': 'dtype',
                  'notSupported': true
              },
              { 'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype' }
          ]
      },
      {
          'tfOpName': 'ExpandDims',
          'category': 'transformation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'axis', 'type': 'number' }
          ]
      },
      {
          'tfOpName': 'Pad',
          'category': 'transformation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'padding', 'type': 'number[]' },
          ],
          'attrs': [{
                  'tfName': 'constant_value',
                  'name': 'constantValue',
                  'type': 'number',
                  'defaultValue': 0
              }]
      },
      {
          'tfOpName': 'PadV2',
          'category': 'transformation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'padding', 'type': 'number[]' }, {
                  'start': 2,
                  'name': 'constantValue',
                  'type': 'number',
                  'defaultValue': 0
              }
          ]
      },
      {
          'tfOpName': 'Reshape',
          'category': 'transformation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'shape', 'type': 'number[]' }
          ]
      },
      {
          'tfOpName': 'Squeeze',
          'category': 'transformation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [{
                  'tfName': 'axis',
                  'tfDeprecatedName': 'squeeze_dims',
                  'name': 'axis',
                  'type': 'number[]'
              }]
      },
      {
          'tfOpName': 'SpaceToBatchND',
          'category': 'transformation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'blockShape', 'type': 'number[]' },
              { 'start': 2, 'name': 'paddings', 'type': 'number[]' }
          ]
      },
      {
          'tfOpName': 'BatchToSpaceND',
          'category': 'transformation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'blockShape', 'type': 'number[]' },
              { 'start': 2, 'name': 'crops', 'type': 'number[]' }
          ]
      },
      {
          'tfOpName': 'DepthToSpace',
          'category': 'transformation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
          ],
          'attrs': [
              { 'tfName': 'block_size', 'name': 'blockSize', 'type': 'number' },
              { 'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string' }
          ]
      },
      {
          'tfOpName': 'BroadcastTo',
          'category': 'transformation',
          'inputs': [
              { 'start': 0, 'name': 'x', 'type': 'tensor' },
              { 'start': 1, 'name': 'shape', 'type': 'number[]' },
          ],
          'attrs': []
      }
  ];

  var transformation = {
      __proto__: null,
      json: json$f
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var OperationMapper = /** @class */ (function () {
      // Loads the op mapping from the JSON file.
      function OperationMapper() {
          var ops = [
              arithmetic, basicMath, control, convolution, creation, dynamic,
              evaluation, logical, image, graph, matrices, normalization, reduction,
              sliceJoin, spectral, transformation
          ];
          var mappersJson = [].concat.apply([], ops.map(function (op) { return op.json; }));
          this.opMappers = mappersJson.reduce(function (map, mapper) {
              map[mapper.tfOpName] = mapper;
              return map;
          }, {});
      }
      Object.defineProperty(OperationMapper, "Instance", {
          // Singleton instance for the mapper
          get: function () {
              return this._instance || (this._instance = new this());
          },
          enumerable: true,
          configurable: true
      });
      // Converts the model from Tensorflow GraphDef to local representation for
      // TensorFlow.js API
      OperationMapper.prototype.transformGraph = function (graph, signature) {
          var _this = this;
          if (signature === void 0) { signature = {}; }
          var tfNodes = graph.node;
          var placeholders = [];
          var weights = [];
          var nodes = tfNodes.reduce(function (map, node) {
              map[node.name] = _this.mapNode(node);
              if (node.op.startsWith('Placeholder')) {
                  placeholders.push(map[node.name]);
              }
              if (node.op === 'Const') {
                  weights.push(map[node.name]);
              }
              return map;
          }, {});
          var inputs = [];
          var outputs = [];
          var inputNodeNameToKey = {};
          var outputNodeNameToKey = {};
          if (signature != null) {
              inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);
              outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);
          }
          var allNodes = Object.keys(nodes);
          allNodes.forEach(function (key) {
              var node = nodes[key];
              node.inputNames.forEach(function (name) {
                  var nodeName = getNodeNameAndIndex(name)[0];
                  node.inputs.push(nodes[nodeName]);
                  nodes[nodeName].children.push(node);
              });
          });
          // if signature has not outputs set, add any node that does not have
          // outputs.
          if (Object.keys(outputNodeNameToKey).length === 0) {
              allNodes.forEach(function (key) {
                  var node = nodes[key];
                  if (node.children.length === 0) {
                      outputs.push(node);
                  }
              });
          }
          else {
              Object.keys(outputNodeNameToKey).forEach(function (name) {
                  var nodeName = getNodeNameAndIndex(name)[0];
                  var node = nodes[nodeName];
                  if (node != null) {
                      node.signatureKey = outputNodeNameToKey[name];
                      outputs.push(node);
                  }
              });
          }
          if (Object.keys(inputNodeNameToKey).length > 0) {
              Object.keys(inputNodeNameToKey).forEach(function (name) {
                  var nodeName = getNodeNameAndIndex(name)[0];
                  var node = nodes[nodeName];
                  if (node) {
                      node.signatureKey = inputNodeNameToKey[name];
                      inputs.push(node);
                  }
              });
          }
          else {
              inputs = placeholders;
          }
          var functions = {};
          if (graph.library != null && graph.library.function != null) {
              functions = graph.library.function.reduce(function (functions, func) {
                  functions[func.signature.name] = _this.mapFunction(func);
                  return functions;
              }, {});
          }
          return {
              nodes: nodes,
              inputs: inputs,
              outputs: outputs,
              weights: weights,
              placeholders: placeholders,
              signature: signature,
              functions: functions
          };
      };
      OperationMapper.prototype.mapSignatureEntries = function (entries) {
          return Object.keys(entries || {})
              .reduce(function (prev, curr) {
              prev[entries[curr].name] = curr;
              return prev;
          }, {});
      };
      OperationMapper.prototype.mapNode = function (node) {
          // Unsupported ops will cause an error at run-time (not parse time), since
          // they may not be used by the actual execution subgraph.
          var mapper = getRegisteredOp(node.op) || this.opMappers[node.op] || {};
          if (node.attr == null) {
              node.attr = {};
          }
          var newNode = {
              name: node.name,
              op: node.op,
              category: mapper.category,
              inputNames: (node.input ||
                  []).map(function (input) { return input.startsWith('^') ? input.substr(1) : input; }),
              inputs: [],
              children: [],
              inputParams: {},
              attrParams: {},
              rawAttrs: node.attr
          };
          if (mapper.inputs != null) {
              newNode.inputParams =
                  mapper.inputs.reduce(function (map, param) {
                      map[param.name] = {
                          type: param.type,
                          inputIndexStart: param.start,
                          inputIndexEnd: param.end
                      };
                      return map;
                  }, {});
          }
          if (mapper.attrs != null) {
              newNode.attrParams =
                  mapper.attrs.reduce(function (map, param) {
                      var type = param.type;
                      var value = undefined;
                      switch (param.type) {
                          case 'string':
                              value = getStringParam(node.attr, param.tfName, param.defaultValue);
                              if (value === undefined && !!param.tfDeprecatedName) {
                                  value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                              }
                              break;
                          case 'string[]':
                              value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);
                              if (value === undefined && !!param.tfDeprecatedName) {
                                  value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                              }
                              break;
                          case 'number':
                              value = getNumberParam(node.attr, param.tfName, (param.defaultValue || 0));
                              if (value === undefined && !!param.tfDeprecatedName) {
                                  value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                              }
                              break;
                          case 'number[]':
                              value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);
                              if (value === undefined && !!param.tfDeprecatedName) {
                                  value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                              }
                              break;
                          case 'bool':
                              value = getBoolParam(node.attr, param.tfName, param.defaultValue);
                              if (value === undefined && !!param.tfDeprecatedName) {
                                  value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                              }
                              break;
                          case 'bool[]':
                              value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);
                              if (value === undefined && !!param.tfDeprecatedName) {
                                  value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                              }
                              break;
                          case 'shape':
                              value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);
                              if (value === undefined && !!param.tfDeprecatedName) {
                                  value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                              }
                              break;
                          case 'shape[]':
                              value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);
                              if (value === undefined && !!param.tfDeprecatedName) {
                                  value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                              }
                              break;
                          case 'dtype':
                              value = getDtypeParam(node.attr, param.tfName, param.defaultValue);
                              if (value === undefined && !!param.tfDeprecatedName) {
                                  value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                              }
                              break;
                          case 'dtype[]':
                              value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);
                              if (value === undefined && !!param.tfDeprecatedName) {
                                  value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                              }
                              break;
                          case 'func':
                              value = getFuncParam(node.attr, param.tfName, param.defaultValue);
                              if (value === undefined && !!param.tfDeprecatedName) {
                                  value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                              }
                              break;
                          case 'tensor':
                          case 'tensors':
                              break;
                          default:
                              throw new Error("Unsupported param type: " + param.type + " for op: " + node.op);
                      }
                      map[param.name] = { value: value, type: type };
                      return map;
                  }, {});
          }
          return newNode;
      };
      // map the TFunctionDef to TFJS graph object
      OperationMapper.prototype.mapFunction = function (functionDef) {
          var _this = this;
          var tfNodes = functionDef.nodeDef;
          var placeholders = [];
          var weights = [];
          var nodes = {};
          if (tfNodes != null) {
              nodes = tfNodes.reduce(function (map, node) {
                  map[node.name] = _this.mapNode(node);
                  if (node.op === 'Const') {
                      weights.push(map[node.name]);
                  }
                  return map;
              }, {});
          }
          var inputs = [];
          var outputs = [];
          functionDef.signature.inputArg.forEach(function (arg) {
              var nodeName = getNodeNameAndIndex(arg.name)[0];
              var node = {
                  name: nodeName,
                  op: 'Placeholder',
                  inputs: [],
                  inputNames: [],
                  category: 'graph',
                  inputParams: {},
                  attrParams: { dtype: { value: parseDtypeParam(arg.type), type: 'dtype' } },
                  children: []
              };
              node.signatureKey = arg.name;
              inputs.push(node);
              nodes[nodeName] = node;
          });
          var allNodes = Object.keys(nodes);
          allNodes.forEach(function (key) {
              var node = nodes[key];
              node.inputNames.forEach(function (name) {
                  var nodeName = getNodeNameAndIndex(name)[0];
                  node.inputs.push(nodes[nodeName]);
                  nodes[nodeName].children.push(node);
              });
          });
          var returnNodeMap = functionDef.ret;
          functionDef.signature.outputArg.forEach(function (output) {
              var _a = getNodeNameAndIndex(returnNodeMap[output.name]), nodeName = _a[0], index = _a[1];
              var node = nodes[nodeName];
              if (node != null) {
                  node.defaultOutput = index;
                  outputs.push(node);
              }
          });
          var signature = this.mapArgsToSignature(functionDef);
          return { nodes: nodes, inputs: inputs, outputs: outputs, weights: weights, placeholders: placeholders, signature: signature };
      };
      OperationMapper.prototype.mapArgsToSignature = function (functionDef) {
          var _this = this;
          return {
              methodName: functionDef.signature.name,
              inputs: functionDef.signature.inputArg.reduce(function (map, arg) {
                  map[arg.name] = _this.mapArgToTensorInfo(arg);
                  return map;
              }, {}),
              outputs: functionDef.signature.outputArg.reduce(function (map, arg) {
                  map[arg.name] = _this.mapArgToTensorInfo(arg, functionDef.ret);
                  return map;
              }, {}),
          };
      };
      OperationMapper.prototype.mapArgToTensorInfo = function (arg, nameMap) {
          var name = arg.name;
          if (nameMap != null) {
              name = nameMap[name];
          }
          return { name: name, dtype: arg.type };
      };
      return OperationMapper;
  }());
  function decodeBase64(text) {
      var global = tfc.env().global;
      if (typeof global.atob !== 'undefined') {
          return global.atob(text);
      }
      else if (typeof Buffer !== 'undefined') {
          return new Buffer(text, 'base64').toString();
      }
      else {
          throw new Error('Unable to decode base64 in this environment. ' +
              'Missing built-in atob() or Buffer()');
      }
  }
  function parseStringParam(s, keepCase) {
      var value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);
      return keepCase ? value : value.toLowerCase();
  }
  function getStringParam(attrs, name, def, keepCase) {
      if (keepCase === void 0) { keepCase = false; }
      var param = attrs[name];
      if (param != null) {
          return parseStringParam(param.s, keepCase);
      }
      return def;
  }
  function getBoolParam(attrs, name, def) {
      var param = attrs[name];
      return param ? param.b : def;
  }
  function getNumberParam(attrs, name, def) {
      var param = attrs[name] || {};
      var value = param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);
      return (typeof value === 'number') ? value : parseInt(value, 10);
  }
  function parseDtypeParam(value) {
      if (typeof (value) === 'string') {
          // tslint:disable-next-line:no-any
          value = DataType[value];
      }
      switch (value) {
          case DataType.DT_FLOAT:
              return 'float32';
          case DataType.DT_INT32:
          case DataType.DT_INT64:
          case DataType.DT_INT8:
          case DataType.DT_UINT8:
              return 'int32';
          case DataType.DT_BOOL:
              return 'bool';
          case DataType.DT_DOUBLE:
              return 'float32';
          case DataType.DT_STRING:
              return 'string';
          default:
              // Unknown dtype error will happen at runtime (instead of parse time),
              // since these nodes might not be used by the actual subgraph execution.
              return null;
      }
  }
  function getFuncParam(attrs, name, def) {
      var param = attrs[name];
      if (param && param.func) {
          return param.func.name;
      }
      return def;
  }
  function getDtypeParam(attrs, name, def) {
      var param = attrs[name];
      if (param && param.type) {
          return parseDtypeParam(param.type);
      }
      return def;
  }
  function getDtypeArrayParam(attrs, name, def) {
      var param = attrs[name];
      if (param && param.list && param.list.type) {
          return param.list.type.map(function (v) { return parseDtypeParam(v); });
      }
      return def;
  }
  function parseTensorShapeParam(shape) {
      if (shape.unknownRank) {
          return undefined;
      }
      if (shape.dim != null) {
          return shape.dim.map(function (dim) {
              return (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10);
          });
      }
      return [];
  }
  function getTensorShapeParam(attrs, name, def) {
      var param = attrs[name];
      if (param && param.shape) {
          return parseTensorShapeParam(param.shape);
      }
      return def;
  }
  function getNumericArrayParam(attrs, name, def) {
      var param = attrs[name];
      if (param) {
          return ((param.list.f && param.list.f.length ? param.list.f :
              param.list.i) ||
              [])
              .map(function (v) { return (typeof v === 'number') ? v : parseInt(v, 10); });
      }
      return def;
  }
  function getStringArrayParam(attrs, name, def, keepCase) {
      if (keepCase === void 0) { keepCase = false; }
      var param = attrs[name];
      if (param && param.list && param.list.s) {
          return param.list.s.map(function (v) {
              return parseStringParam(v, keepCase);
          });
      }
      return def;
  }
  function getTensorShapeArrayParam(attrs, name, def) {
      var param = attrs[name];
      if (param && param.list && param.list.shape) {
          return param.list.shape.map(function (v) {
              return parseTensorShapeParam(v);
          });
      }
      return def;
  }
  function getBoolArrayParam(attrs, name, def) {
      var param = attrs[name];
      if (param && param.list && param.list.b) {
          return param.list.b;
      }
      return def;
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Helper class for lookup inputs and params for nodes in the model graph.
   */
  var NodeValueImpl = /** @class */ (function () {
      function NodeValueImpl(node, tensorMap, context) {
          var _this = this;
          this.node = node;
          this.tensorMap = tensorMap;
          this.context = context;
          this.inputs = [];
          this.attrs = {};
          this.inputs = node.inputNames.map(function (name) { return _this.getInput(name); });
          if (node.rawAttrs != null) {
              this.attrs = Object.keys(node.rawAttrs)
                  .reduce(function (attrs, key) {
                  attrs[key] = _this.getAttr(key);
                  return attrs;
              }, {});
          }
      }
      /**
       * Return the value of the attribute or input param.
       * @param name String: name of attribute or input param.
       */
      NodeValueImpl.prototype.getInput = function (name) {
          return getTensor(name, this.tensorMap, this.context);
      };
      /**
       * Return the value of the attribute or input param.
       * @param name String: name of attribute or input param.
       */
      NodeValueImpl.prototype.getAttr = function (name, defaultValue) {
          var value = this.node.rawAttrs[name];
          if (value.tensor != null) {
              return getTensor(name, this.tensorMap, this.context);
          }
          if (value.i != null || value.f != null) {
              return getNumberParam(this.node.rawAttrs, name, defaultValue);
          }
          if (value.s != null) {
              return getStringParam(this.node.rawAttrs, name, defaultValue);
          }
          if (value.b != null) {
              return getBoolParam(this.node.rawAttrs, name, defaultValue);
          }
          if (value.shape != null) {
              return getTensorShapeParam(this.node.rawAttrs, name, defaultValue);
          }
          if (value.type != null) {
              return getDtypeParam(this.node.rawAttrs, name, defaultValue);
          }
          if (value.list != null) {
              if (value.list.i != null || value.list.f != null) {
                  return getNumericArrayParam(this.node.rawAttrs, name, defaultValue);
              }
              if (value.list.s != null) {
                  return getStringArrayParam(this.node.rawAttrs, name, defaultValue);
              }
              if (value.list.shape != null) {
                  return getTensorShapeArrayParam(this.node.rawAttrs, name, defaultValue);
              }
              if (value.list.b != null) {
                  return getBoolArrayParam(this.node.rawAttrs, name, defaultValue);
              }
              if (value.list.type != null) {
                  return getDtypeArrayParam(this.node.rawAttrs, name, defaultValue);
              }
          }
          return defaultValue;
      };
      return NodeValueImpl;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp = function (node, tensorMap, context) {
      switch (node.op) {
          case 'BiasAdd':
          case 'AddV2':
          case 'Add': {
              return [tfc.add(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'AddN': {
              return [tfc.addN(getParamValue('tensors', node, tensorMap, context))];
          }
          case 'FloorMod':
          case 'Mod':
              return [tfc.mod(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          case 'Mul':
              return [tfc.mul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          case 'RealDiv':
          case 'Div': {
              return [tfc.div(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'DivNoNan': {
              return [tfc.divNoNan(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'FloorDiv': {
              return [tfc.floorDiv(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'Sub': {
              return [tfc.sub(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'Minimum': {
              return [tfc.minimum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'Maximum': {
              return [tfc.maximum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'Pow': {
              return [tfc.pow(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'SquaredDifference': {
              return [tfc.squaredDifference(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$1 = function (node, tensorMap, context) {
      switch (node.op) {
          case 'Abs':
          case 'ComplexAbs':
              return [tfc.abs(getParamValue('x', node, tensorMap, context))];
          case 'Acos':
              return [tfc.acos(getParamValue('x', node, tensorMap, context))];
          case 'Acosh':
              return [tfc.acosh(getParamValue('x', node, tensorMap, context))];
          case 'Asin':
              return [tfc.asin(getParamValue('x', node, tensorMap, context))];
          case 'Asinh':
              return [tfc.asinh(getParamValue('x', node, tensorMap, context))];
          case 'Atan':
              return [tfc.atan(getParamValue('x', node, tensorMap, context))];
          case 'Atan2':
              return [tfc.atan2(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];
          case 'Atanh':
              return [tfc.atanh(getParamValue('x', node, tensorMap, context))];
          case 'Ceil':
              return [tfc.ceil(getParamValue('x', node, tensorMap, context))];
          case 'Complex':
              return [tfc.complex(getParamValue('real', node, tensorMap, context), getParamValue('imag', node, tensorMap, context))];
          case 'Cos':
              return [tfc.cos(getParamValue('x', node, tensorMap, context))];
          case 'Cosh':
              return [tfc.cosh(getParamValue('x', node, tensorMap, context))];
          case 'Elu':
              return [tfc.elu(getParamValue('x', node, tensorMap, context))];
          case 'Erf':
              return [tfc.erf(getParamValue('x', node, tensorMap, context))];
          case 'Exp':
              return [tfc.exp(getParamValue('x', node, tensorMap, context))];
          case 'Expm1': {
              return [tfc.expm1(getParamValue('x', node, tensorMap, context))];
          }
          case 'Floor':
              return [tfc.floor(getParamValue('x', node, tensorMap, context))];
          case 'Log':
              return [tfc.log(getParamValue('x', node, tensorMap, context))];
          case 'Log1p': {
              return [tfc.log1p(getParamValue('x', node, tensorMap, context))];
          }
          case 'Imag':
              return [tfc.imag(getParamValue('x', node, tensorMap, context))];
          case 'Neg':
              return [tfc.neg(getParamValue('x', node, tensorMap, context))];
          case 'Reciprocal': {
              return [tfc.reciprocal(getParamValue('x', node, tensorMap, context))];
          }
          case 'Real':
              return [tfc.real(getParamValue('x', node, tensorMap, context))];
          case 'Relu':
              return [tfc.relu(getParamValue('x', node, tensorMap, context))];
          case 'Round': {
              return [tfc.round(getParamValue('x', node, tensorMap, context))];
          }
          case 'Selu':
              return [tfc.selu(getParamValue('x', node, tensorMap, context))];
          case 'Sigmoid':
              return [tfc.sigmoid(getParamValue('x', node, tensorMap, context))];
          case 'Sin':
              return [tfc.sin(getParamValue('x', node, tensorMap, context))];
          case 'Sign': {
              return [tfc.sign(getParamValue('x', node, tensorMap, context))];
          }
          case 'Sinh': {
              return [tfc.sinh(getParamValue('x', node, tensorMap, context))];
          }
          case 'Softplus': {
              return [tfc.softplus(getParamValue('x', node, tensorMap, context))];
          }
          case 'Sqrt': {
              return [tfc.sqrt(getParamValue('x', node, tensorMap, context))];
          }
          case 'Square': {
              return [tfc.square(getParamValue('x', node, tensorMap, context))];
          }
          case 'Tanh': {
              return [tfc.tanh(getParamValue('x', node, tensorMap, context))];
          }
          case 'Tan':
              return [tfc.tan(getParamValue('x', node, tensorMap, context))];
          case 'Relu6':
          case 'ClipByValue':
              return [tfc.clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];
          case 'Rsqrt':
              return [tfc.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];
          case 'Prod':
              return [tfc.prod(getParamValue('x', node, tensorMap, context), getParamValue('axes', node, tensorMap, context))];
          case 'LeakyRelu':
              return [tfc.leakyRelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];
          case 'Prelu':
              return [tfc.prelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix) {
      if (errorMessagePrefix === void 0) { errorMessagePrefix = ''; }
      tfc.util.assert(shapesEqualAllowUndefinedSize(shapeA, shapeB), function () { return errorMessagePrefix + (" Shapes " + shapeA + " and " + shapeB + " must match"); });
  }
  function shapesEqualAllowUndefinedSize(n1, n2) {
      if (n1.length !== n2.length) {
          return false;
      }
      for (var i = 0; i < n1.length; i++) {
          if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {
              return false;
          }
      }
      return true;
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * The TensorArray object keeps an array of Tensors.  It
   * allows reading from the array and writing to the array.
   */
  var TensorArray = /** @class */ (function () {
      function TensorArray(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {
          this.name = name;
          this.dtype = dtype;
          this.maxSize = maxSize;
          this.elementShape = elementShape;
          this.identicalElementShapes = identicalElementShapes;
          this.dynamicSize = dynamicSize;
          this.clearAfterRead = clearAfterRead;
          this.tensors = [];
          this.closed_ = false;
          this.idTensor = tfc.scalar(0);
          tfc.keep(this.idTensor);
      }
      Object.defineProperty(TensorArray.prototype, "id", {
          get: function () {
              return this.idTensor.id;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(TensorArray.prototype, "closed", {
          get: function () {
              return this.closed_;
          },
          enumerable: true,
          configurable: true
      });
      /**
       * Dispose the tensors and idTensor and mark the TensoryArray as closed.
       */
      TensorArray.prototype.clearAndClose = function () {
          this.tensors.forEach(function (tensor) { return tensor.tensor.dispose(); });
          this.tensors = [];
          this.closed_ = true;
          this.idTensor.dispose();
      };
      TensorArray.prototype.size = function () {
          return this.tensors.length;
      };
      /**
       * Read the value at location index in the TensorArray.
       * @param index Number the index to read from.
       */
      TensorArray.prototype.read = function (index) {
          if (this.closed_) {
              throw new Error("TensorArray " + this.name + " has already been closed.");
          }
          if (index < 0 || index >= this.size()) {
              throw new Error("Tried to read from index " + index + ", but array size is: " + this.size());
          }
          var tensorWithState = this.tensors[index];
          if (tensorWithState.cleared) {
              throw new Error("TensorArray " + this.name + ": Could not read index " + index + " twice because it was cleared after a previous read " +
                  "(perhaps try setting clear_after_read = false?).");
          }
          if (this.clearAfterRead) {
              tensorWithState.cleared = true;
          }
          tensorWithState.read = true;
          return tensorWithState.tensor;
      };
      /**
       * Helper method to read multiple tensors from the specified indices.
       */
      TensorArray.prototype.readMany = function (indices) {
          var _this = this;
          return indices.map(function (index) { return _this.read(index); });
      };
      /**
       * Write value into the index of the TensorArray.
       * @param index number the index to write to.
       * @param tensor
       */
      TensorArray.prototype.write = function (index, tensor) {
          if (this.closed_) {
              throw new Error("TensorArray " + this.name + " has already been closed.");
          }
          if (index < 0 || !this.dynamicSize && index >= this.maxSize) {
              throw new Error("Tried to write to index " + index + ", but array is not resizeable and size is: " + this.maxSize);
          }
          var t = this.tensors[index] || {};
          if (tensor.dtype !== this.dtype) {
              throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + index + ",\n          because the value dtype is " + tensor.dtype + ", but TensorArray dtype is " + this.dtype + ".");
          }
          // Set the shape for the first time write to unknow shape tensor array
          if (this.size() === 0 &&
              (this.elementShape == null || this.elementShape.length === 0)) {
              this.elementShape = tensor.shape;
          }
          assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, "TensorArray " + this.name + ": Could not write to TensorArray index " + index + ".");
          if (t.read) {
              throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + index + ", because it has already been read.");
          }
          if (t.written) {
              throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + index + ", because it has already been written.");
          }
          t.tensor = tensor;
          tfc.keep(tensor);
          t.written = true;
          this.tensors[index] = t;
      };
      /**
       * Helper method to write multiple tensors to the specified indices.
       */
      TensorArray.prototype.writeMany = function (indices, tensors) {
          var _this = this;
          if (indices.length !== tensors.length) {
              throw new Error("TensorArray " + this.name + ": could not write multiple tensors," +
                  ("because the index size: " + indices.length + " is not the same as tensors size: " + tensors.length + "."));
          }
          indices.forEach(function (i, index) { return _this.write(i, tensors[index]); });
      };
      /**
       * Return selected values in the TensorArray as a packed Tensor. All of
       * selected values must have been written and their shapes must all match.
       * @param [indices] number[] Optional. Taking values in [0, max_value). If the
       *    TensorArray is not dynamic, max_value=size(). If not specified returns
       *    all tensors in the original order.
       * @param [dtype]
       */
      TensorArray.prototype.gather = function (indices, dtype) {
          if (!!dtype && dtype !== this.dtype) {
              throw new Error("TensorArray dtype is " + this.dtype + " but gather requested dtype " + dtype);
          }
          if (!indices) {
              indices = [];
              for (var i = 0; i < this.size(); i++) {
                  indices.push(i);
              }
          }
          else {
              indices = indices.slice(0, this.size());
          }
          if (indices.length === 0) {
              return tfc.tensor([], [0].concat(this.elementShape));
          }
          // Read all the PersistentTensors into a vector to keep track of
          // their memory.
          var tensors = this.readMany(indices);
          assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');
          return tfc.stack(tensors, 0);
      };
      /**
       * Return the values in the TensorArray as a concatenated Tensor.
       */
      TensorArray.prototype.concat = function (dtype) {
          if (!!dtype && dtype !== this.dtype) {
              throw new Error("TensorArray dtype is " + this.dtype + " but concat requested dtype " + dtype);
          }
          if (this.size() === 0) {
              return tfc.tensor([], [0].concat(this.elementShape));
          }
          var indices = [];
          for (var i = 0; i < this.size(); i++) {
              indices.push(i);
          }
          // Collect all the tensors from the tensors array.
          var tensors = this.readMany(indices);
          assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, "TensorArray shape mismatch: tensor array shape (" + this.elementShape + ") vs first tensor shape (" + tensors[0].shape + ")");
          return tfc.concat(tensors, 0);
      };
      /**
       * Scatter the values of a Tensor in specific indices of a TensorArray.
       * @param indices nummber[] values in [0, max_value). If the
       *    TensorArray is not dynamic, max_value=size().
       * @param tensor Tensor input tensor.
       */
      TensorArray.prototype.scatter = function (indices, tensor) {
          if (tensor.dtype !== this.dtype) {
              throw new Error("TensorArray dtype is " + this.dtype + " but tensor has dtype " + tensor.dtype);
          }
          if (indices.length !== tensor.shape[0]) {
              throw new Error("Expected len(indices) == tensor.shape[0], but saw: " + indices.length + " vs. " + tensor.shape[0]);
          }
          var maxIndex = Math.max.apply(Math, indices);
          if (!this.dynamicSize && maxIndex >= this.maxSize) {
              throw new Error("Max index must be < array size (" + maxIndex + "  vs. " + this.maxSize + ")");
          }
          this.writeMany(indices, tfc.unstack(tensor, 0));
      };
      /**
       * Split the values of a Tensor into the TensorArray.
       * @param length number[] with the lengths to use when splitting value along
       *    its first dimension.
       * @param tensor Tensor, the tensor to split.
       */
      TensorArray.prototype.split = function (length, tensor) {
          var _this = this;
          if (tensor.dtype !== this.dtype) {
              throw new Error("TensorArray dtype is " + this.dtype + " but tensor has dtype " + tensor.dtype);
          }
          var totalLength = 0;
          var cumulativeLengths = length.map(function (len) {
              totalLength += len;
              return totalLength;
          });
          if (totalLength !== tensor.shape[0]) {
              throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        " + totalLength + ", and tensor's shape is: " + tensor.shape);
          }
          if (!this.dynamicSize && length.length !== this.maxSize) {
              throw new Error("TensorArray's size is not equal to the size of lengths (" + this.maxSize + " vs. " + length.length + "), " +
                  'and the TensorArray is not marked as dynamically resizeable');
          }
          var elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
          var tensors = [];
          tfc.tidy(function () {
              tensor = tensor.reshape([1, totalLength, elementPerRow]);
              for (var i = 0; i < length.length; ++i) {
                  var previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];
                  var indices_1 = [0, previousLength, 0];
                  var sizes = [1, length[i], elementPerRow];
                  tensors[i] = tfc.slice(tensor, indices_1, sizes).reshape(_this.elementShape);
              }
              return tensors;
          });
          var indices = [];
          for (var i = 0; i < length.length; i++) {
              indices[i] = i;
          }
          this.writeMany(indices, tensors);
      };
      return TensorArray;
  }());

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * TensorList stores a container of `tf.Tensor` objects, which are accessible
   * via tensors field.
   *
   * In order to get a copy of the underlying list, use the copy method:
   * ```
   *    TensorList b = a.copy();
   *    b.tensors().pushBack(t);  // This does not modify a.tensors().
   * ```
   *
   * Note that this is not a deep copy: the memory locations of the underlying
   * tensors will still point to the same locations of the corresponding tensors
   * in the original.
   */
  var TensorList = /** @class */ (function () {
      /**
       *
       * @param tensors list of tensors
       * @param elementShape shape of each tensor
       * @param elementDtype data type of each tensor
       * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1
       *   meaning that the size of `tensors` is unbounded.
       */
      function TensorList(tensors, elementShape, elementDtype, maxNumElements) {
          if (maxNumElements === void 0) { maxNumElements = -1; }
          this.tensors = tensors;
          this.elementShape = elementShape;
          this.elementDtype = elementDtype;
          if (tensors != null) {
              tensors.forEach(function (tensor) {
                  if (elementDtype !== tensor.dtype) {
                      throw new Error("Invalid data types; op elements " + elementDtype + ", but list elements " + tensor.dtype);
                  }
                  assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');
                  tfc.keep(tensor);
              });
          }
          this.idTensor = tfc.scalar(0);
          this.maxNumElements = maxNumElements;
          tfc.keep(this.idTensor);
      }
      Object.defineProperty(TensorList.prototype, "id", {
          get: function () {
              return this.idTensor.id;
          },
          enumerable: true,
          configurable: true
      });
      /**
       * Get a new TensorList containing a copy of the underlying tensor container.
       */
      TensorList.prototype.copy = function () {
          return new TensorList(this.tensors.slice(), this.elementShape, this.elementDtype);
      };
      /**
       * Dispose the tensors and idTensor and clear the tensor list.
       */
      TensorList.prototype.clearAndClose = function () {
          this.tensors.forEach(function (tensor) { return tensor.dispose(); });
          this.tensors.length = 0;
          this.idTensor.dispose();
      };
      /**
       * The size of the tensors in the tensor list.
       */
      TensorList.prototype.size = function () {
          return this.tensors.length;
      };
      /**
       * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)
       * tf.Tensor.
       * @param elementShape shape of each tensor
       * @param elementDtype data type of each tensor
       * @param numElements the number of elements to stack
       */
      TensorList.prototype.stack = function (elementShape, elementDtype, numElements) {
          var _this = this;
          if (numElements === void 0) { numElements = -1; }
          if (elementDtype !== this.elementDtype) {
              throw new Error("Invalid data types; op elements " + elementDtype + ", but list elements " + this.elementDtype);
          }
          if (numElements !== -1 && this.tensors.length !== numElements) {
              throw new Error("Operation expected a list with " + numElements + " elements but got a list with " + this.tensors.length + " elements.");
          }
          assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');
          return tfc.tidy(function () {
              var reshapedTensors = _this.tensors.map(function (tensor) { return tensor.reshape(elementShape); });
              return tfc.stack(reshapedTensors, 0);
          });
      };
      /**
       * Pop a tensor from the end of the list.
       * @param elementShape shape of the tensor
       * @param elementDtype data type of the tensor
       */
      TensorList.prototype.popBack = function (elementShape, elementDtype) {
          if (elementDtype !== this.elementDtype) {
              throw new Error("Invalid data types; op elements " + elementDtype + ", but list elements " + this.elementDtype);
          }
          if (this.size() === 0) {
              throw new Error('Trying to pop from an empty list.');
          }
          var tensor = this.tensors.pop();
          assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');
          return tensor.reshape(elementShape);
      };
      /**
       * Push a tensor to the end of the list.
       * @param tensor Tensor to be pushed.
       */
      TensorList.prototype.pushBack = function (tensor) {
          if (tensor.dtype !== this.elementDtype) {
              throw new Error("Invalid data types; op elements " + tensor.dtype + ", but list elements " + this.elementDtype);
          }
          assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');
          if (this.maxNumElements === this.size()) {
              throw new Error("Trying to push element into a full list.");
          }
          tfc.keep(tensor);
          this.tensors.push(tensor);
      };
      /**
       * Update the size of the list.
       * @param size the new size of the list.
       */
      TensorList.prototype.resize = function (size) {
          if (size < 0) {
              throw new Error("TensorListResize expects size to be non-negative. Got: " + size);
          }
          if (this.maxNumElements !== -1 && size > this.maxNumElements) {
              throw new Error("TensorListResize input size " + size + " is greater maxNumElement " + this.maxNumElements + ".");
          }
          this.tensors.length = size;
      };
      /**
       * Retrieve the element at the provided index
       * @param elementShape shape of the tensor
       * @param elementDtype dtype of the tensor
       * @param elementIndex index of the tensor
       */
      TensorList.prototype.getItem = function (elementIndex, elementShape, elementDtype) {
          if (elementDtype !== this.elementDtype) {
              throw new Error("Invalid data types; op elements " + elementDtype + ", but list elements " + this.elementDtype);
          }
          if (elementIndex < 0 || elementIndex > this.tensors.length) {
              throw new Error("Trying to access element " + elementIndex + " in a list with " + this.tensors.length + " elements.");
          }
          if (this.tensors[elementIndex] == null) {
              throw new Error("element at index " + elementIndex + " is null.");
          }
          assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');
          return this.tensors[elementIndex];
      };
      /**
       * Set the tensor at the index
       * @param elementIndex index of the tensor
       * @param tensor the tensor to be inserted into the list
       */
      TensorList.prototype.setItem = function (elementIndex, tensor) {
          if (tensor.dtype !== this.elementDtype) {
              throw new Error("Invalid data types; op elements " + tensor.dtype + ", but list elements " + this.elementDtype);
          }
          if (elementIndex < 0 ||
              this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {
              throw new Error("Trying to set element " + elementIndex + " in a list with max " + this.maxNumElements + " elements.");
          }
          assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');
          tfc.keep(tensor);
          this.tensors[elementIndex] = tensor;
      };
      /**
       * Return selected values in the TensorList as a stacked Tensor. All of
       * selected values must have been written and their shapes must all match.
       * @param indices indices of tensors to gather
       * @param elementDtype output tensor dtype
       * @param elementShape output tensor element shape
       */
      TensorList.prototype.gather = function (indices, elementDtype, elementShape) {
          var _this = this;
          if (elementDtype !== this.elementDtype) {
              throw new Error("Invalid data types; op elements " + elementDtype + ", but list elements " + this.elementDtype);
          }
          assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');
          // When indices is greater than the size of the list, indices beyond the
          // size of the list are ignored.
          indices = indices.slice(0, this.size());
          if (indices.length === 0) {
              return tfc.tensor([], [0].concat(this.elementShape));
          }
          return tfc.tidy(function () {
              var tensors = indices.map(function (i) { return _this.tensors[i].reshape(elementShape); });
              return tfc.stack(tensors, 0);
          });
      };
      /**
       * Return the values in the TensorList as a concatenated Tensor.
       * @param elementDtype output tensor dtype
       * @param elementShape output tensor element shape
       */
      TensorList.prototype.concat = function (elementDtype, elementShape) {
          var _this = this;
          if (!!elementDtype && elementDtype !== this.elementDtype) {
              throw new Error("TensorList dtype is " + this.elementDtype + " but concat requested dtype " + elementDtype);
          }
          assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');
          if (this.size() === 0) {
              return tfc.tensor([], [0].concat(this.elementShape));
          }
          return tfc.tidy(function () {
              var tensors = _this.tensors.map(function (t) { return t.reshape(elementShape); });
              return tfc.concat(tensors, 0);
          });
      };
      return TensorList;
  }());
  /**
   * Creates a TensorList which, when stacked, has the value of tensor.
   * @param tensor from tensor
   * @param elementShape output tensor element shape
   */
  function fromTensor(tensor, elementShape, elementDtype) {
      var dtype = tensor.dtype;
      if (tensor.shape.length < 1) {
          throw new Error("Tensor must be at least a vector, but saw shape: " + tensor.shape);
      }
      if (tensor.dtype !== elementDtype) {
          throw new Error("Invalid data types; op elements " + tensor.dtype + ", but list elements " + elementDtype);
      }
      var outputShape = tensor.shape.slice(1);
      assertShapesMatchAllowUndefinedSize(outputShape, elementShape, 'TensorList shape mismatch: ');
      var tensorList = tensor.unstack();
      return new TensorList(tensorList, elementShape, dtype);
  }
  /**
   * Return a TensorList of the given size with empty elements.
   * @param elementShape the shape of the future elements of the list
   * @param elementDtype the desired type of elements in the list
   * @param numElements the number of elements to reserve
   */
  function reserve(elementShape, elementDtype, numElements) {
      return new TensorList([], elementShape, elementDtype, numElements);
  }
  /**
   * Put tensors at specific indices of a stacked tensor into a TensorList.
   * @param indices list of indices on how to scatter the tensor.
   * @param tensor input tensor.
   * @param elementShape the shape of the future elements of the list
   * @param numElements the number of elements to scatter
   */
  function scatter(tensor, indices, elementShape, numElements) {
      if (indices.length !== tensor.shape[0]) {
          throw new Error("Expected len(indices) == tensor.shape[0], but saw: " + indices.length + " vs. " + tensor.shape[0]);
      }
      var maxIndex = Math.max.apply(Math, indices);
      if (numElements != null && numElements !== -1 && maxIndex >= numElements) {
          throw new Error("Max index must be < array size (" + maxIndex + "  vs. " + numElements + ")");
      }
      var list = new TensorList([], elementShape, tensor.dtype, numElements);
      var tensors = tfc.unstack(tensor, 0);
      indices.forEach(function (value, index) {
          list.setItem(value, tensors[index]);
      });
      return list;
  }
  /**
   * Split the values of a Tensor into a TensorList.
   * @param length the lengths to use when splitting value along
   *    its first dimension.
   * @param tensor the tensor to split.
   * @param elementShape the shape of the future elements of the list
   */
  function split(tensor, length, elementShape) {
      var totalLength = 0;
      var cumulativeLengths = length.map(function (len) {
          totalLength += len;
          return totalLength;
      });
      if (totalLength !== tensor.shape[0]) {
          throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        " + totalLength + ", and tensor's shape is: " + tensor.shape);
      }
      var elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
      var tensors = tfc.tidy(function () {
          var tensors = [];
          tensor = tensor.reshape([1, totalLength, elementPerRow]);
          for (var i = 0; i < length.length; ++i) {
              var previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];
              var indices = [0, previousLength, 0];
              var sizes = [1, length[i], elementPerRow];
              tensors[i] = tfc.slice(tensor, indices, sizes).reshape(elementShape);
          }
          tensor.dispose();
          return tensors;
      });
      var list = new TensorList([], elementShape, tensor.dtype, length.length);
      for (var i = 0; i < tensors.length; i++) {
          list.setItem(i, tensors[i]);
      }
      return list;
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var _this = undefined;
  var executeOp$2 = function (node, tensorMap, context) { return __awaiter(_this, void 0, void 0, function () {
      var _a, thenFunc, elseFunc, cond, args, condValue, bodyFunc, condFunc, args, condResult, argIds_1, condValue, result, _loop_1, pred, data, inputName, frameId, data, tensor, input, size, dtype, elementShape, dynamicSize, clearAfterRead, identicalElementShapes, name_1, tensorArray, id, index, writeTensor, writeTensorArray, readId, readIndex, readTensorArray, gatherId, gatherIndices, gatherDtype, gatherTensorArray, scatterId, scatterIndices, scatterTensor, scatterTensorArray, concatId, concatTensorArray, concatDtype, splitId, splitTensor, lengths, splitTensorArray, sizeId, sizeTensorArray, closeId, closeTensorArray, idTensor, index, writeTensor, tensorList, idTensor, readIndex, elementShape, elementDType, tensorList, scatterIndices, scatterTensor, elementShape, numElements, tensorList, elementShape, elementDtype, numElements, tensorList, gatherId, gatherIndices, elementShape, elementDtype, tensorList, idTensor, elementShape, elementDtype, numElements, tensorList, tensor, elementShape, elementDtype, tensorList, concatId, tensorList, concatDtype, elementShape, idTensor, writeTensor, tensorList, idTensor, elementShape, elementDType, tensorList, splitTensor, elementShape, lengths, tensorList;
      return __generator(this, function (_b) {
          switch (_b.label) {
              case 0:
                  _a = node.op;
                  switch (_a) {
                      case 'If': return [3 /*break*/, 1];
                      case 'StatelessIf': return [3 /*break*/, 1];
                      case 'While': return [3 /*break*/, 3];
                      case 'StatelessWhile': return [3 /*break*/, 3];
                      case 'LoopCond': return [3 /*break*/, 9];
                      case 'Switch': return [3 /*break*/, 10];
                      case 'Merge': return [3 /*break*/, 12];
                      case 'Enter': return [3 /*break*/, 13];
                      case 'Exit': return [3 /*break*/, 14];
                      case 'NextIteration': return [3 /*break*/, 15];
                      case 'TensorArrayV3': return [3 /*break*/, 16];
                      case 'TensorArrayWriteV3': return [3 /*break*/, 17];
                      case 'TensorArrayReadV3': return [3 /*break*/, 18];
                      case 'TensorArrayGatherV3': return [3 /*break*/, 19];
                      case 'TensorArrayScatterV3': return [3 /*break*/, 20];
                      case 'TensorArrayConcatV3': return [3 /*break*/, 21];
                      case 'TensorArraySplitV3': return [3 /*break*/, 22];
                      case 'TensorArraySizeV3': return [3 /*break*/, 23];
                      case 'TensorArrayCloseV3': return [3 /*break*/, 24];
                      case 'TensorListSetItem': return [3 /*break*/, 25];
                      case 'TensorListGetItem': return [3 /*break*/, 26];
                      case 'TensorListScatterV2': return [3 /*break*/, 27];
                      case 'TensorListScatter': return [3 /*break*/, 27];
                      case 'TensorListReserve': return [3 /*break*/, 28];
                      case 'TensorListGather': return [3 /*break*/, 29];
                      case 'TensorListStack': return [3 /*break*/, 30];
                      case 'TensorListFromTensor': return [3 /*break*/, 31];
                      case 'TensorListConcat': return [3 /*break*/, 32];
                      case 'TensorListPushBack': return [3 /*break*/, 33];
                      case 'TensorListPopBack': return [3 /*break*/, 34];
                      case 'TensorListSplit': return [3 /*break*/, 35];
                  }
                  return [3 /*break*/, 36];
              case 1:
                  thenFunc = getParamValue('thenBranch', node, tensorMap, context);
                  elseFunc = getParamValue('elseBranch', node, tensorMap, context);
                  cond = getParamValue('cond', node, tensorMap, context);
                  args = getParamValue('args', node, tensorMap, context);
                  return [4 /*yield*/, cond.data()];
              case 2:
                  condValue = _b.sent();
                  if (condValue[0]) {
                      return [2 /*return*/, context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap)];
                  }
                  else {
                      return [2 /*return*/, context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap)];
                  }
              case 3:
                  bodyFunc = getParamValue('body', node, tensorMap, context);
                  condFunc = getParamValue('cond', node, tensorMap, context);
                  args = getParamValue('args', node, tensorMap, context);
                  return [4 /*yield*/, context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap)];
              case 4:
                  condResult = (_b.sent());
                  argIds_1 = args.map(function (tensor) { return tensor.id; });
                  return [4 /*yield*/, condResult[0].data()];
              case 5:
                  condValue = _b.sent();
                  // Dispose the intermediate tensors for condition function
                  condResult.forEach(function (tensor) {
                      if (!tensor.kept && argIds_1.indexOf(tensor.id) === -1) {
                          tensor.dispose();
                      }
                  });
                  result = args;
                  _loop_1 = function () {
                      var origResult, resultIds, condResult_1;
                      return __generator(this, function (_a) {
                          switch (_a.label) {
                              case 0:
                                  origResult = result;
                                  return [4 /*yield*/, context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap)];
                              case 1:
                                  // Execution the body of the loop
                                  result = _a.sent();
                                  resultIds = result.map(function (tensor) { return tensor.id; });
                                  // Dispose the intermediate tensor for body function that is not global
                                  // kept, not input/output of the body function
                                  origResult.forEach(function (tensor) {
                                      if (!tensor.kept && argIds_1.indexOf(tensor.id) === -1 &&
                                          resultIds.indexOf(tensor.id) === -1) {
                                          tensor.dispose();
                                      }
                                  });
                                  return [4 /*yield*/, context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap)];
                              case 2:
                                  condResult_1 = (_a.sent());
                                  return [4 /*yield*/, condResult_1[0].data()];
                              case 3:
                                  condValue = _a.sent();
                                  // Dispose the intermediate tensors for condition function
                                  condResult_1.forEach(function (tensor) {
                                      if (!tensor.kept && argIds_1.indexOf(tensor.id) === -1 &&
                                          resultIds.indexOf(tensor.id) === -1) {
                                          tensor.dispose();
                                      }
                                  });
                                  return [2 /*return*/];
                          }
                      });
                  };
                  _b.label = 6;
              case 6:
                  if (!condValue[0]) return [3 /*break*/, 8];
                  return [5 /*yield**/, _loop_1()];
              case 7:
                  _b.sent();
                  return [3 /*break*/, 6];
              case 8: return [2 /*return*/, result];
              case 9:
                  {
                      return [2 /*return*/, [
                              getParamValue('pred', node, tensorMap, context).clone()
                          ]];
                  }
              case 10:
                  pred = getParamValue('pred', node, tensorMap, context);
                  data = getParamValue('data', node, tensorMap, context);
                  return [4 /*yield*/, pred.data()];
              case 11: 
              // Outputs nodes :0 => false, :1 => true
              return [2 /*return*/, (_b.sent())[0] ? [undefined, data.clone()] :
                      [data.clone(), undefined]];
              case 12:
                  {
                      inputName = node.inputNames.find(function (name) { return getTensor(name, tensorMap, context) !== undefined; });
                      return [2 /*return*/, inputName ? [getTensor(inputName, tensorMap, context).clone()] :
                              undefined];
                  }
              case 13:
                  {
                      frameId = getParamValue('frameName', node, tensorMap, context);
                      data = getParamValue('tensor', node, tensorMap, context);
                      context.enterFrame(frameId);
                      return [2 /*return*/, [data.clone()]];
                  }
              case 14:
                  {
                      tensor = getParamValue('tensor', node, tensorMap, context);
                      context.exitFrame();
                      return [2 /*return*/, [tensor.clone()]];
                  }
              case 15:
                  {
                      input = getParamValue('tensor', node, tensorMap, context);
                      context.nextIteration();
                      return [2 /*return*/, [input.clone()]];
                  }
              case 16:
                  {
                      size = getParamValue('size', node, tensorMap, context);
                      dtype = getParamValue('dtype', node, tensorMap, context);
                      elementShape = getParamValue('elementShape', node, tensorMap, context);
                      dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);
                      clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);
                      identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);
                      name_1 = getParamValue('name', node, tensorMap, context);
                      tensorArray = new TensorArray(name_1, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);
                      context.addTensorArray(tensorArray);
                      return [2 /*return*/, [tensorArray.idTensor, tfc.scalar(1.0)]];
                  }
              case 17:
                  {
                      id = getParamValue('tensorArrayId', node, tensorMap, context);
                      index = getParamValue('index', node, tensorMap, context);
                      writeTensor = getParamValue('tensor', node, tensorMap, context);
                      writeTensorArray = context.getTensorArray(id.id);
                      writeTensorArray.write(index, writeTensor);
                      return [2 /*return*/, [writeTensorArray.idTensor]];
                  }
              case 18:
                  {
                      readId = getParamValue('tensorArrayId', node, tensorMap, context);
                      readIndex = getParamValue('index', node, tensorMap, context);
                      readTensorArray = context.getTensorArray(readId.id);
                      return [2 /*return*/, [readTensorArray.read(readIndex)]];
                  }
              case 19:
                  {
                      gatherId = getParamValue('tensorArrayId', node, tensorMap, context);
                      gatherIndices = getParamValue('indices', node, tensorMap, context);
                      gatherDtype = getParamValue('dtype', node, tensorMap, context);
                      gatherTensorArray = context.getTensorArray(gatherId.id);
                      return [2 /*return*/, [gatherTensorArray.gather(gatherIndices, gatherDtype)]];
                  }
              case 20:
                  {
                      scatterId = getParamValue('tensorArrayId', node, tensorMap, context);
                      scatterIndices = getParamValue('indices', node, tensorMap, context);
                      scatterTensor = getParamValue('tensor', node, tensorMap, context);
                      scatterTensorArray = context.getTensorArray(scatterId.id);
                      scatterTensorArray.scatter(scatterIndices, scatterTensor);
                      return [2 /*return*/, [scatterTensorArray.idTensor]];
                  }
              case 21:
                  {
                      concatId = getParamValue('tensorArrayId', node, tensorMap, context);
                      concatTensorArray = context.getTensorArray(concatId.id);
                      concatDtype = getParamValue('dtype', node, tensorMap, context);
                      return [2 /*return*/, [concatTensorArray.concat(concatDtype)]];
                  }
              case 22:
                  {
                      splitId = getParamValue('tensorArrayId', node, tensorMap, context);
                      splitTensor = getParamValue('tensor', node, tensorMap, context);
                      lengths = getParamValue('lengths', node, tensorMap, context);
                      splitTensorArray = context.getTensorArray(splitId.id);
                      splitTensorArray.split(lengths, splitTensor);
                      return [2 /*return*/, [splitTensorArray.idTensor]];
                  }
              case 23:
                  {
                      sizeId = getParamValue('tensorArrayId', node, tensorMap, context);
                      sizeTensorArray = context.getTensorArray(sizeId.id);
                      return [2 /*return*/, [tfc.scalar(sizeTensorArray.size(), 'int32')]];
                  }
              case 24:
                  {
                      closeId = getParamValue('tensorArrayId', node, tensorMap, context);
                      closeTensorArray = context.getTensorArray(closeId.id);
                      closeTensorArray.clearAndClose();
                      return [2 /*return*/, [closeTensorArray.idTensor]];
                  }
              case 25:
                  {
                      idTensor = getParamValue('tensorListId', node, tensorMap, context);
                      index = getParamValue('index', node, tensorMap, context);
                      writeTensor = getParamValue('tensor', node, tensorMap, context);
                      tensorList = context.getTensorList(idTensor.id);
                      tensorList.setItem(index, writeTensor);
                      return [2 /*return*/, [tensorList.idTensor]];
                  }
              case 26:
                  {
                      idTensor = getParamValue('tensorListId', node, tensorMap, context);
                      readIndex = getParamValue('index', node, tensorMap, context);
                      elementShape = getParamValue('elementShape', node, tensorMap, context);
                      elementDType = getParamValue('elementDType', node, tensorMap, context);
                      tensorList = context.getTensorList(idTensor.id);
                      return [2 /*return*/, [tensorList.getItem(readIndex, elementShape, elementDType)]];
                  }
              case 27:
                  {
                      scatterIndices = getParamValue('indices', node, tensorMap, context);
                      scatterTensor = getParamValue('tensor', node, tensorMap, context);
                      elementShape = getParamValue('elementShape', node, tensorMap, context);
                      numElements = getParamValue('numElements', node, tensorMap, context);
                      tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);
                      context.addTensorList(tensorList);
                      return [2 /*return*/, [tensorList.idTensor]];
                  }
              case 28:
                  {
                      elementShape = getParamValue('elementShape', node, tensorMap, context);
                      elementDtype = getParamValue('elementDType', node, tensorMap, context);
                      numElements = getParamValue('numElements', node, tensorMap, context);
                      tensorList = reserve(elementShape, elementDtype, numElements);
                      context.addTensorList(tensorList);
                      return [2 /*return*/, [tensorList.idTensor]];
                  }
              case 29:
                  {
                      gatherId = getParamValue('tensorListId', node, tensorMap, context);
                      gatherIndices = getParamValue('indices', node, tensorMap, context);
                      elementShape = getParamValue('elementShape', node, tensorMap, context);
                      elementDtype = getParamValue('elementDType', node, tensorMap, context);
                      tensorList = context.getTensorList(gatherId.id);
                      return [2 /*return*/, [tensorList.gather(gatherIndices, elementDtype, elementShape)]];
                  }
              case 30:
                  {
                      idTensor = getParamValue('tensorListId', node, tensorMap, context);
                      elementShape = getParamValue('elementShape', node, tensorMap, context);
                      elementDtype = getParamValue('elementDType', node, tensorMap, context);
                      numElements = getParamValue('numElements', node, tensorMap, context);
                      tensorList = context.getTensorList(idTensor.id);
                      return [2 /*return*/, [tensorList.stack(elementShape, elementDtype, numElements)]];
                  }
              case 31:
                  {
                      tensor = getParamValue('tensor', node, tensorMap, context);
                      elementShape = getParamValue('elementShape', node, tensorMap, context);
                      elementDtype = getParamValue('elementDType', node, tensorMap, context);
                      tensorList = fromTensor(tensor, elementShape, elementDtype);
                      context.addTensorList(tensorList);
                      return [2 /*return*/, [tensorList.idTensor]];
                  }
              case 32:
                  {
                      concatId = getParamValue('tensorListId', node, tensorMap, context);
                      tensorList = context.getTensorList(concatId.id);
                      concatDtype = getParamValue('dtype', node, tensorMap, context);
                      elementShape = getParamValue('elementShape', node, tensorMap, context);
                      return [2 /*return*/, [tensorList.concat(concatDtype, elementShape)]];
                  }
              case 33:
                  {
                      idTensor = getParamValue('tensorListId', node, tensorMap, context);
                      writeTensor = getParamValue('tensor', node, tensorMap, context);
                      tensorList = context.getTensorList(idTensor.id);
                      tensorList.pushBack(writeTensor);
                      return [2 /*return*/, [tensorList.idTensor]];
                  }
              case 34:
                  {
                      idTensor = getParamValue('tensorListId', node, tensorMap, context);
                      elementShape = getParamValue('elementShape', node, tensorMap, context);
                      elementDType = getParamValue('elementDType', node, tensorMap, context);
                      tensorList = context.getTensorList(idTensor.id);
                      return [2 /*return*/, [tensorList.popBack(elementShape, elementDType)]];
                  }
              case 35:
                  {
                      splitTensor = getParamValue('tensor', node, tensorMap, context);
                      elementShape = getParamValue('elementShape', node, tensorMap, context);
                      lengths = getParamValue('lengths', node, tensorMap, context);
                      tensorList = split(splitTensor, lengths, elementShape);
                      context.addTensorList(tensorList);
                      return [2 /*return*/, [tensorList.idTensor]];
                  }
              case 36: throw TypeError("Node type " + node.op + " is not implemented");
          }
      });
  }); };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$3 = function (node, tensorMap, context) {
      switch (node.op) {
          case 'Conv1D': {
              var stride = getParamValue('stride', node, tensorMap, context);
              var pad = getParamValue('pad', node, tensorMap, context);
              var dataFormat = getParamValue('dataFormat', node, tensorMap, context)
                  .toUpperCase();
              var dilation = getParamValue('dilation', node, tensorMap, context);
              return [tfc.conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];
          }
          case 'Conv2D': {
              var stride = getParamValue('strides', node, tensorMap, context);
              var pad = getPadding(node, tensorMap, context);
              var dataFormat = getParamValue('dataFormat', node, tensorMap, context)
                  .toUpperCase();
              var dilations = getParamValue('dilations', node, tensorMap, context);
              return [tfc.conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];
          }
          case '_FusedConv2D':
          case 'FusedDepthwiseConv2dNative': {
              var _a = getParamValue('fusedOps', node, tensorMap, context), extraOp = _a[0], activationFunc = _a[1];
              var isBiasAdd = extraOp === 'biasadd';
              var isPrelu = activationFunc === 'prelu';
              var isBatchNorm = extraOp === 'fusedbatchnorm';
              var numArgs = getParamValue('numArgs', node, tensorMap, context);
              if (isBiasAdd) {
                  if (isPrelu && numArgs !== 2) {
                      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +
                          'must have two extra arguments: bias and alpha.');
                  }
                  if (!isPrelu && numArgs !== 1) {
                      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +
                          'one extra argument: bias.');
                  }
              }
              if (isBatchNorm) {
                  throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');
              }
              var stride = getParamValue('strides', node, tensorMap, context);
              var pad = getPadding(node, tensorMap, context);
              var dataFormat = getParamValue('dataFormat', node, tensorMap, context)
                  .toUpperCase();
              var dilations = getParamValue('dilations', node, tensorMap, context);
              var _b = getParamValue('args', node, tensorMap, context), biasArg = _b[0], preluArg = _b[1];
              var kernelMethod = node.op === '_FusedConv2D' ?
                  tfc.fused.conv2d :
                  tfc.fused.depthwiseConv2d;
              return [kernelMethod({
                      x: getParamValue('x', node, tensorMap, context),
                      filter: getParamValue('filter', node, tensorMap, context),
                      strides: [stride[1], stride[2]],
                      pad: pad,
                      dataFormat: dataFormat,
                      dilations: [dilations[1], dilations[2]],
                      bias: biasArg,
                      activation: activationFunc,
                      preluActivationWeights: preluArg
                  })];
          }
          case 'Conv2DBackpropInput':
          case 'Conv2dTranspose': {
              var shape = getParamValue('outputShape', node, tensorMap, context);
              var stride = getParamValue('strides', node, tensorMap, context);
              var pad = getPadding(node, tensorMap, context);
              return [tfc.conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];
          }
          case 'DepthwiseConv2dNative':
          case 'DepthwiseConv2d': {
              var stride = getParamValue('strides', node, tensorMap, context);
              var pad = getPadding(node, tensorMap, context);
              var dilations = getParamValue('dilations', node, tensorMap, context);
              var dataFormat = getParamValue('dataFormat', node, tensorMap, context)
                  .toUpperCase();
              return [tfc.depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];
          }
          case 'Conv3D': {
              var stride = getParamValue('strides', node, tensorMap, context);
              var pad = getParamValue('pad', node, tensorMap, context);
              var dataFormat = getParamValue('dataFormat', node, tensorMap, context)
                  .toUpperCase();
              var dilations = getParamValue('dilations', node, tensorMap, context);
              return [tfc.conv3d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];
          }
          case 'AvgPool': {
              var stride = getParamValue('strides', node, tensorMap, context);
              var pad = getParamValue('pad', node, tensorMap, context);
              var kernelSize = getParamValue('kernelSize', node, tensorMap, context);
              return [tfc.avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
          }
          case 'MaxPool': {
              var stride = getParamValue('strides', node, tensorMap, context);
              var pad = getParamValue('pad', node, tensorMap, context);
              var kernelSize = getParamValue('kernelSize', node, tensorMap, context);
              return [tfc.maxPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
          }
          case 'MaxPoolWithArgmax': {
              var stride = getParamValue('strides', node, tensorMap, context);
              var pad = getParamValue('pad', node, tensorMap, context);
              var kernelSize = getParamValue('kernelSize', node, tensorMap, context);
              var includeBatchInIndex = getParamValue('includeBatchInIndex', node, tensorMap, context);
              var _c = tfc.maxPoolWithArgmax(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex), result = _c.result, indexes = _c.indexes;
              return [result, indexes];
          }
          case 'AvgPool3D': {
              var stride = getParamValue('strides', node, tensorMap, context);
              var pad = getParamValue('pad', node, tensorMap, context);
              var kernelSize = getParamValue('kernelSize', node, tensorMap, context);
              return [tfc.avgPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];
          }
          case 'MaxPool3D': {
              var stride = getParamValue('strides', node, tensorMap, context);
              var pad = getParamValue('pad', node, tensorMap, context);
              var kernelSize = getParamValue('kernelSize', node, tensorMap, context);
              return [tfc.maxPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];
          }
          case 'Dilation2D': {
              var strides = getParamValue('strides', node, tensorMap, context);
              var pad = getParamValue('pad', node, tensorMap, context);
              var dilations = getParamValue('dilations', node, tensorMap, context);
              // strides: [1, stride_height, stride_width, 1].
              var strideHeight = strides[1];
              var strideWidth = strides[2];
              // dilations: [1, dilation_height, dilation_width, 1].
              var dilationHeight = dilations[1];
              var dilationWidth = dilations[2];
              return [tfc.dilation2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];
          }
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$4 = function (node, tensorMap, context) {
      switch (node.op) {
          case 'Fill': {
              var shape = getParamValue('shape', node, tensorMap, context);
              var dtype = getParamValue('dtype', node, tensorMap, context);
              var value = getParamValue('value', node, tensorMap, context);
              return [tfc.fill(shape, value, dtype)];
          }
          case 'LinSpace': {
              var start = getParamValue('start', node, tensorMap, context);
              var stop_1 = getParamValue('stop', node, tensorMap, context);
              var num = getParamValue('num', node, tensorMap, context);
              return [tfc.linspace(start, stop_1, num)];
          }
          case 'Multinomial': {
              var logits = getParamValue('logits', node, tensorMap, context);
              var numSamples = getParamValue('numSamples', node, tensorMap, context);
              var seed = getParamValue('seed', node, tensorMap, context);
              return [tfc.multinomial(logits, numSamples, seed)];
          }
          case 'OneHot': {
              var indices = getParamValue('indices', node, tensorMap, context);
              var depth = getParamValue('depth', node, tensorMap, context);
              var onValue = getParamValue('onValue', node, tensorMap, context);
              var offValue = getParamValue('offValue', node, tensorMap, context);
              return [tfc.oneHot(indices, depth, onValue, offValue)];
          }
          case 'Ones': {
              return [tfc.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];
          }
          case 'OnesLike': {
              return [tfc.onesLike(getParamValue('x', node, tensorMap, context))];
          }
          case 'RandomUniform': {
              return [tfc.randomUniform(
                  // tslint:disable-next-line:no-any
                  getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];
          }
          case 'Range': {
              var start = getParamValue('start', node, tensorMap, context);
              var stop_2 = getParamValue('stop', node, tensorMap, context);
              var step = getParamValue('step', node, tensorMap, context);
              return [tfc.range(start, stop_2, step, getParamValue('dtype', node, tensorMap, context))];
          }
          case 'TruncatedNormal': {
              var shape = getParamValue('shape', node, tensorMap, context);
              var mean = getParamValue('mean', node, tensorMap, context);
              var stdDev = getParamValue('stdDev', node, tensorMap, context);
              var seed = getParamValue('seed', node, tensorMap, context);
              return [tfc.truncatedNormal(shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), seed)];
          }
          case 'Zeros': {
              return [tfc.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];
          }
          case 'ZerosLike': {
              return [tfc.zerosLike(getParamValue('x', node, tensorMap, context))];
          }
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var _this$1 = undefined;
  var executeOp$5 = function (node, tensorMap, context) { return __awaiter(_this$1, void 0, void 0, function () {
      var _a, boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, result, padToMaxOutputSize, result, condition, result;
      return __generator(this, function (_b) {
          switch (_b.label) {
              case 0:
                  _a = node.op;
                  switch (_a) {
                      case 'NonMaxSuppressionV5': return [3 /*break*/, 1];
                      case 'NonMaxSuppressionV4': return [3 /*break*/, 1];
                      case 'NonMaxSuppressionV3': return [3 /*break*/, 1];
                      case 'NonMaxSuppressionV2': return [3 /*break*/, 1];
                      case 'Where': return [3 /*break*/, 7];
                      case 'ListDiff': return [3 /*break*/, 9];
                  }
                  return [3 /*break*/, 10];
              case 1:
                  boxes = getParamValue('boxes', node, tensorMap, context);
                  scores = getParamValue('scores', node, tensorMap, context);
                  maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);
                  iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);
                  scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);
                  if (!(node.op === 'NonMaxSuppressionV5')) return [3 /*break*/, 3];
                  softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);
                  return [4 /*yield*/, tfc.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma)];
              case 2:
                  result = _b.sent();
                  return [2 /*return*/, [result.selectedIndices, result.selectedScores]];
              case 3:
                  if (!(node.op === 'NonMaxSuppressionV4')) return [3 /*break*/, 5];
                  padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);
                  return [4 /*yield*/, tfc.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize)];
              case 4:
                  result = _b.sent();
                  return [2 /*return*/, [result.selectedIndices, result.validOutputs]];
              case 5: return [4 /*yield*/, tfc.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];
              case 6: return [2 /*return*/, [_b.sent()]];
              case 7:
                  condition = getParamValue('condition', node, tensorMap, context)
                      .asType('bool');
                  return [4 /*yield*/, tfc.whereAsync(condition)];
              case 8:
                  result = [_b.sent()];
                  condition.dispose();
                  return [2 /*return*/, result];
              case 9:
                  {
                      return [2 /*return*/, tfc.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];
                  }
              case 10: throw TypeError("Node type " + node.op + " is not implemented");
          }
      });
  }); };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$6 = function (node, tensorMap, context) {
      switch (node.op) {
          case 'TopKV2': {
              var x = getParamValue('x', node, tensorMap, context);
              var k = getParamValue('k', node, tensorMap, context);
              var sorted = getParamValue('sorted', node, tensorMap, context);
              var result = tfc.topk(x, k, sorted);
              return [result.values, result.indices];
          }
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$7 = function (node, tensorMap, context) {
      switch (node.op) {
          case 'Const': {
              return tensorMap[node.name];
          }
          case 'PlaceholderWithDefault':
              var def = getParamValue('default', node, tensorMap, context);
              return [getTensor(node.name, tensorMap, context) || def];
          case 'Placeholder':
              return [getTensor(node.name, tensorMap, context)];
          case 'Identity':
          case 'StopGradient':
          case 'FakeQuantWithMinMaxVars': // This op is currently ignored.
              return [
                  getParamValue('x', node, tensorMap, context).clone()
              ];
          case 'IdentityN':
              return getParamValue('x', node, tensorMap, context)
                  .map(function (t) { return t.clone(); });
          case 'Snapshot':
              var snapshot = getParamValue('x', node, tensorMap, context);
              return [snapshot.clone()];
          case 'Shape':
              return [tfc.tensor1d(getParamValue('x', node, tensorMap, context).shape, 'int32')];
          case 'ShapeN':
              return getParamValue('x', node, tensorMap, context)
                  .map(function (t) { return tfc.tensor1d(t.shape); });
          case 'Size':
              return [tfc.scalar(getParamValue('x', node, tensorMap, context).size, 'int32')];
          case 'Rank':
              return [tfc.scalar(getParamValue('x', node, tensorMap, context).rank, 'int32')];
          case 'NoOp':
              return [tfc.scalar(1)];
          case 'Print':
              var input = getParamValue('x', node, tensorMap, context);
              var data = getParamValue('data', node, tensorMap, context);
              var message = getParamValue('message', node, tensorMap, context);
              var summarize = getParamValue('summarize', node, tensorMap, context);
              console.warn('The graph has a tf.print() operation,' +
                  'usually used for debugging, which slows down performance.');
              console.log(message);
              for (var i = 0; i < data.length; i++) {
                  console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));
              }
              return [input];
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$8 = function (node, tensorMap, context) {
      switch (node.op) {
          case 'ResizeBilinear': {
              var images = getParamValue('images', node, tensorMap, context);
              var size = getParamValue('size', node, tensorMap, context);
              var alignCorners = getParamValue('alignCorners', node, tensorMap, context);
              return [tfc.image.resizeBilinear(images, [size[0], size[1]], alignCorners)];
          }
          case 'ResizeNearestNeighbor': {
              var images = getParamValue('images', node, tensorMap, context);
              var size = getParamValue('size', node, tensorMap, context);
              var alignCorners = getParamValue('alignCorners', node, tensorMap, context);
              return [tfc.image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners)];
          }
          case 'CropAndResize': {
              var image = getParamValue('image', node, tensorMap, context);
              var boxes = getParamValue('boxes', node, tensorMap, context);
              var boxInd = getParamValue('boxInd', node, tensorMap, context);
              var cropSize = getParamValue('cropSize', node, tensorMap, context);
              var method = getParamValue('method', node, tensorMap, context);
              var extrapolationValue = getParamValue('extrapolationValue', node, tensorMap, context);
              return [tfc.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];
          }
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$9 = function (node, tensorMap, context) {
      switch (node.op) {
          case 'Equal': {
              return [tfc.equal(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'NotEqual': {
              return [tfc.notEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'Greater': {
              return [tfc.greater(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'GreaterEqual': {
              return [tfc.greaterEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'Less': {
              return [tfc.less(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'LessEqual': {
              return [tfc.lessEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'LogicalAnd': {
              return [tfc.logicalAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'LogicalNot': {
              return [tfc.logicalNot(getParamValue('a', node, tensorMap, context))];
          }
          case 'LogicalOr': {
              return [tfc.logicalOr(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          case 'Select':
          case 'SelectV2': {
              return [tfc.where(getParamValue('condition', node, tensorMap, context), getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
          }
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$a = function (node, tensorMap, context) {
      switch (node.op) {
          case 'BatchMatMul':
          case 'BatchMatMulV2':
          case 'MatMul':
              return [tfc.matMul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context), getParamValue('transposeA', node, tensorMap, context), getParamValue('transposeB', node, tensorMap, context))];
          case 'Transpose':
              return [tfc.transpose(getParamValue('x', node, tensorMap, context), getParamValue('perm', node, tensorMap, context))];
          case '_FusedMatMul':
              var _a = getParamValue('fusedOps', node, tensorMap, context), extraOp = _a[0], activationFunc = _a[1];
              var isBiasAdd = extraOp === 'biasadd';
              var isPrelu = activationFunc === 'prelu';
              var numArgs = getParamValue('numArgs', node, tensorMap, context);
              if (isBiasAdd) {
                  if (isPrelu && numArgs !== 2) {
                      throw new Error('Fused MatMul with BiasAdd and Prelu must have two ' +
                          'extra arguments: bias and alpha.');
                  }
                  if (!isPrelu && numArgs !== 1) {
                      throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');
                  }
              }
              var _b = getParamValue('args', node, tensorMap, context), biasArg = _b[0], preluArg = _b[1];
              return [tfc.fused.matMul({
                      a: getParamValue('a', node, tensorMap, context),
                      b: getParamValue('b', node, tensorMap, context),
                      transposeA: getParamValue('transposeA', node, tensorMap, context),
                      transposeB: getParamValue('transposeB', node, tensorMap, context),
                      bias: biasArg,
                      activation: activationFunc,
                      preluActivationWeights: preluArg
                  })];
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$b = function (node, tensorMap, context) {
      switch (node.op) {
          case 'FusedBatchNorm':
          case 'FusedBatchNormV2': {
              return [tfc.batchNorm(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('offset', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context))];
          }
          case 'FusedBatchNormV3': {
              return [tfc.batchNorm(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('offset', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context))];
          }
          case 'LRN': {
              return [tfc.localResponseNormalization(getParamValue('x', node, tensorMap, context), getParamValue('radius', node, tensorMap, context), getParamValue('bias', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context), getParamValue('beta', node, tensorMap, context))];
          }
          case 'Softmax': {
              return [tfc.softmax(getParamValue('x', node, tensorMap, context))];
          }
          case 'LogSoftmax': {
              return [tfc.logSoftmax(getParamValue('x', node, tensorMap, context))];
          }
          case 'SparseToDense': {
              return [tfc.sparseToDense(getParamValue('sparseIndices', node, tensorMap, context), getParamValue('outputShape', node, tensorMap, context), getParamValue('sparseValues', node, tensorMap, context), getParamValue('defaultValue', node, tensorMap, context))];
          }
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$c = function (node, tensorMap, context) {
      switch (node.op) {
          case 'Max': {
              var axis = getParamValue('axis', node, tensorMap, context);
              var keepDims = getParamValue('keepDims', node, tensorMap, context);
              return [tfc.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];
          }
          case 'Mean': {
              var axis = getParamValue('axis', node, tensorMap, context);
              var keepDims = getParamValue('keepDims', node, tensorMap, context);
              return [tfc.mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];
          }
          case 'Min': {
              var axis = getParamValue('axis', node, tensorMap, context);
              var keepDims = getParamValue('keepDims', node, tensorMap, context);
              return [tfc.min(getParamValue('x', node, tensorMap, context), axis, keepDims)];
          }
          case 'Sum': {
              var axis = getParamValue('axis', node, tensorMap, context);
              var keepDims = getParamValue('keepDims', node, tensorMap, context);
              return [tfc.sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];
          }
          case 'All': {
              var axis = getParamValue('axis', node, tensorMap, context);
              var keepDims = getParamValue('keepDims', node, tensorMap, context);
              return [tfc.all(getParamValue('x', node, tensorMap, context), axis, keepDims)];
          }
          case 'Any': {
              var axis = getParamValue('axis', node, tensorMap, context);
              var keepDims = getParamValue('keepDims', node, tensorMap, context);
              return [tfc.any(getParamValue('x', node, tensorMap, context), axis, keepDims)];
          }
          case 'ArgMax': {
              var axis = getParamValue('axis', node, tensorMap, context);
              return [tfc.argMax(getParamValue('x', node, tensorMap, context), axis)];
          }
          case 'ArgMin': {
              var axis = getParamValue('axis', node, tensorMap, context);
              return [tfc.argMin(getParamValue('x', node, tensorMap, context), axis)];
          }
          case 'Prod': {
              var axis = getParamValue('axis', node, tensorMap, context);
              var keepDims = getParamValue('keepDims', node, tensorMap, context);
              return [tfc.prod(getParamValue('x', node, tensorMap, context), axis, keepDims)];
          }
          case 'Cumsum': {
              var axis = getParamValue('axis', node, tensorMap, context);
              var exclusive = getParamValue('exclusive', node, tensorMap, context);
              var reverse = getParamValue('reverse', node, tensorMap, context);
              return [tfc.cumsum(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];
          }
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$d = function (node, tensorMap, context) {
      switch (node.op) {
          case 'ConcatV2':
          case 'Concat': {
              var n = getParamValue('n', node, tensorMap, context);
              var axis = getParamValue('axis', node, tensorMap, context);
              var inputs = getParamValue('tensors', node, tensorMap, context);
              inputs = inputs.slice(0, n);
              return [tfc.concat(inputs, axis)];
          }
          case 'GatherV2':
          case 'Gather': {
              var axis = getParamValue('axis', node, tensorMap, context);
              var input = getParamValue('x', node, tensorMap, context);
              var indices = getParamValue('indices', node, tensorMap, context);
              return [tfc.gather(input, indices.asType('int32'), axis)];
          }
          case 'ReverseV2':
          case 'Reverse': {
              var axis = getParamValue('axis', node, tensorMap, context);
              var input = getParamValue('x', node, tensorMap, context);
              return [tfc.reverse(input, axis)];
          }
          case 'Slice': {
              // tslint:disable-next-line:no-any
              var begin = getParamValue('begin', node, tensorMap, context);
              // tslint:disable-next-line:no-any
              var size = getParamValue('size', node, tensorMap, context);
              return [tfc.slice(getParamValue('x', node, tensorMap, context), begin, size)];
          }
          case 'StridedSlice': {
              var begin = getParamValue('begin', node, tensorMap, context);
              var end = getParamValue('end', node, tensorMap, context);
              var strides = getParamValue('strides', node, tensorMap, context);
              var beginMask = getParamValue('beginMask', node, tensorMap, context);
              var endMask = getParamValue('endMask', node, tensorMap, context);
              var ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);
              var newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);
              var shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);
              var tensor = getParamValue('x', node, tensorMap, context);
              return [tfc.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];
          }
          case 'Pack': {
              return tfc.tidy(function () {
                  var axis = getParamValue('axis', node, tensorMap, context);
                  var tensors = getParamValue('tensors', node, tensorMap, context);
                  // Reshape the tensors to the first tensor's shape if they don't match.
                  var shape = tensors[0].shape;
                  var squeezedShape = tensors[0].squeeze().shape;
                  var mapped = tensors.map(function (tensor) {
                      var sameShape = tfc.util.arraysEqual(tensor.shape, shape);
                      if (!sameShape &&
                          !tfc.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {
                          throw new Error('the input tensors shape does not match');
                      }
                      return sameShape ? tensor : tensor.reshape(shape);
                  });
                  return [tfc.stack(mapped, axis)];
              });
          }
          case 'Unpack': {
              return tfc.tidy(function () {
                  var axis = getParamValue('axis', node, tensorMap, context);
                  var tensor = getParamValue('tensor', node, tensorMap, context);
                  return tfc.unstack(tensor, axis);
              });
          }
          case 'Tile': {
              var reps = getParamValue('reps', node, tensorMap, context);
              return [tfc.tile(getParamValue('x', node, tensorMap, context), reps)];
          }
          case 'Split':
          case 'SplitV': {
              var axis = getParamValue('axis', node, tensorMap, context);
              var numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);
              var tensor = getParamValue('x', node, tensorMap, context);
              return tfc.split(tensor, numOrSizeSplits, axis);
          }
          case 'ScatterNd': {
              var indices = getParamValue('indices', node, tensorMap, context);
              var values = getParamValue('values', node, tensorMap, context);
              var shape = getParamValue('shape', node, tensorMap, context);
              return [tfc.scatterND(indices, values, shape)];
          }
          case 'GatherNd': {
              var x = getParamValue('x', node, tensorMap, context);
              var indices = getParamValue('indices', node, tensorMap, context);
              return [tfc.gatherND(x, indices)];
          }
          case 'SparseToDense': {
              var indices = getParamValue('sparseIndices', node, tensorMap, context);
              var shape = getParamValue('outputShape', node, tensorMap, context);
              var sparseValues = getParamValue('sparseValues', node, tensorMap, context);
              var defaultValue = getParamValue('defaultValue', node, tensorMap, context);
              return [tfc.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ?
                      defaultValue :
                      defaultValue.asType(sparseValues.dtype))];
          }
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$e = function (node, tensorMap, context) {
      switch (node.op) {
          case 'FFT': {
              return [tfc.fft(getParamValue('x', node, tensorMap, context))];
          }
          case 'IFFT': {
              return [tfc.ifft(getParamValue('x', node, tensorMap, context))];
          }
          case 'RFFT': {
              return [tfc.rfft(getParamValue('x', node, tensorMap, context))];
          }
          case 'IRFFT': {
              return [tfc.irfft(getParamValue('x', node, tensorMap, context))];
          }
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var executeOp$f = function (node, tensorMap, context) {
      switch (node.op) {
          case 'Cast': {
              return [tfc.cast(getParamValue('x', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];
          }
          case 'ExpandDims': {
              var axis = getParamValue('axis', node, tensorMap, context);
              return [tfc.expandDims(getParamValue('x', node, tensorMap, context), axis)];
          }
          case 'Squeeze': {
              var axis = getParamValue('axis', node, tensorMap, context);
              return [tfc.squeeze(getParamValue('x', node, tensorMap, context), axis)];
          }
          case 'Reshape': {
              return [tfc.reshape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];
          }
          case 'PadV2':
          case 'Pad': {
              return [tfc.pad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('constantValue', node, tensorMap, context))];
          }
          case 'SpaceToBatchND': {
              var blockShape = getParamValue('blockShape', node, tensorMap, context);
              var paddings = getParamValue('paddings', node, tensorMap, context);
              return [tfc.spaceToBatchND(getParamValue('x', node, tensorMap, context), blockShape, paddings)];
          }
          case 'BatchToSpaceND': {
              var blockShape = getParamValue('blockShape', node, tensorMap, context);
              var crops = getParamValue('crops', node, tensorMap, context);
              return [tfc.batchToSpaceND(getParamValue('x', node, tensorMap, context), blockShape, crops)];
          }
          case 'DepthToSpace': {
              var blockSize = getParamValue('blockSize', node, tensorMap, context);
              var dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();
              return [tfc.depthToSpace(getParamValue('x', node, tensorMap, context), blockSize, dataFormat)];
          }
          case 'BroadcastTo': {
              return [tfc.broadcastTo(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];
          }
          default:
              throw TypeError("Node type " + node.op + " is not implemented");
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Executes the op defined by the node object.
   * @param node
   * @param tensorMap contains tensors for executed nodes and weights
   */
  function executeOp$g(node, tensorMap, context) {
      var value = (function (node, tensorMap, context) {
          switch (node.category) {
              case 'arithmetic':
                  return tfc.tidy(function () { return executeOp(node, tensorMap, context); });
              case 'basic_math':
                  return tfc.tidy(function () { return executeOp$1(node, tensorMap, context); });
              case 'control':
                  return executeOp$2(node, tensorMap, context);
              case 'convolution':
                  return tfc.tidy(function () { return executeOp$3(node, tensorMap, context); });
              case 'creation':
                  return tfc.tidy(function () { return executeOp$4(node, tensorMap, context); });
              case 'dynamic':
                  return executeOp$5(node, tensorMap, context);
              case 'evaluation':
                  return tfc.tidy(function () { return executeOp$6(node, tensorMap, context); });
              case 'image':
                  return tfc.tidy(function () { return executeOp$8(node, tensorMap, context); });
              case 'graph':
                  return tfc.tidy(function () { return executeOp$7(node, tensorMap, context); });
              case 'logical':
                  return tfc.tidy(function () { return executeOp$9(node, tensorMap, context); });
              case 'matrices':
                  return tfc.tidy(function () { return executeOp$a(node, tensorMap, context); });
              case 'normalization':
                  return tfc.tidy(function () { return executeOp$b(node, tensorMap, context); });
              case 'reduction':
                  return tfc.tidy(function () { return executeOp$c(node, tensorMap, context); });
              case 'slice_join':
                  return tfc.tidy(function () { return executeOp$d(node, tensorMap, context); });
              case 'spectral':
                  return tfc.tidy(function () { return executeOp$e(node, tensorMap, context); });
              case 'transformation':
                  return tfc.tidy(function () { return executeOp$f(node, tensorMap, context); });
              case 'custom':
                  var opMapper = getRegisteredOp(node.op);
                  if (opMapper && opMapper.customExecutor) {
                      return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));
                  }
                  else {
                      throw TypeError("Custom op " + node.op + " is not registered.");
                  }
              default:
                  throw TypeError("Unknown op '" + node.op + "'. File an issue at " +
                      "https://github.com/tensorflow/tfjs/issues so we can add it" +
                      ", or register a custom execution with tf.registerOp()");
          }
      })(node, tensorMap, context);
      if (value instanceof Promise) {
          return value.then(function (data) { return [].concat(data); });
      }
      return [].concat(value);
  }

  /**
   * ExecutionContext captures the runtime environment of the node. It keeps
   * track of the current frame and iteration for the control flow ops.
   *
   * For example, typical Dynamic RNN model may contain loops, for which
   * TensorFlow will generate graphs with Enter/Exit nodes to control the
   * current execution frame, and NextIteration Nodes for iteration id increment.
   * For model with branch logic, TensorFLow will generate Switch/Merge ops.
   */
  var ExecutionContext = /** @class */ (function () {
      function ExecutionContext(weightMap, tensorArrayMap, tensorListMap, functionMap) {
          if (weightMap === void 0) { weightMap = {}; }
          if (tensorArrayMap === void 0) { tensorArrayMap = {}; }
          if (tensorListMap === void 0) { tensorListMap = {}; }
          if (functionMap === void 0) { functionMap = {}; }
          this.weightMap = weightMap;
          this.tensorArrayMap = tensorArrayMap;
          this.tensorListMap = tensorListMap;
          this.functionMap = functionMap;
          this.rootContext = { id: 0, frameName: '', iterationId: 0 };
          this.contexts = [this.rootContext];
          this.lastId = 0;
          this.generateCurrentContextIds();
      }
      ExecutionContext.prototype.newFrame = function (id, frameName) {
          return { id: id, frameName: frameName, iterationId: 0 };
      };
      Object.defineProperty(ExecutionContext.prototype, "currentContext", {
          get: function () {
              return this.contexts;
          },
          /**
           * Set the current context
           * @param contexts: ExecutionContextInfo[] the current path of execution
           * frames
           */
          set: function (contexts) {
              if (this.contexts !== contexts) {
                  this.contexts = contexts;
                  this.generateCurrentContextIds();
              }
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(ExecutionContext.prototype, "currentContextId", {
          /**
           * Returns the current context in string format.
           */
          get: function () {
              return this._currentContextIds[0];
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(ExecutionContext.prototype, "currentContextIds", {
          /**
           * Returns the current context and all parent contexts in string format.
           * This allow access to the nodes in the current and parent frames.
           */
          get: function () {
              return this._currentContextIds;
          },
          enumerable: true,
          configurable: true
      });
      ExecutionContext.prototype.generateCurrentContextIds = function () {
          var names = [];
          for (var i = 0; i < this.contexts.length - 1; i++) {
              var contexts = this.contexts.slice(0, this.contexts.length - i);
              names.push(this.contextIdforContexts(contexts));
          }
          names.push('');
          this._currentContextIds = names;
      };
      ExecutionContext.prototype.contextIdforContexts = function (contexts) {
          return contexts ?
              contexts
                  .map(function (context) { return (context.id === 0 && context.iterationId === 0) ?
                  '' :
                  context.frameName + "-" + context.iterationId; })
                  .join('/') :
              '';
      };
      /**
       * Enter a new frame, a new context is pushed on the current context list.
       * @param frameId new frame id
       */
      ExecutionContext.prototype.enterFrame = function (frameId) {
          if (this.contexts) {
              this.lastId++;
              this.contexts = this.contexts.slice();
              this.contexts.push(this.newFrame(this.lastId, frameId));
              this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));
          }
      };
      /**
       * Exit the current frame, the last context is removed from the current
       * context list.
       */
      ExecutionContext.prototype.exitFrame = function () {
          if (this.contexts && this.contexts.length > 1) {
              this.contexts = this.contexts.slice();
              this.contexts.splice(-1);
              this.currentContextIds.shift();
          }
          else {
              throw new Error('Cannot exit frame, the context is empty');
          }
      };
      /**
       * Enter the next iteration of a loop, the iteration id of last context is
       * increased.
       */
      ExecutionContext.prototype.nextIteration = function () {
          if (this.contexts && this.contexts.length > 0) {
              this.contexts = this.contexts.slice();
              this.lastId++;
              var context = Object.assign({}, this.contexts[this.contexts.length - 1]);
              context.iterationId += 1;
              context.id = this.lastId;
              this.contexts.splice(-1, 1, context);
              this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
          }
          else {
              throw new Error('Cannot increase frame iteration, the context is empty');
          }
      };
      ExecutionContext.prototype.getWeight = function (name) {
          return this.weightMap[name];
      };
      ExecutionContext.prototype.addTensorArray = function (tensorArray) {
          this.tensorArrayMap[tensorArray.id] = tensorArray;
      };
      ExecutionContext.prototype.getTensorArray = function (id) {
          return this.tensorArrayMap[id];
      };
      ExecutionContext.prototype.addTensorList = function (tensorList) {
          this.tensorListMap[tensorList.id] = tensorList;
      };
      ExecutionContext.prototype.getTensorList = function (id) {
          return this.tensorListMap[id];
      };
      ExecutionContext.prototype.dispose = function () {
          for (var key in this.tensorArrayMap) {
              this.tensorArrayMap[key].clearAndClose();
          }
          for (var key in this.tensorListMap) {
              this.tensorListMap[key].clearAndClose();
          }
      };
      return ExecutionContext;
  }());

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Given graph inputs and desired outputs, find the minimal set of nodes
   * to execute in order to compute the outputs. In addition return other useful
   * info such:
   * - Missing inputs needed to compute the output.
   * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).
   * - Alternative inputs in order to avoid async (dynamic op) execution.
   */
  function getExecutionSubgraph(inputs, outputs, weightMap) {
      var usedNodes = new Set();
      var missingInputs = [];
      var dynamicNode = null;
      var syncInputs = null;
      // Start with the outputs, going backwards and find all the nodes that are
      // needed to compute those outputs.
      var seen = new Set();
      var inputNodeNames = Object.keys(inputs).map(function (name) { return parseNodeName(name)[0]; });
      var frontier = outputs.slice();
      while (frontier.length > 0) {
          var node = frontier.pop();
          if (isControlFlow(node) || isDynamicShape(node)) {
              if (dynamicNode == null) {
                  dynamicNode = node;
                  syncInputs = dynamicNode.children.map(function (child) { return child.name; })
                      .filter(function (name) { return usedNodes.has(name); });
              }
          }
          usedNodes.add(node.name);
          // Weights are dead end since we already have their values.
          if (weightMap[node.name] != null) {
              continue;
          }
          // This node is a dead end since it's one of the user-provided inputs.
          if (inputNodeNames.indexOf(node.name) !== -1) {
              continue;
          }
          if (node.inputs.length === 0) {
              missingInputs.push(node.name);
              continue;
          }
          node.inputs.forEach(function (input) {
              // Don't add to the frontier if it is already there.
              if (seen.has(input.name)) {
                  return;
              }
              seen.add(input.name);
              frontier.push(input);
          });
      }
      return { inputs: inputs, outputs: outputs, usedNodes: usedNodes, missingInputs: missingInputs, dynamicNode: dynamicNode, syncInputs: syncInputs };
  }
  /**
   * Given the execution info, return a list of nodes in topological order that
   * need to be executed to compute the output.
   */
  function getNodesInTopologicalOrder(graph, weightMap, executionInfo) {
      var usedNodes = executionInfo.usedNodes, inputs = executionInfo.inputs;
      var frontier = [];
      var inputNodes = Object.keys(inputs)
          .map(function (name) { return parseNodeName(name)[0]; })
          .map(function (name) { return graph.nodes[name]; });
      inputNodes.forEach(function (input) {
          if (usedNodes.has(input.name)) {
              frontier.push(input);
          }
      });
      graph.weights.forEach(function (weight) {
          if (usedNodes.has(weight.name)) {
              frontier.push(weight);
          }
      });
      var seen = new Set();
      var orderedNodes = [];
      while (frontier.length > 0) {
          var node = frontier.pop();
          seen.add(node.name);
          if (!weightMap[node.name]) {
              orderedNodes.push(node);
          }
          node.children.forEach(function (child) {
              if (!seen.has(child.name) && usedNodes.has(child.name) &&
                  child.inputs.every(function (input) { return seen.has(input.name); })) {
                  frontier.push(child);
              }
          });
      }
      return orderedNodes;
  }
  var CONTROL_FLOW_OPS = [
      'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',
      'StatelessWhile', 'if', 'While'
  ];
  var DYNAMIC_SHAPE_OPS = [
      'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'
  ];
  function isControlFlow(node) {
      return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;
  }
  function isDynamicShape(node) {
      return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var GraphExecutor = /** @class */ (function () {
      /**
       *
       * @param graph Graph the model or function graph to be executed.
       * @param parent When building function exector you need to set the parent
       * executor. Since the weights and function executor maps are set at parant
       * level, that function executor can access the function maps and weight maps
       * through the parent.
       */
      function GraphExecutor(graph, parent) {
          var _this = this;
          this.graph = graph;
          this.parent = parent;
          this.compiledMap = new Map();
          this._weightMap = {};
          this.SEPERATOR = ',';
          this._functions = {};
          this._functionExecutorMap = {};
          this._outputs = graph.outputs;
          this._inputs = graph.inputs;
          this._signature = graph.signature;
          this._functions = graph.functions;
          // create sub-graph executors
          if (graph.functions != null) {
              Object.keys(graph.functions).forEach(function (name) {
                  _this._functionExecutorMap[name] =
                      new GraphExecutor(graph.functions[name], _this);
              });
          }
      }
      Object.defineProperty(GraphExecutor.prototype, "weightIds", {
          get: function () {
              return this.parent ? this.parent.weightIds : this._weightIds;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(GraphExecutor.prototype, "functionExecutorMap", {
          get: function () {
              return this.parent ? this.parent.functionExecutorMap :
                  this._functionExecutorMap;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(GraphExecutor.prototype, "weightMap", {
          get: function () {
              return this.parent ? this.parent.weightMap : this._weightMap;
          },
          set: function (weightMap) {
              var weightIds = Object.keys(weightMap).map(function (key) { return weightMap[key].map(function (tensor) { return tensor.id; }); });
              this._weightIds = [].concat.apply([], weightIds);
              this._weightMap = weightMap;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(GraphExecutor.prototype, "inputs", {
          get: function () {
              return this._inputs.map(function (node) {
                  return {
                      name: node.name,
                      shape: node.attrParams['shape'] ?
                          node.attrParams['shape'].value :
                          undefined,
                      dtype: node.attrParams['dtype'] ?
                          node.attrParams['dtype'].value :
                          undefined
                  };
              });
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(GraphExecutor.prototype, "outputs", {
          get: function () {
              return this._outputs.map(function (node) {
                  return {
                      name: node.name,
                      shape: node.attrParams['shape'] ?
                          node.attrParams['shape'].value :
                          undefined,
                      dtype: node.attrParams['dtype'] ?
                          node.attrParams['dtype'].value :
                          undefined
                  };
              });
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(GraphExecutor.prototype, "inputNodes", {
          get: function () {
              return this._inputs.map(function (node) { return node.signatureKey || node.name; });
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(GraphExecutor.prototype, "outputNodes", {
          get: function () {
              return this._outputs.map(function (node) {
                  var name = node.signatureKey || node.name;
                  return node.defaultOutput ? (name + ":" + node.defaultOutput) : name;
              });
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(GraphExecutor.prototype, "functions", {
          get: function () {
              var _this = this;
              return Object.keys(this._functions).reduce(function (map, key) {
                  map[key] = _this._functions[key].signature;
                  return map;
              }, {});
          },
          enumerable: true,
          configurable: true
      });
      GraphExecutor.prototype.getCompilationKey = function (inputs, outputs) {
          var sortedInputs = inputs.map(function (node) { return node.name; }).sort();
          var sortedOutputs = outputs.map(function (node) { return node.name; }).sort();
          return sortedInputs.join(this.SEPERATOR) + '--' +
              sortedOutputs.join(this.SEPERATOR);
      };
      /**
       * Compiles the inference graph and returns the minimal set of nodes that are
       * required for execution, in the correct execution order.
       */
      GraphExecutor.prototype.compile = function (inputs, outputs) {
          var executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap);
          var missingInputs = executionInfo.missingInputs, dynamicNode = executionInfo.dynamicNode, syncInputs = executionInfo.syncInputs;
          if (dynamicNode != null) {
              throw new Error("This execution contains the node '" + dynamicNode.name + "', which has " +
                  ("the dynamic op '" + dynamicNode.op + "'. Please use ") +
                  "model.executeAsync() instead. Alternatively, to avoid the " +
                  ("dynamic ops, specify the inputs [" + syncInputs + "]"));
          }
          if (missingInputs.length > 0) {
              var outNames = outputs.map(function (n) { return n.name; });
              var inNames = Object.keys(inputs);
              throw new Error("Cannot compute the outputs [" + outNames + "] from the provided inputs " +
                  ("[" + inNames + "]. Missing the following inputs: [" + missingInputs + "]"));
          }
          return getNodesInTopologicalOrder(this.graph, this.weightMap, executionInfo);
      };
      /**
       * Executes the inference for given input tensors.
       * @param inputs Tensor map for the model inputs, keyed by the input node
       * names.
       * @param outputs output node name from the Tensorflow model, if no outputs
       * are specified, the default outputs of the model would be used. You can
       * inspect intermediate nodes of the model by adding them to the outputs
       * array.
       */
      GraphExecutor.prototype.execute = function (inputs, outputs) {
          var _this = this;
          inputs = this.mapInputs(inputs);
          var names = Object.keys(inputs).sort();
          this.checkInputs(inputs);
          this.checkInputShapeAndType(inputs);
          outputs = this.mapOutputs(outputs);
          this.checkOutputs(outputs);
          var inputNodes = names.map(function (name) { return _this.graph.nodes[parseNodeName(name)[0]]; });
          var outputNodes = outputs.map(function (name) { return _this.graph.nodes[parseNodeName(name)[0]]; });
          var compilationKey = this.getCompilationKey(inputNodes, outputNodes);
          // Do nothing if the compiled graph cache contains the input.
          var orderedNodes = this.compiledMap.get(compilationKey);
          if (orderedNodes == null) {
              orderedNodes = this.compile(inputs, outputNodes);
              this.compiledMap.set(compilationKey, orderedNodes);
          }
          var tensorArrayMap = {};
          var tensorListMap = {};
          return tfc.tidy(function () {
              var context = new ExecutionContext(_this.weightMap, tensorArrayMap, tensorListMap, _this.functionExecutorMap);
              var tensorsMap = __assign({}, _this.weightMap);
              Object.keys(inputs).forEach(function (name) {
                  var _a = parseNodeName(name), nodeName = _a[0], index = _a[1];
                  var tensors = [];
                  tensors[index] = inputs[name];
                  tensorsMap[nodeName] = tensors;
              });
              var tensorsToKeep = _this.getFrozenTensorIds(tensorsMap);
              var intermediateTensorConsumerCount = {};
              for (var i = 0; i < orderedNodes.length; i++) {
                  var node = orderedNodes[i];
                  if (!tensorsMap[node.name]) {
                      var tensors = executeOp$g(node, tensorsMap, context);
                      if (tensors instanceof Promise) {
                          throw new Error("The execution of the op '" + node.op + "' returned a promise. " +
                              "Please use model.executeAsync() instead.");
                      }
                      tensorsMap[node.name] = tensors;
                      _this.checkTensorForDisposal(node.name, node, tensorsMap, context, tensorsToKeep, outputs, intermediateTensorConsumerCount);
                  }
              }
              // dispose the context for the root executor
              if (_this.parent == null) {
                  context.dispose();
              }
              return outputs.map(function (name) { return getTensor(name, tensorsMap, context); });
          });
      };
      GraphExecutor.prototype.getFrozenTensorIds = function (tensorMap) {
          var ids = [].concat.apply([], Object.keys(tensorMap)
              .map(function (key) { return tensorMap[key]; })
              .map(function (tensors) { return tensors.map(function (tensor) { return tensor.id; }); }));
          return new Set(ids);
      };
      GraphExecutor.prototype.checkTensorForDisposal = function (nodeName, node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount) {
          // Skip output nodes and any control flow nodes, since its dependency is
          // tricky to track correctly.
          if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {
              return;
          }
          tensorMap[nodeName].forEach(function (tensor) {
              if (tensor != null) {
                  intermediateTensorConsumerCount[tensor.id] =
                      (intermediateTensorConsumerCount[tensor.id] || 0) +
                          node.children.length;
              }
          });
          node.inputs.forEach(function (input) {
              // Skip any control flow nodes, since its dependency is tricky to track
              // correctly.
              if (input.category !== 'control') {
                  var tensors = getTensorsForCurrentContenxt(input.name, tensorMap, context);
                  if (tensors != null) {
                      tensors.forEach(function (tensor) {
                          if (tensor && !tensorsToKeep.has(tensor.id)) {
                              var count = intermediateTensorConsumerCount[tensor.id];
                              if (count === 1) {
                                  tensor.dispose();
                                  delete intermediateTensorConsumerCount[tensor.id];
                              }
                              else if (count != null) {
                                  // only intermediate nodes has count set, inputs and weights are
                                  // not.
                                  intermediateTensorConsumerCount[tensor.id]--;
                              }
                          }
                      });
                  }
              }
          });
      };
      /**
       * Executes the inference for given input tensors in Async fashion.
       * @param inputs Tensor map for the model inputs, keyed by the input node
       * names.
       * @param outputs output node name from the Tensorflow model, if no outputs
       * are specified, the default outputs of the model would be used. You can
       * inspect intermediate nodes of the model by adding them to the outputs
       * array.
       */
      GraphExecutor.prototype.executeAsync = function (inputs, outputs) {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  return [2 /*return*/, this._executeAsync(inputs, outputs)];
              });
          });
      };
      /**
       * Executes the inference for given input tensors in Async fashion.
       * @param inputs Tensor map for the model inputs, keyed by the input node
       * names.
       * @param outputs output node name from the Tensorflow model, if no outputs
       * are specified, the default outputs of the model would be used. You can
       * inspect intermediate nodes of the model by adding them to the outputs
       * array.
       * @param isFunctionExecution Flag for executing a function.
       * @param tensorArrayMap Optional, global TensorArray map by id. Used for
       * function execution.
       * @param tensorArrayMap Optinal global TensorList map by id. Used for
       * function execution.
       */
      GraphExecutor.prototype._executeAsync = function (inputs, outputs, isFunctionExecution, tensorArrayMap, tensorListMap) {
          if (isFunctionExecution === void 0) { isFunctionExecution = false; }
          if (tensorArrayMap === void 0) { tensorArrayMap = {}; }
          if (tensorListMap === void 0) { tensorListMap = {}; }
          return __awaiter(this, void 0, void 0, function () {
              var context, tensorMap, results, outputIds, inputIds;
              var _this = this;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          if (!isFunctionExecution) {
                              inputs = this.mapInputs(inputs);
                              this.checkInputs(inputs);
                              this.checkInputShapeAndType(inputs);
                              outputs = this.mapOutputs(outputs);
                              this.checkOutputs(outputs);
                          }
                          context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);
                          return [4 /*yield*/, this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution)];
                      case 1:
                          tensorMap = _a.sent();
                          results = outputs.map(function (name) { return getTensor(name, tensorMap, context); });
                          outputIds = new Set(results.map(function (t) { return t.id; }));
                          inputIds = new Set(Object.keys(inputs).map(function (name) { return inputs[name].id; }));
                          Object.keys(tensorMap).forEach(function (key) {
                              var tensorArray = tensorMap[key];
                              tensorArray.forEach(function (tensor) {
                                  if (tensor && !tensor.isDisposed && !outputIds.has(tensor.id) &&
                                      !inputIds.has(tensor.id) &&
                                      _this.weightIds.indexOf(tensor.id) === -1) {
                                      tensor.dispose();
                                  }
                              });
                          });
                          // dispose the context for the root executor
                          if (this.parent == null) {
                              context.dispose();
                          }
                          return [2 /*return*/, results];
                  }
              });
          });
      };
      GraphExecutor.prototype.executeFunctionAsync = function (inputs, tensorArrayMap, tensorListMap) {
          return __awaiter(this, void 0, void 0, function () {
              var mappedInputs;
              var _this = this;
              return __generator(this, function (_a) {
                  mappedInputs = inputs.reduce(function (map, tensor, index) {
                      map[_this.inputs[index].name] = tensor;
                      return map;
                  }, {});
                  return [2 /*return*/, this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap)];
              });
          });
      };
      /**
       * When there are control flow nodes in the graph, the graph execution use
       * ExecutionContext to keep track of the frames and loop iterators.
       * @param inputs placeholder tensors for the graph.
       * @param context the execution context object for current execution.
       * @param isFunctionExecution Flag for executing a function.
       */
      GraphExecutor.prototype.executeWithControlFlow = function (inputs, context, outputNames, isFunctionExecution) {
          return __awaiter(this, void 0, void 0, function () {
              var names, inputNodes, outputNodes, _a, usedNodes, missingInputs, dynamicNode, syncInputs, stack, tensorsMap, intermediateTensorConsumerCount, tensorsToKeep, added, promises, missingOutputs, alternativeMsg;
              var _this = this;
              return __generator(this, function (_b) {
                  switch (_b.label) {
                      case 0:
                          names = Object.keys(inputs);
                          inputNodes = names.map(function (name) { return _this.graph.nodes[parseNodeName(name)[0]]; });
                          outputNodes = outputNames.map(function (name) { return _this.graph.nodes[parseNodeName(name)[0]]; });
                          _a = getExecutionSubgraph(inputs, outputNodes, this.weightMap), usedNodes = _a.usedNodes, missingInputs = _a.missingInputs, dynamicNode = _a.dynamicNode, syncInputs = _a.syncInputs;
                          stack = inputNodes.concat(this.graph.weights).map(function (node) {
                              return { node: node, contexts: context.currentContext };
                          });
                          tensorsMap = __assign({}, this.weightMap);
                          Object.keys(inputs).forEach(function (name) {
                              var _a = parseNodeName(name), nodeName = _a[0], index = _a[1];
                              var tensors = [];
                              tensors[index] = inputs[name];
                              tensorsMap[nodeName] = tensors;
                          });
                          intermediateTensorConsumerCount = {};
                          tensorsToKeep = this.getFrozenTensorIds(tensorsMap);
                          added = {};
                          _b.label = 1;
                      case 1:
                          if (!(stack.length > 0)) return [3 /*break*/, 3];
                          promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes);
                          return [4 /*yield*/, Promise.all(promises)];
                      case 2:
                          _b.sent();
                          return [3 /*break*/, 1];
                      case 3:
                          if (dynamicNode == null && !isFunctionExecution) {
                              console.warn("This model execution did not contain any nodes with control flow " +
                                  "or dynamic output shapes. You can use model.execute() instead.");
                          }
                          missingOutputs = outputNodes
                              .filter(function (node) { return !isControlFlow(node) &&
                              !getTensor(node.name, tensorsMap, context); })
                              .map(function (node) { return node.name; });
                          if (missingOutputs.length > 0) {
                              alternativeMsg = '';
                              if (dynamicNode != null) {
                                  alternativeMsg =
                                      "Alternatively, to avoid the dynamic ops, use model.execute() " +
                                          ("and specify the inputs [" + syncInputs + "]");
                              }
                              throw new Error("Cannot compute the outputs [" + missingOutputs + "] from the provided " +
                                  ("inputs [" + names + "]. Consider providing the following inputs: ") +
                                  ("[" + missingInputs + "]. " + alternativeMsg));
                          }
                          return [2 /*return*/, tensorsMap];
                  }
              });
          });
      };
      GraphExecutor.prototype.processStack = function (inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes) {
          var _this = this;
          var promises = [];
          var _loop_1 = function () {
              var item = stack.pop();
              context.currentContext = item.contexts;
              var nodeName = '';
              // The tensor of the Enter op with isConstant set should be set
              // in the parent scope, so it will be available as constant for the
              // whole loop.
              if (item.node.op === 'Enter' &&
                  getParamValue('isConstant', item.node, tensorMap, context)) {
                  nodeName = getNodeNameAndIndex(item.node.name, context)[0];
              }
              // only process nodes that are not provided as input nodes.
              if (inputNodes.indexOf(item.node) === -1) {
                  var tensors = executeOp$g(item.node, tensorMap, context);
                  if (!nodeName) {
                      nodeName = getNodeNameAndIndex(item.node.name, context)[0];
                  }
                  var currentContext_1 = context.currentContext;
                  if (tensors instanceof Promise) {
                      promises.push(tensors.then(function (t) {
                          tensorMap[nodeName] = t;
                          context.currentContext = currentContext_1;
                          _this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);
                          _this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
                          return t;
                      }));
                  }
                  else {
                      tensorMap[nodeName] = tensors;
                      this_1.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);
                      this_1.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
                  }
              }
              else {
                  this_1.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
              }
          };
          var this_1 = this;
          while (stack.length > 0) {
              _loop_1();
          }
          return promises;
      };
      GraphExecutor.prototype.processChildNodes = function (node, stack, context, tensorMap, added, usedNodes) {
          node.children.forEach(function (childNode) {
              var nodeName = getNodeNameAndIndex(childNode.name, context)[0];
              if (added[nodeName] || !usedNodes.has(childNode.name)) {
                  return;
              }
              // Merge op can be pushed if any of its inputs has value.
              if (childNode.op === 'Merge') {
                  if (childNode.inputNames.some(function (name) {
                      return !!getTensor(name, tensorMap, context);
                  })) {
                      added[nodeName] = true;
                      stack.push({ contexts: context.currentContext, node: childNode });
                  }
              }
              else // Otherwise all inputs must to have value.
               if (childNode.inputNames.every(function (name) {
                  return !!getTensor(name, tensorMap, context);
              })) {
                  added[nodeName] = true;
                  stack.push({ contexts: context.currentContext, node: childNode });
              }
          });
      };
      /**
       * Releases the memory used by the weight tensors.
       */
      GraphExecutor.prototype.dispose = function () {
          var _this = this;
          Object.keys(this.weightMap)
              .forEach(function (key) { return _this.weightMap[key].forEach(function (tensor) { return tensor.dispose(); }); });
      };
      GraphExecutor.prototype.checkInputShapeAndType = function (inputs) {
          var _this = this;
          Object.keys(inputs).forEach(function (name) {
              var input = inputs[name];
              var nodeName = parseNodeName(name)[0];
              var node = _this.graph.nodes[nodeName];
              if (node.attrParams['shape'] && node.attrParams['shape'].value) {
                  var shape_1 = node.attrParams['shape'].value;
                  var match = shape_1.length === input.shape.length &&
                      input.shape.every(function (dim, index) { return shape_1[index] === -1 || shape_1[index] === dim; });
                  tfc.util.assert(match, function () { return "The shape of dict['" + node.name + "'] provided in " +
                      ("model.execute(dict) must be [" + shape_1 + "], but was ") +
                      ("[" + input.shape + "]"); });
              }
              if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {
                  tfc.util.assert(input.dtype === node.attrParams['dtype'].value, function () { return "The dtype of dict['" + node.name + "'] provided in " +
                      "model.execute(dict) must be " +
                      (node.attrParams['dtype'].value + ", but was " + input.dtype); });
              }
          });
      };
      GraphExecutor.prototype.mapInputs = function (inputs) {
          var result = {};
          for (var inputName in inputs) {
              if (this._signature != null && this._signature.inputs != null &&
                  this._signature.inputs[inputName] != null) {
                  var tensor = this._signature.inputs[inputName];
                  result[tensor.name] = inputs[inputName];
              }
              else {
                  result[inputName] = inputs[inputName];
              }
          }
          return result;
      };
      GraphExecutor.prototype.checkInputs = function (inputs) {
          var _this = this;
          var notInGraph = Object.keys(inputs).filter(function (name) {
              var nodeName = parseNodeName(name)[0];
              return _this.graph.nodes[nodeName] == null;
          });
          if (notInGraph.length > 0) {
              throw new Error("The dict provided in model.execute(dict) has " +
                  ("keys: [" + notInGraph + "] that are not part of graph"));
          }
      };
      GraphExecutor.prototype.mapOutputs = function (outputs) {
          var _this = this;
          return outputs.map(function (name) {
              if (_this._signature != null && _this._signature.outputs != null &&
                  _this._signature.outputs[name] != null) {
                  var tensor = _this._signature.outputs[name];
                  return tensor.name;
              }
              return name;
          }, {});
      };
      GraphExecutor.prototype.checkOutputs = function (outputs) {
          var _this = this;
          outputs.forEach(function (name) {
              var normalizedName = parseNodeName(name)[0];
              if (!_this.graph.nodes[normalizedName]) {
                  throw new Error("The output '" + name + "' is not found in the graph");
              }
          });
      };
      return GraphExecutor;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var TFHUB_SEARCH_PARAM = '?tfjs-format=file';
  var DEFAULT_MODEL_NAME = 'model.json';
  /**
   * A `tf.GraphModel` is a directed, acyclic graph built from a
   * SavedModel GraphDef and allows inference execution.
   *
   * A `tf.GraphModel` can only be created by loading from a model converted from
   * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using
   * the command line converter tool and loaded via `tf.loadGraphModel`.
   */
  /** @doc {heading: 'Models', subheading: 'Classes'} */
  var GraphModel = /** @class */ (function () {
      /**
       * @param modelUrl url for the model, or an `io.IOHandler`.
       * @param weightManifestUrl url for the weight file generated by
       * scripts/convert.py script.
       * @param requestOption options for Request, which allows to send credentials
       * and custom headers.
       * @param onProgress Optional, progress callback function, fired periodically
       * before the load is completed.
       */
      function GraphModel(modelUrl, loadOptions) {
          if (loadOptions === void 0) { loadOptions = {}; }
          this.modelUrl = modelUrl;
          this.loadOptions = loadOptions;
          this.version = 'n/a';
          if (loadOptions == null) {
              this.loadOptions = {};
          }
      }
      Object.defineProperty(GraphModel.prototype, "modelVersion", {
          // Returns the version information for the tensorflow model GraphDef.
          get: function () {
              return this.version;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(GraphModel.prototype, "inputNodes", {
          get: function () {
              return this.executor.inputNodes;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(GraphModel.prototype, "outputNodes", {
          get: function () {
              return this.executor.outputNodes;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(GraphModel.prototype, "inputs", {
          get: function () {
              return this.executor.inputs;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(GraphModel.prototype, "outputs", {
          get: function () {
              return this.executor.outputs;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(GraphModel.prototype, "weights", {
          get: function () {
              return this.executor.weightMap;
          },
          enumerable: true,
          configurable: true
      });
      GraphModel.prototype.findIOHandler = function () {
          var path = this.modelUrl;
          if (path.load != null) {
              // Path is an IO Handler.
              this.handler = path;
          }
          else if (this.loadOptions.requestInit != null) {
              this.handler = tfc.io.browserHTTPRequest(path, this.loadOptions);
          }
          else {
              var handlers = tfc.io.getLoadHandlers(path, this.loadOptions);
              if (handlers.length === 0) {
                  // For backward compatibility: if no load handler can be found,
                  // assume it is a relative http path.
                  handlers.push(tfc.io.browserHTTPRequest(path, this.loadOptions));
              }
              else if (handlers.length > 1) {
                  throw new Error("Found more than one (" + handlers.length + ") load handlers for " +
                      ("URL '" + [path] + "'"));
              }
              this.handler = handlers[0];
          }
      };
      /**
       * Loads the model and weight files, construct the in memory weight map and
       * compile the inference graph.
       */
      GraphModel.prototype.load = function () {
          return __awaiter(this, void 0, void 0, function () {
              var artifacts;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          this.findIOHandler();
                          if (this.handler.load == null) {
                              throw new Error('Cannot proceed with model loading because the IOHandler provided ' +
                                  'does not have the `load` method implemented.');
                          }
                          return [4 /*yield*/, this.handler.load()];
                      case 1:
                          artifacts = _a.sent();
                          return [2 /*return*/, this.loadSync(artifacts)];
                  }
              });
          });
      };
      /**
       * Synchronously construct the in memory weight map and
       * compile the inference graph.
       */
      /** @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true} */
      GraphModel.prototype.loadSync = function (artifacts) {
          this.artifacts = artifacts;
          var graph = this.artifacts.modelTopology;
          var signature = {};
          if (this.artifacts.userDefinedMetadata != null) {
              signature = // tslint:disable-next-line:no-any
                  this.artifacts.userDefinedMetadata.signature;
          }
          this.version = graph.versions.producer + "." + graph.versions.minConsumer;
          var weightMap = tfc.io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
          this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(graph, signature));
          this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);
          return true;
      };
      /**
       * Save the configuration and/or weights of the GraphModel.
       *
       * An `IOHandler` is an object that has a `save` method of the proper
       * signature defined. The `save` method manages the storing or
       * transmission of serialized data ("artifacts") that represent the
       * model's topology and weights onto or via a specific medium, such as
       * file downloads, local storage, IndexedDB in the web browser and HTTP
       * requests to a server. TensorFlow.js provides `IOHandler`
       * implementations for a number of frequently used saving mediums, such as
       * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
       * for more details.
       *
       * This method also allows you to refer to certain types of `IOHandler`s
       * as URL-like string shortcuts, such as 'localstorage://' and
       * 'indexeddb://'.
       *
       * Example 1: Save `model`'s topology and weights to browser [local
       * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
       * then load it back.
       *
       * ```js
       * const modelUrl =
       *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
       * const model = await tf.loadGraphModel(modelUrl);
       * const zeros = tf.zeros([1, 224, 224, 3]);
       * model.predict(zeros).print();
       *
       * const saveResults = await model.save('localstorage://my-model-1');
       *
       * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');
       * console.log('Prediction from loaded model:');
       * model.predict(zeros).print();
       * ```
       *
       * @param handlerOrURL An instance of `IOHandler` or a URL-like,
       * scheme-based string shortcut for `IOHandler`.
       * @param config Options for saving the model.
       * @returns A `Promise` of `SaveResult`, which summarizes the result of
       * the saving, such as byte sizes of the saved artifacts for the model's
       *   topology and weight values.
       */
      /**
       * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
       */
      GraphModel.prototype.save = function (handlerOrURL, config) {
          return __awaiter(this, void 0, void 0, function () {
              var handlers;
              return __generator(this, function (_a) {
                  if (typeof handlerOrURL === 'string') {
                      handlers = tfc.io.getSaveHandlers(handlerOrURL);
                      if (handlers.length === 0) {
                          throw new Error("Cannot find any save handlers for URL '" + handlerOrURL + "'");
                      }
                      else if (handlers.length > 1) {
                          throw new Error("Found more than one (" + handlers.length + ") save handlers for " +
                              ("URL '" + handlerOrURL + "'"));
                      }
                      handlerOrURL = handlers[0];
                  }
                  if (handlerOrURL.save == null) {
                      throw new Error('GraphModel.save() cannot proceed because the IOHandler ' +
                          'provided does not have the `save` attribute defined.');
                  }
                  return [2 /*return*/, handlerOrURL.save(this.artifacts)];
              });
          });
      };
      /**
       * Execute the inference for the input tensors.
       *
       * @param input The input tensors, when there is single input for the model,
       * inputs param should be a `tf.Tensor`. For models with mutliple inputs,
       * inputs params should be in either `tf.Tensor`[] if the input order is
       * fixed, or otherwise NamedTensorMap format.
       *
       * For model with multiple inputs, we recommend you use NamedTensorMap as the
       * input type, if you use `tf.Tensor`[], the order of the array needs to
       * follow the
       * order of inputNodes array. @see {@link GraphModel.inputNodes}
       *
       * You can also feed any intermediate nodes using the NamedTensorMap as the
       * input type. For example, given the graph
       *    InputNode => Intermediate => OutputNode,
       * you can execute the subgraph Intermediate => OutputNode by calling
       *    model.execute('IntermediateNode' : tf.tensor(...));
       *
       * This is useful for models that uses tf.dynamic_rnn, where the intermediate
       * state needs to be fed manually.
       *
       * For batch inference execution, the tensors for each input need to be
       * concatenated together. For example with mobilenet, the required input shape
       * is [1, 244, 244, 3], which represents the [batch, height, width, channel].
       * If we are provide a batched data of 100 images, the input tensor should be
       * in the shape of [100, 244, 244, 3].
       *
       * @param config Prediction configuration for specifying the batch size and
       * output node names. Currently the batch size option is ignored for graph
       * model.
       *
       * @returns Inference result tensors. The output would be single `tf.Tensor`
       * if model has single output node, otherwise Tensor[] or NamedTensorMap[]
       * will be returned for model with multiple outputs.
       */
      /** @doc {heading: 'Models', subheading: 'Classes'} */
      GraphModel.prototype.predict = function (inputs, config) {
          return this.execute(inputs, this.outputNodes);
      };
      GraphModel.prototype.normalizeInputs = function (inputs) {
          if (!(inputs instanceof tfc.Tensor) && !Array.isArray(inputs)) {
              // The input is already a NamedTensorMap.
              return inputs;
          }
          inputs = Array.isArray(inputs) ? inputs : [inputs];
          if (inputs.length !== this.inputNodes.length) {
              throw new Error('Input tensor count mismatch,' +
                  ("the graph model has " + this.inputNodes.length + " placeholders, ") +
                  ("while there are " + inputs.length + " input tensors."));
          }
          return this.inputNodes.reduce(function (map, inputName, i) {
              map[inputName] = inputs[i];
              return map;
          }, {});
      };
      GraphModel.prototype.normalizeOutputs = function (outputs) {
          outputs = outputs || this.outputNodes;
          return !Array.isArray(outputs) ? [outputs] : outputs;
      };
      /**
       * Executes inference for the model for given input tensors.
       * @param inputs tensor, tensor array or tensor map of the inputs for the
       * model, keyed by the input node names.
       * @param outputs output node name from the Tensorflow model, if no
       * outputs are specified, the default outputs of the model would be used.
       * You can inspect intermediate nodes of the model by adding them to the
       * outputs array.
       *
       * @returns A single tensor if provided with a single output or no outputs
       * are provided and there is only one default output, otherwise return a
       * tensor array. The order of the tensor array is the same as the outputs
       * if provided, otherwise the order of outputNodes attribute of the model.
       */
      /** @doc {heading: 'Models', subheading: 'Classes'} */
      GraphModel.prototype.execute = function (inputs, outputs) {
          inputs = this.normalizeInputs(inputs);
          outputs = this.normalizeOutputs(outputs);
          var result = this.executor.execute(inputs, outputs);
          return result.length > 1 ? result : result[0];
      };
      /**
       * Executes inference for the model for given input tensors in async
       * fashion, use this method when your model contains control flow ops.
       * @param inputs tensor, tensor array or tensor map of the inputs for the
       * model, keyed by the input node names.
       * @param outputs output node name from the Tensorflow model, if no outputs
       * are specified, the default outputs of the model would be used. You can
       * inspect intermediate nodes of the model by adding them to the outputs
       * array.
       *
       * @returns A Promise of single tensor if provided with a single output or
       * no outputs are provided and there is only one default output, otherwise
       * return a tensor map.
       */
      /** @doc {heading: 'Models', subheading: 'Classes'} */
      GraphModel.prototype.executeAsync = function (inputs, outputs) {
          return __awaiter(this, void 0, void 0, function () {
              var result;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          inputs = this.normalizeInputs(inputs);
                          outputs = this.normalizeOutputs(outputs);
                          return [4 /*yield*/, this.executor.executeAsync(inputs, outputs)];
                      case 1:
                          result = _a.sent();
                          return [2 /*return*/, result.length > 1 ? result : result[0]];
                  }
              });
          });
      };
      GraphModel.prototype.convertTensorMapToTensorsMap = function (map) {
          return Object.keys(map).reduce(function (newMap, key) {
              newMap[key] = [map[key]];
              return newMap;
          }, {});
      };
      /**
       * Releases the memory used by the weight tensors.
       */
      /** @doc {heading: 'Models', subheading: 'Classes'} */
      GraphModel.prototype.dispose = function () {
          this.executor.dispose();
      };
      return GraphModel;
  }());
  /**
   * Load a graph model given a URL to the model definition.
   *
   * Example of loading MobileNetV2 from a URL and making a prediction with a
   * zeros input:
   *
   * ```js
   * const modelUrl =
   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
   * const model = await tf.loadGraphModel(modelUrl);
   * const zeros = tf.zeros([1, 224, 224, 3]);
   * model.predict(zeros).print();
   * ```
   *
   * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with
   * a zeros input:
   *
   * ```js
   * const modelUrl =
   *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';
   * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});
   * const zeros = tf.zeros([1, 224, 224, 3]);
   * model.predict(zeros).print();
   * ```
   * @param modelUrl The url or an `io.IOHandler` that loads the model.
   * @param options Options for the HTTP request, which allows to send credentials
   *    and custom headers.
   */
  /** @doc {heading: 'Models', subheading: 'Loading'} */
  function loadGraphModel(modelUrl, options) {
      if (options === void 0) { options = {}; }
      return __awaiter(this, void 0, void 0, function () {
          var model;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      if (modelUrl == null) {
                          throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' +
                              'or an IOHandler that loads the model');
                      }
                      if (options == null) {
                          options = {};
                      }
                      if (options.fromTFHub) {
                          if (modelUrl.load == null) {
                              if (!modelUrl.endsWith('/')) {
                                  modelUrl = modelUrl + '/';
                              }
                              modelUrl = "" + modelUrl + DEFAULT_MODEL_NAME + TFHUB_SEARCH_PARAM;
                          }
                      }
                      model = new GraphModel(modelUrl, options);
                      return [4 /*yield*/, model.load()];
                  case 1:
                      _a.sent();
                      return [2 /*return*/, model];
              }
          });
      });
  }

  /** @license See the LICENSE file. */
  // This code is auto-generated, do not modify this file!
  var version = '2.1.0';

  exports.GraphModel = GraphModel;
  exports.deregisterOp = deregisterOp;
  exports.loadGraphModel = loadGraphModel;
  exports.registerOp = registerOp;
  exports.version_converter = version;

  Object.defineProperty(exports, '__esModule', { value: true });

})));



/**
* @license
* Copyright 2020 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*/
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tensorflow/tfjs-core'), require('seedrandom')) :
  typeof define === 'function' && define.amd ? define(['exports', '@tensorflow/tfjs-core', 'seedrandom'], factory) :
  (global = global || self, factory(global.tf = global.tf || {}, global.tf, global.seedrandom));
}(this, (function (exports, tf, seedrandom) { 'use strict';

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var contexts = {};
  var WEBGL_ATTRIBUTES = {
      alpha: false,
      antialias: false,
      premultipliedAlpha: false,
      preserveDrawingBuffer: false,
      depth: false,
      stencil: false,
      failIfMajorPerformanceCaveat: true
  };
  function setWebGLContext(webGLVersion, gl) {
      contexts[webGLVersion] = gl;
  }
  function getWebGLContext(webGLVersion) {
      if (!(webGLVersion in contexts)) {
          contexts[webGLVersion] = getWebGLRenderingContext(webGLVersion);
      }
      var gl = contexts[webGLVersion];
      if (gl.isContextLost()) {
          delete contexts[webGLVersion];
          return getWebGLContext(webGLVersion);
      }
      gl.disable(gl.DEPTH_TEST);
      gl.disable(gl.STENCIL_TEST);
      gl.disable(gl.BLEND);
      gl.disable(gl.DITHER);
      gl.disable(gl.POLYGON_OFFSET_FILL);
      gl.disable(gl.SAMPLE_COVERAGE);
      gl.enable(gl.SCISSOR_TEST);
      gl.enable(gl.CULL_FACE);
      gl.cullFace(gl.BACK);
      return contexts[webGLVersion];
  }
  function createCanvas(webGLVersion) {
      if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {
          return new OffscreenCanvas(300, 150);
      }
      else if (typeof document !== 'undefined') {
          return document.createElement('canvas');
      }
      else {
          throw new Error('Cannot create a canvas in this context');
      }
  }
  function getWebGLRenderingContext(webGLVersion) {
      if (webGLVersion !== 1 && webGLVersion !== 2) {
          throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');
      }
      var canvas = createCanvas(webGLVersion);
      canvas.addEventListener('webglcontextlost', function (ev) {
          ev.preventDefault();
          delete contexts[webGLVersion];
      }, false);
      if (webGLVersion === 1) {
          return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||
              canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES));
      }
      return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);
  }

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var PackingScheme;
  (function (PackingScheme) {
      /**
       * All values in a single texel are densely packed without any constraints.
       *
       * This is how the shader encodes a tensor with shape = [2, 3, 4]
       * (indices are [batch, row, col]).
       *
       * 000|001   010|011   020|021
       * -------   -------   -------
       * 002|003   012|013   022|023
       *
       * 100|101   110|111   120|121
       * -------   -------   -------
       * 102|103   112|113   122|123
       *
       */
      PackingScheme[PackingScheme["DENSE"] = 0] = "DENSE";
      /**
       * Single texels contain only values from the same batch, and from adjacent
       * rows and columns.
       *
       * This is how the shader encodes a tensor with shape = [2, 3, 5]
       * (indices are [batch, row, col]).
       *
       * 000|001   002|003   004|xxx   020|021   022|023   024|xxx
       * -------   -------   -------   -------   -------   -------
       * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx
       *
       * 100|101   102|103   104|xxx   120|121   122|123   124|xxx
       * -------   -------   -------   -------   -------   -------
       * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx
       *
       */
      PackingScheme[PackingScheme["SHARED_BATCH"] = 1] = "SHARED_BATCH";
  })(PackingScheme || (PackingScheme = {}));
  var TextureUsage;
  (function (TextureUsage) {
      TextureUsage[TextureUsage["RENDER"] = 0] = "RENDER";
      TextureUsage[TextureUsage["UPLOAD"] = 1] = "UPLOAD";
      TextureUsage[TextureUsage["PIXELS"] = 2] = "PIXELS";
      TextureUsage[TextureUsage["DOWNLOAD"] = 3] = "DOWNLOAD";
  })(TextureUsage || (TextureUsage = {}));
  var PhysicalTextureType;
  (function (PhysicalTextureType) {
      PhysicalTextureType[PhysicalTextureType["UNPACKED_FLOAT16"] = 0] = "UNPACKED_FLOAT16";
      PhysicalTextureType[PhysicalTextureType["UNPACKED_FLOAT32"] = 1] = "UNPACKED_FLOAT32";
      PhysicalTextureType[PhysicalTextureType["PACKED_4X1_UNSIGNED_BYTE"] = 2] = "PACKED_4X1_UNSIGNED_BYTE";
      PhysicalTextureType[PhysicalTextureType["PACKED_2X2_FLOAT32"] = 3] = "PACKED_2X2_FLOAT32";
      PhysicalTextureType[PhysicalTextureType["PACKED_2X2_FLOAT16"] = 4] = "PACKED_2X2_FLOAT16";
  })(PhysicalTextureType || (PhysicalTextureType = {}));
  function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {
      return [columns, rows];
  }
  function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {
      return matrixSize * channelsPerTexture;
  }
  /**
   * Get shape for densely packed RGBA texture.
   */
  function getDenseTexShape(shape) {
      var size = tf.util.sizeFromShape(shape);
      var texelsNeeded = Math.ceil(size / 4);
      return tf.util.sizeToSquarishShape(texelsNeeded);
  }
  function getPackedMatrixTextureShapeWidthHeight(rows, columns) {
      return [
          Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))
      ];
  }
  function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {
      var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];
      return w * h * 4;
  }
  function getTextureConfig(
  // tslint:disable-next-line:no-any
  gl, textureHalfFloatExtension) {
      // tslint:disable-next-line:no-any
      var glany = gl;
      var internalFormatFloat;
      var internalFormatHalfFloat;
      var internalFormatPackedHalfFloat;
      var internalFormatPackedFloat;
      var textureFormatFloat;
      var downloadTextureFormat;
      var downloadUnpackNumChannels;
      var defaultNumChannels;
      var textureTypeHalfFloat;
      var textureTypeFloat;
      if (tf.env().getNumber('WEBGL_VERSION') === 2) {
          internalFormatFloat = glany.R32F;
          internalFormatHalfFloat = glany.R16F;
          internalFormatPackedHalfFloat = glany.RGBA16F;
          internalFormatPackedFloat = glany.RGBA32F;
          textureFormatFloat = glany.RED;
          downloadUnpackNumChannels = 4;
          defaultNumChannels = 1;
          textureTypeHalfFloat = glany.HALF_FLOAT;
          textureTypeFloat = glany.FLOAT;
      }
      else {
          internalFormatFloat = gl.RGBA;
          internalFormatHalfFloat = gl.RGBA;
          internalFormatPackedHalfFloat = gl.RGBA;
          internalFormatPackedFloat = glany.RGBA;
          textureFormatFloat = gl.RGBA;
          downloadUnpackNumChannels = 4;
          defaultNumChannels = 4;
          textureTypeHalfFloat = textureHalfFloatExtension != null ?
              textureHalfFloatExtension.HALF_FLOAT_OES :
              null;
          textureTypeFloat = gl.FLOAT;
      }
      downloadTextureFormat = gl.RGBA;
      return {
          internalFormatFloat: internalFormatFloat,
          internalFormatHalfFloat: internalFormatHalfFloat,
          internalFormatPackedHalfFloat: internalFormatPackedHalfFloat,
          internalFormatPackedFloat: internalFormatPackedFloat,
          textureFormatFloat: textureFormatFloat,
          downloadTextureFormat: downloadTextureFormat,
          downloadUnpackNumChannels: downloadUnpackNumChannels,
          defaultNumChannels: defaultNumChannels,
          textureTypeHalfFloat: textureTypeHalfFloat,
          textureTypeFloat: textureTypeFloat
      };
  }

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function callAndCheck(gl, func) {
      var returnValue = func();
      if (tf.env().getBool('DEBUG')) {
          checkWebGLError(gl);
      }
      return returnValue;
  }
  function checkWebGLError(gl) {
      var error = gl.getError();
      if (error !== gl.NO_ERROR) {
          throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));
      }
  }
  // https://en.wikipedia.org/wiki/Half-precision_floating-point_format
  var MIN_FLOAT16 = 5.96e-8;
  var MAX_FLOAT16 = 65504;
  function canBeRepresented(num) {
      if (tf.env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||
          (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {
          return true;
      }
      return false;
  }
  function getWebGLErrorMessage(gl, status) {
      switch (status) {
          case gl.NO_ERROR:
              return 'NO_ERROR';
          case gl.INVALID_ENUM:
              return 'INVALID_ENUM';
          case gl.INVALID_VALUE:
              return 'INVALID_VALUE';
          case gl.INVALID_OPERATION:
              return 'INVALID_OPERATION';
          case gl.INVALID_FRAMEBUFFER_OPERATION:
              return 'INVALID_FRAMEBUFFER_OPERATION';
          case gl.OUT_OF_MEMORY:
              return 'OUT_OF_MEMORY';
          case gl.CONTEXT_LOST_WEBGL:
              return 'CONTEXT_LOST_WEBGL';
          default:
              return "Unknown error code " + status;
      }
  }
  function getExtensionOrThrow(gl, extensionName) {
      return throwIfNull(gl, function () { return gl.getExtension(extensionName); }, 'Extension "' + extensionName + '" not supported on this browser.');
  }
  function createVertexShader(gl, vertexShaderSource) {
      var vertexShader = throwIfNull(gl, function () { return gl.createShader(gl.VERTEX_SHADER); }, 'Unable to create vertex WebGLShader.');
      callAndCheck(gl, function () { return gl.shaderSource(vertexShader, vertexShaderSource); });
      callAndCheck(gl, function () { return gl.compileShader(vertexShader); });
      if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {
          console.log(gl.getShaderInfoLog(vertexShader));
          throw new Error('Failed to compile vertex shader.');
      }
      return vertexShader;
  }
  function createFragmentShader(gl, fragmentShaderSource) {
      var fragmentShader = throwIfNull(gl, function () { return gl.createShader(gl.FRAGMENT_SHADER); }, 'Unable to create fragment WebGLShader.');
      callAndCheck(gl, function () { return gl.shaderSource(fragmentShader, fragmentShaderSource); });
      callAndCheck(gl, function () { return gl.compileShader(fragmentShader); });
      if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {
          logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));
          throw new Error('Failed to compile fragment shader.');
      }
      return fragmentShader;
  }
  var lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;
  function logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {
      var lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);
      if (lineNumberRegexResult == null) {
          console.log("Couldn't parse line number in error: " + shaderInfoLog);
          console.log(shaderSource);
          return;
      }
      var lineNumber = +lineNumberRegexResult[1];
      var shaderLines = shaderSource.split('\n');
      var pad = shaderLines.length.toString().length + 2;
      var linesWithLineNumbers = shaderLines.map(function (line, lineNumber) {
          return tf.util.rightPad((lineNumber + 1).toString(), pad) + line;
      });
      var maxLineLength = 0;
      for (var i = 0; i < linesWithLineNumbers.length; i++) {
          maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);
      }
      var beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);
      var errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);
      var afterErrorLines = linesWithLineNumbers.slice(lineNumber);
      console.log(beforeErrorLines.join('\n'));
      console.log(shaderInfoLog.split('\n')[0]);
      console.log("%c " + tf.util.rightPad(errorLine[0], maxLineLength), 'border:1px solid red; background-color:#e3d2d2; color:#a61717');
      console.log(afterErrorLines.join('\n'));
  }
  function createProgram(gl) {
      return throwIfNull(gl, function () { return gl.createProgram(); }, 'Unable to create WebGLProgram.');
  }
  function linkProgram(gl, program) {
      callAndCheck(gl, function () { return gl.linkProgram(program); });
      if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
          console.log(gl.getProgramInfoLog(program));
          throw new Error('Failed to link vertex and fragment shaders.');
      }
  }
  function validateProgram(gl, program) {
      callAndCheck(gl, function () { return gl.validateProgram(program); });
      if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {
          console.log(gl.getProgramInfoLog(program));
          throw new Error('Shader program validation failed.');
      }
  }
  function createStaticVertexBuffer(gl, data) {
      var buffer = throwIfNull(gl, function () { return gl.createBuffer(); }, 'Unable to create WebGLBuffer');
      callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, buffer); });
      callAndCheck(gl, function () { return gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW); });
      return buffer;
  }
  function createStaticIndexBuffer(gl, data) {
      var buffer = throwIfNull(gl, function () { return gl.createBuffer(); }, 'Unable to create WebGLBuffer');
      callAndCheck(gl, function () { return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer); });
      callAndCheck(gl, function () { return gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); });
      return buffer;
  }
  function getNumChannels() {
      if (tf.env().getNumber('WEBGL_VERSION') === 2) {
          return 1;
      }
      return 4;
  }
  function createTexture(gl) {
      return throwIfNull(gl, function () { return gl.createTexture(); }, 'Unable to create WebGLTexture.');
  }
  function validateTextureSize(width, height) {
      var maxTextureSize = tf.env().getNumber('WEBGL_MAX_TEXTURE_SIZE');
      if ((width <= 0) || (height <= 0)) {
          var requested = "[" + width + "x" + height + "]";
          throw new Error('Requested texture size ' + requested + ' is invalid.');
      }
      if ((width > maxTextureSize) || (height > maxTextureSize)) {
          var requested = "[" + width + "x" + height + "]";
          var max = "[" + maxTextureSize + "x" + maxTextureSize + "]";
          throw new Error('Requested texture size ' + requested +
              ' greater than WebGL maximum on this browser / GPU ' + max + '.');
      }
  }
  function createFramebuffer(gl) {
      return throwIfNull(gl, function () { return gl.createFramebuffer(); }, 'Unable to create WebGLFramebuffer.');
  }
  function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {
      var loc = gl.getAttribLocation(program, attribute);
      if (loc === -1) {
          // The GPU compiler decided to strip out this attribute because it's unused,
          // thus no need to bind.
          return false;
      }
      callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, buffer); });
      callAndCheck(gl, function () { return gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes); });
      callAndCheck(gl, function () { return gl.enableVertexAttribArray(loc); });
      return true;
  }
  function bindTextureUnit(gl, texture, textureUnit) {
      validateTextureUnit(gl, textureUnit);
      callAndCheck(gl, function () { return gl.activeTexture(gl.TEXTURE0 + textureUnit); });
      callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, texture); });
  }
  function unbindTextureUnit(gl, textureUnit) {
      validateTextureUnit(gl, textureUnit);
      callAndCheck(gl, function () { return gl.activeTexture(gl.TEXTURE0 + textureUnit); });
      callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });
  }
  function getProgramUniformLocationOrThrow(gl, program, uniformName) {
      return throwIfNull(gl, function () { return gl.getUniformLocation(program, uniformName); }, 'uniform "' + uniformName + '" not present in program.');
  }
  function getProgramUniformLocation(gl, program, uniformName) {
      return gl.getUniformLocation(program, uniformName);
  }
  function bindTextureToProgramUniformSampler(gl, texture, uniformSamplerLocation, textureUnit) {
      callAndCheck(gl, function () { return bindTextureUnit(gl, texture, textureUnit); });
      callAndCheck(gl, function () { return gl.uniform1i(uniformSamplerLocation, textureUnit); });
  }
  function bindCanvasToFramebuffer(gl) {
      callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, null); });
      callAndCheck(gl, function () { return gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); });
      callAndCheck(gl, function () { return gl.scissor(0, 0, gl.canvas.width, gl.canvas.height); });
  }
  function bindColorTextureToFramebuffer(gl, texture, framebuffer) {
      callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer); });
      callAndCheck(gl, function () { return gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); });
  }
  function unbindColorTextureFromFramebuffer(gl, framebuffer) {
      callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer); });
      callAndCheck(gl, function () { return gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0); });
  }
  function validateFramebuffer(gl) {
      var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
      if (status !== gl.FRAMEBUFFER_COMPLETE) {
          throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));
      }
  }
  function getFramebufferErrorMessage(gl, status) {
      switch (status) {
          case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
              return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';
          case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
              return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';
          case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
              return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';
          case gl.FRAMEBUFFER_UNSUPPORTED:
              return 'FRAMEBUFFER_UNSUPPORTED';
          default:
              return "unknown error " + status;
      }
  }
  function throwIfNull(gl, returnTOrNull, failureMessage) {
      var tOrNull = callAndCheck(gl, function () { return returnTOrNull(); });
      if (tOrNull == null) {
          throw new Error(failureMessage);
      }
      return tOrNull;
  }
  function validateTextureUnit(gl, textureUnit) {
      var maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;
      var glTextureUnit = textureUnit + gl.TEXTURE0;
      if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {
          var textureUnitRange = "[gl.TEXTURE0, gl.TEXTURE" + maxTextureUnit + "]";
          throw new Error("textureUnit must be in " + textureUnitRange + ".");
      }
  }
  function getBatchDim(shape, dimsToSkip) {
      if (dimsToSkip === void 0) { dimsToSkip = 2; }
      return tf.util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));
  }
  function getRowsCols(shape) {
      if (shape.length === 0) {
          throw Error('Cannot get rows and columns of an empty shape array.');
      }
      return [
          shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]
      ];
  }
  function getShapeAs3D(shape) {
      var shapeAs3D = [1, 1, 1];
      var isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);
      if (!isScalar) {
          shapeAs3D =
              [getBatchDim(shape)].concat(getRowsCols(shape));
      }
      return shapeAs3D;
  }
  function getTextureShapeFromLogicalShape(logShape, isPacked) {
      var _a;
      if (isPacked === void 0) { isPacked = false; }
      var maxTexSize = tf.env().getNumber('WEBGL_MAX_TEXTURE_SIZE');
      if (isPacked) {
          maxTexSize = maxTexSize * 2;
          // This logic ensures we accurately count the number of packed texels needed
          // to accommodate the tensor. We can only pack values in the same texel if
          // they are from adjacent pairs of rows/cols within the same batch. So if a
          // tensor has 3 rows, we pretend it has 4 rows in order to account for the
          // fact that the texels containing the third row are half empty.
          logShape = logShape.map(function (d, i) { return i >= logShape.length - 2 ?
              tf.util.nearestLargerEven(logShape[i]) :
              logShape[i]; });
          // Packed texture height is at least 2 (the channel height of a single
          // texel).
          if (logShape.length === 1) {
              logShape = [2, logShape[0]];
          }
      }
      // If logical shape is 2, we don't squeeze, since we want to match physical.
      if (logShape.length !== 2) {
          var squeezeResult = tf.util.squeezeShape(logShape);
          logShape = squeezeResult.newShape;
      }
      var size = tf.util.sizeFromShape(logShape);
      if (logShape.length <= 1 && size <= maxTexSize) {
          return [1, size];
      }
      else if (logShape.length === 2 && logShape[0] <= maxTexSize &&
          logShape[1] <= maxTexSize) {
          return logShape;
      }
      else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&
          logShape[2] <= maxTexSize) {
          return [logShape[0] * logShape[1], logShape[2]];
      }
      else if (logShape.length === 3 && logShape[0] <= maxTexSize &&
          logShape[1] * logShape[2] <= maxTexSize) {
          return [logShape[0], logShape[1] * logShape[2]];
      }
      else if (logShape.length === 4 &&
          logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&
          logShape[3] <= maxTexSize) {
          return [logShape[0] * logShape[1] * logShape[2], logShape[3]];
      }
      else if (logShape.length === 4 && logShape[0] <= maxTexSize &&
          logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {
          return [logShape[0], logShape[1] * logShape[2] * logShape[3]];
      }
      else {
          if (isPacked) {
              // For packed textures size equals the number of channels required to
              // accommodate the texture data. However in order to squarify such that
              // inner dimensions stay even, we rewrite size to equal the number of
              // texels. Then in the return statement we rehydrate the squarified
              // dimensions to channel units.
              var batchDim = getBatchDim(logShape);
              var rows = 2, cols = 2;
              if (logShape.length) {
                  _a = getRowsCols(logShape), rows = _a[0], cols = _a[1];
              }
              size = batchDim * (rows / 2) * (cols / 2);
              return tf.util.sizeToSquarishShape(size).map(function (d) { return d * 2; });
          }
          return tf.util.sizeToSquarishShape(size);
      }
  }
  function isEven(n) {
      return n % 2 === 0;
  }
  /**
   * This determines whether reshaping a packed texture requires rearranging
   * the data within the texture, assuming 2x2 packing.
   */
  function isReshapeFree(shape1, shape2) {
      shape1 = shape1.slice(-2);
      shape2 = shape2.slice(-2);
      if (tf.util.arraysEqual(shape1, shape2)) {
          return true;
      }
      if (!shape1.length || !shape2.length) { // One of the shapes is a scalar.
          return true;
      }
      if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||
          shape2[1] === 0) {
          return true;
      }
      if (shape1.length !== shape2.length) { // One of the shapes is a vector.
          var shape1Cols = shape1.slice(-1)[0];
          var shape2Cols = shape2.slice(-1)[0];
          if (shape1Cols === shape2Cols) {
              return true;
          }
          if (isEven(shape1Cols) && isEven(shape2Cols) &&
              (shape1[0] === 1 || shape2[0] === 1)) {
              return true;
          }
      }
      return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);
  }
  // We cache webgl params because the environment gets reset between
  // unit tests and we don't want to constantly query the WebGLContext for
  // MAX_TEXTURE_SIZE.
  var MAX_TEXTURE_SIZE;
  var MAX_TEXTURES_IN_SHADER;
  function getWebGLMaxTextureSize(webGLVersion) {
      if (MAX_TEXTURE_SIZE == null) {
          var gl = getWebGLContext(webGLVersion);
          MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);
      }
      return MAX_TEXTURE_SIZE;
  }
  function resetMaxTextureSize() {
      MAX_TEXTURE_SIZE = null;
  }
  function resetMaxTexturesInShader() {
      MAX_TEXTURES_IN_SHADER = null;
  }
  function getMaxTexturesInShader(webGLVersion) {
      if (MAX_TEXTURES_IN_SHADER == null) {
          var gl = getWebGLContext(webGLVersion);
          MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
      }
      // We cap at 16 to avoid spurious runtime "memory exhausted" error.
      return Math.min(16, MAX_TEXTURES_IN_SHADER);
  }
  function getWebGLDisjointQueryTimerVersion(webGLVersion) {
      if (webGLVersion === 0) {
          return 0;
      }
      var queryTimerVersion;
      var gl = getWebGLContext(webGLVersion);
      if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&
          webGLVersion === 2) {
          queryTimerVersion = 2;
      }
      else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {
          queryTimerVersion = 1;
      }
      else {
          queryTimerVersion = 0;
      }
      return queryTimerVersion;
  }
  function hasExtension(gl, extensionName) {
      var ext = gl.getExtension(extensionName);
      return ext != null;
  }
  function isWebGLVersionEnabled(webGLVersion) {
      try {
          var gl = getWebGLContext(webGLVersion);
          if (gl != null) {
              return true;
          }
      }
      catch (e) {
          return false;
      }
      return false;
  }
  function isCapableOfRenderingToFloatTexture(webGLVersion) {
      if (webGLVersion === 0) {
          return false;
      }
      var gl = getWebGLContext(webGLVersion);
      if (webGLVersion === 1) {
          if (!hasExtension(gl, 'OES_texture_float')) {
              return false;
          }
      }
      else {
          if (!hasExtension(gl, 'EXT_color_buffer_float')) {
              return false;
          }
      }
      var isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);
      return isFrameBufferComplete;
  }
  /**
   * Check if we can download values from a float/half-float texture.
   *
   * Note that for performance reasons we use binding a texture to a framebuffer
   * as a proxy for ability to download float values later using readPixels. The
   * texture params of this texture will not match those in readPixels exactly
   * but if we are unable to bind some kind of float texture to the frameBuffer
   * then we definitely will not be able to read float values from it.
   */
  function isDownloadFloatTextureEnabled(webGLVersion) {
      if (webGLVersion === 0) {
          return false;
      }
      var gl = getWebGLContext(webGLVersion);
      if (webGLVersion === 1) {
          if (!hasExtension(gl, 'OES_texture_float')) {
              return false;
          }
          if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {
              return false;
          }
      }
      else {
          if (hasExtension(gl, 'EXT_color_buffer_float')) {
              return createFloatTextureAndBindToFramebuffer(gl);
          }
          var COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';
          if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {
              var textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);
              return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);
          }
          return false;
      }
      var isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);
      return isFrameBufferComplete;
  }
  function createFloatTextureAndBindToFramebuffer(gl) {
      var texConfig = getTextureConfig(gl);
      var texture = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, texture);
      var width = 1;
      var height = 1;
      gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);
      var frameBuffer = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
      var isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
      gl.bindTexture(gl.TEXTURE_2D, null);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      gl.deleteTexture(texture);
      gl.deleteFramebuffer(frameBuffer);
      return isFrameBufferComplete;
  }
  function createHalfFloatTextureAndBindToFramebuffer(
  // tslint:disable-next-line:no-any
  gl, textureHalfFloatExtension) {
      var texConfig = getTextureConfig(gl, textureHalfFloatExtension);
      var texture = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, texture);
      var width = 1;
      var height = 1;
      gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);
      var frameBuffer = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
      var isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
      gl.bindTexture(gl.TEXTURE_2D, null);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      gl.deleteTexture(texture);
      gl.deleteFramebuffer(frameBuffer);
      return isFrameBufferComplete;
  }
  function isWebGLFenceEnabled(webGLVersion) {
      if (webGLVersion !== 2) {
          return false;
      }
      var gl = getWebGLContext(webGLVersion);
      // tslint:disable-next-line:no-any
      var isEnabled = gl.fenceSync != null;
      return isEnabled;
  }

  var webgl_util = {
      __proto__: null,
      callAndCheck: callAndCheck,
      canBeRepresented: canBeRepresented,
      getWebGLErrorMessage: getWebGLErrorMessage,
      getExtensionOrThrow: getExtensionOrThrow,
      createVertexShader: createVertexShader,
      createFragmentShader: createFragmentShader,
      createProgram: createProgram,
      linkProgram: linkProgram,
      validateProgram: validateProgram,
      createStaticVertexBuffer: createStaticVertexBuffer,
      createStaticIndexBuffer: createStaticIndexBuffer,
      getNumChannels: getNumChannels,
      createTexture: createTexture,
      validateTextureSize: validateTextureSize,
      createFramebuffer: createFramebuffer,
      bindVertexBufferToProgramAttribute: bindVertexBufferToProgramAttribute,
      bindTextureUnit: bindTextureUnit,
      unbindTextureUnit: unbindTextureUnit,
      getProgramUniformLocationOrThrow: getProgramUniformLocationOrThrow,
      getProgramUniformLocation: getProgramUniformLocation,
      bindTextureToProgramUniformSampler: bindTextureToProgramUniformSampler,
      bindCanvasToFramebuffer: bindCanvasToFramebuffer,
      bindColorTextureToFramebuffer: bindColorTextureToFramebuffer,
      unbindColorTextureFromFramebuffer: unbindColorTextureFromFramebuffer,
      validateFramebuffer: validateFramebuffer,
      getFramebufferErrorMessage: getFramebufferErrorMessage,
      getBatchDim: getBatchDim,
      getRowsCols: getRowsCols,
      getShapeAs3D: getShapeAs3D,
      getTextureShapeFromLogicalShape: getTextureShapeFromLogicalShape,
      isReshapeFree: isReshapeFree,
      getWebGLMaxTextureSize: getWebGLMaxTextureSize,
      resetMaxTextureSize: resetMaxTextureSize,
      resetMaxTexturesInShader: resetMaxTexturesInShader,
      getMaxTexturesInShader: getMaxTexturesInShader,
      getWebGLDisjointQueryTimerVersion: getWebGLDisjointQueryTimerVersion,
      hasExtension: hasExtension,
      isWebGLVersionEnabled: isWebGLVersionEnabled,
      isCapableOfRenderingToFloatTexture: isCapableOfRenderingToFloatTexture,
      isDownloadFloatTextureEnabled: isDownloadFloatTextureEnabled,
      isWebGLFenceEnabled: isWebGLFenceEnabled
  };

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ENV = tf.env();
  /**
   * This file contains WebGL-specific flag registrations.
   */
  /**
   * True if WebGL is supported.
   */
  ENV.registerFlag('HAS_WEBGL', function () { return ENV.getNumber('WEBGL_VERSION') > 0; });
  /** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */
  ENV.registerFlag('WEBGL_VERSION', function () {
      if (isWebGLVersionEnabled(2)) {
          return 2;
      }
      else if (isWebGLVersionEnabled(1)) {
          return 1;
      }
      return 0;
  });
  /** Whether to check for numerical representation problems. */
  ENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', function () { return false; });
  ENV.registerFlag('WEBGL_BUFFER_SUPPORTED', function () { return ENV.get('WEBGL_VERSION') === 2; });
  /** Whether the WebGL backend will sometimes forward ops to the CPU. */
  ENV.registerFlag('WEBGL_CPU_FORWARD', function () { return true; });
  /** Whether the WebGL backend will always use f16 textures for rendering. */
  ENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', function () { return false; });
  /** Whether to turn all packing related flags on. */
  ENV.registerFlag('WEBGL_PACK', function () { return ENV.getBool('HAS_WEBGL'); });
  /** Whether we will pack the batchnormalization op. */
  ENV.registerFlag('WEBGL_PACK_NORMALIZATION', function () { return ENV.getBool('WEBGL_PACK'); });
  /** Whether we will pack the clip op. */
  ENV.registerFlag('WEBGL_PACK_CLIP', function () { return ENV.getBool('WEBGL_PACK'); });
  /** Whether we will pack the depthwise conv op. */
  // TODO: https://github.com/tensorflow/tfjs/issues/1679
  ENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', function () { return false; });
  /** Whether we will pack binary ops. */
  ENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', function () { return ENV.getBool('WEBGL_PACK'); });
  /** Whether we will pack unary ops. */
  ENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', function () { return ENV.getBool('WEBGL_PACK'); });
  /** Whether we will pack array ops. */
  ENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', function () { return ENV.getBool('WEBGL_PACK'); });
  /** Whether we will pack image ops. */
  ENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', function () { return ENV.getBool('WEBGL_PACK'); });
  /** Whether we will pack reduce ops. */
  ENV.registerFlag('WEBGL_PACK_REDUCE', function () { return ENV.getBool('WEBGL_PACK'); });
  /** Whether packed WebGL kernels lazily unpack their outputs. */
  ENV.registerFlag('WEBGL_LAZILY_UNPACK', function () { return ENV.getBool('WEBGL_PACK'); });
  /** Whether we will use the im2col algorithm to speed up convolutions. */
  ENV.registerFlag('WEBGL_CONV_IM2COL', function () { return ENV.getBool('WEBGL_PACK'); });
  /** The maximum texture dimension. */
  ENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', function () { return getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')); });
  /** The maximum texture dimension. */
  ENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', function () { return getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')); });
  /**
   * The disjoint_query_timer extension version.
   * 0: disabled, 1: EXT_disjoint_timer_query, 2:
   * EXT_disjoint_timer_query_webgl2.
   * In Firefox with WebGL 2.0,
   * EXT_disjoint_timer_query_webgl2 is not available, so we must use the
   * WebGL 1.0 extension.
   */
  ENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', function () {
      var webGLVersion = ENV.getNumber('WEBGL_VERSION');
      if (webGLVersion === 0) {
          return 0;
      }
      return getWebGLDisjointQueryTimerVersion(webGLVersion);
  });
  /**
   * Whether the timer object from the disjoint_query_timer extension gives
   * timing information that is reliable.
   */
  ENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', function () { return ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&
      !tf.device_util.isMobile(); });
  /**
   * Whether the device is physically capable of rendering to float32 textures.
   */
  ENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', function () { return isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')); });
  /**
   * Whether rendering to float32 textures is enabled. If disabled, renders to
   * float16 textures.
   */
  ENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', function () {
      return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?
          false :
          ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');
  });
  /**
   * Whether downloading float textures is enabled (16 or 32 bit). If disabled,
   * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.
   */
  ENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', function () { return isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')); });
  /** Whether the fence API is available. */
  ENV.registerFlag('WEBGL_FENCE_API_ENABLED', function () { return isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')); });
  /**
   * Tensors with size <= than this will be uploaded as uniforms, not textures.
   */
  ENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', function () {
      // Use uniform uploads only when 32bit floats are supported. In
      // 16bit
      // environments there are problems with comparing a 16bit texture value
      // with a 32bit uniform value.
      var useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');
      return useUniforms ? 4 : 0;
  });
  /**
   * If the total number of bytes allocated on the GPU is greater than this
   * number, we will aggressively delete textures upon disposal with
   * gl.deleteMatrixTexture, rather than making them available for reuse.
   *
   * Default value -1 indicates that we will never aggressively delete textures.
   */
  ENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', function () {
      return -1;
  }, function (threshold) {
      if (threshold < 0 && threshold !== -1) {
          throw new Error("WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never " +
              ("delete) or at least 0, but got " + threshold + "."));
      }
  });

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var AddNProgram = /** @class */ (function () {
      function AddNProgram(outputShape, shapes) {
          this.outputShape = [];
          this.outputShape = outputShape;
          this.variableNames = shapes.map(function (_, i) { return "T" + i; });
          var snippets = [];
          // Get target elements from every input tensor.
          this.variableNames.forEach(function (variable) {
              snippets.push("float v" + variable + " = get" + variable + "AtOutCoords();");
          });
          // Calculate the sum of all elements.
          var operation = this.variableNames
              .map(function (variable) {
              return "v" + variable;
          })
              .join(' + ');
          this.userCode = "\n      void main() {\n        " + snippets.join('\n        ') + "\n\n        float result = " + operation + ";\n        setOutput(result);\n      }\n    ";
      }
      return AddNProgram;
  }());

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var AddNPackedProgram = /** @class */ (function () {
      function AddNPackedProgram(outputShape, shapes) {
          this.outputShape = [];
          this.packedInputs = true;
          this.packedOutput = true;
          this.outputShape = outputShape;
          this.variableNames = shapes.map(function (_, i) { return "T" + i; });
          var snippets = [];
          // Get target elements from every input tensor.
          this.variableNames.forEach(function (variable) {
              snippets.push("vec4 v" + variable + " = get" + variable + "AtOutCoords();");
          });
          // Calculate the sum of all elements.
          var operation = this.variableNames
              .map(function (variable) {
              return "v" + variable;
          })
              .join(' + ');
          this.userCode = "\n      void main() {\n        " + snippets.join('\n        ') + "\n\n        vec4 result = " + operation + ";\n        setOutput(result);\n      }\n    ";
      }
      return AddNPackedProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ArgMinMaxProgram = /** @class */ (function () {
      function ArgMinMaxProgram(reduceInfo, op, firstPass) {
          this.variableNames = ['A'];
          var windowSize = reduceInfo.windowSize;
          var batchSize = reduceInfo.batchSize;
          var inSize = reduceInfo.inSize;
          var outSize = Math.ceil(inSize / windowSize);
          if (!firstPass) {
              this.variableNames.push('bestIndicesA');
          }
          this.outputShape = [batchSize, outSize];
          var compOp = (op === 'max') ? '>' : '<';
          var indexSnippet = firstPass ?
              'inOffset + i;' :
              'round(getBestIndicesA(batch, inOffset + i));';
          this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + windowSize + ";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < " + windowSize + "; i++) {\n          int inIdx = " + indexSnippet + ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " + compOp + " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
      }
      return ArgMinMaxProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function getVecChannels(name, rank) {
      return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(function (d) { return name + "." + d; });
  }
  function getChannels(name, rank) {
      if (rank === 1) {
          return [name];
      }
      return getVecChannels(name, rank);
  }
  function getSourceCoords(rank, dims) {
      if (rank === 1) {
          return 'rc';
      }
      var coords = '';
      for (var i = 0; i < rank; i++) {
          coords += dims[i];
          if (i < rank - 1) {
              coords += ',';
          }
      }
      return coords;
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function getGlslDifferences() {
      var version;
      var attribute;
      var varyingVs;
      var varyingFs;
      var texture2D;
      var output;
      var defineOutput;
      var defineSpecialNaN;
      var defineSpecialInf;
      var defineRound;
      if (tf.env().getNumber('WEBGL_VERSION') === 2) {
          version = '#version 300 es';
          attribute = 'in';
          varyingVs = 'out';
          varyingFs = 'in';
          texture2D = 'texture';
          output = 'outputColor';
          defineOutput = 'out vec4 outputColor;';
          // Use custom isnan definition to work across differences between
          // implementations on various platforms. While this should happen in ANGLE
          // we still see differences between android and windows (on chrome) when
          // using isnan directly.
          defineSpecialNaN = "\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ";
          // In webgl 2 we do not need to specify a custom isinf so there is no
          // need for a special INFINITY constant.
          defineSpecialInf = "";
          defineRound = "\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    ";
      }
      else {
          version = '';
          attribute = 'attribute';
          varyingVs = 'varying';
          varyingFs = 'varying';
          texture2D = 'texture2D';
          output = 'gl_FragColor';
          defineOutput = '';
          // WebGL1 has no built in isnan so we define one here.
          defineSpecialNaN = "\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ";
          defineSpecialInf = "\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ";
          defineRound = "\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    ";
      }
      return {
          version: version,
          attribute: attribute,
          varyingVs: varyingVs,
          varyingFs: varyingFs,
          texture2D: texture2D,
          output: output,
          defineOutput: defineOutput,
          defineSpecialNaN: defineSpecialNaN,
          defineSpecialInf: defineSpecialInf,
          defineRound: defineRound
      };
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Produces GLSL code that derives logical coordinates from a flat
   * index. The code performs integer division with each stride and decrements
   * the index until the index equals the final dimension coordinate.
   */
  function getLogicalCoordinatesFromFlatIndex(coords, shape, index) {
      if (index === void 0) { index = 'index'; }
      var strides = tf.util.computeStrides(shape);
      return strides
          .map(function (stride, i) {
          var line1 = "int " + coords[i] + " = " + index + " / " + stride;
          var line2 = i === strides.length - 1 ?
              "int " + coords[i + 1] + " = " + index + " - " + coords[i] + " * " + stride :
              "index -= " + coords[i] + " * " + stride;
          return line1 + "; " + line2 + ";";
      })
          .join('');
  }
  /**
   * Produces GLSL that computes the flat index from 3D coordinates.
   */
  function getFlatIndexFrom3D(shape) {
      var strides = tf.util.computeStrides(shape).map(function (d) { return d.toString(); });
      return "\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * " + strides[0] + " + coords.y * " + strides[1] + " + coords.z;\n  }\n";
  }
  var ENCODE_FLOAT_SNIPPET = "\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var getBroadcastDims = tf.backend_util.getBroadcastDims;
  function makeShader(inputsInfo, outputShape, userCode, usesPackedTextures) {
      var prefixSnippets = [];
      inputsInfo.forEach(function (x) {
          var size = tf.util.sizeFromShape(x.shapeInfo.logicalShape);
          // Snippet when we decided to upload the values as uniform.
          if (x.shapeInfo.isUniform) {
              prefixSnippets.push("uniform float " + x.name + (size > 1 ? "[" + size + "]" : '') + ";");
          }
          else {
              prefixSnippets.push("uniform sampler2D " + x.name + ";");
              prefixSnippets.push("uniform int offset" + x.name + ";");
          }
      });
      var inputPrefixSnippet = prefixSnippets.join('\n');
      var inputSamplingSnippet = inputsInfo
          .map(function (x) { return getInputSamplingSnippet(x, outputShape, usesPackedTextures); })
          .join('\n');
      var outTexShape = outputShape.texShape;
      var glsl = getGlslDifferences();
      var floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);
      var outputSamplingSnippet;
      var floatTextureSetOutputSnippet;
      var shaderPrefix = getShaderPrefix(glsl);
      if (outputShape.isPacked) {
          outputSamplingSnippet =
              getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);
          floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);
      }
      else {
          outputSamplingSnippet =
              getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);
          floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);
      }
      if (usesPackedTextures) {
          shaderPrefix += SHADER_PACKED_PREFIX;
      }
      var source = [
          shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,
          inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode
      ].join('\n');
      return source;
  }
  function getSamplerFromInInfo(inInfo) {
      var shape = inInfo.shapeInfo.logicalShape;
      switch (shape.length) {
          case 0:
              return getSamplerScalar(inInfo);
          case 1:
              return getSampler1D(inInfo);
          case 2:
              return getSampler2D(inInfo);
          case 3:
              return getSampler3D(inInfo);
          case 4:
              return getSampler4D(inInfo);
          case 5:
              return getSampler5D(inInfo);
          case 6:
              return getSampler6D(inInfo);
          default:
              throw new Error(shape.length + "-D input sampling" +
                  " is not yet supported");
      }
  }
  function getPackedSamplerFromInInfo(inInfo) {
      var shape = inInfo.shapeInfo.logicalShape;
      switch (shape.length) {
          case 0:
              return getPackedSamplerScalar(inInfo);
          case 1:
              return getPackedSampler1D(inInfo);
          case 2:
              return getPackedSampler2D(inInfo);
          case 3:
              return getPackedSampler3D(inInfo);
          default:
              return getPackedSamplerND(inInfo);
      }
  }
  function getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures) {
      if (usesPackedTextures === void 0) { usesPackedTextures = false; }
      var res = '';
      if (usesPackedTextures) {
          res += getPackedSamplerFromInInfo(inInfo);
      }
      else {
          res += getSamplerFromInInfo(inInfo);
      }
      var inShape = inInfo.shapeInfo.logicalShape;
      var outShape = outShapeInfo.logicalShape;
      if (inShape.length <= outShape.length) {
          if (usesPackedTextures) {
              res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);
          }
          else {
              res += getSamplerAtOutputCoords(inInfo, outShapeInfo);
          }
      }
      return res;
  }
  function getPackedOutputSamplingSnippet(outShape, outTexShape) {
      switch (outShape.length) {
          case 0:
              return getOutputScalarCoords();
          case 1:
              return getOutputPacked1DCoords(outShape, outTexShape);
          case 2:
              return getOutputPacked2DCoords(outShape, outTexShape);
          case 3:
              return getOutputPacked3DCoords(outShape, outTexShape);
          default:
              return getOutputPackedNDCoords(outShape, outTexShape);
      }
  }
  function getOutputSamplingSnippet(outShape, outTexShape) {
      switch (outShape.length) {
          case 0:
              return getOutputScalarCoords();
          case 1:
              return getOutput1DCoords(outShape, outTexShape);
          case 2:
              return getOutput2DCoords(outShape, outTexShape);
          case 3:
              return getOutput3DCoords(outShape, outTexShape);
          case 4:
              return getOutput4DCoords(outShape, outTexShape);
          case 5:
              return getOutput5DCoords(outShape, outTexShape);
          case 6:
              return getOutput6DCoords(outShape, outTexShape);
          default:
              throw new Error(outShape.length + "-D output sampling is not yet supported");
      }
  }
  function getFloatTextureSampleSnippet(glsl) {
      return "\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return " + glsl.texture2D + "(textureSampler, uv).r;\n    }\n  ";
  }
  function getFloatTextureSetRSnippet(glsl) {
      return "\n    void setOutput(float val) {\n      " + glsl.output + " = vec4(val, 0, 0, 0);\n    }\n  ";
  }
  function getFloatTextureSetRGBASnippet(glsl) {
      return "\n    void setOutput(vec4 val) {\n      " + glsl.output + " = val;\n    }\n  ";
  }
  function getShaderPrefix(glsl) {
      var SHADER_PREFIX = glsl.version + "\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    " + glsl.varyingFs + " vec2 resultUV;\n    " + glsl.defineOutput + "\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    " + glsl.defineSpecialNaN + "\n    " + glsl.defineSpecialInf + "\n    " + glsl.defineRound + "\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    " + SAMPLE_1D_SNIPPET + "\n    " + SAMPLE_2D_SNIPPET + "\n    " + SAMPLE_3D_SNIPPET + "\n  ";
      return SHADER_PREFIX;
  }
  var SAMPLE_1D_SNIPPET = "\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
  var SAMPLE_2D_SNIPPET = "\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
  var SAMPLE_3D_SNIPPET = "\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n";
  var SHADER_PACKED_PREFIX = "\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";
  function getOutputScalarCoords() {
      return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
  }
  function getOutputPacked1DCoords(shape, texShape) {
      var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
      if (packedTexShape[0] === 1) {
          return "\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * " + packedTexShape[1] + ".0);\n      }\n    ";
      }
      if (packedTexShape[1] === 1) {
          return "\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * " + packedTexShape[0] + ".0);\n      }\n    ";
      }
      return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + packedTexShape[0] + ", " + packedTexShape[1] + "));\n      return 2 * (resTexRC.x * " + packedTexShape[1] + " + resTexRC.y);\n    }\n  ";
  }
  function getOutput1DCoords(shape, texShape) {
      if (texShape[0] === 1) {
          return "\n      int getOutputCoords() {\n        return int(resultUV.x * " + texShape[1] + ".0);\n      }\n    ";
      }
      if (texShape[1] === 1) {
          return "\n      int getOutputCoords() {\n        return int(resultUV.y * " + texShape[0] + ".0);\n      }\n    ";
      }
      return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + texShape[0] + ", " + texShape[1] + "));\n      return resTexRC.x * " + texShape[1] + " + resTexRC.y;\n    }\n  ";
  }
  function getOutputPacked3DCoords(shape, texShape) {
      var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
      var texelsInLogicalRow = Math.ceil(shape[2] / 2);
      var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);
      return "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + packedTexShape[0] + ", " + packedTexShape[1] + "));\n      int index = resTexRC.x * " + packedTexShape[1] + " + resTexRC.y;\n\n      int b = index / " + texelsInBatch + ";\n      index -= b * " + texelsInBatch + ";\n\n      int r = 2 * (index / " + texelsInLogicalRow + ");\n      int c = imod(index, " + texelsInLogicalRow + ") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";
  }
  function getOutput3DCoords(shape, texShape) {
      var coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);
      return "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + texShape[0] + ", " + texShape[1] + "));\n      int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n      " + coordsFromIndexSnippet + "\n      return ivec3(r, c, d);\n    }\n  ";
  }
  function getOutputPackedNDCoords(shape, texShape) {
      var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
      var texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);
      var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);
      var texelsInBatchN = texelsInBatch;
      var batches = "";
      var coords = 'b, r, c';
      for (var b = 2; b < shape.length - 1; b++) {
          texelsInBatchN *= shape[shape.length - b - 1];
          batches = "\n      int b" + b + " = index / " + texelsInBatchN + ";\n      index -= b" + b + " * " + texelsInBatchN + ";\n    " + batches;
          coords = "b" + b + ", " + coords;
      }
      return "\n    ivec" + shape.length + " getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + packedTexShape[0] + ", " + packedTexShape[1] + "));\n      int index = resTexRC.x * " + packedTexShape[1] + " + resTexRC.y;\n\n      " + batches + "\n\n      int b = index / " + texelsInBatch + ";\n      index -= b * " + texelsInBatch + ";\n\n      int r = 2 * (index / " + texelsInLogicalRow + ");\n      int c = imod(index, " + texelsInLogicalRow + ") * 2;\n\n      return ivec" + shape.length + "(" + coords + ");\n    }\n  ";
  }
  function getOutput4DCoords(shape, texShape) {
      var coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);
      return "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + texShape[0] + ", " + texShape[1] + "));\n      int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n      " + coordsFromIndexSnippet + "\n      return ivec4(r, c, d, d2);\n    }\n  ";
  }
  function getOutput5DCoords(shape, texShape) {
      var coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);
      return "\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(" + texShape[0] + ",\n                             " + texShape[1] + "));\n\n      int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n\n      " + coordsFromIndexSnippet + "\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  ";
  }
  function getOutput6DCoords(shape, texShape) {
      var coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);
      return "\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + texShape[0] + ", " + texShape[1] + "));\n      int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n\n      " + coordsFromIndexSnippet + "\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  ";
  }
  function getOutputPacked2DCoords(shape, texShape) {
      var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
      if (tf.util.arraysEqual(shape, texShape)) {
          return "\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(" + packedTexShape[0] + ", " + packedTexShape[1] + "));\n      }\n    ";
      }
      // texels needed to accommodate a logical row
      var texelsInLogicalRow = Math.ceil(shape[1] / 2);
      /**
       * getOutputCoords
       *
       * resTexRC: The rows and columns of the texels. If you move over one
       * texel to the right in the packed texture, you are moving over one column
       * (not two).
       *
       * index: The texel index
       */
      return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + packedTexShape[0] + ", " + packedTexShape[1] + "));\n\n      int index = resTexRC.x * " + packedTexShape[1] + " + resTexRC.y;\n      int r = 2 * (index / " + texelsInLogicalRow + ");\n      int c = imod(index, " + texelsInLogicalRow + ") * 2;\n\n      return ivec2(r, c);\n    }\n  ";
  }
  function getOutput2DCoords(shape, texShape) {
      if (tf.util.arraysEqual(shape, texShape)) {
          return "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" + texShape[0] + ", " + texShape[1] + "));\n      }\n    ";
      }
      if (shape[1] === 1) {
          return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + texShape[0] + ", " + texShape[1] + "));\n        int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ";
      }
      if (shape[0] === 1) {
          return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + texShape[0] + ", " + texShape[1] + "));\n        int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ";
      }
      return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + texShape[0] + ", " + texShape[1] + "));\n      int index = resTexRC.x * " + texShape[1] + " + resTexRC.y;\n      int r = index / " + shape[1] + ";\n      int c = index - r * " + shape[1] + ";\n      return ivec2(r, c);\n    }\n  ";
  }
  function getFlatOffsetUniformName(texName) {
      return "offset" + texName;
  }
  function getPackedSamplerScalar(inputInfo) {
      var texName = inputInfo.name;
      var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
      var glsl = getGlslDifferences();
      return "\n    vec4 " + funcName + "() {\n      return " + glsl.texture2D + "(" + texName + ", halfCR);\n    }\n  ";
  }
  function getSamplerScalar(inputInfo) {
      var texName = inputInfo.name;
      var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
      if (inputInfo.shapeInfo.isUniform) {
          return "float " + funcName + "() {return " + texName + ";}";
      }
      var _a = inputInfo.shapeInfo.texShape, texNumR = _a[0], texNumC = _a[1];
      if (texNumR === 1 && texNumC === 1) {
          return "\n      float " + funcName + "() {\n        return sampleTexture(" + texName + ", halfCR);\n      }\n    ";
      }
      var _b = inputInfo.shapeInfo.texShape, tNumR = _b[0], tNumC = _b[1];
      var offset = getFlatOffsetUniformName(texName);
      return "\n    float " + funcName + "() {\n      vec2 uv = uvFromFlat(" + tNumR + ", " + tNumC + ", " + offset + ");\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
  }
  function getPackedSampler1D(inputInfo) {
      var texName = inputInfo.name;
      var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
      var texShape = inputInfo.shapeInfo.texShape;
      var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
      var glsl = getGlslDifferences();
      return "\n    vec4 " + funcName + "(int index) {\n      vec2 uv = packedUVfrom1D(\n        " + packedTexShape[0] + ", " + packedTexShape[1] + ", index);\n      return " + glsl.texture2D + "(" + texName + ", uv);\n    }\n  ";
  }
  function getSampler1D(inputInfo) {
      var texName = inputInfo.name;
      var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
      if (inputInfo.shapeInfo.isUniform) {
          // Uniform arrays will be less than 65505 (no risk of float16 overflow).
          return "\n      float " + funcName + "(int index) {\n        " + getUniformSampler(inputInfo) + "\n      }\n    ";
      }
      var texShape = inputInfo.shapeInfo.texShape;
      var tNumR = texShape[0];
      var tNumC = texShape[1];
      if (tNumC === 1 && tNumR === 1) {
          return "\n      float " + funcName + "(int index) {\n        return sampleTexture(" + texName + ", halfCR);\n      }\n    ";
      }
      var offset = getFlatOffsetUniformName(texName);
      if (tNumC === 1) {
          return "\n      float " + funcName + "(int index) {\n        vec2 uv = vec2(0.5, (float(index + " + offset + ") + 0.5) / " + tNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
      }
      if (tNumR === 1) {
          return "\n      float " + funcName + "(int index) {\n        vec2 uv = vec2((float(index + " + offset + ") + 0.5) / " + tNumC + ".0, 0.5);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
      }
      return "\n    float " + funcName + "(int index) {\n      vec2 uv = uvFromFlat(" + tNumR + ", " + tNumC + ", index + " + offset + ");\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
  }
  function getPackedSampler2D(inputInfo) {
      var shape = inputInfo.shapeInfo.logicalShape;
      var texName = inputInfo.name;
      var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
      var texShape = inputInfo.shapeInfo.texShape;
      var texNumR = texShape[0];
      var texNumC = texShape[1];
      var glsl = getGlslDifferences();
      if (texShape != null && tf.util.arraysEqual(shape, texShape)) {
          return "\n      vec4 " + funcName + "(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(" + texNumC + ".0, " + texNumR + ".0);\n\n        return " + glsl.texture2D + "(" + texName + ", uv);\n      }\n    ";
      }
      var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
      var valuesPerRow = Math.ceil(shape[1] / 2);
      return "\n    vec4 " + funcName + "(int row, int col) {\n      vec2 uv = packedUVfrom2D(" + valuesPerRow + ", " + packedTexShape[0] + ", " + packedTexShape[1] + ", row, col);\n      return " + glsl.texture2D + "(" + texName + ", uv);\n    }\n  ";
  }
  function getSampler2D(inputInfo) {
      var shape = inputInfo.shapeInfo.logicalShape;
      var texName = inputInfo.name;
      var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
      var texShape = inputInfo.shapeInfo.texShape;
      if (texShape != null && tf.util.arraysEqual(shape, texShape)) {
          var texNumR_1 = texShape[0];
          var texNumC_1 = texShape[1];
          return "\n    float " + funcName + "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" + texNumC_1 + ".0, " + texNumR_1 + ".0);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
      }
      var _a = tf.util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;
      var squeezedShape = newShape;
      if (squeezedShape.length < shape.length) {
          var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
          var params = ['row', 'col'];
          return "\n      " + getSamplerFromInInfo(newInputInfo) + "\n      float " + funcName + "(int row, int col) {\n        return " + funcName + "(" + getSqueezedParams(params, keptDims) + ");\n      }\n    ";
      }
      if (inputInfo.shapeInfo.isUniform) {
          // Uniform arrays will be less than 65505 (no risk of float16 overflow).
          return "\n      float " + funcName + "(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(" + shape[1] + ", 1)));\n        " + getUniformSampler(inputInfo) + "\n      }\n    ";
      }
      var texNumR = texShape[0];
      var texNumC = texShape[1];
      var offset = getFlatOffsetUniformName(texName);
      if (texNumC === 1) {
          // index is used directly as physical (no risk of float16 overflow).
          return "\n    float " + funcName + "(int row, int col) {\n      float index = dot(vec3(row, col, " + offset + "), vec3(" + shape[1] + ", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / " + texNumR + ".0);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
      }
      if (texNumR === 1) {
          // index is used directly as physical (no risk of float16 overflow).
          return "\n    float " + funcName + "(int row, int col) {\n      float index = dot(vec3(row, col, " + offset + "), vec3(" + shape[1] + ", 1, 1));\n      vec2 uv = vec2((index + 0.5) / " + texNumC + ".0, 0.5);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
      }
      return "\n  float " + funcName + "(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * " + shape[1] + " + col + " + offset + ";\n    vec2 uv = uvFromFlat(" + texNumR + ", " + texNumC + ", index);\n    return sampleTexture(" + texName + ", uv);\n  }\n";
  }
  function getPackedSampler3D(inputInfo) {
      var shape = inputInfo.shapeInfo.logicalShape;
      var texName = inputInfo.name;
      var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
      var texShape = inputInfo.shapeInfo.texShape;
      var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
      if (shape[0] === 1) {
          var squeezedShape = shape.slice(1);
          var keptDims = [1, 2];
          var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
          var params = ['b', 'row', 'col'];
          return "\n        " + getPackedSamplerFromInInfo(newInputInfo) + "\n        vec4 " + funcName + "(int b, int row, int col) {\n          return " + funcName + "(" + getSqueezedParams(params, keptDims) + ");\n        }\n      ";
      }
      var texNumR = packedTexShape[0];
      var texNumC = packedTexShape[1];
      var valuesPerRow = Math.ceil(shape[2] / 2);
      var texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);
      var glsl = getGlslDifferences();
      return "\n    vec4 " + funcName + "(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        " + texNumR + ", " + texNumC + ", " + texelsInBatch + ", " + valuesPerRow + ", b, row, col);\n      return " + glsl.texture2D + "(" + texName + ", uv);\n    }\n  ";
  }
  function getSampler3D(inputInfo) {
      var shape = inputInfo.shapeInfo.logicalShape;
      var texName = inputInfo.name;
      var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
      var stride0 = shape[1] * shape[2];
      var stride1 = shape[2];
      var _a = tf.util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;
      var squeezedShape = newShape;
      if (squeezedShape.length < shape.length) {
          var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
          var params = ['row', 'col', 'depth'];
          return "\n        " + getSamplerFromInInfo(newInputInfo) + "\n        float " + funcName + "(int row, int col, int depth) {\n          return " + funcName + "(" + getSqueezedParams(params, keptDims) + ");\n        }\n      ";
      }
      if (inputInfo.shapeInfo.isUniform) {
          // Uniform arrays will be less than 65505 (no risk of float16 overflow).
          return "\n      float " + funcName + "(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(" + stride0 + ", " + stride1 + ", 1)));\n        " + getUniformSampler(inputInfo) + "\n      }\n    ";
      }
      var texShape = inputInfo.shapeInfo.texShape;
      var texNumR = texShape[0];
      var texNumC = texShape[1];
      var flatOffset = inputInfo.shapeInfo.flatOffset;
      if (texNumC === stride0 && flatOffset == null) {
          // texC is used directly as physical (no risk of float16 overflow).
          return "\n        float " + funcName + "(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(" + stride1 + ", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" + texNumC + ".0, " + texNumR + ".0);\n          return sampleTexture(" + texName + ", uv);\n        }\n      ";
      }
      if (texNumC === stride1 && flatOffset == null) {
          // texR is used directly as physical (no risk of float16 overflow).
          return "\n    float " + funcName + "(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(" + shape[1] + ", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + texNumC + ".0, " + texNumR + ".0);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
      }
      var offset = getFlatOffsetUniformName(texName);
      return "\n      float " + funcName + "(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * " + stride0 + " + col * " + stride1 + " + depth + " + offset + ";\n        vec2 uv = uvFromFlat(" + texNumR + ", " + texNumC + ", index);\n        return sampleTexture(" + texName + ", uv);\n      }\n  ";
  }
  function getPackedSamplerND(inputInfo) {
      var shape = inputInfo.shapeInfo.logicalShape;
      var rank = shape.length;
      var texName = inputInfo.name;
      var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
      var texShape = inputInfo.shapeInfo.texShape;
      var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
      var texNumR = packedTexShape[0];
      var texNumC = packedTexShape[1];
      var valuesPerRow = Math.ceil(shape[rank - 1] / 2);
      var texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);
      var params = "int b, int row, int col";
      var index = "b * " + texelsInBatch + " + (row / 2) * " + valuesPerRow + " + (col / 2)";
      for (var b = 2; b < rank - 1; b++) {
          params = "int b" + b + ", " + params;
          texelsInBatch *= shape[rank - b - 1];
          index = "b" + b + " * " + texelsInBatch + " + " + index;
      }
      var glsl = getGlslDifferences();
      return "\n    vec4 " + funcName + "(" + params + ") {\n      int index = " + index + ";\n      int texR = index / " + texNumC + ";\n      int texC = index - texR * " + texNumC + ";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + texNumC + ", " + texNumR + ");\n      return " + glsl.texture2D + "(" + texName + ", uv);\n    }\n  ";
  }
  function getSampler4D(inputInfo) {
      var shape = inputInfo.shapeInfo.logicalShape;
      var texName = inputInfo.name;
      var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
      var stride2 = shape[3];
      var stride1 = shape[2] * stride2;
      var stride0 = shape[1] * stride1;
      var _a = tf.util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;
      if (newShape.length < shape.length) {
          var newInputInfo = squeezeInputInfo(inputInfo, newShape);
          var params = ['row', 'col', 'depth', 'depth2'];
          return "\n      " + getSamplerFromInInfo(newInputInfo) + "\n      float " + funcName + "(int row, int col, int depth, int depth2) {\n        return " + funcName + "(" + getSqueezedParams(params, keptDims) + ");\n      }\n    ";
      }
      if (inputInfo.shapeInfo.isUniform) {
          // Uniform arrays will be less than 65505 (no risk of float16 overflow).
          return "\n      float " + funcName + "(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(" + stride0 + ", " + stride1 + ", " + stride2 + ", 1)));\n        " + getUniformSampler(inputInfo) + "\n      }\n    ";
      }
      var flatOffset = inputInfo.shapeInfo.flatOffset;
      var texShape = inputInfo.shapeInfo.texShape;
      var texNumR = texShape[0];
      var texNumC = texShape[1];
      if (texNumC === stride0 && flatOffset == null) {
          // texC is used directly as physical (no risk of float16 overflow).
          return "\n      float " + funcName + "(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(" + stride1 + ", " + stride2 + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + texNumC + ".0, " + texNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
      }
      if (texNumC === stride2 && flatOffset == null) {
          // texR is used directly as physical (no risk of float16 overflow).
          return "\n      float " + funcName + "(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(" + shape[1] * shape[2] + ", " + shape[2] + ", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + texNumC + ".0, " + texNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
      }
      var offset = getFlatOffsetUniformName(texName);
      return "\n    float " + funcName + "(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + stride0 + " + col * " + stride1 + " +\n          depth * " + stride2 + " + depth2;\n      vec2 uv = uvFromFlat(" + texNumR + ", " + texNumC + ", index + " + offset + ");\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
  }
  function getSampler5D(inputInfo) {
      var shape = inputInfo.shapeInfo.logicalShape;
      var texName = inputInfo.name;
      var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
      var stride3 = shape[4];
      var stride2 = shape[3] * stride3;
      var stride1 = shape[2] * stride2;
      var stride0 = shape[1] * stride1;
      var _a = tf.util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;
      if (newShape.length < shape.length) {
          var newInputInfo = squeezeInputInfo(inputInfo, newShape);
          var params = ['row', 'col', 'depth', 'depth2', 'depth3'];
          return "\n      " + getSamplerFromInInfo(newInputInfo) + "\n      float " + funcName + "(int row, int col, int depth, int depth2, int depth3) {\n        return " + funcName + "(" + getSqueezedParams(params, keptDims) + ");\n      }\n    ";
      }
      if (inputInfo.shapeInfo.isUniform) {
          // Uniform arrays will be less than 65505 (no risk of float16 overflow).
          return "\n      float " + funcName + "(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + stride0 + ", " + stride1 + ", " + stride2 + ", " + stride3 + ")) +\n          depth3;\n        " + getUniformSampler(inputInfo) + "\n      }\n    ";
      }
      var flatOffset = inputInfo.shapeInfo.flatOffset;
      var texShape = inputInfo.shapeInfo.texShape;
      var texNumR = texShape[0];
      var texNumC = texShape[1];
      if (texNumC === stride0 && flatOffset == null) {
          // texC is used directly as physical (no risk of float16 overflow).
          return "\n      float " + funcName + "(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(" + stride1 + ", " + stride2 + ", " + stride3 + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + texNumC + ".0, " + texNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
      }
      if (texNumC === stride3 && flatOffset == null) {
          // texR is used directly as physical (no risk of float16 overflow).
          return "\n      float " + funcName + "(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + shape[1] * shape[2] * shape[3] + ",\n               " + shape[2] * shape[3] + ", " + shape[3] + ", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + texNumC + ".0, " + texNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
      }
      var offset = getFlatOffsetUniformName(texName);
      return "\n    float " + funcName + "(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + stride0 + " + col * " + stride1 + " + depth * " + stride2 + " +\n          depth2 * " + stride3 + " + depth3 + " + offset + ";\n      vec2 uv = uvFromFlat(" + texNumR + ", " + texNumC + ", index);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
  }
  function getSampler6D(inputInfo) {
      var shape = inputInfo.shapeInfo.logicalShape;
      var texName = inputInfo.name;
      var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
      var _a = tf.util.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;
      if (newShape.length < shape.length) {
          var newInputInfo = squeezeInputInfo(inputInfo, newShape);
          var params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];
          return "\n      " + getSamplerFromInInfo(newInputInfo) + "\n      float " + funcName + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return " + funcName + "(" + getSqueezedParams(params, keptDims) + ");\n      }\n    ";
      }
      var stride4 = shape[5];
      var stride3 = shape[4] * stride4;
      var stride2 = shape[3] * stride3;
      var stride1 = shape[2] * stride2;
      var stride0 = shape[1] * stride1;
      if (inputInfo.shapeInfo.isUniform) {
          // Uniform arrays will be less than 65505 (no risk of float16 overflow).
          return "\n      float " + funcName + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + stride0 + ", " + stride1 + ", " + stride2 + ", " + stride3 + ")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(" + stride4 + ", 1)));\n        " + getUniformSampler(inputInfo) + "\n      }\n    ";
      }
      var flatOffset = inputInfo.shapeInfo.flatOffset;
      var texShape = inputInfo.shapeInfo.texShape;
      var texNumR = texShape[0];
      var texNumC = texShape[1];
      if (texNumC === stride0 && flatOffset == null) {
          // texC is used directly as physical (no risk of float16 overflow).
          return "\n      float " + funcName + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(" + stride1 + ", " + stride2 + ", " + stride3 + ", " + stride4 + ")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + texNumC + ".0, " + texNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
      }
      if (texNumC === stride4 && flatOffset == null) {
          // texR is used directly as physical (no risk of float16 overflow).
          return "\n      float " + funcName + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(" + shape[1] * shape[2] * shape[3] * shape[4] + ",\n               " + shape[2] * shape[3] * shape[4] + ",\n               " + shape[3] * shape[4] + ",\n               " + shape[4] + ")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + texNumC + ".0, " + texNumR + ".0);\n        return sampleTexture(" + texName + ", uv);\n      }\n    ";
      }
      var offset = getFlatOffsetUniformName(texName);
      return "\n    float " + funcName + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + stride0 + " + col * " + stride1 + " + depth * " + stride2 + " +\n          depth2 * " + stride3 + " + depth3 * " + stride4 + " + depth4 + " + offset + ";\n      vec2 uv = uvFromFlat(" + texNumR + ", " + texNumC + ", index);\n      return sampleTexture(" + texName + ", uv);\n    }\n  ";
  }
  function getUniformSampler(inputInfo) {
      var texName = inputInfo.name;
      var inSize = tf.util.sizeFromShape(inputInfo.shapeInfo.logicalShape);
      if (inSize < 2) {
          return "return " + texName + ";";
      }
      return "\n    for (int i = 0; i < " + inSize + "; i++) {\n      if (i == index) {\n        return " + texName + "[i];\n      }\n    }\n  ";
  }
  function getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {
      var texName = inputInfo.name;
      var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
      var funcName = 'get' + texFuncSnippet + 'AtOutCoords';
      var inRank = inputInfo.shapeInfo.logicalShape.length;
      var outRank = outShapeInfo.logicalShape.length;
      var broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
      var type = getCoordsDataType(outRank);
      var rankDiff = outRank - inRank;
      var coordsSnippet;
      var fields = ['x', 'y', 'z', 'w', 'u', 'v'];
      if (inRank === 0) {
          coordsSnippet = '';
      }
      else if (outRank < 2 && broadcastDims.length >= 1) {
          coordsSnippet = 'coords = 0;';
      }
      else {
          coordsSnippet =
              broadcastDims.map(function (d) { return "coords." + fields[d + rankDiff] + " = 0;"; })
                  .join('\n');
      }
      var unpackedCoordsSnippet = '';
      if (outRank < 2 && inRank > 0) {
          unpackedCoordsSnippet = 'coords';
      }
      else {
          unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape
              .map(function (s, i) { return "coords." + fields[i + rankDiff]; })
              .join(', ');
      }
      var output = "return outputValue;";
      var inSize = tf.util.sizeFromShape(inputInfo.shapeInfo.logicalShape);
      var isInputScalar = inSize === 1;
      var outSize = tf.util.sizeFromShape(outShapeInfo.logicalShape);
      var isOutputScalar = outSize === 1;
      if (inRank === 1 && !isInputScalar && !isOutputScalar) {
          output = "\n      return vec4(outputValue.xy, outputValue.xy);\n    ";
      }
      else if (isInputScalar && !isOutputScalar) {
          if (outRank === 1) {
              output = "\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ";
          }
          else {
              output = "\n        return vec4(outputValue.x);\n      ";
          }
      }
      else if (broadcastDims.length) {
          var rows = inRank - 2;
          var cols = inRank - 1;
          if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {
              output = "return vec4(outputValue.x);";
          }
          else if (broadcastDims.indexOf(rows) > -1) {
              output = "return vec4(outputValue.x, outputValue.y, " +
                  "outputValue.x, outputValue.y);";
          }
          else if (broadcastDims.indexOf(cols) > -1) {
              output = "return vec4(outputValue.xx, outputValue.zz);";
          }
      }
      return "\n    vec4 " + funcName + "() {\n      " + type + " coords = getOutputCoords();\n      " + coordsSnippet + "\n      vec4 outputValue = get" + texFuncSnippet + "(" + unpackedCoordsSnippet + ");\n      " + output + "\n    }\n  ";
  }
  function getSamplerAtOutputCoords(inputInfo, outShapeInfo) {
      var texName = inputInfo.name;
      var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
      var funcName = 'get' + texFuncSnippet + 'AtOutCoords';
      var outTexShape = outShapeInfo.texShape;
      var inTexShape = inputInfo.shapeInfo.texShape;
      var inRank = inputInfo.shapeInfo.logicalShape.length;
      var outRank = outShapeInfo.logicalShape.length;
      if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&
          inputInfo.shapeInfo.flatOffset == null &&
          tf.util.arraysEqual(inTexShape, outTexShape)) {
          return "\n      float " + funcName + "() {\n        return sampleTexture(" + texName + ", resultUV);\n      }\n    ";
      }
      var type = getCoordsDataType(outRank);
      var broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
      var rankDiff = outRank - inRank;
      var coordsSnippet;
      var fields = ['x', 'y', 'z', 'w', 'u', 'v'];
      if (inRank === 0) {
          coordsSnippet = '';
      }
      else if (outRank < 2 && broadcastDims.length >= 1) {
          coordsSnippet = 'coords = 0;';
      }
      else {
          coordsSnippet =
              broadcastDims.map(function (d) { return "coords." + fields[d + rankDiff] + " = 0;"; })
                  .join('\n');
      }
      var unpackedCoordsSnippet = '';
      if (outRank < 2 && inRank > 0) {
          unpackedCoordsSnippet = 'coords';
      }
      else {
          unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape
              .map(function (s, i) { return "coords." + fields[i + rankDiff]; })
              .join(', ');
      }
      return "\n    float " + funcName + "() {\n      " + type + " coords = getOutputCoords();\n      " + coordsSnippet + "\n      return get" + texFuncSnippet + "(" + unpackedCoordsSnippet + ");\n    }\n  ";
  }
  function getCoordsDataType(rank) {
      if (rank <= 1) {
          return 'int';
      }
      else if (rank === 2) {
          return 'ivec2';
      }
      else if (rank === 3) {
          return 'ivec3';
      }
      else if (rank === 4) {
          return 'ivec4';
      }
      else if (rank === 5) {
          return 'ivec5';
      }
      else if (rank === 6) {
          return 'ivec6';
      }
      else {
          throw Error("GPU for rank " + rank + " is not yet supported");
      }
  }
  /** Returns a new input info (a copy) that has a squeezed logical shape. */
  function squeezeInputInfo(inInfo, squeezedShape) {
      // Deep copy.
      var newInputInfo = JSON.parse(JSON.stringify(inInfo));
      newInputInfo.shapeInfo.logicalShape = squeezedShape;
      return newInputInfo;
  }
  function getSqueezedParams(params, keptDims) {
      return keptDims.map(function (d) { return params[d]; }).join(', ');
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ArgMinMaxPackedProgram = /** @class */ (function () {
      function ArgMinMaxPackedProgram(shape, windowSize, op, firstPass) {
          this.variableNames = ['A'];
          this.packedInputs = true;
          this.packedOutput = true;
          tf.util.assert(shape.length > 2, function () { return "Packed arg" + (op.charAt(0).toUpperCase() +
              op.slice(1)) + " supports only inputs with rank above 2."; });
          var inSize = shape[shape.length - 1];
          var outSize = Math.ceil(inSize / windowSize);
          this.outputShape = shape.slice(0, -1);
          if (outSize > 1) {
              this.outputShape.push(outSize);
          }
          if (!firstPass) {
              this.variableNames.push('bestIndicesA');
          }
          var outShape = this.outputShape;
          var rank = outShape.length;
          var dtype = getCoordsDataType(rank);
          var coords = getChannels('coords', rank);
          var sourceLocSetup;
          var sourceRank;
          if (outSize === 1) {
              sourceRank = rank + 1;
              var sourceLocDType = getCoordsDataType(sourceRank);
              sourceLocSetup = "\n        " + sourceLocDType + " sourceLocR = " + sourceLocDType + "(" + coords.join() + ", 0);\n        ++" + coords[rank - 1] + ";\n        " + sourceLocDType + " sourceLocG = " + sourceLocDType + "(" + coords.join() + ", 0);\n        ++" + coords[rank - 2] + ";\n        " + sourceLocDType + " sourceLocA = " + sourceLocDType + "(" + coords.join() + ", 0);\n        --" + coords[rank - 1] + ";\n        " + sourceLocDType + " sourceLocB = " + sourceLocDType + "(" + coords.join() + ", 0);\n        --" + coords[rank - 2] + ";";
          }
          else {
              sourceRank = rank;
              sourceLocSetup = "\n        " + dtype + " sourceLocR = coords;\n        ++" + coords[rank - 1] + ";\n        " + dtype + " sourceLocG = coords;\n        ++" + coords[rank - 2] + ";\n        " + dtype + " sourceLocA = coords;\n        --" + coords[rank - 1] + ";\n        " + dtype + " sourceLocB = coords;\n        --" + coords[rank - 2] + ";";
          }
          var channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);
          var inChannel = '.' + channels[sourceRank - 1]; // e.g. ".b" for rank 3.
          var intChannels = channels.map(function (x) { return 'int ' + x; });
          var srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');
          var srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');
          var srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');
          var srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');
          var compOp = (op === 'max') ? 'greaterThan' : 'lessThan';
          var fetchCandidateIdx = firstPass ? '' : "\n          inIdx = round(vec4(getBestIndicesAChannel(" + srcRCoords.join() + "),\n                             getBestIndicesAChannel(" + srcGCoords.join() + "),\n                             getBestIndicesAChannel(" + srcBCoords.join() + "),\n                             getBestIndicesAChannel(" + srcACoords.join() + ")));";
          var fetchValue = "vec4(\n            getAChannel(" + srcRCoords.join() + "),\n            hasNextCol ? getAChannel(" + srcGCoords.join() + ") : 0.,\n            hasNextRow ? getAChannel(" + srcBCoords.join() + ") : 0.,\n            hasNextRow && hasNextCol ? getAChannel(" + srcACoords.join() + ") : 0.)";
          var getBestIndicesAChannelSnippet = firstPass ? '' : "\n      float getBestIndicesAChannel(" + intChannels.join() + ") {\n        return getChannel(getBestIndicesA(" + channels.join() + "),\n                                          vec2(" + channels.slice(-2).join() + "));\n      }";
          this.userCode = "\n      float getAChannel(" + intChannels.join() + ") {\n        return getChannel(getA(" + channels.join() + "),\n                               vec2(" + channels.slice(-2).join() + "));\n      }\n      " + getBestIndicesAChannelSnippet + "\n      void main() {\n        " + dtype + " coords = getOutputCoords();\n        bool hasNextCol = " + coords[rank - 1] + " < " + (outShape[rank - 1] - 1) + ";\n        bool hasNextRow = " + coords[rank - 2] + " < " + (outShape[rank - 2] - 1) + ";\n        " + sourceLocSetup + "\n        ivec4 srcIdx = ivec4(sourceLocR" + inChannel + ", sourceLocG" + inChannel + ",\n          sourceLocB" + inChannel + ", sourceLocA" + inChannel + ") * " + windowSize + ";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = " + fetchValue + ";\n\n        for (int i = 0; i < " + windowSize + "; i++) {\n          inIdx = srcIdx;\n          " + fetchCandidateIdx + "\n          vec4 candidate = " + fetchValue + ";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(" + compOp + "(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    ";
      }
      return ArgMinMaxPackedProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var AvgPool2DBackpropProgram = /** @class */ (function () {
      function AvgPool2DBackpropProgram(convInfo) {
          this.variableNames = ['dy'];
          this.outputShape = convInfo.inShape;
          var filterHeight = convInfo.filterHeight;
          var filterWidth = convInfo.filterWidth;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var dilationHeight = convInfo.dilationHeight;
          var dilationWidth = convInfo.dilationWidth;
          var effectiveFilterHeight = convInfo.effectiveFilterHeight;
          var effectiveFilterWidth = convInfo.effectiveFilterWidth;
          var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
          var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
          var avgMultiplier = 1 / (filterHeight * filterWidth);
          this.userCode = "\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n      const float avgMultiplier = float(" + avgMultiplier + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + effectiveFilterHeight + ";\n            wR += " + dilationHeight + ") {\n          float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n          if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + effectiveFilterWidth + ";\n            wC+= " + dilationWidth + ") {\n            float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n            if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      }
      return AvgPool2DBackpropProgram;
  }());
  var AvgPool3DBackpropProgram = /** @class */ (function () {
      function AvgPool3DBackpropProgram(convInfo) {
          this.variableNames = ['dy'];
          this.outputShape = convInfo.inShape;
          var filterDepth = convInfo.filterDepth;
          var filterHeight = convInfo.filterHeight;
          var filterWidth = convInfo.filterWidth;
          var strideDepth = convInfo.strideDepth;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var dilationDepth = convInfo.dilationDepth;
          var dilationHeight = convInfo.dilationHeight;
          var dilationWidth = convInfo.dilationWidth;
          var effectiveFilterDepth = convInfo.effectiveFilterDepth;
          var effectiveFilterHeight = convInfo.effectiveFilterHeight;
          var effectiveFilterWidth = convInfo.effectiveFilterWidth;
          var padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
          var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
          var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
          var avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);
          this.userCode = "\n      const ivec3 pads = ivec3(" + padFront + ", " + padTop + ", " + padLeft + ");\n      const float avgMultiplier = float(" + avgMultiplier + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < " + effectiveFilterDepth + ";\n            wD += " + dilationDepth + ") {\n          float dyD = float(dyDCorner + wD) / " + strideDepth + ".0;\n\n          if (dyD < 0.0 || dyD >= " + convInfo.outDepth + ".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < " + effectiveFilterHeight + ";\n              wR += " + dilationHeight + ") {\n            float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n            if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < " + effectiveFilterWidth + ";\n                wC += " + dilationWidth + ") {\n              float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n              if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      }
      return AvgPool3DBackpropProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var BatchNormProgram = /** @class */ (function () {
      function BatchNormProgram(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {
          this.outputShape = [];
          this.variableNames = ['x', 'mean', 'variance'];
          tf.backend_util.assertAndGetBroadcastShape(xShape, meanShape);
          tf.backend_util.assertAndGetBroadcastShape(xShape, varianceShape);
          var offsetSnippet = '0.0';
          if (offsetShape != null) {
              tf.backend_util.assertAndGetBroadcastShape(xShape, offsetShape);
              this.variableNames.push('offset');
              offsetSnippet = 'getOffsetAtOutCoords()';
          }
          var scaleSnippet = '1.0';
          if (scaleShape != null) {
              tf.backend_util.assertAndGetBroadcastShape(xShape, scaleShape);
              this.variableNames.push('scale');
              scaleSnippet = 'getScaleAtOutCoords()';
          }
          this.outputShape = xShape;
          this.userCode = "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " + offsetSnippet + ";\n        float scale = " + scaleSnippet + ";\n        float inv = scale * inversesqrt(variance + float(" + varianceEpsilon + "));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ";
      }
      return BatchNormProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var BatchNormPackedProgram = /** @class */ (function () {
      function BatchNormPackedProgram(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {
          this.packedInputs = true;
          this.packedOutput = true;
          this.variableNames = ['x', 'mean', 'variance'];
          tf.backend_util.assertAndGetBroadcastShape(xShape, meanShape);
          tf.backend_util.assertAndGetBroadcastShape(xShape, varianceShape);
          var offsetSnippet = 'vec4(0.0)';
          if (offsetShape != null) {
              tf.backend_util.assertAndGetBroadcastShape(xShape, offsetShape);
              this.variableNames.push('offset');
              offsetSnippet = 'getOffsetAtOutCoords()';
          }
          var scaleSnippet = 'vec4(1.0)';
          if (scaleShape != null) {
              tf.backend_util.assertAndGetBroadcastShape(xShape, scaleShape);
              this.variableNames.push('scale');
              scaleSnippet = 'getScaleAtOutCoords()';
          }
          this.outputShape = xShape;
          this.userCode = "\n      void main() {\n        vec4 offset = " + offsetSnippet + ";\n        vec4 scale = " + scaleSnippet + ";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(" + varianceEpsilon + "));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ";
      }
      return BatchNormPackedProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // (Ar + Ai)(Br + Bi) =
  // ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr
  // Yr = ArBr - AB
  // Yi = ArBi + AiBr
  var COMPLEX_MULTIPLY = {
      REAL: 'return areal * breal - aimag * bimag;',
      IMAG: 'return areal * bimag + aimag * breal;'
  };
  var BinaryOpComplexProgram = /** @class */ (function () {
      function BinaryOpComplexProgram(op, aShape, bShape) {
          this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];
          this.outputShape = tf.backend_util.assertAndGetBroadcastShape(aShape, bShape);
          this.userCode = "\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        " + op + "\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ";
      }
      return BinaryOpComplexProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var CHECK_NAN_SNIPPET = "\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";
  var ADD = 'return a + b;';
  var SUB = 'return a - b;';
  var MUL = 'return a * b;';
  // Without the equality check div produces 0.9999 for a = b, which when
  // floored can cause errors.
  var DIV = "\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;";
  // We use native integer division to deal with floating point imprecision. Since
  // we implement floor division and glsl implements truncated division, we
  // correct for this by subtracting 1 from result when the result is negative and
  // there is a remainder.
  var INT_DIV = "\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n";
  var POW = "\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n";
  var EQUAL = "return float(a == b);";
  var NOT_EQUAL = "return float(a != b);";
  var LESS = "return float(a < b);";
  var LESS_EQUAL = "return float(a <= b);";
  var GREATER = "return float(a > b);";
  var GREATER_EQUAL = "return float(a >= b);";
  var LOGICAL_AND = "return float(a >= 1.0 && b >= 1.0);";
  var LOGICAL_OR = "return float(a >= 1.0 || b >= 1.0);";
  var MAX = CHECK_NAN_SNIPPET + "\n  return max(a, b);\n";
  var MIN = CHECK_NAN_SNIPPET + "\n  return min(a, b);\n";
  var MOD = "if (b == 0.0) return NAN;\n  return mod(a, b);";
  var ATAN2 = CHECK_NAN_SNIPPET + "\n  return atan(a, b);\n";
  var ELU_DER = "return (b >= 1.0) ? a : a * (b + 1.0);";
  var PRELU = "return (a < 0.) ? b * a : a;";
  var BinaryOpProgram = /** @class */ (function () {
      function BinaryOpProgram(op, aShape, bShape) {
          this.variableNames = ['A', 'B'];
          this.outputShape = tf.backend_util.assertAndGetBroadcastShape(aShape, bShape);
          this.userCode = "\n      float binaryOperation(float a, float b) {\n        " + op + "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
      }
      return BinaryOpProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var CHECK_NAN_SNIPPET$1 = "\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n";
  // We do the same as in ./binaryop_gpu, with vec4 and ivec4.
  // On Linux, the vectorized implementation produces NaNs when a and b are 0.
  var DIV$1 = "\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n";
  var INT_DIV$1 = "\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n";
  var POW$1 = "\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  " +
      CHECK_NAN_SNIPPET$1 + "\n  return result;\n";
  var PRELU$1 = "\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";
  var ELU_DER$1 = "\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n";
  var ATAN2$1 = "\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  " +
      CHECK_NAN_SNIPPET$1 + "\n  return result;\n";
  var EQUAL$1 = "\n  return vec4(equal(a, b));\n";
  var NOT_EQUAL$1 = "\n  return vec4(notEqual(a, b));\n";
  var LESS$1 = "\n  return vec4(lessThan(a, b));\n";
  var LESS_EQUAL$1 = "\n  return vec4(lessThanEqual(a, b));\n";
  var GREATER$1 = "\n  return vec4(greaterThan(a, b));\n";
  var GREATER_EQUAL$1 = "\n  return vec4(greaterThanEqual(a, b));\n";
  var LOGICAL_AND$1 = "\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n";
  var LOGICAL_OR$1 = "\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n";
  var MAX$1 = "\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  " +
      CHECK_NAN_SNIPPET$1 + "\n  return result;\n";
  var MIN$1 = "\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  " +
      CHECK_NAN_SNIPPET$1 + "\n  return result;\n";
  var MOD$1 = "\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  " +
      CHECK_NAN_SNIPPET$1 + "\n  return result;\n";
  var BinaryOpPackedProgram = /** @class */ (function () {
      function BinaryOpPackedProgram(op, aShape, bShape, checkOutOfBounds) {
          if (checkOutOfBounds === void 0) { checkOutOfBounds = false; }
          this.variableNames = ['A', 'B'];
          this.supportsBroadcasting = true;
          this.packedInputs = true;
          this.packedOutput = true;
          this.outputShape = tf.backend_util.assertAndGetBroadcastShape(aShape, bShape);
          var rank = this.outputShape.length;
          var checkOutOfBoundsString = '';
          if (checkOutOfBounds) {
              if (rank === 0 || tf.util.sizeFromShape(this.outputShape) === 1) {
                  checkOutOfBoundsString = "\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";
              }
              else {
                  var dtype = getCoordsDataType(rank);
                  checkOutOfBoundsString = "\n          " + dtype + " coords = getOutputCoords();\n        ";
                  if (rank === 1) {
                      checkOutOfBoundsString += "\n            result.y = (coords + 1) >= " + this.outputShape[0] + " ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";
                  }
                  else {
                      var channels = getChannels('coords', rank);
                      checkOutOfBoundsString += "\n            bool nextRowOutOfBounds =\n              (" + channels[rank - 2] + " + 1) >= " + this.outputShape[rank - 2] + ";\n            bool nextColOutOfBounds =\n              (" + channels[rank - 1] + " + 1) >= " + this.outputShape[rank - 1] + ";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          ";
                  }
              }
          }
          this.userCode = "\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        " + op + "\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        " + checkOutOfBoundsString + "\n\n        setOutput(result);\n      }\n    ";
      }
      return BinaryOpPackedProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ClipProgram = /** @class */ (function () {
      function ClipProgram(aShape) {
          this.variableNames = ['A'];
          this.outputShape = aShape;
          this.userCode = "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    ";
      }
      ClipProgram.prototype.getCustomSetupFunc = function (min, max) {
          var _this = this;
          return function (gpgpu, webGLProgram) {
              if (_this.minLoc == null) {
                  _this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');
                  _this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');
              }
              gpgpu.gl.uniform1f(_this.minLoc, min);
              gpgpu.gl.uniform1f(_this.maxLoc, max);
          };
      };
      return ClipProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ClipPackedProgram = /** @class */ (function () {
      function ClipPackedProgram(aShape) {
          this.variableNames = ['A'];
          this.packedInputs = true;
          this.packedOutput = true;
          this.outputShape = aShape;
          this.userCode = "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    ";
      }
      ClipPackedProgram.prototype.getCustomSetupFunc = function (min, max) {
          var _this = this;
          return function (gpgpu, webGLProgram) {
              if (_this.minLoc == null) {
                  _this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');
                  _this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');
              }
              gpgpu.gl.uniform1f(_this.minLoc, min);
              gpgpu.gl.uniform1f(_this.maxLoc, max);
          };
      };
      return ClipPackedProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ComplexAbsProgram = /** @class */ (function () {
      function ComplexAbsProgram(shape) {
          this.variableNames = ['real', 'imag'];
          this.outputShape = shape;
          this.userCode = "\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    ";
      }
      return ComplexAbsProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ConcatProgram = /** @class */ (function () {
      // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().
      function ConcatProgram(shapes) {
          this.outputShape = [];
          this.outputShape = tf.backend_util.computeOutShape(shapes, 1 /* axis */);
          this.variableNames = shapes.map(function (_, i) { return "T" + i; });
          var offsets = new Array(shapes.length - 1);
          offsets[0] = shapes[0][1];
          for (var i = 1; i < offsets.length; i++) {
              offsets[i] = offsets[i - 1] + shapes[i][1];
          }
          var snippets = ["if (yC < " + offsets[0] + ") setOutput(getT0(yR, yC));"];
          for (var i = 1; i < offsets.length; i++) {
              var shift = offsets[i - 1];
              snippets.push("else if (yC < " + offsets[i] + ") " +
                  ("setOutput(getT" + i + "(yR, yC-" + shift + "));"));
          }
          var lastIndex = offsets.length;
          var lastShift = offsets[offsets.length - 1];
          snippets.push("else setOutput(getT" + lastIndex + "(yR, yC-" + lastShift + "));");
          this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        " + snippets.join('\n        ') + "\n      }\n    ";
      }
      return ConcatProgram;
  }());

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ConcatPackedProgram = /** @class */ (function () {
      function ConcatPackedProgram(shapes, axis) {
          this.packedInputs = true;
          this.packedOutput = true;
          this.outputShape = [];
          this.outputShape = tf.backend_util.computeOutShape(shapes, axis);
          var shape = this.outputShape;
          var rank = shape.length;
          var dtype = getCoordsDataType(rank);
          var coords = getChannels('coords', rank);
          var channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);
          this.variableNames = shapes.map(function (_, i) { return "T" + i; });
          var offsets = new Array(shapes.length - 1);
          offsets[0] = shapes[0][axis];
          for (var i = 1; i < offsets.length; i++) {
              offsets[i] = offsets[i - 1] + shapes[i][axis];
          }
          var channel = channels[axis];
          var lastChannels = channels.slice(-2);
          var allChannels = channels.join();
          var getValueSnippet = "if (" + channel + " < " + offsets[0] + ") {\n        return getChannel(\n            getT0(" + allChannels + "), vec2(" + lastChannels.join() + "));\n        }";
          for (var i = 1; i < offsets.length; i++) {
              var shift_1 = offsets[i - 1];
              // Note: the >= comparison below may seem unnecessary given the check
              // above but is needed to workaround branch execution issues on some
              // devices. It makes all the conditions exclusive without relying on
              // execution order.
              getValueSnippet += "\n        if (" + channel + " < " + offsets[i] + "  && " + channel + " >= " + offsets[i - 1] + ") {\n          return getChannel(\n            getT" + i + "(" + shiftedChannels(channels, channel, shift_1) + "),\n            vec2(" + shiftedChannels(lastChannels, channel, shift_1) + "));\n        }";
          }
          var lastIndex = offsets.length;
          var shift = offsets[offsets.length - 1];
          getValueSnippet += "\n        return getChannel(\n          getT" + lastIndex + "(" + shiftedChannels(channels, channel, shift) + "),\n          vec2(" + shiftedChannels(lastChannels, channel, shift) + "));";
          this.userCode = "\n      float getValue(" + channels.map(function (x) { return 'int ' + x; }) + ") {\n        " + getValueSnippet + "\n      }\n\n      void main() {\n        " + dtype + " coords = getOutputCoords();\n        vec4 result = vec4(getValue(" + coords + "), 0., 0., 0.);\n\n        " + coords[rank - 1] + " = " + coords[rank - 1] + " + 1;\n        if (" + coords[rank - 1] + " < " + shape[rank - 1] + ") {\n          result.g = getValue(" + coords + ");\n        }\n\n        " + coords[rank - 2] + " = " + coords[rank - 2] + " + 1;\n        if (" + coords[rank - 2] + " < " + shape[rank - 2] + ") {\n          result.a = getValue(" + coords + ");\n        }\n\n        " + coords[rank - 1] + " = " + coords[rank - 1] + " - 1;\n        if (" + coords[rank - 2] + " < " + shape[rank - 2] + " &&\n            " + coords[rank - 1] + " < " + shape[rank - 1] + ") {\n          result.b = getValue(" + coords + ");\n        }\n        setOutput(result);\n      }\n    ";
      }
      return ConcatPackedProgram;
  }());
  /**
   * Return an expression for coordinates into a vector where a given channel
   * will be offset by [shift].
   *
   * @param channels the channels to consider
   * @param channel the channel we want shifted
   * @param shift  the amount to subtract from the channel.
   *
   * @returns a string of the form 'x, y-[shift], z' where any one channel can
   * have the shift applied.
   */
  function shiftedChannels(channels, channel, shift) {
      var channelIdx = channels.indexOf(channel);
      var res = channels.map(function (c, idx) {
          if (idx === channelIdx) {
              return c + " - " + shift;
          }
          else {
              return c;
          }
      });
      return res.join();
  }

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var Conv2DDerFilterProgram = /** @class */ (function () {
      function Conv2DDerFilterProgram(convInfo) {
          this.variableNames = ['x', 'dy'];
          this.outputShape = convInfo.filterShape;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var padTop = convInfo.padInfo.top;
          var padLeft = convInfo.padInfo.left;
          var isChannelsLast = convInfo.dataFormat === 'channelsLast';
          this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + convInfo.batchSize + "; b++) {\n          for (int yR = 0; yR < " + convInfo.outHeight + "; yR++) {\n            int xR = wR + yR * " + strideHeight + " - " + padTop + ";\n\n            if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + convInfo.outWidth + "; yC++) {\n              int xC = wC + yC * " + strideWidth + " - " + padLeft + ";\n\n              if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n                continue;\n              }\n\n              if (" + isChannelsLast + ") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      }
      return Conv2DDerFilterProgram;
  }());
  var Conv2DDerInputProgram = /** @class */ (function () {
      function Conv2DDerInputProgram(convInfo) {
          this.variableNames = ['dy', 'W'];
          this.outputShape = convInfo.inShape;
          var filterHeight = convInfo.filterHeight;
          var filterWidth = convInfo.filterWidth;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var isChannelsLast = convInfo.dataFormat === 'channelsLast';
          var padTop = filterHeight - 1 - convInfo.padInfo.top;
          var padLeft = filterWidth - 1 - convInfo.padInfo.left;
          var rowDim = isChannelsLast ? 1 : 2;
          var colDim = isChannelsLast ? 2 : 3;
          var channelDim = isChannelsLast ? 3 : 1;
          this.userCode = "\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[" + channelDim + "];\n\n        ivec2 dyCorner = ivec2(coords[" + rowDim + "], coords[" + colDim + "]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n          if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + filterHeight + " - 1 - wR;\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n            if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + filterWidth + " - 1 - wC;\n\n            for (int d2 = 0; d2 < " + convInfo.outChannels + "; d2++) {\n\n              if (" + isChannelsLast + ") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      }
      return Conv2DDerInputProgram;
  }());
  var Conv3DDerFilterProgram = /** @class */ (function () {
      function Conv3DDerFilterProgram(convInfo) {
          this.variableNames = ['x', 'dy'];
          this.outputShape = convInfo.filterShape;
          var strideDepth = convInfo.strideDepth;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var padFront = convInfo.padInfo.front;
          var padTop = convInfo.padInfo.top;
          var padLeft = convInfo.padInfo.left;
          this.userCode = "\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + convInfo.batchSize + "; b++) {\n          for (int yF = 0; yF < " + convInfo.outDepth + "; yF++) {\n            int xF = wF + yF * " + strideDepth + " - " + padFront + ";\n\n            if (xF < 0 || xF >= " + convInfo.inDepth + ") {\n              continue;\n            }\n\n            for (int yR = 0; yR < " + convInfo.outHeight + "; yR++) {\n              int xR = wR + yR * " + strideHeight + " - " + padTop + ";\n\n              if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n                continue;\n              }\n\n              for (int yC = 0; yC < " + convInfo.outWidth + "; yC++) {\n                int xC = wC + yC * " + strideWidth + " - " + padLeft + ";\n\n                if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      }
      return Conv3DDerFilterProgram;
  }());
  var Conv3DDerInputProgram = /** @class */ (function () {
      function Conv3DDerInputProgram(convInfo) {
          this.variableNames = ['dy', 'W'];
          this.outputShape = convInfo.inShape;
          var filterDepth = convInfo.filterDepth;
          var filterHeight = convInfo.filterHeight;
          var filterWidth = convInfo.filterWidth;
          var strideDepth = convInfo.strideDepth;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var padFront = filterDepth - 1 - convInfo.padInfo.front;
          var padTop = filterHeight - 1 - convInfo.padInfo.top;
          var padLeft = filterWidth - 1 - convInfo.padInfo.left;
          this.userCode = "\n      const ivec3 pads = ivec3(" + padFront + ", " + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + filterDepth + "; wF++) {\n          float dyF = float(dyFCorner + wF) / " + strideDepth + ".0;\n\n          if (dyF < 0.0 || dyF >= " + convInfo.outDepth + ".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = " + filterDepth + " - 1 - wF;\n\n          for (int wR = 0; wR < " + filterHeight + "; wR++) {\n            float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n            if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = " + filterHeight + " - 1 - wR;\n\n            for (int wC = 0; wC < " + filterWidth + "; wC++) {\n              float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n              if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = " + filterWidth + " - 1 - wC;\n\n              for (int d2 = 0; d2 < " + convInfo.outChannels + "; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      }
      return Conv3DDerInputProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var DepthwiseConv2DDerFilterProgram = /** @class */ (function () {
      function DepthwiseConv2DDerFilterProgram(convInfo) {
          this.variableNames = ['x', 'dy'];
          this.outputShape = convInfo.filterShape;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var padTop = convInfo.padInfo.top;
          var padLeft = convInfo.padInfo.left;
          var channelMul = convInfo.outChannels / convInfo.inChannels;
          this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * " + channelMul + " + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < " + convInfo.batchSize + "; b++) {\n          for (int yR = 0; yR < " + convInfo.outHeight + "; yR++) {\n            int xR = wR + yR * " + strideHeight + " - " + padTop + ";\n\n            if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + convInfo.outWidth + "; yC++) {\n              int xC = wC + yC * " + strideWidth + " - " + padLeft + ";\n\n              if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      }
      return DepthwiseConv2DDerFilterProgram;
  }());
  var DepthwiseConv2DDerInputProgram = /** @class */ (function () {
      function DepthwiseConv2DDerInputProgram(convInfo) {
          this.variableNames = ['dy', 'W'];
          this.outputShape = convInfo.inShape;
          var filterHeight = convInfo.filterHeight;
          var filterWidth = convInfo.filterWidth;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var padTop = filterHeight - 1 - convInfo.padInfo.top;
          var padLeft = filterWidth - 1 - convInfo.padInfo.left;
          var channelMul = convInfo.outChannels / convInfo.inChannels;
          this.userCode = "\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n          if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + filterHeight + " - 1 - wR;\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n            if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + filterWidth + " - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < " + channelMul + "; dm++) {\n              int d2 = d1 * " + channelMul + " + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      }
      return DepthwiseConv2DDerInputProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var Conv2DProgram = /** @class */ (function () {
      function Conv2DProgram(convInfo, addBias, activation, hasPreluActivationWeights) {
          if (addBias === void 0) { addBias = false; }
          if (activation === void 0) { activation = null; }
          if (hasPreluActivationWeights === void 0) { hasPreluActivationWeights = false; }
          this.variableNames = ['x', 'W'];
          this.outputShape = convInfo.outShape;
          var padTop = convInfo.padInfo.top;
          var padLeft = convInfo.padInfo.left;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var dilationHeight = convInfo.dilationHeight;
          var dilationWidth = convInfo.dilationWidth;
          var filterHeight = convInfo.filterHeight;
          var filterWidth = convInfo.filterWidth;
          var inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
          var inputDepthVec4Remainder = convInfo.inChannels % 4;
          var isChannelsLast = convInfo.dataFormat === 'channelsLast';
          var rowDim = isChannelsLast ? 1 : 2;
          var colDim = isChannelsLast ? 2 : 3;
          var channelDim = isChannelsLast ? 3 : 1;
          var activationSnippet = '', applyActivationSnippet = '';
          if (activation) {
              if (hasPreluActivationWeights) {
                  activationSnippet = "float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          " + activation + "\n        }";
              }
              else {
                  activationSnippet = "\n          float activation(float x) {\n            " + activation + "\n          }\n        ";
              }
              applyActivationSnippet = "result = activation(result);";
          }
          var addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
          if (addBias) {
              this.variableNames.push('bias');
          }
          if (hasPreluActivationWeights) {
              this.variableNames.push('preluActivationWeights');
          }
          this.userCode = "\n      " + activationSnippet + "\n\n      const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[" + channelDim + "];\n\n        ivec2 xRCCorner =\n            ivec2(coords[" + rowDim + "], coords[" + colDim + "]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          int xR = xRCorner + wR * " + dilationHeight + ";\n\n          if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            int xC = xCCorner + wC * " + dilationWidth + ";\n\n            if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " + inputDepthNearestVec4 + "; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (" + isChannelsLast + ") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (" + (inputDepthVec4Remainder === 1) + ") {\n\n              if (" + isChannelsLast + ") {\n                dotProd +=\n                    getX(batch, xR, xC, " + inputDepthNearestVec4 + ") *\n                    getW(wR, wC, " + inputDepthNearestVec4 + ", d2);\n              } else {\n                dotProd +=\n                    getX(batch, " + inputDepthNearestVec4 + ", xR, xC) *\n                    getW(wR, wC, " + inputDepthNearestVec4 + ", d2);\n              }\n\n            } else if (" + (inputDepthVec4Remainder === 2) + ") {\n              vec2 wValues = vec2(\n                getW(wR, wC, " + inputDepthNearestVec4 + ", d2),\n                getW(wR, wC, " + inputDepthNearestVec4 + " + 1, d2)\n              );\n\n              if (" + isChannelsLast + ") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, " + inputDepthNearestVec4 + "),\n                  getX(batch, xR, xC, " + inputDepthNearestVec4 + " + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, " + inputDepthNearestVec4 + ", xR, xC),\n                  getX(batch, " + inputDepthNearestVec4 + " + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (" + (inputDepthVec4Remainder === 3) + ") {\n              vec3 wValues = vec3(\n                getW(wR, wC, " + inputDepthNearestVec4 + ", d2),\n                getW(wR, wC, " + inputDepthNearestVec4 + " + 1, d2),\n                getW(wR, wC, " + inputDepthNearestVec4 + " + 2, d2)\n              );\n\n              if (" + isChannelsLast + ") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, " + inputDepthNearestVec4 + "),\n                  getX(batch, xR, xC, " + inputDepthNearestVec4 + " + 1),\n                  getX(batch, xR, xC, " + inputDepthNearestVec4 + " + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, " + inputDepthNearestVec4 + ", xR, xC),\n                  getX(batch, " + inputDepthNearestVec4 + " + 1, xR, xC),\n                  getX(batch, " + inputDepthNearestVec4 + " + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        " + addBiasSnippet + "\n        " + applyActivationSnippet + "\n        setOutput(result);\n      }\n    ";
      }
      return Conv2DProgram;
  }());
  var Conv3DProgram = /** @class */ (function () {
      function Conv3DProgram(convInfo) {
          this.variableNames = ['x', 'W'];
          this.outputShape = convInfo.outShape;
          var padFront = convInfo.padInfo.front;
          var padTop = convInfo.padInfo.top;
          var padLeft = convInfo.padInfo.left;
          var strideDepth = convInfo.strideDepth;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var dilationDepth = convInfo.dilationDepth;
          var dilationHeight = convInfo.dilationHeight;
          var dilationWidth = convInfo.dilationWidth;
          var filterDepth = convInfo.filterDepth;
          var filterHeight = convInfo.filterHeight;
          var filterWidth = convInfo.filterWidth;
          var inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
          var inputDepthVec4Remainder = convInfo.inChannels % 4;
          this.userCode = "\n      const ivec3 strides = ivec3(" + strideDepth + ", " + strideHeight + ", " + strideWidth + ");\n      const ivec3 pads = ivec3(" + padFront + ", " + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + filterDepth + "; wF++) {\n          int xF = xFCorner + wF * " + dilationDepth + ";\n\n          if (xF < 0 || xF >= " + convInfo.inDepth + ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " + filterHeight + "; wR++) {\n            int xR = xRCorner + wR * " + dilationHeight + ";\n\n            if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + filterWidth + "; wC++) {\n              int xC = xCCorner + wC * " + dilationWidth + ";\n\n              if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < " + inputDepthNearestVec4 + "; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (" + (inputDepthVec4Remainder === 1) + ") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, " + inputDepthNearestVec4 + ") *\n                  getW(wF, wR, wC, " + inputDepthNearestVec4 + ", d2);\n              } else if (" + (inputDepthVec4Remainder === 2) + ") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, " + inputDepthNearestVec4 + "),\n                  getX(batch, xF, xR, xC, " + inputDepthNearestVec4 + " + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, " + inputDepthNearestVec4 + ", d2),\n                  getW(wF, wR, wC, " + inputDepthNearestVec4 + " + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (" + (inputDepthVec4Remainder === 3) + ") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, " + inputDepthNearestVec4 + "),\n                  getX(batch, xF, xR, xC, " + inputDepthNearestVec4 + " + 1),\n                  getX(batch, xF, xR, xC, " + inputDepthNearestVec4 + " + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, " + inputDepthNearestVec4 + ", d2),\n                  getW(wF, wR, wC, " + inputDepthNearestVec4 + " + 1, d2),\n                  getW(wF, wR, wC, " + inputDepthNearestVec4 + " + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      }
      return Conv3DProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var DepthwiseConv2DProgram = /** @class */ (function () {
      function DepthwiseConv2DProgram(convInfo, addBias, activation, hasPreluActivation) {
          if (addBias === void 0) { addBias = false; }
          if (activation === void 0) { activation = null; }
          if (hasPreluActivation === void 0) { hasPreluActivation = false; }
          this.variableNames = ['x', 'W'];
          this.outputShape = convInfo.outShape;
          var xNumRows = convInfo.inHeight;
          var xNumCols = convInfo.inWidth;
          var padTop = convInfo.padInfo.top;
          var padLeft = convInfo.padInfo.left;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var dilationHeight = convInfo.dilationHeight;
          var dilationWidth = convInfo.dilationWidth;
          var filterHeight = convInfo.filterHeight;
          var filterWidth = convInfo.filterWidth;
          var channelMul = convInfo.outChannels / convInfo.inChannels;
          var activationSnippet = '', applyActivationSnippet = '';
          if (activation) {
              if (hasPreluActivation) {
                  activationSnippet = "float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          " + activation + "\n        }";
              }
              else {
                  activationSnippet = "\n          float activation(float x) {\n            " + activation + "\n          }\n        ";
              }
              applyActivationSnippet = "result = activation(result);";
          }
          var addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
          if (addBias) {
              this.variableNames.push('bias');
          }
          if (hasPreluActivation) {
              this.variableNames.push('preluActivationWeights');
          }
          this.userCode = "\n      " + activationSnippet + "\n\n      const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " + channelMul + ";\n        int q = d2 - d1 * " + channelMul + ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " + filterHeight + "; wR++) {\n          int xR = xRCorner + wR * " + dilationHeight + ";\n\n          if (xR < 0 || xR >= " + xNumRows + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + filterWidth + "; wC++) {\n            int xC = xCCorner + wC * " + dilationWidth + ";\n\n            if (xC < 0 || xC >= " + xNumCols + ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        " + addBiasSnippet + "\n        " + applyActivationSnippet + "\n        setOutput(result);\n      }\n    ";
      }
      return DepthwiseConv2DProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var DepthwiseConvPacked2DProgram = /** @class */ (function () {
      function DepthwiseConvPacked2DProgram(convInfo, addBias, activation, hasPreluActivation) {
          if (addBias === void 0) { addBias = false; }
          if (activation === void 0) { activation = null; }
          if (hasPreluActivation === void 0) { hasPreluActivation = false; }
          this.variableNames = ['x', 'W'];
          this.packedInputs = true;
          this.packedOutput = true;
          this.outputShape = convInfo.outShape;
          var xNumRows = convInfo.inHeight;
          var xNumCols = convInfo.inWidth;
          var padTop = convInfo.padInfo.top;
          var padLeft = convInfo.padInfo.left;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var dilationHeight = convInfo.dilationHeight;
          var dilationWidth = convInfo.dilationWidth;
          var filterHeight = convInfo.filterHeight;
          var filterWidth = convInfo.filterWidth;
          var texelsAcross = filterWidth;
          var mainLoop = "int xR; int xC; int xCOffset;";
          for (var r = 0; r < filterHeight; r++) {
              for (var c = 0; c < filterWidth; c++) {
                  mainLoop += "\n          vec4 xTexelR" + r + "C" + c * 2 + " = vec4(0.);\n          vec4 wR" + r + "C" + c + " = vec4(0.);\n          vec4 xR" + r + "C" + c + " = vec4(0.);";
              }
          }
          /**
           * This vectorized implementation works by gathering the values needed for
           * each output channel's dot product into vec4's and then multiplying them
           * all together (this happens in the final double for-loop below). Most of
           * the main loop consists of constructing these vec4's with the minimum
           * number of texture2D calls, which means making use of all four returned
           * values from a texture2D call at once.
           */
          for (var r = 0; r < filterHeight; r++) {
              for (var texelC = 0; texelC < texelsAcross; texelC++) {
                  var c = texelC * 2;
                  mainLoop += "\n          xR = xRCorner + " + r * dilationHeight + ";\n          xC = xCCorner + " + c * dilationWidth + ";\n        ";
                  if (strideWidth === 1) {
                      if (c < filterWidth) {
                          // If padding is odd, the outer texels have to be composed.
                          if (padLeft % 2 === 1) {
                              // TODO: Ensure vec4 previous does not result in redundant sample,
                              // and avoid setting xTexelRC's that exceed the boundary in the
                              // first place rather than resetting them to vec4(0)).
                              // To compute xCOffset:
                              // - If padding is odd, we must add 1 to ensure we ask for an
                              // even-numbered row.
                              // - We subtract 2 to access the previous texel.
                              mainLoop += "\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < " + xNumRows + " && xCOffset >= 0 && xCOffset < " + xNumCols + ") {\n                  xTexelR" + r + "C" + c + " = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= " + xNumCols + ") {\n                    xTexelR" + r + "C" + c + ".zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR" + r + "C" + c + " = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < " + xNumRows + " && xCOffset >= 0 && xCOffset < " + xNumCols + ") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= " + xNumCols + ") {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR" + r + "C" + c + " = vec4(previous.zw, xTexelR" + r + "C" + c + ".xy);\n                } else {\n                  xR" + r + "C" + c + " = vec4(0, 0, xTexelR" + r + "C" + c + ".xy);\n                }\n              ";
                          }
                          else {
                              // Padding is even, so xRC corresponds to a single texel.
                              mainLoop += "\n                if(xR >= 0 && xR < " + xNumRows + " && xC >= 0 && xC < " + xNumCols + ") {\n                  xTexelR" + r + "C" + c + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + r + "C" + c + " = vec4(0.);\n                }\n\n                xR" + r + "C" + c + " = xTexelR" + r + "C" + c + ";\n              ";
                          }
                          if (c + 1 < filterWidth) {
                              // If dilation is even, the second entry should match the first
                              // (either both are composed or both are single samples). But if
                              // dilation is odd, then the second entry should be the opposite
                              // of the first (if the first is composed, the second is a single
                              // sample, and vice versa.)
                              var nextTexelOffset = padLeft % 2 === 0 ?
                                  tf.util.nearestLargerEven(dilationWidth) :
                                  dilationWidth;
                              if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||
                                  (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {
                                  mainLoop += "\n                  xCOffset = xC + " + padLeft % 2 + " + " + nextTexelOffset + ";\n\n                  if(xR >= 0 && xR < " + xNumRows + " &&\n                    xCOffset >= 0 && xCOffset < " + xNumCols + ") {\n                    xTexelR" + r + "C" + (c + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n                ";
                                  // If dilation > 1 then the xRC's will not be able to share any
                                  // values, so each xRC will require two unique calls to getX.
                                  if (dilationWidth > 1) {
                                      mainLoop += "\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < " + xNumRows + " &&\n                      xCOffset >= 0 && xCOffset < " + xNumCols + ") {\n                      xTexelR" + r + "C" + c + " = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR" + r + "C" + c + " = vec4(0.);\n                    }\n                  ";
                                  }
                                  mainLoop += "\n                  xR" + r + "C" + (c + 1) + " = vec4(\n                    xTexelR" + r + "C" + c + ".zw, xTexelR" + r + "C" + (c + 2) + ".xy);\n                ";
                              }
                              else {
                                  mainLoop += "\n                  xCOffset = xC + " + nextTexelOffset + ";\n\n                  if(xR >= 0 && xR < " + xNumRows + " &&\n                    xCOffset >= 0 && xCOffset < " + xNumCols + ") {\n                    xTexelR" + r + "C" + (c + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR" + r + "C" + (c + 1) + " = xTexelR" + r + "C" + (c + 2) + ";\n                ";
                              }
                          }
                      }
                  }
                  else { // stride > 1
                      if (c < filterWidth) {
                          mainLoop += "\n              if(xR >= 0 && xR < " + xNumRows + ") {\n            ";
                          // Depending on whether padLeft is even or odd, we want either the
                          // xy or zw channels from X texels for xR${r}C${c}. If padLeft is
                          // even, xR${r}C${c + 1} is simply the zw channels of texels we've
                          // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will
                          // need to come from the xy channels of a new texel, hence the `vec4
                          // final` initialized below.
                          if (padLeft % 2 === 1) {
                              mainLoop += "\n                xCOffset = xC + 1 - " + strideWidth + ";\n                if(xCOffset >= 0 && xCOffset < " + xNumCols + ") {\n                  xTexelR" + r + "C" + c + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + r + "C" + c + " = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < " + xNumCols + ") {\n                  xTexelR" + r + "C" + (c + 2) + " = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR" + r + "C" + (c + 2) + " = vec4(0.);\n                }\n\n                xR" + r + "C" + c + " = vec4(\n                  xTexelR" + r + "C" + c + ".zw, xTexelR" + r + "C" + (c + 2) + ".zw);\n              ";
                              if (c + 1 < filterWidth) {
                                  mainLoop += "\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + " + strideWidth + ";\n                  if(xCOffset >= 0 && xCOffset < " + xNumCols + ") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR" + r + "C" + (c + 1) + " = vec4(xTexelR" + r + "C" + (c + 2) + ".xy, final.xy);\n                ";
                              }
                          }
                          else {
                              mainLoop += "\n                if(xC >= 0 && xC < " + xNumCols + ") {\n                  xTexelR" + r + "C" + c + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + r + "C" + c + " = vec4(0.);\n                }\n\n                xCOffset = xC + " + strideWidth + ";\n                if(xCOffset >= 0 && xCOffset < " + xNumCols + ") {\n                  xTexelR" + r + "C" + (c + 2) + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + r + "C" + (c + 2) + " = vec4(0.);\n                }\n\n                xR" + r + "C" + c + " = vec4(\n                  xTexelR" + r + "C" + c + ".xy, xTexelR" + r + "C" + (c + 2) + ".xy);\n              ";
                              if (c + 1 < filterWidth) {
                                  mainLoop += "\n                  xR" + r + "C" + (c + 1) + " = vec4(\n                    xTexelR" + r + "C" + c + ".zw, xTexelR" + r + "C" + (c + 2) + ".zw);\n                ";
                              }
                          }
                          mainLoop += "}";
                      }
                  }
                  if (c < filterWidth) {
                      mainLoop += "\n            vec4 wTexelR" + r + "C" + c + " = getW(" + r + ", " + c + ", d1, q);\n            wR" + r + "C" + c + " = vec4(wTexelR" + r + "C" + c + ".xz, wTexelR" + r + "C" + c + ".xz);\n          ";
                      if (c + 1 < filterWidth) {
                          mainLoop += "\n              vec4 wTexelR" + r + "C" + (c + 1) + " = getW(" + r + ", " + (c + 1) + ", d1, q);\n              wR" + r + "C" + (c + 1) + " =\n                vec4(wTexelR" + r + "C" + (c + 1) + ".xz, wTexelR" + r + "C" + (c + 1) + ".xz);";
                      }
                  }
              }
          }
          for (var r = 0; r < filterHeight; r++) {
              for (var c = 0; c < filterWidth; c++) {
                  mainLoop += "dotProd += xR" + r + "C" + c + " * wR" + r + "C" + c + ";";
              }
          }
          var activationSnippet = '', applyActivationSnippet = '';
          if (activation) {
              if (hasPreluActivation) {
                  activationSnippet = "vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          " + activation + "\n        }";
              }
              else {
                  activationSnippet = "vec4 activation(vec4 x) {\n          " + activation + "\n        }";
              }
              applyActivationSnippet = "result = activation(result);";
          }
          var addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
          if (addBias) {
              this.variableNames.push('bias');
          }
          if (hasPreluActivation) {
              this.variableNames.push('preluActivationWeights');
          }
          this.userCode = "\n      " + activationSnippet + "\n\n      const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        " + mainLoop + "\n\n        vec4 result = dotProd;\n        " + addBiasSnippet + "\n        " + applyActivationSnippet + "\n        setOutput(result);\n      }\n    ";
      }
      return DepthwiseConvPacked2DProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var CropAndResizeProgram = /** @class */ (function () {
      function CropAndResizeProgram(imageShape, boxShape, cropSize, method, extrapolationValue) {
          this.variableNames = ['Image', 'Boxes', 'BoxInd'];
          this.outputShape = [];
          var batch = imageShape[0], imageHeight = imageShape[1], imageWidth = imageShape[2], depth = imageShape[3];
          var numBoxes = boxShape[0];
          var cropHeight = cropSize[0], cropWidth = cropSize[1];
          this.outputShape = [numBoxes, cropHeight, cropWidth, depth];
          var methodId = method === 'bilinear' ? 1 : 0;
          var _a = [imageHeight - 1 + ".0", imageWidth - 1 + ".0"], inputHeightFloat = _a[0], inputWidthFloat = _a[1];
          var _b = cropHeight > 1 ?
              [
                  "" + (imageHeight - 1) / (cropHeight - 1),
                  '(y2-y1) * height_ratio',
                  "y1*" + inputHeightFloat + " + float(y)*(height_scale)",
              ] :
              [
                  '0.0',
                  '0.0',
                  "0.5 * (y1+y2) * " + inputHeightFloat,
              ], heightRatio = _b[0], heightScale = _b[1], inY = _b[2];
          var _c = cropWidth > 1 ?
              [
                  "" + (imageWidth - 1) / (cropWidth - 1),
                  '(x2-x1) * width_ratio',
                  "x1*" + inputWidthFloat + " + float(x)*(width_scale)",
              ] :
              [
                  '0.0',
                  '0.0',
                  "0.5 * (x1+x2) * " + inputWidthFloat,
              ], widthRatio = _c[0], widthScale = _c[1], inX = _c[2];
          // Reference implementation
          // tslint:disable-next-line:max-line-length
          // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc
          this.userCode = "\n      const float height_ratio = float(" + heightRatio + ");\n      const float width_ratio = float(" + widthRatio + ");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= " + batch + ") {\n          return;\n        }\n\n        float height_scale = " + heightScale + ";\n        float width_scale = " + widthScale + ";\n\n        float in_y = " + inY + ";\n        if( in_y < 0.0 || in_y > " + inputHeightFloat + " ) {\n          setOutput(float(" + extrapolationValue + "));\n          return;\n        }\n        float in_x = " + inX + ";\n        if( in_x < 0.0 || in_x > " + inputWidthFloat + " ) {\n          setOutput(float(" + extrapolationValue + "));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(" + methodId + " == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    ";
      }
      return CropAndResizeProgram;
  }());

  var CumSumProgram = /** @class */ (function () {
      function CumSumProgram(shape, exclusive, reverse) {
          this.variableNames = ['x'];
          this.outputShape = shape;
          var rank = shape.length;
          var val = exclusive ? '0.0' : "getX(" + getCoords(rank, 'coords') + ")";
          var length = shape[shape.length - 1];
          var condition = '';
          var idxString = '';
          // When exclusive is set, the cumsum op becomes roll op that copies the
          // value from the previous index based on the direction specified by the
          // reverse flag.
          if (exclusive) {
              condition = reverse ? "end != " + (length - 1) : 'end != 0';
              idxString = reverse ? 'end + 1' : 'end - 1';
          }
          else {
              condition = reverse ? "end + pow2 < " + length : 'end >= pow2';
              idxString = (reverse ? 'end + pow2' : 'end - pow2');
          }
          this.userCode = "\n      uniform float index;\n      void main() {\n        " + getCoordsDataType(rank) + " coords = getOutputCoords();\n        int end = " + getFinalCoord(rank, 'coords') + ";\n        float val = " + val + ";\n        int pow2 = int(pow(2.0, index));\n        if (" + condition + ") {\n          int idx = " + idxString + ";\n          " + getFinalCoord(rank, 'coords') + " = idx;\n          val += getX(" + getCoords(rank, 'coords') + ");\n        }\n        setOutput(val);\n      }\n    ";
      }
      CumSumProgram.prototype.getCustomSetupFunc = function (index) {
          var _this = this;
          return function (gpgpu, webGLProgram) {
              if (_this.index == null) {
                  _this.index = gpgpu.getUniformLocation(webGLProgram, 'index');
              }
              gpgpu.gl.uniform1f(_this.index, index);
          };
      };
      return CumSumProgram;
  }());
  function getCoords(rank, name) {
      if (rank === 1) {
          return "" + name;
      }
      else if (rank === 2) {
          return name + ".x, " + name + ".y";
      }
      else if (rank === 3) {
          return name + ".x, " + name + ".y, " + name + ".z";
      }
      else if (rank === 4) {
          return name + ".x, " + name + ".y, " + name + ".z, " + name + ".w";
      }
      else {
          throw Error("Cumulative sum for rank " + rank + " is not yet supported");
      }
  }
  function getFinalCoord(rank, name) {
      if (rank === 1) {
          return "" + name;
      }
      else if (rank === 2) {
          return name + ".y";
      }
      else if (rank === 3) {
          return name + ".z";
      }
      else if (rank === 4) {
          return name + ".w";
      }
      else {
          throw Error("Cumulative sum for rank " + rank + " is not yet supported");
      }
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var DecodeMatrixProgram = /** @class */ (function () {
      function DecodeMatrixProgram(outputShape) {
          this.variableNames = ['A'];
          this.packedInputs = false;
          this.packedOutput = true;
          this.outPackingScheme = PackingScheme.DENSE;
          var texShape = getDenseTexShape(outputShape);
          var glsl = getGlslDifferences();
          this.outputShape = outputShape;
          this.userCode = "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " + getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape) + "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" + texShape[0] + ", " + texShape[1] + "));\n        int index = 4 * (resTexRC.x * " + texShape[1] + " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        " + glsl.output + " = result;\n      }\n    ";
      }
      return DecodeMatrixProgram;
  }());

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var DecodeMatrixPackedProgram = /** @class */ (function () {
      function DecodeMatrixPackedProgram(outputShape) {
          this.variableNames = ['A'];
          this.packedInputs = true;
          this.packedOutput = true;
          this.outPackingScheme = PackingScheme.DENSE;
          var texShape = getDenseTexShape(outputShape);
          var glsl = getGlslDifferences();
          this.outputShape = outputShape;
          this.userCode = "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " + getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape) + "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" + texShape[0] + ", " + texShape[1] + "));\n        int index = 4 * (resTexRC.x * " + texShape[1] + " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        " + glsl.output + " = result;\n      }\n    ";
      }
      return DecodeMatrixPackedProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var DepthToSpaceProgram = /** @class */ (function () {
      function DepthToSpaceProgram(outputShape, blockSize, dataFormat) {
          this.variableNames = ['x'];
          this.outputShape = [];
          this.outputShape = outputShape;
          this.blockSize = blockSize;
          this.dataFormat = dataFormat;
          this.userCode = "\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = " + this.getHeightCoordString() + ";\n      int w = " + this.getWidthCoordString() + ";\n      int d = " + this.getDepthCoordString() + ";\n\n      int in_h = h / " + blockSize + ";\n      int offset_h = imod(h, " + blockSize + ");\n      int in_w = w / " + blockSize + ";\n      int offset_w = imod(w, " + blockSize + ");\n      int offset_d = (offset_h * " + blockSize + " + offset_w) *\n        " + this.getOutputDepthSize() + ";\n      int in_d = d + offset_d;\n\n      float result = " + this.getInputSamplingString() + ";\n      setOutput(result);\n    }\n  ";
      }
      DepthToSpaceProgram.prototype.getHeightCoordString = function () {
          if (this.dataFormat === 'NHWC') {
              return "coords[1]";
          }
          else {
              return "coords[2]";
          }
      };
      DepthToSpaceProgram.prototype.getWidthCoordString = function () {
          if (this.dataFormat === 'NHWC') {
              return "coords[2]";
          }
          else {
              return "coords[3]";
          }
      };
      DepthToSpaceProgram.prototype.getDepthCoordString = function () {
          if (this.dataFormat === 'NHWC') {
              return "coords[3]";
          }
          else {
              return "coords[1]";
          }
      };
      DepthToSpaceProgram.prototype.getOutputDepthSize = function () {
          if (this.dataFormat === 'NHWC') {
              return this.outputShape[3];
          }
          else {
              return this.outputShape[1];
          }
      };
      DepthToSpaceProgram.prototype.getInputSamplingString = function () {
          if (this.dataFormat === 'NHWC') {
              return "getX(b, in_h, in_w, in_d)";
          }
          else {
              return "getX(b, in_d, in_h, in_w)";
          }
      };
      return DepthToSpaceProgram;
  }());

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var DiagProgram = /** @class */ (function () {
      function DiagProgram(size) {
          this.variableNames = ['X'];
          this.outputShape = [size, size];
          this.userCode = "\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    ";
      }
      return DiagProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var EncodeFloatProgram = /** @class */ (function () {
      function EncodeFloatProgram(outputShape) {
          this.variableNames = ['A'];
          this.outTexUsage = TextureUsage.DOWNLOAD;
          var glsl = getGlslDifferences();
          this.outputShape = outputShape;
          this.userCode = "\n      " + ENCODE_FLOAT_SNIPPET + "\n\n      void main() {\n        float x = getAAtOutCoords();\n        " + glsl.output + " = encode_float(x);\n      }\n    ";
      }
      return EncodeFloatProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var EncodeFloatPackedProgram = /** @class */ (function () {
      function EncodeFloatPackedProgram(outputShape) {
          this.variableNames = ['A'];
          this.packedInputs = true;
          this.packedOutput = false;
          this.outTexUsage = TextureUsage.DOWNLOAD;
          var glsl = getGlslDifferences();
          this.outputShape = outputShape;
          this.userCode = "\n      " + ENCODE_FLOAT_SNIPPET + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        " + glsl.output + " = encode_float(x);\n      }\n    ";
      }
      return EncodeFloatPackedProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var EncodeMatrixProgram = /** @class */ (function () {
      function EncodeMatrixProgram(outputShape, texShape, inputIsUnsignedByte) {
          if (inputIsUnsignedByte === void 0) { inputIsUnsignedByte = false; }
          this.variableNames = ['A'];
          var glsl = getGlslDifferences();
          var height = texShape[0], width = texShape[1];
          this.outputShape = outputShape;
          var output = "result";
          if (inputIsUnsignedByte) {
              output = "floor(result * 255. + 0.5)";
          }
          this.userCode = "\n      " + getFlatIndexFrom3D(outputShape) + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / " + width + ";\n        int c = imod(flatIndex, " + width + ");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(" + width + ".0, " + height + ".0);\n        vec4 values = " + glsl.texture2D + "(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        " + glsl.output + " = vec4(" + output + ", 0., 0., 0.);\n      }\n    ";
      }
      return EncodeMatrixProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /*
  This is how the shader encodes a tensor with shape = [2, 3, 5]
  (indices are [batch, row, col]).

  000|001   002|003   004|xxx   020|021   022|023   024|xxx
  -------   -------   -------   -------   -------   -------
  010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx

  100|101   102|103   104|xxx   120|121   122|123   124|xxx
  -------   -------   -------   -------   -------   -------
  110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx

  Single texels contain only values from the same batch, and from adjacent rows
  and columns.
   */
  var EncodeMatrixPackedProgram = /** @class */ (function () {
      function EncodeMatrixPackedProgram(outputShape, texShape, inputIsUnsignedByte) {
          if (inputIsUnsignedByte === void 0) { inputIsUnsignedByte = false; }
          this.variableNames = ['A'];
          this.packedInputs = false;
          this.packedOutput = true;
          var glsl = getGlslDifferences();
          var height = texShape[0], width = texShape[1];
          this.outputShape = outputShape;
          var mainLoop = '';
          var output = 'result';
          if (inputIsUnsignedByte) {
              output = 'floor(result * 255. + 0.5)';
          }
          for (var row = 0; row <= 1; row++) {
              for (var col = 0; col <= 1; col++) {
                  var channel = row * 2 + col;
                  mainLoop += "\n          localCoords = coords;\n          if(localCoords[2] + " + col + " < " + outputShape[2] + ") {\n            localCoords[2] += " + col + ";\n            if(localCoords[1] + " + row + " < " + outputShape[1] + ") {\n              localCoords[1] += " + row + ";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / " + width + ";\n              c = imod(flatIndex, " + width + ");\n              uv = (vec2(c, r) + halfCR) / vec2(" + width + ".0, " + height + ".0);\n              values = " + glsl.texture2D + "(A, uv);\n\n              if(offset == 0) {\n                result[" + channel + "] = values[0];\n              } else if(offset == 1) {\n                result[" + channel + "] = values[1];\n              } else if(offset == 2) {\n                result[" + channel + "] = values[2];\n              } else {\n                result[" + channel + "] = values[3];\n              }\n            }\n          }\n        ";
              }
          }
          this.userCode = "\n      " + getFlatIndexFrom3D(outputShape) + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        " + mainLoop + "\n\n        " + glsl.output + " = " + output + ";\n      }\n    ";
      }
      return EncodeMatrixPackedProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var COMPLEX_FFT = {
      REAL: 'return real * expR - imag * expI;',
      IMAG: 'return real * expI + imag * expR;'
  };
  var FFTProgram = /** @class */ (function () {
      function FFTProgram(op, inputShape, inverse) {
          this.variableNames = ['real', 'imag'];
          var innerDim = inputShape[1];
          this.outputShape = inputShape;
          var exponentMultiplierSnippet = inverse ? "2.0 * " + Math.PI : "-2.0 * " + Math.PI;
          var resultDenominator = inverse ? innerDim + ".0" : '1.0';
          this.userCode = "\n      const float exponentMultiplier = " + exponentMultiplierSnippet + ";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        " + op + "\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(" + innerDim + ");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < " + innerDim + "; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / " + resultDenominator + ";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ";
      }
      return FFTProgram;
  }());

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var FillProgram = /** @class */ (function () {
      function FillProgram(shape, value) {
          this.outputShape = [];
          this.variableNames = ['x'];
          this.outputShape = shape;
          this.userCode = "\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    ";
      }
      FillProgram.prototype.getCustomSetupFunc = function (value) {
          var _this = this;
          return function (gpgpu, webGLProgram) {
              if (_this.valueLoc == null) {
                  _this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');
              }
              gpgpu.gl.uniform1f(_this.valueLoc, value);
          };
      };
      return FillProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var GatherProgram = /** @class */ (function () {
      function GatherProgram(aShape, indicesLength, axis) {
          this.variableNames = ['A', 'indices'];
          var outputShape = aShape.slice();
          outputShape[axis] = indicesLength;
          this.outputShape = outputShape;
          this.rank = outputShape.length;
          var dtype = getCoordsDataType(this.rank);
          var sourceCoords = getSourceCoords$1(aShape, axis);
          this.userCode = "\n      void main() {\n        " + dtype + " resRC = getOutputCoords();\n        setOutput(getA(" + sourceCoords + "));\n      }\n    ";
      }
      return GatherProgram;
  }());
  function getSourceCoords$1(aShape, axis) {
      var rank = aShape.length;
      if (rank > 4) {
          throw Error("Gather for rank " + rank + " is not yet supported");
      }
      if (rank === 1) {
          return "int(getIndices(resRC))";
      }
      var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
      var sourceCoords = [];
      for (var i = 0; i < aShape.length; i++) {
          if (i === axis) {
              sourceCoords.push("int(getIndices(" + currentCoords[i] + "))");
          }
          else {
              sourceCoords.push("" + currentCoords[i]);
          }
      }
      return sourceCoords.join();
  }

  var GatherNDProgram = /** @class */ (function () {
      function GatherNDProgram(sliceDim, strides, shape) {
          this.sliceDim = sliceDim;
          this.strides = strides;
          this.variableNames = ['x', 'indices'];
          this.outputShape = shape;
          var stridesType = getCoordsDataType(strides.length);
          var dtype = getCoordsDataType(shape.length);
          var strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';
          this.userCode = "\n        " + stridesType + " strides = " + stridesType + "(" + this.strides + ");\n         void main() {\n          " + dtype + " coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < " + this.sliceDim + "; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * " + strideString + ";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      ";
      }
      return GatherNDProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function createVertexShader$1(gl) {
      var glsl = getGlslDifferences();
      var vertexShaderSource = glsl.version + "\n    precision highp float;\n    " + glsl.attribute + " vec3 clipSpacePos;\n    " + glsl.attribute + " vec2 uv;\n    " + glsl.varyingVs + " vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }";
      return createVertexShader(gl, vertexShaderSource);
  }
  function createVertexBuffer(gl) {
      // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]
      var vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
      return createStaticVertexBuffer(gl, vertexArray);
  }
  function createIndexBuffer(gl) {
      // OpenGL (and WebGL) have "CCW == front" winding
      var triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);
      return createStaticIndexBuffer(gl, triangleVertexIndices);
  }
  function createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {
      validateTextureSize(width, height);
      var texture = createTexture(gl);
      var tex2d = gl.TEXTURE_2D;
      callAndCheck(gl, function () { return gl.bindTexture(tex2d, texture); });
      callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE); });
      callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); });
      callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST); });
      callAndCheck(gl, function () { return gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST); });
      callAndCheck(gl, function () { return gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null); });
      callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });
      return texture;
  }
  function getInternalFormatForFloat32MatrixTexture(textureConfig) {
      return textureConfig.internalFormatFloat;
  }
  function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {
      var _a = getUnpackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
      return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);
  }
  function getInternalFormatForFloat16MatrixTexture(textureConfig) {
      return textureConfig.internalFormatHalfFloat;
  }
  function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {
      var _a = getUnpackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
      return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);
  }
  function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {
      return textureConfig.downloadTextureFormat;
  }
  function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {
      var _a = getUnpackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
      return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);
  }
  function getInternalFormatForPackedMatrixTexture(textureConfig) {
      return textureConfig.internalFormatPackedFloat;
  }
  function createPackedMatrixTexture(gl, rows, columns, textureConfig) {
      var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
      return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);
  }
  function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {
      return textureConfig.internalFormatPackedHalfFloat;
  }
  function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {
      var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
      return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);
  }
  function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {
      var posOffset = 0; // x is the first buffer element
      var uvOffset = 3 * 4; // uv comes after [x y z]
      var stride = (3 * 4) + (2 * 4); // xyz + uv, each entry is 4-byte float.
      callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer); });
      var success = bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);
      return success &&
          bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);
  }
  function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {
      callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, texture); });
      var dataForUpload, texelDataType, internalFormat;
      if (data instanceof Uint8Array) {
          dataForUpload = new Uint8Array(width * height * 4);
          texelDataType = gl.UNSIGNED_BYTE;
          internalFormat = gl.RGBA;
      }
      else {
          dataForUpload = new Float32Array(width * height * 4);
          texelDataType = gl.FLOAT;
          internalFormat = textureConfig.internalFormatPackedFloat;
      }
      dataForUpload.set(data);
      callAndCheck(gl, function () { return gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload); });
      callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });
  }
  function uploadPixelDataToTexture(gl, texture, pixels) {
      callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, texture); });
      if (pixels.data instanceof Uint8Array) {
          callAndCheck(gl, function () { return gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data); });
      }
      else {
          callAndCheck(gl, function () { return gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels); });
      }
      callAndCheck(gl, function () { return gl.bindTexture(gl.TEXTURE_2D, null); });
  }
  function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {
      // Create and bind the buffer.
      var buffer = gl2.createBuffer();
      callAndCheck(gl2, function () { return gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer); });
      // Initialize the buffer to the size of the texture in bytes.
      var bytesPerFloat = 4;
      var valuesPerTexel = 4;
      var bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;
      callAndCheck(gl2, function () { return gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ); });
      // Enqueue a command on the GPU command queue to copy of texture into the
      // buffer.
      callAndCheck(gl2, function () { return gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0); });
      callAndCheck(gl2, function () { return gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null); });
      return buffer;
  }
  function downloadFloat32MatrixFromBuffer(gl, buffer, size) {
      var gl2 = gl;
      var downloadTarget = new Float32Array(size);
      gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
      gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);
      gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);
      return downloadTarget;
  }
  function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {
      var _a = getUnpackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];
      var numChannels = 4;
      var downloadTarget = new Uint8Array(getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));
      callAndCheck(gl, function () { return gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget); });
      // By wrapping the buffer in a Float32Array, we use native browser IEEE 754
      // decoding of the 4 bytes that back each 32 bit float.
      return new Float32Array(downloadTarget.buffer);
  }
  function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {
      var gl2 = gl;
      var downloadTarget = new Float32Array(getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));
      gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
      gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);
      gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);
      return downloadTarget;
  }
  function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {
      var packedRGBA = new Float32Array(physicalRows * physicalCols * 4);
      callAndCheck(gl, function () { return gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA); });
      return packedRGBA;
  }

  var gpgpu_util = {
      __proto__: null,
      createVertexShader: createVertexShader$1,
      createVertexBuffer: createVertexBuffer,
      createIndexBuffer: createIndexBuffer,
      getInternalFormatForFloat32MatrixTexture: getInternalFormatForFloat32MatrixTexture,
      createFloat32MatrixTexture: createFloat32MatrixTexture,
      getInternalFormatForFloat16MatrixTexture: getInternalFormatForFloat16MatrixTexture,
      createFloat16MatrixTexture: createFloat16MatrixTexture,
      getInternalFormatForUnsignedBytesMatrixTexture: getInternalFormatForUnsignedBytesMatrixTexture,
      createUnsignedBytesMatrixTexture: createUnsignedBytesMatrixTexture,
      getInternalFormatForPackedMatrixTexture: getInternalFormatForPackedMatrixTexture,
      createPackedMatrixTexture: createPackedMatrixTexture,
      getInternalFormatForFloat16PackedMatrixTexture: getInternalFormatForFloat16PackedMatrixTexture,
      createFloat16PackedMatrixTexture: createFloat16PackedMatrixTexture,
      bindVertexProgramAttributeStreams: bindVertexProgramAttributeStreams,
      uploadDenseMatrixToTexture: uploadDenseMatrixToTexture,
      uploadPixelDataToTexture: uploadPixelDataToTexture,
      createBufferFromOutputTexture: createBufferFromOutputTexture,
      downloadFloat32MatrixFromBuffer: downloadFloat32MatrixFromBuffer,
      downloadByteEncodedFloatMatrixFromOutputTexture: downloadByteEncodedFloatMatrixFromOutputTexture,
      downloadPackedMatrixFromBuffer: downloadPackedMatrixFromBuffer,
      downloadMatrixFromPackedOutputTexture: downloadMatrixFromPackedOutputTexture
  };

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var GPGPUContext = /** @class */ (function () {
      function GPGPUContext(gl) {
          this.outputTexture = null;
          this.program = null;
          this.disposed = false;
          this.vertexAttrsAreBound = false;
          this.itemsToPoll = [];
          var glVersion = tf.env().getNumber('WEBGL_VERSION');
          if (gl != null) {
              this.gl = gl;
              setWebGLContext(glVersion, gl);
          }
          else {
              this.gl = getWebGLContext(glVersion);
          }
          // WebGL 2.0 enables texture floats without an extension.
          var COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';
          var COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';
          if (tf.env().getNumber('WEBGL_VERSION') === 1) {
              var TEXTURE_FLOAT = 'OES_texture_float';
              var TEXTURE_HALF_FLOAT = 'OES_texture_half_float';
              this.textureFloatExtension =
                  getExtensionOrThrow(this.gl, TEXTURE_FLOAT);
              if (hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {
                  this.textureHalfFloatExtension =
                      getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);
              }
              else if (tf.env().get('WEBGL_FORCE_F16_TEXTURES')) {
                  throw new Error('GL context does not support half float textures, yet the ' +
                      'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');
              }
              this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);
              if (hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {
                  this.colorBufferHalfFloatExtension =
                      getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);
              }
              else if (tf.env().get('WEBGL_FORCE_F16_TEXTURES')) {
                  throw new Error('GL context does not support color renderable half floats, yet ' +
                      'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');
              }
          }
          else {
              COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';
              if (hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {
                  this.colorBufferFloatExtension =
                      this.gl.getExtension(COLOR_BUFFER_FLOAT);
              }
              else if (hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {
                  this.colorBufferHalfFloatExtension =
                      this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);
              }
              else {
                  throw new Error('GL context does not support color renderable floats');
              }
          }
          this.vertexBuffer = createVertexBuffer(this.gl);
          this.indexBuffer = createIndexBuffer(this.gl);
          this.framebuffer = createFramebuffer(this.gl);
          this.textureConfig =
              getTextureConfig(this.gl, this.textureHalfFloatExtension);
      }
      Object.defineProperty(GPGPUContext.prototype, "debug", {
          get: function () {
              return tf.env().getBool('DEBUG');
          },
          enumerable: true,
          configurable: true
      });
      GPGPUContext.prototype.dispose = function () {
          var _this = this;
          if (this.disposed) {
              return;
          }
          if (this.program != null) {
              console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +
                  ' This is probably a resource leak, delete the program with ' +
                  'GPGPUContext.deleteProgram before disposing.');
          }
          if (this.outputTexture != null) {
              console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +
                  'texture.  This is probably a resource leak, delete the output ' +
                  'matrix texture with GPGPUContext.deleteMatrixTexture before ' +
                  'disposing.');
          }
          var gl = this.gl;
          callAndCheck(gl, function () { return gl.finish(); });
          callAndCheck(gl, function () { return gl.bindFramebuffer(gl.FRAMEBUFFER, null); });
          callAndCheck(gl, function () { return gl.deleteFramebuffer(_this.framebuffer); });
          callAndCheck(gl, function () { return gl.bindBuffer(gl.ARRAY_BUFFER, null); });
          callAndCheck(gl, function () { return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null); });
          callAndCheck(gl, function () { return gl.deleteBuffer(_this.indexBuffer); });
          this.disposed = true;
      };
      GPGPUContext.prototype.createFloat32MatrixTexture = function (rows, columns) {
          this.throwIfDisposed();
          return createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);
      };
      GPGPUContext.prototype.createFloat16MatrixTexture = function (rows, columns) {
          this.throwIfDisposed();
          return createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);
      };
      GPGPUContext.prototype.createUnsignedBytesMatrixTexture = function (rows, columns) {
          this.throwIfDisposed();
          return createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);
      };
      GPGPUContext.prototype.uploadPixelDataToTexture = function (texture, pixels) {
          this.throwIfDisposed();
          uploadPixelDataToTexture(this.gl, texture, pixels);
      };
      GPGPUContext.prototype.uploadDenseMatrixToTexture = function (texture, width, height, data) {
          this.throwIfDisposed();
          uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);
      };
      GPGPUContext.prototype.createFloat16PackedMatrixTexture = function (rows, columns) {
          this.throwIfDisposed();
          return createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);
      };
      GPGPUContext.prototype.createPackedMatrixTexture = function (rows, columns) {
          this.throwIfDisposed();
          return createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);
      };
      GPGPUContext.prototype.deleteMatrixTexture = function (texture) {
          var _this = this;
          this.throwIfDisposed();
          if (this.outputTexture === texture) {
              unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
              this.outputTexture = null;
          }
          callAndCheck(this.gl, function () { return _this.gl.deleteTexture(texture); });
      };
      GPGPUContext.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function (texture, rows, columns) {
          var _this = this;
          return this.downloadMatrixDriver(texture, function () { return downloadByteEncodedFloatMatrixFromOutputTexture(_this.gl, rows, columns, _this.textureConfig); });
      };
      GPGPUContext.prototype.downloadPackedMatrixFromBuffer = function (buffer, batch, rows, columns, physicalRows, physicalCols) {
          return downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);
      };
      GPGPUContext.prototype.downloadFloat32MatrixFromBuffer = function (buffer, size) {
          return downloadFloat32MatrixFromBuffer(this.gl, buffer, size);
      };
      GPGPUContext.prototype.createBufferFromTexture = function (texture, rows, columns) {
          this.bindTextureToFrameBuffer(texture);
          var result = createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);
          this.unbindTextureToFrameBuffer();
          return result;
      };
      GPGPUContext.prototype.createAndWaitForFence = function () {
          var fenceContext = this.createFence(this.gl);
          return this.pollFence(fenceContext);
      };
      GPGPUContext.prototype.createFence = function (gl) {
          var _this = this;
          var query;
          var isFencePassed;
          if (tf.env().getBool('WEBGL_FENCE_API_ENABLED')) {
              var gl2_1 = gl;
              var sync_1 = gl2_1.fenceSync(gl2_1.SYNC_GPU_COMMANDS_COMPLETE, 0);
              gl.flush();
              isFencePassed = function () {
                  var status = gl2_1.clientWaitSync(sync_1, 0, 0);
                  return status === gl2_1.ALREADY_SIGNALED ||
                      status === gl2_1.CONDITION_SATISFIED;
              };
              query = sync_1;
          }
          else if (tf.env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {
              query = this.beginQuery();
              this.endQuery();
              isFencePassed = function () { return _this.isQueryAvailable(query, tf.env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')); };
          }
          else {
              // If we have no way to fence, return true immediately. This will fire in
              // WebGL 1.0 when there is no disjoint query timer. In this case, because
              // the fence passes immediately, we'll immediately ask for a download of
              // the texture, which will cause the UI thread to hang.
              isFencePassed = function () { return true; };
          }
          return { query: query, isFencePassed: isFencePassed };
      };
      GPGPUContext.prototype.downloadMatrixFromPackedTexture = function (texture, physicalRows, physicalCols) {
          var _this = this;
          return this.downloadMatrixDriver(texture, function () { return downloadMatrixFromPackedOutputTexture(_this.gl, physicalRows, physicalCols); });
      };
      GPGPUContext.prototype.createProgram = function (fragmentShaderSource) {
          this.throwIfDisposed();
          var gl = this.gl;
          var fragmentShader = createFragmentShader(gl, fragmentShaderSource);
          var vertexShader = createVertexShader$1(gl);
          var program = createProgram(gl);
          callAndCheck(gl, function () { return gl.attachShader(program, vertexShader); });
          callAndCheck(gl, function () { return gl.attachShader(program, fragmentShader); });
          linkProgram(gl, program);
          if (this.debug) {
              validateProgram(gl, program);
          }
          if (!this.vertexAttrsAreBound) {
              this.setProgram(program);
              this.vertexAttrsAreBound = bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);
          }
          return program;
      };
      GPGPUContext.prototype.deleteProgram = function (program) {
          var _this = this;
          this.throwIfDisposed();
          if (program === this.program) {
              this.program = null;
          }
          if (program != null) {
              callAndCheck(this.gl, function () { return _this.gl.deleteProgram(program); });
          }
      };
      GPGPUContext.prototype.setProgram = function (program) {
          var _this = this;
          this.throwIfDisposed();
          this.program = program;
          if ((this.program != null) && this.debug) {
              validateProgram(this.gl, this.program);
          }
          callAndCheck(this.gl, function () { return _this.gl.useProgram(program); });
      };
      GPGPUContext.prototype.getUniformLocation = function (program, uniformName, shouldThrow) {
          if (shouldThrow === void 0) { shouldThrow = true; }
          this.throwIfDisposed();
          if (shouldThrow) {
              return getProgramUniformLocationOrThrow(this.gl, program, uniformName);
          }
          else {
              return getProgramUniformLocation(this.gl, program, uniformName);
          }
      };
      GPGPUContext.prototype.getAttributeLocation = function (program, attribute) {
          var _this = this;
          this.throwIfDisposed();
          return callAndCheck(this.gl, function () { return _this.gl.getAttribLocation(program, attribute); });
      };
      GPGPUContext.prototype.getUniformLocationNoThrow = function (program, uniformName) {
          this.throwIfDisposed();
          return this.gl.getUniformLocation(program, uniformName);
      };
      GPGPUContext.prototype.setInputMatrixTexture = function (inputMatrixTexture, uniformLocation, textureUnit) {
          this.throwIfDisposed();
          this.throwIfNoProgram();
          bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);
      };
      GPGPUContext.prototype.setOutputMatrixTexture = function (outputMatrixTexture, rows, columns) {
          this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);
      };
      GPGPUContext.prototype.setOutputPackedMatrixTexture = function (outputPackedMatrixTexture, rows, columns) {
          this.throwIfDisposed();
          var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), width = _a[0], height = _a[1];
          this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);
      };
      GPGPUContext.prototype.setOutputMatrixWriteRegion = function (startRow, numRows, startColumn, numColumns) {
          this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);
      };
      GPGPUContext.prototype.setOutputPackedMatrixWriteRegion = function (startRow, numRows, startColumn, numColumns) {
          throw new Error('setOutputPackedMatrixWriteRegion not implemented.');
      };
      GPGPUContext.prototype.debugValidate = function () {
          if (this.program != null) {
              validateProgram(this.gl, this.program);
          }
          validateFramebuffer(this.gl);
      };
      GPGPUContext.prototype.executeProgram = function () {
          this.throwIfDisposed();
          this.throwIfNoProgram();
          var gl = this.gl;
          if (this.debug) {
              this.debugValidate();
          }
          callAndCheck(gl, function () { return gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0); });
      };
      GPGPUContext.prototype.blockUntilAllProgramsCompleted = function () {
          var _this = this;
          this.throwIfDisposed();
          callAndCheck(this.gl, function () { return _this.gl.finish(); });
      };
      GPGPUContext.prototype.getQueryTimerExtension = function () {
          if (this.disjointQueryTimerExtension == null) {
              this.disjointQueryTimerExtension =
                  getExtensionOrThrow(this.gl, tf.env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?
                      'EXT_disjoint_timer_query_webgl2' :
                      'EXT_disjoint_timer_query');
          }
          return this.disjointQueryTimerExtension;
      };
      GPGPUContext.prototype.getQueryTimerExtensionWebGL2 = function () {
          return this.getQueryTimerExtension();
      };
      GPGPUContext.prototype.getQueryTimerExtensionWebGL1 = function () {
          return this.getQueryTimerExtension();
      };
      GPGPUContext.prototype.beginQuery = function () {
          if (tf.env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
              var gl2 = this.gl;
              var ext_1 = this.getQueryTimerExtensionWebGL2();
              var query_1 = gl2.createQuery();
              gl2.beginQuery(ext_1.TIME_ELAPSED_EXT, query_1);
              return query_1;
          }
          var ext = this.getQueryTimerExtensionWebGL1();
          var query = ext.createQueryEXT();
          ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);
          return query;
      };
      GPGPUContext.prototype.endQuery = function () {
          if (tf.env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
              var gl2 = this.gl;
              var ext_2 = this.getQueryTimerExtensionWebGL2();
              gl2.endQuery(ext_2.TIME_ELAPSED_EXT);
              return;
          }
          var ext = this.getQueryTimerExtensionWebGL1();
          ext.endQueryEXT(ext.TIME_ELAPSED_EXT);
      };
      GPGPUContext.prototype.waitForQueryAndGetTime = function (query) {
          return __awaiter(this, void 0, void 0, function () {
              var _this = this;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, tf.util.repeatedTry(function () { return _this.disposed || // while testing contexts are created / disposed
                              // in rapid succession, so without this check we
                              // may poll for the query timer indefinitely
                              _this.isQueryAvailable(query, tf.env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')); })];
                      case 1:
                          _a.sent();
                          return [2 /*return*/, this.getQueryTime(query, tf.env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'))];
                  }
              });
          });
      };
      GPGPUContext.prototype.getQueryTime = function (query, queryTimerVersion) {
          if (queryTimerVersion === 0) {
              return null;
          }
          if (queryTimerVersion === 2) {
              var gl2 = this.gl;
              var timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);
              // Return milliseconds.
              return timeElapsedNanos / 1000000;
          }
          else {
              var ext = this.getQueryTimerExtensionWebGL1();
              var timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);
              // Return milliseconds.
              return timeElapsedNanos / 1000000;
          }
      };
      GPGPUContext.prototype.isQueryAvailable = function (query, queryTimerVersion) {
          if (queryTimerVersion === 0) {
              return true;
          }
          if (queryTimerVersion === 2) {
              var gl2 = this.gl;
              var ext = this.getQueryTimerExtensionWebGL2();
              var available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);
              if (this.disjoint == null) {
                  this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
              }
              return available && !this.disjoint;
          }
          else {
              var ext = this.getQueryTimerExtensionWebGL1();
              var available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);
              if (this.disjoint == null) {
                  this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
              }
              return available && !this.disjoint;
          }
      };
      GPGPUContext.prototype.pollFence = function (fenceContext) {
          var _this = this;
          return new Promise(function (resolve) {
              _this.addItemToPoll(function () { return fenceContext.isFencePassed(); }, function () { return resolve(); });
          });
      };
      GPGPUContext.prototype.pollItems = function () {
          // Find the last query that has finished.
          var index = linearSearchLastTrue(this.itemsToPoll.map(function (x) { return x.isDoneFn; }));
          for (var i = 0; i <= index; ++i) {
              var resolveFn = this.itemsToPoll[i].resolveFn;
              resolveFn();
          }
          this.itemsToPoll = this.itemsToPoll.slice(index + 1);
      };
      GPGPUContext.prototype.addItemToPoll = function (isDoneFn, resolveFn) {
          var _this = this;
          this.itemsToPoll.push({ isDoneFn: isDoneFn, resolveFn: resolveFn });
          if (this.itemsToPoll.length > 1) {
              // We already have a running loop that polls.
              return;
          }
          // Start a new loop that polls.
          tf.util.repeatedTry(function () {
              _this.pollItems();
              // End the loop if no more items to poll.
              return _this.itemsToPoll.length === 0;
          });
      };
      GPGPUContext.prototype.bindTextureToFrameBuffer = function (texture) {
          this.throwIfDisposed();
          bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);
          if (this.debug) {
              validateFramebuffer(this.gl);
          }
      };
      GPGPUContext.prototype.unbindTextureToFrameBuffer = function () {
          if (this.outputTexture != null) {
              bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);
              if (this.debug) {
                  validateFramebuffer(this.gl);
              }
          }
          else {
              unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
          }
      };
      GPGPUContext.prototype.downloadMatrixDriver = function (texture, downloadAndDecode) {
          this.bindTextureToFrameBuffer(texture);
          var result = downloadAndDecode();
          this.unbindTextureToFrameBuffer();
          return result;
      };
      GPGPUContext.prototype.setOutputMatrixTextureDriver = function (outputMatrixTextureMaybePacked, width, height) {
          this.throwIfDisposed();
          var gl = this.gl;
          bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);
          if (this.debug) {
              validateFramebuffer(gl);
          }
          this.outputTexture = outputMatrixTextureMaybePacked;
          callAndCheck(gl, function () { return gl.viewport(0, 0, width, height); });
          callAndCheck(gl, function () { return gl.scissor(0, 0, width, height); });
      };
      GPGPUContext.prototype.setOutputMatrixWriteRegionDriver = function (x, y, width, height) {
          var _this = this;
          this.throwIfDisposed();
          callAndCheck(this.gl, function () { return _this.gl.scissor(x, y, width, height); });
      };
      GPGPUContext.prototype.throwIfDisposed = function () {
          if (this.disposed) {
              throw new Error('Attempted to use disposed GPGPUContext.');
          }
      };
      GPGPUContext.prototype.throwIfNoProgram = function () {
          if (this.program == null) {
              throw new Error('No GPU program is currently set.');
          }
      };
      return GPGPUContext;
  }());
  /**
   * Finds the index of the last true element using linear search.
   * Note: We can't do binary search because Chrome expects us to explicitly
   * test all fences before download:
   * https://github.com/tensorflow/tfjs/issues/1145
   */
  function linearSearchLastTrue(arr) {
      var i = 0;
      for (; i < arr.length; ++i) {
          var isDone = arr[i]();
          if (!isDone) {
              break;
          }
      }
      return i - 1;
  }

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function compileProgram(gpgpu, program, inputs, output) {
      var userCode = program.userCode;
      var inputInfos = inputs.map(function (input, i) {
          var shapeInfo = {
              logicalShape: input.shape,
              texShape: input.isUniform ? null : input.texData.texShape,
              isUniform: input.isUniform,
              isPacked: input.isUniform ? false : input.texData.isPacked,
              flatOffset: null
          };
          if (input.texData != null && input.texData.slice != null &&
              input.texData.slice.flatOffset > 0) {
              shapeInfo.flatOffset = input.texData.slice.flatOffset;
          }
          return { name: program.variableNames[i], shapeInfo: shapeInfo };
      });
      var inShapeInfos = inputInfos.map(function (x) { return x.shapeInfo; });
      var outShapeInfo = {
          logicalShape: output.shape,
          texShape: output.texData.texShape,
          isUniform: false,
          isPacked: output.texData.isPacked,
          flatOffset: null
      };
      var source = makeShader(inputInfos, outShapeInfo, userCode, program.packedInputs);
      var webGLProgram = gpgpu.createProgram(source);
      // Add special uniforms (NAN, INFINITY)
      var infLoc = null;
      var nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);
      if (tf.env().getNumber('WEBGL_VERSION') === 1) {
          infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);
      }
      // Add user-defined uniforms
      var uniformLocations = {};
      for (var i = 0; i < program.variableNames.length; i++) {
          var varName = program.variableNames[i];
          var shouldThrow = false;
          uniformLocations[varName] =
              gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);
          uniformLocations["offset" + varName] =
              gpgpu.getUniformLocation(webGLProgram, "offset" + varName, shouldThrow);
      }
      return {
          program: program,
          source: source,
          webGLProgram: webGLProgram,
          uniformLocations: uniformLocations,
          inShapeInfos: inShapeInfos,
          outShapeInfo: outShapeInfo,
          infLoc: infLoc,
          nanLoc: nanLoc,
      };
  }
  function validateBinaryAndProgram(shapeInfos, inputs) {
      if (shapeInfos.length !== inputs.length) {
          throw Error("Binary was compiled with " + shapeInfos.length + " inputs, but " +
              ("was executed with " + inputs.length + " inputs"));
      }
      shapeInfos.forEach(function (s, i) {
          var shapeA = s.logicalShape;
          var input = inputs[i];
          var shapeB = input.shape;
          if (!tf.util.arraysEqual(shapeA, shapeB)) {
              throw Error("Binary was compiled with different shapes than " +
                  ("the current args. Shapes " + shapeA + " and " + shapeB + " must match"));
          }
          // The input is uploaded as uniform.
          if (s.isUniform && input.isUniform) {
              return;
          }
          var texShapeA = s.texShape;
          var texShapeB = input.isUniform ? null : input.texData.texShape;
          if (!tf.util.arraysEqual(texShapeA, texShapeB)) {
              throw Error("Binary was compiled with different texture shapes than the" +
                  (" current args. Shape " + texShapeA + " and " + texShapeB + " must match"));
          }
      });
  }
  function runProgram(gpgpu, binary, inputs, output, customSetup) {
      validateBinaryAndProgram(binary.inShapeInfos, inputs);
      validateBinaryAndProgram([binary.outShapeInfo], [output]);
      var outTex = output.texData.texture;
      var outTexShape = output.texData.texShape;
      if (output.texData.isPacked) {
          gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);
      }
      else {
          gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);
      }
      gpgpu.setProgram(binary.webGLProgram);
      // Set special uniforms (NAN, INFINITY)
      if (tf.env().getNumber('WEBGL_VERSION') === 1) {
          if (binary.infLoc !== null) {
              gpgpu.gl.uniform1f(binary.infLoc, Infinity);
          }
      }
      if (binary.nanLoc !== null) {
          gpgpu.gl.uniform1f(binary.nanLoc, NaN);
      }
      // Set user-defined inputs
      inputs.forEach(function (input, i) {
          var varName = binary.program.variableNames[i];
          var varLoc = binary.uniformLocations[varName];
          var varOffsetLoc = binary.uniformLocations["offset" + varName];
          if (varLoc == null) {
              // The compiler inferred that this variable is not used in this shader.
              return;
          }
          if (input.isUniform) {
              // Upload the values of the tensor as uniform.
              if (tf.util.sizeFromShape(input.shape) < 2) {
                  gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);
              }
              else {
                  var vals = input.uniformValues;
                  if (!(vals instanceof Float32Array)) {
                      vals = new Float32Array(vals);
                  }
                  gpgpu.gl.uniform1fv(varLoc, vals);
              }
              return;
          }
          // If the input was sliced, upload the flat offset index.
          if (input.texData.slice != null && varOffsetLoc != null) {
              gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);
          }
          gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);
      });
      if (customSetup != null) {
          customSetup(gpgpu, binary.webGLProgram);
      }
      gpgpu.executeProgram();
  }
  function makeShaderKey(program, inputs, output) {
      var keyInputs = '';
      inputs.concat(output).forEach(function (x) {
          var hasOffset = x.texData != null && x.texData.slice != null &&
              x.texData.slice.flatOffset > 0;
          var texShape = x.isUniform ? 'uniform' : x.texData.texShape;
          keyInputs += x.shape + "_" + texShape + "_" + hasOffset;
      });
      var keyUserCode = program.userCode;
      var key = program.constructor.name;
      // Fast string concat. See https://jsperf.com/string-concatenation/14.
      key += '_' + keyInputs + '_' + keyUserCode;
      return key;
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var Im2ColPackedProgram = /** @class */ (function () {
      function Im2ColPackedProgram(outputShape, inputShape, convInfo) {
          this.variableNames = ['A'];
          this.packedInputs = true;
          this.packedOutput = true;
          this.outputShape = outputShape;
          var filterWidth = convInfo.filterWidth, inChannels = convInfo.inChannels, strideWidth = convInfo.strideWidth, strideHeight = convInfo.strideHeight, padInfo = convInfo.padInfo, outWidth = convInfo.outWidth, dilationWidth = convInfo.dilationWidth, dilationHeight = convInfo.dilationHeight, dataFormat = convInfo.dataFormat;
          var left = padInfo.left, top = padInfo.top;
          var itemsPerBlockRow = inChannels * filterWidth;
          var glsl = getGlslDifferences();
          var isChannelsLast = dataFormat === 'channelsLast';
          var rowDim = isChannelsLast ? 0 : 1;
          var colDim = isChannelsLast ? 1 : 2;
          var unrolled = "";
          for (var row = 0; row <= 1; row++) {
              for (var col = 0; col <= 1; col++) {
                  unrolled += "\n          blockIndex = rc.y + " + col + ";\n          pos = rc.x + " + row + ";\n\n          if(blockIndex < " + outputShape[1] + " && pos < " + outputShape[0] + ") {\n            offsetY = int(blockIndex / (" + outWidth + ")) * " + strideHeight + " - " + top + ";\n            d0 = offsetY + " + dilationHeight + " * (pos / " + itemsPerBlockRow + ");\n\n            if(d0 < " + inputShape[rowDim] + " && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), " + outWidth + ".) * " + strideWidth + ". - " + left + ".);\n              d1 = offsetX + " + dilationWidth + " * (int(mod(float(pos), " + itemsPerBlockRow + ".) / " + inChannels + ".));\n\n              if(d1 < " + inputShape[colDim] + " && d1 >= 0) {\n\n                ch = int(mod(float(pos), " + inChannels + ".));\n\n                if (" + isChannelsLast + ") {\n                  innerDims = vec2(d1, ch);\n                  result[" + (row * 2 + col) + "] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[" + (row * 2 + col) + "] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";
              }
          }
          this.userCode = "\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        " + unrolled + "\n\n        " + glsl.output + " = result;\n      }\n    ";
      }
      return Im2ColPackedProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var LRNProgram = /** @class */ (function () {
      function LRNProgram(xShape, radius, bias, alpha, beta) {
          this.variableNames = ['x'];
          this.outputShape = [];
          var rad = radius;
          var maxD = xShape[3] - 1;
          this.outputShape = xShape;
          // optimize pow(bias + alpha * sum, -beta)
          // src: https://github.com/tensorflow/tensorflow/..
          // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..
          // tensorflow/core/kernels/mkl_lrn_op.cc#L320
          var powOperator;
          var basis = "float(" + bias + ") + float(" + alpha + ") * sum";
          if (beta === 0.5) {
              powOperator = "inversesqrt(" + basis + ")";
          }
          else if (beta === 1.0) {
              powOperator = "1.0/(" + basis + ")";
          }
          else {
              powOperator = "exp(log(" + basis + ") * float(-" + beta + "));";
          }
          this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" + rad + "; j <= " + rad + "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " + maxD + ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " + powOperator + ";\n        setOutput(val);\n      }\n    ";
      }
      return LRNProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var LRNGradProgram = /** @class */ (function () {
      function LRNGradProgram(inputShape, depthRadius, bias, alpha, beta) {
          this.variableNames = ['inputImage', 'outputImage', 'dy'];
          this.outputShape = [];
          this.outputShape = inputShape;
          this.depth = inputShape[3];
          this.depthRadius = depthRadius;
          this.bias = bias;
          this.alpha = alpha;
          this.beta = beta;
          this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < " + this.depth + "; ++d) {\n          int depthBegin = int(max(0.0, float(d - " + depthRadius + ")));\n          int depthEnd = int(min(float(" + this.depth + "),\n              float(d + " + depthRadius + " + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = " + this.depth + ";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(" + alpha + ") * norm + float(" + bias + ");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(" + alpha + ")\n                * float(" + beta + ")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * " + beta + ");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ";
      }
      return LRNGradProgram;
  }());

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var LRNPackedProgram = /** @class */ (function () {
      function LRNPackedProgram(xShape, radius, bias, alpha, beta) {
          this.variableNames = ['x'];
          this.outputShape = [];
          this.packedInputs = true;
          this.packedOutput = true;
          var rad = radius;
          var maxD = xShape[3] - 1;
          this.outputShape = xShape;
          // optimize pow(bias + alpha * sum, -beta)
          // src: https://github.com/tensorflow/tensorflow/..
          // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..
          // tensorflow/core/kernels/mkl_lrn_op.cc#L320
          var powOperator;
          var basis = "float(" + bias + ") + float(" + alpha + ") * sum";
          if (beta === 0.5) {
              powOperator = "inversesqrt(" + basis + ")";
          }
          else if (beta === 1.0) {
              powOperator = "1.0/(" + basis + ")";
          }
          else {
              powOperator = "exp(log(" + basis + ") * float(-" + beta + "));";
          }
          this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < " + this.outputShape[3] + ";\n        bool hasNextRow = c < " + this.outputShape[2] + ";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - " + rad + ";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - " + rad + "; j <= " + rad + "; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(" + maxD + "));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * " + powOperator + ";\n        setOutput(result);\n      }\n    ";
      }
      return LRNPackedProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var MaxPool2DBackpropProgram = /** @class */ (function () {
      function MaxPool2DBackpropProgram(convInfo) {
          this.variableNames = ['dy', 'maxPos'];
          this.outputShape = convInfo.inShape;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var dilationHeight = convInfo.dilationHeight;
          var effectiveFilterHeight = convInfo.effectiveFilterHeight;
          var effectiveFilterWidth = convInfo.effectiveFilterWidth;
          var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
          var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
          var lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;
          this.userCode = "\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + effectiveFilterHeight + ";\n          wR += " + dilationHeight + ") {\n          float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n          if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + effectiveFilterWidth + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n            if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " + lastIndex + " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " + effectiveFilterWidth + " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      }
      return MaxPool2DBackpropProgram;
  }());
  var MaxPool3DBackpropProgram = /** @class */ (function () {
      function MaxPool3DBackpropProgram(convInfo) {
          this.variableNames = ['dy', 'maxPos'];
          this.outputShape = convInfo.inShape;
          var strideDepth = convInfo.strideDepth;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var dilationDepth = convInfo.dilationDepth;
          var dilationHeight = convInfo.dilationHeight;
          var dilationWidth = convInfo.dilationWidth;
          var effectiveFilterDepth = convInfo.effectiveFilterDepth;
          var effectiveFilterHeight = convInfo.effectiveFilterHeight;
          var effectiveFilterWidth = convInfo.effectiveFilterWidth;
          var padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
          var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
          var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
          var lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;
          this.userCode = "\n      const ivec3 pads = ivec3(" + padFront + ", " + padTop + ", " + padLeft + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < " + effectiveFilterDepth + ";\n           wD += " + dilationDepth + ") {\n          float dyD = float(dyDCorner + wD) / " + strideDepth + ".0;\n\n          if (dyD < 0.0 || dyD >= " + convInfo.outDepth + ".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < " + effectiveFilterHeight + ";\n              wR += " + dilationHeight + ") {\n            float dyR = float(dyRCorner + wR) / " + strideHeight + ".0;\n\n            if (dyR < 0.0 || dyR >= " + convInfo.outHeight + ".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < " + effectiveFilterWidth + ";\n                wC += " + dilationWidth + ") {\n              float dyC = float(dyCCorner + wC) / " + strideWidth + ".0;\n\n              if (dyC < 0.0 || dyC >= " + convInfo.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = " + lastIndex + " -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * " + effectiveFilterHeight + " * " + effectiveFilterWidth + " +\n                  wR * " + effectiveFilterWidth + " + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
      }
      return MaxPool3DBackpropProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var MatMulPackedProgram = /** @class */ (function () {
      function MatMulPackedProgram(aShape, outputShape, transposeA, transposeB, addBias, activation, hasPreluActivation) {
          if (transposeA === void 0) { transposeA = false; }
          if (transposeB === void 0) { transposeB = false; }
          if (addBias === void 0) { addBias = false; }
          if (activation === void 0) { activation = null; }
          if (hasPreluActivation === void 0) { hasPreluActivation = false; }
          this.variableNames = ['matrixA', 'matrixB'];
          this.packedInputs = true;
          this.packedOutput = true;
          this.outputShape = outputShape;
          var sharedDim = transposeA ? aShape[1] : aShape[2];
          var sharedDimensionPacked = Math.ceil(sharedDim / 2);
          var aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';
          var bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';
          var aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];
          var bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];
          var activationSnippet = '', applyActivationSnippet = '';
          if (activation) {
              if (hasPreluActivation) {
                  activationSnippet = "vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          " + activation + "\n        }";
              }
              else {
                  activationSnippet = "vec4 activation(vec4 x) {\n          " + activation + "\n        }";
              }
              applyActivationSnippet = "result = activation(result);";
          }
          var addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
          if (addBias) {
              this.variableNames.push('bias');
          }
          if (hasPreluActivation) {
              this.variableNames.push('preluActivationWeights');
          }
          this.userCode = "\n      " + activationSnippet + "\n\n      const float sharedDimension = " + sharedDimensionPacked + ".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < " + sharedDimensionPacked + "; i++) {\n          vec4 a = getMatrixA(rc.x, " + aSample + ");\n          vec4 b = getMatrixB(rc.x, " + bSample + ");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (" + aSwizzle[0] + " * " + bSwizzle[0] + ");\n          result += (" + aSwizzle[1] + " * " + bSwizzle[1] + ");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        " + addBiasSnippet + "\n\n        " + applyActivationSnippet + "\n\n        setOutput(result);\n      }\n    ";
      }
      return MatMulPackedProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var MultinomialProgram = /** @class */ (function () {
      function MultinomialProgram(batchSize, numOutcomes, numSamples) {
          this.variableNames = ['probs'];
          this.outputShape = [batchSize, numSamples];
          this.userCode = "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " + (numOutcomes - 1) + "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" + (numOutcomes - 1) + "));\n      }\n    ";
      }
      MultinomialProgram.prototype.getCustomSetupFunc = function (seed) {
          var _this = this;
          return function (gpgpu, webGLProgram) {
              if (_this.seedLoc == null) {
                  _this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');
              }
              gpgpu.gl.uniform1f(_this.seedLoc, seed);
          };
      };
      return MultinomialProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var OneHotProgram = /** @class */ (function () {
      function OneHotProgram(numIndices, depth, onValue, offValue) {
          this.variableNames = ['indices'];
          this.outputShape = [numIndices, depth];
          this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" + offValue + "), float(" + onValue + "),\n                      float(index == coords.y)));\n      }\n    ";
      }
      return OneHotProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var PackProgram = /** @class */ (function () {
      function PackProgram(outputShape) {
          this.variableNames = ['A'];
          this.packedInputs = false;
          this.packedOutput = true;
          // Only input / output 3D tensors.
          this.outputShape = outputShape;
          var rank = outputShape.length;
          if (rank === 0) {
              this.userCode = "\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";
          }
          else {
              var channels = getChannels('rc', rank);
              var dtype = getCoordsDataType(rank);
              var outOfBoundsCondition = getOutOfBoundsCondition(rank, outputShape, channels);
              var setup = getSetup(rank, outputShape[outputShape.length - 1], outputShape[outputShape.length - 2], channels);
              var output = getOutput(outputShape, channels);
              this.userCode = "\n        void main() {\n          " + dtype + " rc = getOutputCoords();\n\n          if(" + outOfBoundsCondition + ") {\n            setOutput(vec4(0));\n          } else {\n            " + setup + "\n\n            setOutput(vec4(" + output + "));\n          }\n        }\n      ";
          }
      }
      return PackProgram;
  }());
  function getSourceCoordsArr(rank, dims) {
      var coords = [];
      for (var row = 0; row <= 1; row++) {
          for (var col = 0; col <= 1; col++) {
              var coord = (row === 0 ? 'r' : 'rp1') + ", " + (col === 0 ? 'c' : 'cp1');
              for (var d = 2; d < rank; d++) {
                  coord = dims[dims.length - 1 - d] + "," + coord;
              }
              coords.push(coord);
          }
      }
      return coords;
  }
  function getOutOfBoundsCondition(rank, shape, dims) {
      if (rank === 1) {
          return "rc > " + shape[0];
      }
      var cond = '';
      for (var i = rank - 2; i < rank; i++) {
          cond += dims[i] + " >= " + shape[i];
          if (i < rank - 1) {
              cond += '||';
          }
      }
      return cond;
  }
  function getSetup(rank, cols, rows, dims) {
      if (rank === 1) {
          return '';
      }
      var innerDims = dims.slice(-2);
      return "\n    int r = " + innerDims[0] + ";\n    int c = " + innerDims[1] + ";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= " + cols + ";\n    bool rEdge = rp1 >= " + rows + ";\n  ";
  }
  function getOutput(shape, dims) {
      var rank = shape.length;
      var sourceCoords = getSourceCoordsArr(rank, dims);
      if (rank === 1) {
          return "getA(rc),\n            rc + 1 >= " + shape[0] + " ? 0. : getA(rc + 1),\n            0, 0";
      }
      return "getA(" + sourceCoords[0] + "),\n          cEdge ? 0. : getA(" + sourceCoords[1] + "),\n          rEdge ? 0. : getA(" + sourceCoords[2] + "),\n          rEdge || cEdge ? 0. : getA(" + sourceCoords[3] + ")";
  }

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var PadProgram = /** @class */ (function () {
      function PadProgram(xShape, paddings, constantValue) {
          this.variableNames = ['x'];
          this.outputShape = paddings.map(function (p, i) { return p[0] /* beforePad */ + xShape[i] + p[1]; } /* afterPad */);
          var rank = xShape.length;
          var type = getCoordsDataType(rank);
          var start = paddings.map(function (p) { return p[0]; }).join(',');
          var end = paddings.map(function (p, i) { return p[0] + xShape[i]; }).join(',');
          var unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);
          if (rank === 1) {
              this.userCode = "\n        int start = " + start + ";\n        int end = " + end + ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" + constantValue + "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
              return;
          }
          this.userCode = "\n      " + type + " start = " + type + "(" + start + ");\n      " + type + " end = " + type + "(" + end + ");\n\n      void main() {\n        " + type + " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" + constantValue + "));\n        } else {\n          " + type + " coords = outC - start;\n          setOutput(getX(" + unpackedCoords + "));\n        }\n      }\n    ";
      }
      return PadProgram;
  }());

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var PadPackedProgram = /** @class */ (function () {
      function PadPackedProgram(xShape, paddings, constantValue) {
          this.variableNames = ['x'];
          this.packedInputs = true;
          this.packedOutput = true;
          this.outputShape = paddings.map(function (p, i) { return p[0] /* beforePad */ + xShape[i] + p[1]; } /* afterPad */);
          var rank = xShape.length;
          var dtype = getCoordsDataType(rank);
          var start = paddings.map(function (p) { return p[0]; }).join(',');
          var end = paddings.map(function (p, i) { return p[0] + xShape[i]; }).join(',');
          var coords = getChannels('rc', rank);
          var source = getChannels('source', rank);
          var cLimit = coords[rank - 1] + " < " + this.outputShape[rank - 1];
          var innerDims = rank === 1 ? 'source' : "vec2(" + source.slice(-2).join() + ")";
          var componentSetup = [
              dtype + " rc = outputLoc;", coords[rank - 1] + " += 1;\n       if(" + cLimit + ") {\n      ",
              rank === 1 ? '' : "}\n       rc = outputLoc;\n       " + coords[rank - 2] + " += 1;\n       if(" + coords[rank - 2] + " < " + this.outputShape[rank - 2] + ") {",
              rank === 1 ? '' : "  " + coords[rank - 1] + " += 1;\n         if(" + cLimit + ") {"
          ];
          var paddingArea = rank === 1 ?
              'rc < start || rc >= end' :
              'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';
          var mainLoop = '';
          for (var i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {
              mainLoop += "\n        " + componentSetup[i] + "\n        if (" + paddingArea + ") {\n          result[" + i + "] = float(" + constantValue + ");\n        } else {\n          " + dtype + " source = rc - start;\n          result[" + i + "] = getChannel(getX(" + source.join() + "), " + innerDims + ");\n        }\n      ";
          }
          mainLoop += (rank === 1 ? "} " : "}}");
          this.userCode = "\n      const " + dtype + " start = " + dtype + "(" + start + ");\n      const " + dtype + " end = " + dtype + "(" + end + ");\n\n      void main() {\n        " + dtype + " outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        " + mainLoop + "\n        setOutput(result);\n      }\n    ";
      }
      return PadPackedProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var Pool2DProgram = /** @class */ (function () {
      function Pool2DProgram(convInfo, poolType, computePositions, flattenPositions, includeBatchInIndex) {
          if (flattenPositions === void 0) { flattenPositions = false; }
          if (includeBatchInIndex === void 0) { includeBatchInIndex = false; }
          this.variableNames = ['x'];
          if (poolType === 'avg' && computePositions) {
              throw new Error('Cannot compute positions for average pool.');
          }
          var filterWidth = convInfo.filterWidth;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var dilationHeight = convInfo.dilationHeight;
          var dilationWidth = convInfo.dilationWidth;
          var effectiveFilterHeight = convInfo.effectiveFilterHeight;
          var effectiveFilterWidth = convInfo.effectiveFilterWidth;
          var padTop = convInfo.padInfo.top;
          var padLeft = convInfo.padInfo.left;
          this.outputShape = convInfo.outShape;
          var isAvgPool = poolType === 'avg';
          var batchFlattenPositionStr = "((batch  * " + convInfo.inHeight + " + xR) * " + convInfo.inWidth + " + xC) * " + convInfo.inChannels + " + d";
          var flattenPositionStr = "(xR * " + convInfo.inWidth + " + xC) * " + convInfo.inChannels + " + d";
          var initializationValue = '0.0';
          if (!isAvgPool) {
              // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
              initializationValue = '-1.0 / 1e-20';
          }
          if (computePositions) {
              var compareOp_1 = '>=';
              this.userCode = "\n        const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n        const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " + effectiveFilterHeight + ";\n              wR += " + dilationHeight + ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + effectiveFilterWidth + ";\n                wC += " + dilationWidth + ") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value " + compareOp_1 + " currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = " + (flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :
                  flattenPositionStr) :
                  "wR * " + effectiveFilterWidth + " + wC") + ";\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
              return;
          }
          var compareOp = 'max';
          var returnValue = poolType + "(" + poolType + "(" + poolType + "(" +
              'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
          if (poolType === 'avg') {
              returnValue = "avgValue / count";
          }
          var filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
          var filterWidthVec4Remainder = filterWidth % 4;
          var updateSnippet = "\n      if (" + isAvgPool + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = " + compareOp + "(values, minMaxValue);\n      }\n    ";
          this.userCode = "\n      const ivec2 strides = ivec2(" + strideHeight + ", " + strideWidth + ");\n      const ivec2 pads = ivec2(" + padTop + ", " + padLeft + ");\n      const float initializationValue = " + initializationValue + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + initializationValue + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " + effectiveFilterHeight + ";\n            wR += " + dilationHeight + ") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + filterWidthNearestVec4 + "; wC += 4) {\n            int xC = xCCorner + wC * " + dilationWidth + ";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + dilationWidth + ", d),\n              getValue(batch, xR, xC + 2 * " + dilationWidth + ", d),\n              getValue(batch, xR, xC + 3 * " + dilationWidth + ", d)\n            );\n\n            " + updateSnippet + "\n          }\n\n          int xC = xCCorner + " + filterWidthNearestVec4 + ";\n          if (" + (filterWidthVec4Remainder === 1) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " + updateSnippet + "\n          } else if (" + (filterWidthVec4Remainder === 2) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + dilationWidth + ", d),\n              initializationValue,\n              initializationValue\n            );\n\n            " + updateSnippet + "\n          } else if (" + (filterWidthVec4Remainder === 3) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + dilationWidth + ", d),\n              getValue(batch, xR, xC + 2 * " + dilationWidth + ", d),\n              initializationValue\n            );\n\n            " + updateSnippet + "\n          }\n        }\n        setOutput(" + returnValue + ");\n      }\n    ";
      }
      return Pool2DProgram;
  }());
  var Pool3DProgram = /** @class */ (function () {
      function Pool3DProgram(convInfo, poolType, computePositions, flattenPositions, includeBatchInIndex) {
          if (flattenPositions === void 0) { flattenPositions = false; }
          if (includeBatchInIndex === void 0) { includeBatchInIndex = false; }
          this.variableNames = ['x'];
          if (poolType === 'avg' && computePositions) {
              throw new Error('Cannot compute positions for average pool.');
          }
          var filterWidth = convInfo.filterWidth;
          var strideDepth = convInfo.strideDepth;
          var strideHeight = convInfo.strideHeight;
          var strideWidth = convInfo.strideWidth;
          var dilationDepth = convInfo.dilationDepth;
          var dilationHeight = convInfo.dilationHeight;
          var dilationWidth = convInfo.dilationWidth;
          var effectiveFilterDepth = convInfo.effectiveFilterDepth;
          var effectiveFilterHeight = convInfo.effectiveFilterHeight;
          var effectiveFilterWidth = convInfo.effectiveFilterWidth;
          var padFront = convInfo.padInfo.front;
          var padTop = convInfo.padInfo.top;
          var padLeft = convInfo.padInfo.left;
          this.outputShape = convInfo.outShape;
          var isAvgPool = poolType === 'avg';
          var initializationValue = '0.0';
          if (!isAvgPool) {
              // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
              initializationValue = '-1.0 / 1e-20';
          }
          if (computePositions) {
              var compareOp_2 = '>=';
              this.userCode = "\n        const ivec3 strides =\n            ivec3(" + strideDepth + ", " + strideHeight + ", " + strideWidth + ");\n        const ivec3 pads = ivec3(" + padFront + ", " + padTop + ", " + padLeft + ");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < " + effectiveFilterDepth + ";\n              wD += " + dilationDepth + ") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= " + convInfo.inDepth + ") {\n              continue;\n            }\n\n            for (int wR = 0; wR < " + effectiveFilterHeight + ";\n                wR += " + dilationHeight + ") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n                continue;\n              }\n\n              for (int wC = 0; wC < " + effectiveFilterWidth + ";\n                  wC += " + dilationWidth + ") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value " + compareOp_2 + " currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = " + (flattenPositions ?
                  (includeBatchInIndex ?
                      "(((batch * " + convInfo.inDepth + " + xD) * " + convInfo.inHeight + " + xR) * " + convInfo.inWidth + " + xC) * " + convInfo.inChannels + " + ch" :
                      "((xD * " + convInfo.inHeight + " + xR) * " + convInfo.inWidth + " + xC) * " + convInfo.inChannels + " + ch") :
                  "wD * " + effectiveFilterHeight + " * " + effectiveFilterWidth + " +\n                      wR * " + effectiveFilterWidth + " + wC") + ";\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
              return;
          }
          var compareOp = 'max';
          var returnValue = poolType + "(" + poolType + "(" + poolType + "(" +
              'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
          if (poolType === 'avg') {
              returnValue = "avgValue / count";
          }
          var filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
          var filterWidthVec4Remainder = filterWidth % 4;
          var updateSnippet = "\n      if (" + isAvgPool + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = " + compareOp + "(values, minMaxValue);\n      }\n    ";
          this.userCode = "\n      const ivec3 strides =\n        ivec3(" + strideDepth + ", " + strideHeight + ", " + strideWidth + ");\n      const ivec3 pads = ivec3(" + padFront + ", " + padTop + ", " + padLeft + ");\n      const float initializationValue = " + initializationValue + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= " + convInfo.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + initializationValue + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < " + effectiveFilterDepth + ";\n            wD += " + dilationDepth + ") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= " + convInfo.inDepth + ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " + effectiveFilterHeight + ";\n            wR += " + dilationHeight + ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + convInfo.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + filterWidthNearestVec4 + "; wC += 4) {\n              int xC = xCCorner + wC * " + dilationWidth + ";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " + dilationWidth + ", ch),\n                getValue(batch, xD, xR, xC + 2 * " + dilationWidth + ", ch),\n                getValue(batch, xD, xR, xC + 3 * " + dilationWidth + ", ch)\n              );\n\n              " + updateSnippet + "\n            }\n\n            int xC = xCCorner + " + filterWidthNearestVec4 + ";\n            if (" + (filterWidthVec4Remainder === 1) + ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              " + updateSnippet + "\n            } else if (" + (filterWidthVec4Remainder === 2) + ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " + dilationWidth + ", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              " + updateSnippet + "\n            } else if (" + (filterWidthVec4Remainder === 3) + ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " + dilationWidth + ", ch),\n                getValue(batch, xD, xR, xC + 2 * " + dilationWidth + ", ch),\n                initializationValue\n              );\n\n              " + updateSnippet + "\n            }\n          }\n          setOutput(" + returnValue + ");\n        }\n      }\n    ";
      }
      return Pool3DProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ReduceProgram = /** @class */ (function () {
      function ReduceProgram(reduceInfo, reduceType) {
          this.variableNames = ['x'];
          var windowSize = reduceInfo.windowSize;
          var batchSize = reduceInfo.batchSize;
          var inSize = reduceInfo.inSize;
          var outSize = Math.ceil(inSize / windowSize);
          this.outputShape = [batchSize, outSize];
          var initializationValue = '0.0';
          var compareOp = "";
          if (reduceType === 'prod') {
              initializationValue = '1.0';
          }
          else if (reduceType === 'min') {
              // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
              initializationValue = '1.0 / 1e-20';
              compareOp = "min";
          }
          else if (reduceType === 'max') {
              // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
              initializationValue = '-1.0 / 1e-20';
              compareOp = "max";
          }
          var returnValue = reduceType + "(" + reduceType + "(" + reduceType + "(" +
              'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
          if (reduceType === 'sum') {
              returnValue = "sumValue";
          }
          else if (reduceType === 'prod') {
              returnValue = "prodValue";
          }
          else if (reduceType === 'all') {
              returnValue = "allValue";
          }
          else if (reduceType === 'any') {
              returnValue = "anyValue";
          }
          var windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
          var windowSizeVec4Remainder = windowSize % 4;
          var updateSnippet = "\n      if (" + (reduceType === 'sum') + ") {\n        sumValue += dot(values, ones);\n      } else if (" + (reduceType === 'prod') + ") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = " + compareOp + "(values, minMaxValue);\n      }\n    ";
          var vecType = "vec4";
          if (reduceType === 'all') {
              initializationValue = '1.0';
              updateSnippet = "\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ";
              vecType = "bvec4";
          }
          else if (reduceType === 'any') {
              initializationValue = '0.0';
              updateSnippet = "\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ";
              vecType = "bvec4";
          }
          var checkOutOfBounds = '';
          if (inSize % windowSize > 0) {
              checkOutOfBounds = "\n        if (inIdx < 0 || inIdx >= " + inSize + ") {\n          return initializationValue;\n        }\n      ";
          }
          this.userCode = "\n      const float initializationValue = " + initializationValue + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " + checkOutOfBounds + "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + windowSize + ";\n\n        vec4 minMaxValue = vec4(" + initializationValue + ");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < " + windowSizeNearestVec4 + "; i += 4) {\n          int inIdx = inOffset + i;\n          " + vecType + " values = " + vecType + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " + updateSnippet + "\n        }\n\n        int inIdx = inOffset + " + windowSizeNearestVec4 + ";\n        if (" + (windowSizeVec4Remainder === 1) + ") {\n          " + vecType + " values = " + vecType + "(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          " + updateSnippet + "\n        } else if (" + (windowSizeVec4Remainder === 2) + ") {\n          " + vecType + " values = " + vecType + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          " + updateSnippet + "\n        } else if (" + (windowSizeVec4Remainder === 3) + ") {\n          " + vecType + " values = " + vecType + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          " + updateSnippet + "\n        }\n        setOutput(" + returnValue + ");\n      }\n    ";
      }
      return ReduceProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ReshapePackedProgram = /** @class */ (function () {
      function ReshapePackedProgram(outputShape, inputShape) {
          this.variableNames = ['A'];
          this.packedInputs = true;
          this.packedOutput = true;
          this.outputShape = outputShape;
          var mainLoop = "";
          for (var i = 0; i < 4; i++) {
              var thisRC = "thisRC = rc;";
              if (i % 2 === 1) {
                  thisRC += "thisRC.z += 1;";
              }
              if (i > 1) {
                  thisRC += "thisRC.y += 1;";
              }
              mainLoop += "\n        " + thisRC + "\n        " + (i > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : '') + "\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[" + i + "] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        " + (i > 0 ? '}' : '') + "\n      ";
          }
          this.userCode = "\n      " + getReshapedInputCoords(inputShape) + "\n      " + getFlatIndexFrom3D(outputShape) + "\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = " + outputShape[1] + ";\n        int cols = " + outputShape[2] + ";\n\n        " + mainLoop + "\n\n        setOutput(result);\n      }\n    ";
      }
      return ReshapePackedProgram;
  }());
  function getReshapedInputCoords(shape) {
      var coordsFromIndexSnippet = getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);
      return "\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      " + coordsFromIndexSnippet + "\n      return ivec3(r, c, d);\n    }\n  ";
  }

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ResizeBilinearBackpropProgram = /** @class */ (function () {
      function ResizeBilinearBackpropProgram(dy, x, alignCorners) {
          this.variableNames = ['dy'];
          this.outputShape = [];
          this.outputShape = x.shape;
          var _a = x.shape, xHeight = _a[1], xWidth = _a[2];
          var _b = dy.shape, yHeight = _b[1], yWidth = _b[2];
          // In the backwards pass, we want to find the pixels that were generated for
          // each pixel in the input image the forward pass and add the corresponding
          // coefficient from dy to the gradient (with some interpolation).
          var effectiveXSize = [
              (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,
              (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth
          ];
          var effectiveYSize = [
              (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,
              (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth
          ];
          var heightScale = effectiveXSize[0] / effectiveYSize[0];
          var widthScale = effectiveXSize[1] / effectiveYSize[1];
          var invHeightScale = 1 / heightScale;
          var invWidthScale = 1 / widthScale;
          // This defines the size of the window of values around a particular
          // index in dy that we want to search for contributions to dx.
          var winHeight = (Math.ceil(invHeightScale) * 2) + 2;
          var winWidth = (Math.ceil(invWidthScale) * 2) + 2;
          this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + heightScale + ");\n        const float widthScale = float(" + widthScale + ");\n\n        const float invHeightScale = float(" + invHeightScale + ");\n        const float invWidthScale = float(" + invWidthScale + ");\n\n        const int winHeight = int(" + winHeight + ");\n        const int winWidth = int(" + winWidth + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + yHeight + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + yWidth + ") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), " + (xHeight - 1) + ".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), " + (xWidth - 1) + ".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
      }
      return ResizeBilinearBackpropProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ResizeBilinearProgram = /** @class */ (function () {
      function ResizeBilinearProgram(inputShape, newHeight, newWidth, alignCorners) {
          this.variableNames = ['A'];
          this.outputShape = [];
          var batch = inputShape[0], oldHeight = inputShape[1], oldWidth = inputShape[2], depth = inputShape[3];
          this.outputShape = [batch, newHeight, newWidth, depth];
          var effectiveInSize = [
              (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,
              (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth
          ];
          var effectiveOutSize = [
              (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,
              (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth
          ];
          this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + effectiveInSize[0] / effectiveOutSize[0] + ",\n          " + effectiveInSize[1] / effectiveOutSize[1] + ");\n      const vec2 inputShapeRC = vec2(" + oldHeight + ".0, " + oldWidth + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
      }
      return ResizeBilinearProgram;
  }());

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ResizeBilinearPackedProgram = /** @class */ (function () {
      function ResizeBilinearPackedProgram(inputShape, newHeight, newWidth, alignCorners) {
          this.variableNames = ['A'];
          this.packedInputs = true;
          this.packedOutput = true;
          this.outputShape = [];
          var batch = inputShape[0], oldHeight = inputShape[1], oldWidth = inputShape[2], depth = inputShape[3];
          this.outputShape = [batch, newHeight, newWidth, depth];
          var effectiveInSize = [
              (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,
              (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth
          ];
          var effectiveOutSize = [
              (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,
              (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth
          ];
          this.userCode = "\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          " + effectiveInSize[0] / effectiveOutSize[0] + ",\n          " + effectiveInSize[1] / effectiveOutSize[1] + ",\n          " + effectiveInSize[1] / effectiveOutSize[1] + ");\n      const vec3 inputShapeRC = vec3(" + oldHeight + ".0, " + oldWidth + ".0,\n                                     " + oldWidth + ".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < " + (depth - 1) + ";\n        bool hasNextRow = coords.z < " + (newWidth - 1) + ";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    ";
      }
      return ResizeBilinearPackedProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ResizeNearestNeigborBackpropProgram = /** @class */ (function () {
      function ResizeNearestNeigborBackpropProgram(dy, x, alignCorners) {
          this.variableNames = ['dy'];
          this.outputShape = [];
          this.outputShape = x.shape;
          var _a = x.shape, xHeight = _a[1], xWidth = _a[2];
          var _b = dy.shape, yHeight = _b[1], yWidth = _b[2];
          // In the backwards pass, we want to find the pixels that were generated for
          // each pixel in the input image the forward pass and add the corresponding
          // coefficient from dy to the gradient (with some interpolation).
          var effectiveXSize = [
              (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,
              (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth
          ];
          var effectiveYSize = [
              (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,
              (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth
          ];
          var heightScale = effectiveXSize[0] / effectiveYSize[0];
          var widthScale = effectiveXSize[1] / effectiveYSize[1];
          var invHeightScale = 1 / heightScale;
          var invWidthScale = 1 / widthScale;
          // This defines the size of the window of values around a particular
          // index in dy that we want to search for contributions to dx.
          var winHeight = (Math.ceil(invHeightScale) * 2) + 2;
          var winWidth = (Math.ceil(invWidthScale) * 2) + 2;
          this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + heightScale + ");\n        const float widthScale = float(" + widthScale + ");\n\n        const float invHeightScale = float(" + invHeightScale + ");\n        const float invWidthScale = float(" + invWidthScale + ");\n\n        const int winHeight = int(" + winHeight + ");\n        const int winWidth = int(" + winWidth + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + yHeight + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + yWidth + ") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(" + effectiveXSize[0] + ") *\n                (float(dyR) / float(" + effectiveYSize[0] + "));\n\n            float sourceFracCol =\n                float(" + effectiveXSize[1] + ") *\n                  (float(dyC) / float(" + effectiveYSize[1] + "));\n\n            int sourceNearestRow = int(min(\n                float(int(" + xHeight + ") - 1),\n                " + alignCorners + " ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(" + xWidth + ") - 1),\n                " + alignCorners + " ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
      }
      return ResizeNearestNeigborBackpropProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ResizeNearestNeighborProgram = /** @class */ (function () {
      function ResizeNearestNeighborProgram(inputShape, newHeight, newWidth, alignCorners) {
          this.variableNames = ['A'];
          this.outputShape = [];
          var batch = inputShape[0], oldHeight = inputShape[1], oldWidth = inputShape[2], depth = inputShape[3];
          this.outputShape = [batch, newHeight, newWidth, depth];
          var effectiveInSize = [
              (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,
              (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth
          ];
          var effectiveOutSize = [
              (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,
              (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth
          ];
          // When align corners is false, we rounds the value with floor.
          var roundBase = alignCorners ? '0.5' : '0.0';
          this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + effectiveInSize[0] / effectiveOutSize[0] + ",\n          " + effectiveInSize[1] / effectiveOutSize[1] + ");\n      const vec2 inputShapeRC = vec2(" + oldHeight + ".0, " + oldWidth + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + " + roundBase + ")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
      }
      return ResizeNearestNeighborProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ReverseProgram = /** @class */ (function () {
      function ReverseProgram(xShape, axis) {
          this.variableNames = ['x'];
          var rank = xShape.length;
          if (rank > 4) {
              throw new Error("WebGL backend: Reverse of rank-" + rank + " tensor is not yet supported");
          }
          this.outputShape = xShape;
          if (rank === 1) {
              this.userCode = "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" + xShape[0] + " - coord - 1));\n        }\n      ";
              return;
          }
          var getInCoord = function (i) {
              if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {
                  return xShape[i] + " - coords[" + i + "] - 1";
              }
              return "coords[" + i + "]";
          };
          var inCoords = xShape.map(function (_, i) { return getInCoord(i); }).join(',');
          var type = getCoordsDataType(rank);
          this.userCode = "\n      void main() {\n        " + type + " coords = getOutputCoords();\n        setOutput(getX(" + inCoords + "));\n      }\n    ";
      }
      return ReverseProgram;
  }());

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ReversePackedProgram = /** @class */ (function () {
      function ReversePackedProgram(xShape, axis) {
          this.variableNames = ['x'];
          this.packedInputs = true;
          this.packedOutput = true;
          var rank = xShape.length;
          if (rank > 4) {
              throw new Error("WebGL backend: Reverse of rank-" + rank + " tensor is not yet supported");
          }
          this.outputShape = xShape;
          var channels = getChannels('rc', rank);
          var nextColumn = channels[rank - 1] + " + 1 < " + this.outputShape[rank - 1];
          var nextRow = channels[rank - 2] + " + 1 < " + this.outputShape[rank - 2];
          var type = getCoordsDataType(rank);
          if (rank === 1) {
              this.userCode = "\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(" + xShape[0] + " - rc - 1),\n            " + xShape[0] + " - rc - 1);\n          if(" + nextColumn + "){\n              result.g = getChannel(getX(" + xShape[0] + " - (rc  + 1) - 1),\n                " + xShape[0] + " - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      ";
          }
          else {
              this.userCode = "\n        void main() {\n          " + type + " rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = " + getR(channels.slice()) + ";\n          if(" + nextColumn + "){\n            result.g = " + getG(channels.slice()) + ";\n          }\n          if(" + nextRow + ") {\n            result.b = " + getB(channels.slice()) + ";\n            if(" + nextColumn + ") {\n              result.a = " + getA(channels.slice()) + ";\n            }\n          }\n          setOutput(result);\n        }\n    ";
          }
          function getR(channels) {
              return getChannel(channels);
          }
          function getG(channels) {
              channels[rank - 1] = '(' + channels[rank - 1] + " + 1)";
              return getChannel(channels);
          }
          function getB(channels) {
              channels[rank - 2] = '(' + channels[rank - 2] + " + 1)";
              return getChannel(channels);
          }
          function getA(channels) {
              channels[rank - 1] = '(' + channels[rank - 1] + " + 1)";
              channels[rank - 2] = '(' + channels[rank - 2] + " + 1)";
              return getChannel(channels);
          }
          function getChannel(channels) {
              var inCoordsArray = xShape.map(function (_, i) { return getInCoord(i, channels); });
              var inCoords = inCoordsArray.join(',');
              var innerDims = inCoordsArray.slice(-2).join(',');
              return "getChannel(getX(" + inCoords + "), vec2(" + innerDims + "))";
          }
          function getInCoord(i, channels1) {
              if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {
                  return xShape[i] + " - " + channels1[i] + " - 1";
              }
              else {
                  return "" + channels1[i];
              }
          }
      }
      return ReversePackedProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var ScatterProgram = /** @class */ (function () {
      function ScatterProgram(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex) {
          this.variableNames = ['updates', 'indices', 'defaultValue'];
          this.outputShape = shape;
          var stridesType = getCoordsDataType(strides.length);
          var dtype = getCoordsDataType(shape.length);
          var indicesString = '';
          if (indicesRank === 1) {
              indicesString = 'i';
          }
          else if (indicesRank === 2) {
              indicesString = 'i, j';
          }
          var indicesSnippet = "getIndices(" + indicesString + ")";
          var updatesString = '';
          if (updatesRank === 1) {
              updatesString = 'i';
          }
          else if (updatesRank === 2) {
              updatesString = 'i, coords[1]';
          }
          var updatesSnippet = "getUpdates(" + updatesString + ")";
          var strideString = sliceDim > 1 ? 'strides[j]' : 'strides';
          this.userCode = "\n        " + stridesType + " strides = " + stridesType + "(" + strides + ");\n\n        void main() {\n          " + dtype + " coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < " + updateSize + "; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < " + sliceDim + "; j++) {\n              int index = round(" + indicesSnippet + ");\n              flattenedIndex += index * " + strideString + ";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += " + updatesSnippet + ";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      ";
      }
      return ScatterProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var SegmentOpProgram = /** @class */ (function () {
      function SegmentOpProgram(segOpInfo, segOpType) {
          this.variableNames = ['x', 'segmentIds'];
          var windowSize = segOpInfo.windowSize;
          var batchSize = segOpInfo.batchSize;
          var inSize = segOpInfo.inSize;
          var numSegments = segOpInfo.numSegments;
          var outSize = numSegments * Math.ceil(inSize / windowSize);
          this.outputShape = [batchSize, outSize];
          var initializationValue = '0.0';
          var returnValue = "sumValue";
          var windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
          var windowSizeVec4Remainder = windowSize % 4;
          var updateSnippet = "\n        sumValue += dot(values, segFilter);\n    ";
          var checkValueOutOfBounds = '';
          if (inSize % windowSize > 0) {
              checkValueOutOfBounds = "\n        if (inIdx < 0 || inIdx >= " + inSize + ") {\n          return initializationValue;\n        }\n      ";
          }
          var checkSegmentIdOutOfBounds = '';
          if (inSize % windowSize > 0) {
              checkSegmentIdOutOfBounds = "\n        if (inIdx < 0 || inIdx >= " + inSize + ") {\n          return -1.0;\n        }\n      ";
          }
          this.userCode = "\n      const float initializationValue = " + initializationValue + ";\n\n      float getValue(int batch, int inIdx) {\n        " + checkValueOutOfBounds + "\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        " + checkSegmentIdOutOfBounds + "\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          " + numSegments + ")) * float(" + windowSize + "));\n        int currentSeg = int(mod(float(outIdx), float(" + numSegments + ")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " + windowSizeNearestVec4 + "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          " + updateSnippet + "\n        }\n\n        int inIdx = inOffset + " + windowSizeNearestVec4 + ";\n        if (" + (windowSizeVec4Remainder === 1) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          " + updateSnippet + "\n        } else if (" + (windowSizeVec4Remainder === 2) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          " + updateSnippet + "\n        } else if (" + (windowSizeVec4Remainder === 3) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          " + updateSnippet + "\n        }\n        setOutput(" + returnValue + ");\n      }\n    ";
      }
      return SegmentOpProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var SelectProgram = /** @class */ (function () {
      function SelectProgram(cRank, shape, rank) {
          this.variableNames = ['c', 'a', 'b'];
          this.outputShape = shape;
          var cCoords;
          var abCoords;
          if (rank > 4) {
              throw Error("Where for rank " + rank + " is not yet supported");
          }
          if (rank === 1) {
              abCoords = "resRC";
              cCoords = "resRC";
          }
          else {
              var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
              var cCoordVars = [];
              var abCoordVars = [];
              for (var i = 0; i < shape.length; i++) {
                  abCoordVars.push("" + currentCoords[i]);
                  if (i < cRank) {
                      cCoordVars.push("" + currentCoords[i]);
                  }
              }
              cCoords = cCoordVars.join();
              abCoords = abCoordVars.join();
          }
          var dtype = getCoordsDataType(rank);
          this.userCode = "\n      void main() {\n        " + dtype + " resRC = getOutputCoords();\n        float cVal = getC(" + cCoords + ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" + abCoords + "));\n        } else {\n          setOutput(getB(" + abCoords + "));\n        }\n      }\n    ";
      }
      return SelectProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var SliceProgram = /** @class */ (function () {
      function SliceProgram(destSize) {
          this.variableNames = ['source'];
          this.outputShape = destSize;
          this.rank = destSize.length;
          var dtype = getCoordsDataType(this.rank);
          var uniformPart = "uniform int start[" + this.rank + "];";
          var sourceCoords = getCoords$1(this.rank);
          var body;
          var coordSum = destSize.map(function (_, i) {
              return "sourceLoc." + coords[i] + " = start[" + i + "] + coords." + coords[i] + ";";
          });
          body = "\n        " + dtype + " sourceLoc;\n        " + dtype + " coords = getOutputCoords();\n        " + coordSum.join('\n') + "\n      ";
          this.userCode = "\n      " + uniformPart + "\n      void main() {\n        " + body + "\n        setOutput(getSource(" + sourceCoords + "));\n      }\n    ";
      }
      SliceProgram.prototype.getCustomSetupFunc = function (start) {
          var _this = this;
          if (start.length !== this.rank) {
              throw Error("The rank (" + this.rank + ") of the program must match the " +
                  ("length of start (" + start.length + ")"));
          }
          return function (gpgpu, webGLProgram) {
              if (_this.startLoc == null) {
                  _this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');
                  if (_this.startLoc == null) {
                      // This means the compiler has optimized and realized it doesn't need
                      // the uniform.
                      return;
                  }
              }
              gpgpu.gl.uniform1iv(_this.startLoc, start);
          };
      };
      return SliceProgram;
  }());
  var coords = ['x', 'y', 'z', 'w', 'u', 'v'];
  function getCoords$1(rank) {
      if (rank === 1) {
          return 'sourceLoc';
      }
      else if (rank <= 6) {
          return coords.slice(0, rank).map(function (x) { return 'sourceLoc.' + x; }).join(',');
      }
      else {
          throw Error("Slicing for rank " + rank + " is not yet supported");
      }
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var SlicePackedProgram = /** @class */ (function () {
      function SlicePackedProgram(destSize) {
          this.variableNames = ['source'];
          this.packedInputs = true;
          this.packedOutput = true;
          this.outputShape = destSize;
          this.rank = destSize.length;
          var dtype = getCoordsDataType(this.rank);
          var coords = getChannels('coords', this.rank);
          var sourceLoc = getChannels('sourceLoc', this.rank);
          var innerDims = this.rank === 1 ? 'sourceLoc' : "vec2(" + sourceLoc.slice(-2).join() + ")";
          var getChannel = "getChannel(getSource(" + sourceLoc.join() + "), " + innerDims + ")";
          var upperRow = "\n      result.x = " + getChannel + ";\n      if (++" + coords[this.rank - 1] + " < " + destSize[this.rank - 1] + ") {\n        ++" + sourceLoc[this.rank - 1] + ";\n        result.y = " + getChannel + ";\n        --" + sourceLoc[this.rank - 1] + ";\n      }\n    ";
          var lowerRow = this.rank === 1 ? '' : "\n      --" + coords[this.rank - 1] + ";\n      if (++" + coords[this.rank - 2] + " < " + destSize[this.rank - 2] + ") {\n        ++" + sourceLoc[this.rank - 2] + ";\n        result.z = " + getChannel + ";\n        if (++" + coords[this.rank - 1] + " < " + destSize[this.rank - 1] + ") {\n          ++" + sourceLoc[this.rank - 1] + ";\n          result.w = " + getChannel + ";\n        }\n      }\n    ";
          var sourceLocSetup = this.rank <= 4 ?
              "sourceLoc = coords +\n            " + dtype + "(" + destSize.map(function (_, i) { return "start[" + i + "]"; }).join() + ");" :
              destSize.map(function (_, i) { return sourceLoc[i] + " = " + coords[i] + " + start[" + i + "];"; })
                  .join('\n');
          this.userCode = "\n      uniform int start[" + this.rank + "];\n      void main() {\n        " + dtype + " coords = getOutputCoords();\n        " + dtype + " sourceLoc;\n        " + sourceLocSetup + "\n        vec4 result = vec4(0.);\n        " + upperRow + "\n        " + lowerRow + "\n        setOutput(result);\n      }\n    ";
      }
      SlicePackedProgram.prototype.getCustomSetupFunc = function (start) {
          var _this = this;
          if (start.length !== this.rank) {
              throw Error("The rank (" + this.rank + ") of the program must match the " +
                  ("length of start (" + start.length + ")"));
          }
          return function (gpgpu, webGLProgram) {
              if (_this.startLoc == null) {
                  _this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');
                  if (_this.startLoc == null) {
                      // This means the compiler has optimized and realized it doesn't need
                      // the uniform.
                      return;
                  }
              }
              gpgpu.gl.uniform1iv(_this.startLoc, start);
          };
      };
      return SlicePackedProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var StridedSliceProgram = /** @class */ (function () {
      function StridedSliceProgram(begin, strides, size) {
          this.variableNames = ['x'];
          this.outputShape = size;
          var rank = size.length;
          var inputDtype = getCoordsDataType(size.length);
          var dtype = getCoordsDataType(size.length);
          var newCoords = '';
          if (rank === 1) {
              newCoords = 'coords * strides + begin';
          }
          else {
              var outputAxis_1 = 0;
              newCoords =
                  size.map(function (_, i) {
                      outputAxis_1++;
                      return size.length === 1 ?
                          "coords * strides[" + i + "] + begin[" + i + "]" :
                          "coords[" + (outputAxis_1 - 1) + "] * strides[" + i + "] + begin[" + i + "]";
                  })
                      .join(',');
          }
          this.userCode = "\n      " + inputDtype + " begin = " + inputDtype + "(" + begin + ");\n      " + inputDtype + " strides = " + inputDtype + "(" + strides + ");\n\n      void main() {\n        " + dtype + " coords = getOutputCoords();\n        setOutput(getX(" + newCoords + "));\n      }\n    ";
      }
      return StridedSliceProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var TextureManager = /** @class */ (function () {
      function TextureManager(gpgpu) {
          this.gpgpu = gpgpu;
          this.numUsedTextures = 0;
          this.numFreeTextures = 0;
          this._numBytesAllocated = 0;
          this._numBytesFree = 0; // How many bytes that have been allocated
          // are available for reuse.
          this.freeTextures = {};
          this.logEnabled = false;
          this.usedTextures = {};
      }
      TextureManager.prototype.acquireTexture = function (shapeRC, usage, isPacked) {
          var physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);
          var shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);
          if (!(shapeKey in this.freeTextures)) {
              this.freeTextures[shapeKey] = [];
          }
          if (!(shapeKey in this.usedTextures)) {
              this.usedTextures[shapeKey] = [];
          }
          var texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);
          if (this.freeTextures[shapeKey].length > 0) {
              this.numFreeTextures--;
              this.numUsedTextures++;
              this._numBytesFree -= texBytes;
              this.log();
              var newTexture_1 = this.freeTextures[shapeKey].shift();
              this.usedTextures[shapeKey].push(newTexture_1);
              return newTexture_1;
          }
          var newTexture;
          if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {
              newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);
          }
          else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {
              newTexture =
                  this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);
          }
          else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {
              newTexture =
                  this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);
          }
          else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {
              newTexture =
                  this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);
          }
          else if (physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {
              newTexture =
                  this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);
          }
          this.usedTextures[shapeKey].push(newTexture);
          this.numUsedTextures++;
          this._numBytesAllocated += texBytes;
          this.log();
          return newTexture;
      };
      TextureManager.prototype.releaseTexture = function (texture, shape, logicalTexType, isPacked) {
          if (this.freeTextures == null) {
              // Already disposed.
              return;
          }
          var physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);
          var shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);
          if (!(shapeKey in this.freeTextures)) {
              this.freeTextures[shapeKey] = [];
          }
          var texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);
          var deleteTexThreshold = tf.env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');
          if (deleteTexThreshold !== -1 &&
              this._numBytesAllocated > deleteTexThreshold) {
              this.gpgpu.deleteMatrixTexture(texture);
              this._numBytesAllocated -= texBytes;
          }
          else {
              this.freeTextures[shapeKey].push(texture);
              this.numFreeTextures++;
              this._numBytesFree += texBytes;
          }
          this.numUsedTextures--;
          var texList = this.usedTextures[shapeKey];
          var texIndex = texList.indexOf(texture);
          if (texIndex < 0) {
              throw new Error('Cannot release a texture that was never provided by this ' +
                  'texture manager');
          }
          texList.splice(texIndex, 1);
          this.log();
      };
      TextureManager.prototype.log = function () {
          if (!this.logEnabled) {
              return;
          }
          var total = this.numFreeTextures + this.numUsedTextures;
          console.log('Free/Used', this.numFreeTextures + " / " + this.numUsedTextures, "(" + total + ")");
          var freeRatio = this._numBytesFree / this._numBytesAllocated;
          console.log("Bytes allocated: " + this._numBytesAllocated);
          console.log("Bytes unused: " + this._numBytesFree + " (" + Math.round(100 * freeRatio) + "%)");
      };
      Object.defineProperty(TextureManager.prototype, "numBytesAllocated", {
          get: function () {
              return this._numBytesAllocated;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(TextureManager.prototype, "numBytesFree", {
          get: function () {
              return this._numBytesFree;
          },
          enumerable: true,
          configurable: true
      });
      TextureManager.prototype.getNumUsedTextures = function () {
          return this.numUsedTextures;
      };
      TextureManager.prototype.getNumFreeTextures = function () {
          return this.numFreeTextures;
      };
      TextureManager.prototype.dispose = function () {
          var _this = this;
          if (this.freeTextures == null) {
              // Already disposed.
              return;
          }
          for (var texShape in this.freeTextures) {
              this.freeTextures[texShape].forEach(function (tex) {
                  _this.gpgpu.deleteMatrixTexture(tex);
              });
          }
          for (var texShape in this.usedTextures) {
              this.usedTextures[texShape].forEach(function (tex) {
                  _this.gpgpu.deleteMatrixTexture(tex);
              });
          }
          this.freeTextures = null;
          this.usedTextures = null;
          this.numUsedTextures = 0;
          this.numFreeTextures = 0;
          this._numBytesAllocated = 0;
          this._numBytesFree = 0;
      };
      return TextureManager;
  }());
  function numBytesForInternalFormat(gl, internalFormat) {
      // tslint:disable-next-line:no-any
      var glany = gl;
      if (internalFormat === glany.R32F) {
          return 4;
      }
      else if (internalFormat === glany.R16F) {
          return 2;
      }
      else if (internalFormat === glany.RGBA32F) {
          return 16;
      }
      else if (internalFormat === gl.RGBA) {
          return 16;
      }
      else if (internalFormat === glany.RGBA16F) {
          return 8;
      }
      throw new Error("Unknown internal format " + internalFormat);
  }
  function computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {
      // It is not possible to infer packed status from the texture type because
      // depending on the textureConfig, different  texture types may resolve to the
      // same internal format (e.g. in WebGL1, the internal format for
      // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`
      // explicitly.
      var internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);
      var numElements;
      if (isPacked) {
          var _a = getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]), packedWidth = _a[0], packedHeight = _a[1];
          numElements = packedWidth * packedHeight;
      }
      else {
          var _b = getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]), width = _b[0], height = _b[1];
          numElements = width * height;
      }
      var bytesPerElement = numBytesForInternalFormat(gl, internalFormat);
      return numElements * bytesPerElement;
  }
  function internalFormatForPhysicalTexType(physicalTexType, textureConfig) {
      switch (physicalTexType) {
          case PhysicalTextureType.PACKED_2X2_FLOAT32:
              return getInternalFormatForPackedMatrixTexture(textureConfig);
          case PhysicalTextureType.PACKED_2X2_FLOAT16:
              return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);
          case PhysicalTextureType.UNPACKED_FLOAT32:
              return getInternalFormatForFloat32MatrixTexture(textureConfig);
          case PhysicalTextureType.UNPACKED_FLOAT16:
              return getInternalFormatForFloat16MatrixTexture(textureConfig);
          case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:
              return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);
          default:
              throw new Error("Unknown physical texture type " + physicalTexType);
      }
  }
  function getPhysicalTextureForRendering(isPacked) {
      if (tf.env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {
          if (isPacked) {
              return PhysicalTextureType.PACKED_2X2_FLOAT32;
          }
          return PhysicalTextureType.UNPACKED_FLOAT32;
      }
      if (isPacked) {
          return PhysicalTextureType.PACKED_2X2_FLOAT16;
      }
      return PhysicalTextureType.UNPACKED_FLOAT16;
  }
  function getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {
      if (logicalTexType === TextureUsage.UPLOAD) {
          return PhysicalTextureType.PACKED_2X2_FLOAT32;
      }
      else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {
          return getPhysicalTextureForRendering(isPacked);
      }
      else if (logicalTexType === TextureUsage.DOWNLOAD ||
          logicalTexType === TextureUsage.PIXELS) {
          return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;
      }
      throw new Error("Unknown logical texture type " + logicalTexType);
  }
  function getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {
      return shapeRowsCol[0] + "_" + shapeRowsCol[1] + "_" + physicalTexType + "_" + isPacked;
  }

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var TileProgram = /** @class */ (function () {
      function TileProgram(aShape, reps) {
          this.variableNames = ['A'];
          var outputShape = new Array(aShape.length);
          for (var i = 0; i < outputShape.length; i++) {
              outputShape[i] = aShape[i] * reps[i];
          }
          this.outputShape = outputShape;
          this.rank = outputShape.length;
          var dtype = getCoordsDataType(this.rank);
          var sourceCoords = getSourceCoords$2(aShape);
          this.userCode = "\n      void main() {\n        " + dtype + " resRC = getOutputCoords();\n        setOutput(getA(" + sourceCoords + "));\n      }\n    ";
      }
      return TileProgram;
  }());
  function getSourceCoords$2(aShape) {
      var rank = aShape.length;
      if (rank > 5) {
          throw Error("Tile for rank " + rank + " is not yet supported");
      }
      if (rank === 1) {
          return "imod(resRC, " + aShape[0] + ")";
      }
      var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];
      var sourceCoords = [];
      for (var i = 0; i < aShape.length; i++) {
          sourceCoords.push("imod(" + currentCoords[i] + ", " + aShape[i] + ")");
      }
      return sourceCoords.join();
  }

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var UnaryOpProgram = /** @class */ (function () {
      function UnaryOpProgram(aShape, opSnippet) {
          this.variableNames = ['A'];
          this.outputShape = aShape;
          this.userCode = "\n      float unaryOperation(float x) {\n        " + opSnippet + "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
      }
      return UnaryOpProgram;
  }());
  var CHECK_NAN_SNIPPET$2 = "if (isnan(x)) return x;";
  var LINEAR = "return x;";
  var ABS = "return abs(x);";
  var RELU = CHECK_NAN_SNIPPET$2 + "\n  return (x < 0.0) ? 0.0 : x;\n";
  var RELU6 = CHECK_NAN_SNIPPET$2 + "\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";
  var ELU = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
  var SELU = "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = " + tf.backend_util.SELU_SCALEALPHA + ";\n  float scale = " + tf.backend_util.SELU_SCALE + ";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";
  function STEP(alpha) {
      if (alpha === void 0) { alpha = 0.0; }
      return CHECK_NAN_SNIPPET$2 + ("\n    return x > 0.0 ? 1.0 : float(" + alpha + ");\n  ");
  }
  var NEG = "return -x;";
  var CEIL = "return ceil(x);";
  var FLOOR = "return floor(x);";
  var SIGN = "\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n";
  var IS_NAN = "return float(isnan(x));";
  var IS_INF = "return float(isinf(x));";
  var IS_FINITE = "return float(!isnan(x) && !isinf(x));";
  var ROUND = "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n";
  var EXP = "return exp(x);";
  var EXPM1 = "return exp(x) - 1.0;";
  var LOG = "if (x < 0.0) return NAN;\n  return log(x);";
  var LOG1P = "return log(1.0 + x);";
  var SQRT = "return sqrt(x);";
  var RSQRT = "return inversesqrt(x);";
  var SIGMOID = "return 1.0 / (1.0 + exp(-1.0 * x));";
  /**
   * mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX
   *
   * epsilon is the difference between 1.0 and the next representable
   * float. For a single precision 32 bit float this should be 2^-23, see:
   * https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm
   *
   * too_large = (x > -threshold) is value above which exp(x) may overflow
   * but softplus(x) == x is within machine epsilon
   *
   * too_small = (x < threshold) is value below which exp(x) may underflow,
   * but softplus(x) == exp(x) is within machine epsilon.
   */
  var SOFTPLUS = "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n";
  var SIN = CHECK_NAN_SNIPPET$2 + "\n  return sin(x);\n";
  var COS = CHECK_NAN_SNIPPET$2 + "\n  return cos(x);\n";
  var TAN = "return tan(x);";
  var ASIN = CHECK_NAN_SNIPPET$2 + "\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n";
  var ACOS = CHECK_NAN_SNIPPET$2 + "\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n";
  var ATAN = CHECK_NAN_SNIPPET$2 + "\n  return atan(x);\n";
  var SINH = "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n";
  var COSH = "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n";
  var TANH = "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n";
  var ASINH = CHECK_NAN_SNIPPET$2 + "return log(x + sqrt(x * x + 1.0));";
  var ACOSH = CHECK_NAN_SNIPPET$2 + "\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));";
  var ATANH = CHECK_NAN_SNIPPET$2 + "\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;";
  var ERF = "\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = " + tf.backend_util.ERF_P + ";\n  float a1 = " + tf.backend_util.ERF_A1 + ";\n  float a2 = " + tf.backend_util.ERF_A2 + ";\n  float a3 = " + tf.backend_util.ERF_A3 + ";\n  float a4 = " + tf.backend_util.ERF_A4 + ";\n  float a5 = " + tf.backend_util.ERF_A5 + ";\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n";
  var SQUARE = "return x * x;";
  var RECIPROCAL = "return 1.0 / x;";
  var LOGICAL_NOT = "return float(!(x >= 1.0));";
  var TO_INT = "return float(int(x));";
  var CLONE = 'return x;';

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var LINEAR$1 = "return x;";
  var LOG$1 = "\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n";
  var RELU$1 = "\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n";
  var RELU6$1 = "\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n";
  var ELU$1 = "\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";
  var UnaryOpPackedProgram = /** @class */ (function () {
      function UnaryOpPackedProgram(aShape, opSnippet) {
          this.variableNames = ['A'];
          this.packedInputs = true;
          this.packedOutput = true;
          this.outputShape = aShape;
          this.userCode = "\n      vec4 unaryOperation(vec4 x) {\n        " + opSnippet + "\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
      }
      return UnaryOpPackedProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var UnpackProgram = /** @class */ (function () {
      function UnpackProgram(outputShape) {
          this.variableNames = ['A'];
          this.packedInputs = true;
          this.packedOutput = false;
          this.outputShape = outputShape;
          var rank = outputShape.length;
          var channels = getChannels('rc', rank);
          var dtype = getCoordsDataType(rank);
          var sourceCoords = getSourceCoords(rank, channels);
          var innerDims = channels.slice(-2);
          var coords = rank <= 1 ? 'rc' : "vec2(" + innerDims.join(',') + ")";
          this.userCode = "\n      void main() {\n        " + dtype + " rc = getOutputCoords();\n        vec4 packedInput = getA(" + sourceCoords + ");\n\n        setOutput(getChannel(packedInput, " + coords + "));\n      }\n    ";
      }
      return UnpackProgram;
  }());

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var segment_util = tf.backend_util.segment_util;
  var split = tf.kernel_impls.split;
  var tile = tf.kernel_impls.tile;
  var topkImpl = tf.kernel_impls.topkImpl;
  var whereImpl = tf.kernel_impls.whereImpl;
  var EPSILON_FLOAT32 = 1e-7;
  var EPSILON_FLOAT16 = 1e-4;
  var binaryCaches = {};
  function getBinaryCache(webGLVersion) {
      if (webGLVersion in binaryCaches) {
          return binaryCaches[webGLVersion];
      }
      binaryCaches[webGLVersion] = {};
      return binaryCaches[webGLVersion];
  }
  function mapActivationToShaderProgram(activation, packed) {
      if (packed === void 0) { packed = false; }
      if (activation === 'linear') {
          if (packed) {
              return LINEAR$1;
          }
          return LINEAR;
      }
      else if (activation === 'relu') {
          if (packed) {
              return RELU$1;
          }
          return RELU;
      }
      else if (activation === 'elu') {
          if (packed) {
              return ELU$1;
          }
          return ELU;
      }
      else if (activation === 'relu6') {
          if (packed) {
              return RELU6$1;
          }
          return RELU6;
      }
      else if (activation === 'prelu') {
          if (packed) {
              return PRELU$1;
          }
          return PRELU;
      }
      throw new Error("Activation " + activation + " has not been implemented for the WebGL backend.");
  }
  // Empirically determined constant used to determine size threshold for handing
  // off execution to the CPU.
  var CPU_HANDOFF_SIZE_THRESHOLD = 128;
  // Empirically determined constant used to decide the number of MB on GPU
  // before we warn about high memory use. The MB are this constant * screen area
  // * dpi / 1024 / 1024.
  var BEFORE_PAGING_CONSTANT = 600;
  function numMBBeforeWarning() {
      if (tf.env().global.screen == null) {
          return 1024; // 1 GB.
      }
      return (tf.env().global.screen.height * tf.env().global.screen.width *
          window.devicePixelRatio) *
          BEFORE_PAGING_CONSTANT / 1024 / 1024;
  }
  // Empirically determined minimal shared dimension in matmul before we forward
  // to a.mul(b).sum() in order to take advantage of GPU parallelism. See
  // https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.
  var MATMUL_SHARED_DIM_THRESHOLD = 1000;
  var MathBackendWebGL = /** @class */ (function (_super) {
      __extends(MathBackendWebGL, _super);
      function MathBackendWebGL(gpgpu) {
          var _this = _super.call(this) || this;
          // Maps data ids that have a pending read operation, to list of subscribers.
          _this.pendingRead = new WeakMap();
          // List of data ids that are scheduled for disposal, but are waiting on a
          // pending read operation.
          _this.pendingDisposal = new WeakSet();
          // Used to count the number of 'shallow' sliced tensors that point to the
          // same data id.
          _this.dataRefCount = new WeakMap();
          _this.numBytesInGPU = 0;
          // Accumulated time spent (including blocking) in uploading data to webgl.
          _this.uploadWaitMs = 0;
          // Accumulated time spent (including blocking in downloading data from webgl.
          _this.downloadWaitMs = 0;
          _this.warnedAboutMemory = false;
          _this.warnedAboutCPUBackend = false;
          _this.pendingDeletes = 0;
          _this.disposed = false;
          if (!tf.env().getBool('HAS_WEBGL')) {
              throw new Error('WebGL is not supported on this device');
          }
          if (gpgpu == null) {
              var gl = getWebGLContext(tf.env().getNumber('WEBGL_VERSION'));
              _this.binaryCache = getBinaryCache(tf.env().getNumber('WEBGL_VERSION'));
              _this.gpgpu = new GPGPUContext(gl);
              _this.canvas = gl.canvas;
              _this.gpgpuCreatedLocally = true;
          }
          else {
              _this.gpgpu = gpgpu;
              _this.binaryCache = {};
              _this.gpgpuCreatedLocally = false;
              _this.canvas = gpgpu.gl.canvas;
          }
          _this.textureManager = new TextureManager(_this.gpgpu);
          _this.numMBBeforeWarning = numMBBeforeWarning();
          _this.texData = new tf.DataStorage(_this, tf.engine());
          return _this;
      }
      MathBackendWebGL.prototype.numDataIds = function () {
          return this.texData.numDataIds() +
              (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -
              this.pendingDeletes;
      };
      MathBackendWebGL.prototype.write = function (values, shape, dtype) {
          if (tf.env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||
              tf.env().getBool('DEBUG')) {
              this.checkNumericalProblems(values);
          }
          if (dtype === 'complex64' && values != null) {
              throw new Error("Cannot write to a complex64 dtype. " +
                  "Please use tf.complex(real, imag).");
          }
          var dataId = {};
          this.texData.set(dataId, { shape: shape, dtype: dtype, values: values, usage: TextureUsage.UPLOAD });
          return dataId;
      };
      MathBackendWebGL.prototype.move = function (dataId, values, shape, dtype) {
          if (tf.env().getBool('DEBUG')) {
              this.checkNumericalProblems(values);
          }
          if (dtype === 'complex64') {
              throw new Error("Cannot write to a complex64 dtype. " +
                  "Please use tf.complex(real, imag).");
          }
          this.texData.set(dataId, { shape: shape, dtype: dtype, values: values, usage: TextureUsage.UPLOAD });
      };
      MathBackendWebGL.prototype.readSync = function (dataId) {
          var texData = this.texData.get(dataId);
          var values = texData.values, dtype = texData.dtype, complexTensors = texData.complexTensors, slice = texData.slice, shape = texData.shape, isPacked = texData.isPacked;
          if (slice != null) {
              var program = void 0;
              if (isPacked) {
                  program = new UnaryOpPackedProgram(shape, CLONE);
              }
              else {
                  program = new UnaryOpProgram(shape, CLONE);
              }
              var res = this.runWebGLProgram(program, [{ dataId: dataId, shape: shape, dtype: dtype }], dtype);
              var data = this.readSync(res.dataId);
              this.disposeData(res.dataId);
              return data;
          }
          if (values != null) {
              return this.convertAndCacheOnCPU(dataId);
          }
          if (dtype === 'string') {
              return values;
          }
          var shouldTimeProgram = this.activeTimers != null;
          var start;
          if (shouldTimeProgram) {
              start = tf.util.now();
          }
          var result;
          if (dtype === 'complex64') {
              var realValues = complexTensors.real.dataSync();
              var imagValues = complexTensors.imag.dataSync();
              result = tf.backend_util.mergeRealAndImagArrays(realValues, imagValues);
          }
          else {
              result = this.getValuesFromTexture(dataId);
          }
          if (shouldTimeProgram) {
              this.downloadWaitMs += tf.util.now() - start;
          }
          return this.convertAndCacheOnCPU(dataId, result);
      };
      MathBackendWebGL.prototype.read = function (dataId) {
          return __awaiter(this, void 0, void 0, function () {
              var subscribers_1, texData, values, shape, slice, dtype, complexTensors, isPacked, program, res, data, buffer, tmpDownloadTarget, tmpData, vals, ps, realValues, imagValues, size, dTypeVals, subscribers;
              var _a;
              return __generator(this, function (_b) {
                  switch (_b.label) {
                      case 0:
                          if (this.pendingRead.has(dataId)) {
                              subscribers_1 = this.pendingRead.get(dataId);
                              return [2 /*return*/, new Promise(function (resolve) { return subscribers_1.push(resolve); })];
                          }
                          texData = this.texData.get(dataId);
                          values = texData.values, shape = texData.shape, slice = texData.slice, dtype = texData.dtype, complexTensors = texData.complexTensors, isPacked = texData.isPacked;
                          if (slice != null) {
                              program = void 0;
                              if (isPacked) {
                                  program = new UnaryOpPackedProgram(shape, CLONE);
                              }
                              else {
                                  program = new UnaryOpProgram(shape, CLONE);
                              }
                              res = this.runWebGLProgram(program, [{ dataId: dataId, shape: shape, dtype: dtype }], dtype);
                              data = this.read(res.dataId);
                              this.disposeData(res.dataId);
                              return [2 /*return*/, data];
                          }
                          if (values != null) {
                              return [2 /*return*/, this.convertAndCacheOnCPU(dataId)];
                          }
                          if (!tf.env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&
                              tf.env().getNumber('WEBGL_VERSION') === 2) {
                              throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and " +
                                  "WEBGL_VERSION=2 not yet supported.");
                          }
                          buffer = null;
                          if (dtype !== 'complex64' && tf.env().get('WEBGL_BUFFER_SUPPORTED')) {
                              // Possibly copy the texture into a buffer before inserting a fence.
                              tmpDownloadTarget = this.decode(dataId);
                              tmpData = this.texData.get(tmpDownloadTarget.dataId);
                              buffer = (_a = this.gpgpu).createBufferFromTexture.apply(_a, [tmpData.texture].concat(getDenseTexShape(shape)));
                          }
                          this.pendingRead.set(dataId, []);
                          if (!(dtype !== 'complex64')) return [3 /*break*/, 2];
                          // Create a fence and wait for it to resolve.
                          return [4 /*yield*/, this.gpgpu.createAndWaitForFence()];
                      case 1:
                          // Create a fence and wait for it to resolve.
                          _b.sent();
                          _b.label = 2;
                      case 2:
                          if (!(dtype === 'complex64')) return [3 /*break*/, 4];
                          return [4 /*yield*/, Promise.all([complexTensors.real.data(), complexTensors.imag.data()])];
                      case 3:
                          ps = _b.sent();
                          realValues = ps[0];
                          imagValues = ps[1];
                          vals = tf.backend_util.mergeRealAndImagArrays(realValues, imagValues);
                          return [3 /*break*/, 5];
                      case 4:
                          if (buffer == null) {
                              vals = this.getValuesFromTexture(dataId);
                          }
                          else {
                              size = tf.util.sizeFromShape(shape);
                              vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);
                          }
                          _b.label = 5;
                      case 5:
                          if (tmpDownloadTarget != null) {
                              this.disposeData(tmpDownloadTarget.dataId);
                          }
                          dTypeVals = this.convertAndCacheOnCPU(dataId, vals);
                          subscribers = this.pendingRead.get(dataId);
                          this.pendingRead.delete(dataId);
                          // Notify all pending reads.
                          subscribers.forEach(function (resolve) { return resolve(dTypeVals); });
                          if (this.pendingDisposal.has(dataId)) {
                              this.pendingDisposal.delete(dataId);
                              this.disposeData(dataId);
                              this.pendingDeletes--;
                          }
                          return [2 /*return*/, dTypeVals];
                  }
              });
          });
      };
      MathBackendWebGL.prototype.checkNumericalProblems = function (values) {
          if (values == null) {
              return;
          }
          for (var i = 0; i < values.length; i++) {
              var num = values[i];
              if (!canBeRepresented(num)) {
                  if (tf.env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {
                      throw Error("The value " + num + " cannot be represented with your " +
                          "current settings. Consider enabling float32 rendering: " +
                          "'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");
                  }
                  throw Error("The value " + num + " cannot be represented on this device.");
              }
          }
      };
      MathBackendWebGL.prototype.getValuesFromTexture = function (dataId) {
          var _a;
          var _b = this.texData.get(dataId), shape = _b.shape, dtype = _b.dtype, isPacked = _b.isPacked;
          var size = tf.util.sizeFromShape(shape);
          if (tf.env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {
              var tmpTarget = this.decode(dataId);
              var tmpData_1 = this.texData.get(tmpTarget.dataId);
              var vals_1 = (_a = this.gpgpu).downloadMatrixFromPackedTexture.apply(_a, [tmpData_1.texture].concat(getDenseTexShape(shape))).subarray(0, size);
              this.disposeData(tmpTarget.dataId);
              return vals_1;
          }
          var shouldUsePackedProgram = tf.env().getBool('WEBGL_PACK') && isPacked === true;
          var outputShape = shouldUsePackedProgram ? getShapeAs3D(shape) : shape;
          var program = shouldUsePackedProgram ?
              new EncodeFloatPackedProgram(outputShape) :
              new EncodeFloatProgram(outputShape);
          var output = this.runWebGLProgram(program, [{ shape: outputShape, dtype: dtype, dataId: dataId }], 'float32');
          var tmpData = this.texData.get(output.dataId);
          var vals = this.gpgpu
              .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])
              .subarray(0, size);
          this.disposeData(output.dataId);
          return vals;
      };
      MathBackendWebGL.prototype.time = function (f) {
          return __awaiter(this, void 0, void 0, function () {
              var oldActiveTimers, newActiveTimers, outerMostTime, flattenedActiveTimerQueries, flattenedActiveTimerNames, res, kernelMs_1;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          oldActiveTimers = this.activeTimers;
                          newActiveTimers = [];
                          outerMostTime = false;
                          if (this.programTimersStack == null) {
                              this.programTimersStack = newActiveTimers;
                              outerMostTime = true;
                          }
                          else {
                              this.activeTimers.push(newActiveTimers);
                          }
                          this.activeTimers = newActiveTimers;
                          f();
                          flattenedActiveTimerQueries = tf.util.flatten(this.activeTimers.map(function (d) { return d.query; }))
                              .filter(function (d) { return d != null; });
                          flattenedActiveTimerNames = tf.util.flatten(this.activeTimers.map(function (d) { return d.name; }))
                              .filter(function (d) { return d != null; });
                          this.activeTimers = oldActiveTimers;
                          if (outerMostTime) {
                              this.programTimersStack = null;
                          }
                          res = {
                              uploadWaitMs: this.uploadWaitMs,
                              downloadWaitMs: this.downloadWaitMs,
                              kernelMs: null,
                              wallMs: null // will be filled by the engine
                          };
                          if (!(tf.env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0)) return [3 /*break*/, 2];
                          return [4 /*yield*/, Promise.all(flattenedActiveTimerQueries)];
                      case 1:
                          kernelMs_1 = _a.sent();
                          res['kernelMs'] = tf.util.sum(kernelMs_1);
                          res['getExtraProfileInfo'] = function () {
                              return kernelMs_1.map(function (d, i) { return ({ name: flattenedActiveTimerNames[i], ms: d }); })
                                  .map(function (d) { return d.name + ": " + d.ms; })
                                  .join(', ');
                          };
                          return [3 /*break*/, 3];
                      case 2:
                          res['kernelMs'] = {
                              error: 'WebGL query timers are not supported in this environment.'
                          };
                          _a.label = 3;
                      case 3:
                          this.uploadWaitMs = 0;
                          this.downloadWaitMs = 0;
                          return [2 /*return*/, res];
                  }
              });
          });
      };
      MathBackendWebGL.prototype.memory = function () {
          return {
              unreliable: false,
              numBytesInGPU: this.numBytesInGPU,
              numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
              numBytesInGPUFree: this.textureManager.numBytesFree
          };
      };
      MathBackendWebGL.prototype.startTimer = function () {
          if (tf.env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
              return this.gpgpu.beginQuery();
          }
          return { startMs: tf.util.now(), endMs: null };
      };
      MathBackendWebGL.prototype.endTimer = function (query) {
          if (tf.env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
              this.gpgpu.endQuery();
              return query;
          }
          query.endMs = tf.util.now();
          return query;
      };
      MathBackendWebGL.prototype.getQueryTime = function (query) {
          return __awaiter(this, void 0, void 0, function () {
              var timerQuery;
              return __generator(this, function (_a) {
                  if (tf.env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
                      return [2 /*return*/, this.gpgpu.waitForQueryAndGetTime(query)];
                  }
                  timerQuery = query;
                  return [2 /*return*/, timerQuery.endMs - timerQuery.startMs];
              });
          });
      };
      MathBackendWebGL.prototype.disposeData = function (dataId) {
          if (this.pendingDisposal.has(dataId)) {
              return;
          }
          if (this.pendingRead.has(dataId)) {
              this.pendingDisposal.add(dataId);
              this.pendingDeletes++;
              return;
          }
          // No-op if already disposed.
          if (!this.texData.has(dataId)) {
              return;
          }
          this.releaseGPUData(dataId);
          var complexTensors = this.texData.get(dataId).complexTensors;
          if (complexTensors != null) {
              complexTensors.real.dispose();
              complexTensors.imag.dispose();
          }
          this.texData.delete(dataId);
      };
      MathBackendWebGL.prototype.releaseGPUData = function (dataId) {
          var _a = this.texData.get(dataId), texture = _a.texture, dtype = _a.dtype, texShape = _a.texShape, usage = _a.usage, isPacked = _a.isPacked, slice = _a.slice;
          var key = slice && slice.origDataId || dataId;
          var refCount = this.dataRefCount.get(key);
          if (refCount > 1) {
              this.dataRefCount.set(key, refCount - 1);
          }
          else {
              this.dataRefCount.delete(key);
              if (texture != null) {
                  this.numBytesInGPU -= this.computeBytes(texShape, dtype);
                  this.textureManager.releaseTexture(texture, texShape, usage, isPacked);
              }
          }
          var texData = this.texData.get(dataId);
          texData.texture = null;
          texData.texShape = null;
          texData.isPacked = false;
          texData.slice = null;
      };
      MathBackendWebGL.prototype.getTexture = function (dataId) {
          this.uploadToGPU(dataId);
          return this.texData.get(dataId).texture;
      };
      /**
       * Returns internal information for the specific data bucket. Used in unit
       * tests.
       */
      MathBackendWebGL.prototype.getDataInfo = function (dataId) {
          return this.texData.get(dataId);
      };
      MathBackendWebGL.prototype.getCPUBackend = function () {
          if (!tf.env().getBool('WEBGL_CPU_FORWARD')) {
              return null;
          }
          if (this.cpuBackend == null) {
              this.cpuBackend = tf.engine().findBackend('cpu');
          }
          return this.cpuBackend;
      };
      /*
      Tests whether all the inputs to an op are small and on the CPU. This heuristic
      determines when it would be faster to execute a kernel on the CPU. WebGL
      kernels opt into running this check and forwarding when appropriate.
      TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more
      sustainable strategy for optimizing backend execution of ops.
       */
      MathBackendWebGL.prototype.shouldExecuteOnCPU = function (inputs, sizeThreshold) {
          var _this = this;
          if (sizeThreshold === void 0) { sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD; }
          var cpuBackend = this.getCPUBackend();
          if (!this.warnedAboutCPUBackend && cpuBackend == null &&
              !tf.env().getBool('IS_TEST')) {
              console.warn('Your application contains ops that are small enough to be ' +
                  'executed on the CPU backend, however the CPU backend cannot ' +
                  'be found. Consider importing the CPU backend ' +
                  '(@tensorflow/tfjs-backend-cpu) for better performance.');
              this.warnedAboutCPUBackend = true;
          }
          return cpuBackend != null &&
              inputs.every(function (input) { return _this.texData.get(input.dataId).texture == null &&
                  tf.util.sizeFromShape(input.shape) < sizeThreshold; });
      };
      MathBackendWebGL.prototype.getGPGPUContext = function () {
          return this.gpgpu;
      };
      MathBackendWebGL.prototype.complex = function (real, imag) {
          var result = this.makeOutput(real.shape, 'complex64');
          var resultData = this.texData.get(result.dataId);
          // The backend owns the reference to the underlying real and imaginary
          // clones. These will explicitly get disposed when the complex tensor is
          // disposed.
          resultData.complexTensors = {
              real: tf.engine().keep(real.clone()),
              imag: tf.engine().keep(imag.clone())
          };
          return result;
      };
      MathBackendWebGL.prototype.real = function (input) {
          var resultData = this.texData.get(input.dataId);
          return resultData.complexTensors.real.clone();
      };
      MathBackendWebGL.prototype.imag = function (input) {
          var resultData = this.texData.get(input.dataId);
          return resultData.complexTensors.imag.clone();
      };
      MathBackendWebGL.prototype.slice = function (x, begin, size) {
          if (this.shouldExecuteOnCPU([x])) {
              return this.cpuBackend.slice(x, begin, size);
          }
          // Short-circuit computation if the slice is zero-sized.
          if (tf.util.sizeFromShape(size) === 0) {
              return tf.tensor([], size, x.dtype);
          }
          var isPacked = this.texData.get(x.dataId).isPacked;
          var isContinous = tf.slice_util.isSliceContinous(x.shape, begin, size);
          if (isPacked || !isContinous) {
              var program = tf.env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?
                  new SlicePackedProgram(size) :
                  new SliceProgram(size);
              var customSetup = program.getCustomSetupFunc(begin);
              return this.compileAndRun(program, [x], null, customSetup);
          }
          this.uploadToGPU(x.dataId);
          return this.shallowSlice(x, begin, size);
      };
      MathBackendWebGL.prototype.shallowSlice = function (x, begin, size) {
          var xTexData = this.texData.get(x.dataId);
          var t = this.makeOutput(size, x.dtype);
          var newTexData = this.texData.get(t.dataId);
          // Copy texture data from the original tensor.
          Object.assign(newTexData, xTexData);
          newTexData.shape = size;
          newTexData.dtype = x.dtype;
          var flatOffset = tf.slice_util.computeFlatOffset(begin, x.strides);
          if (xTexData.slice) {
              // We are slicing an already sliced tensor, so we have to accumulate
              // the offset.
              flatOffset += xTexData.slice.flatOffset;
          }
          newTexData.slice = {
              flatOffset: flatOffset,
              // Point to the original dataId, which is used to do ref counting.
              origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId
          };
          // Increase the ref count for that data bucket.
          var refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;
          this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);
          return t;
      };
      MathBackendWebGL.prototype.stridedSlice = function (x, begin, end, strides) {
          if (this.shouldExecuteOnCPU([x])) {
              return this.cpuBackend.stridedSlice(x, begin, end, strides);
          }
          var outShape = tf.slice_util.computeOutShape(begin, end, strides);
          if (outShape.some(function (axis) { return axis === 0; })) {
              return tf.tensor([], outShape);
          }
          var program = new StridedSliceProgram(begin, strides, outShape);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.reverse = function (x, axis) {
          var program = tf.env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?
              new ReversePackedProgram(x.shape, axis) :
              new ReverseProgram(x.shape, axis);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.concat = function (tensors, axis) {
          if (tensors[0].dtype === 'complex64') {
              var reals = tensors.map(function (t) { return tf.real(t); });
              var imags = tensors.map(function (t) { return tf.imag(t); });
              return tf.complex(this.concat(reals, axis), this.concat(imags, axis));
          }
          if (this.shouldExecuteOnCPU(tensors)) {
              return this.cpuBackend.concat(tensors, axis);
          }
          if (tensors.length === 1) {
              return tensors[0];
          }
          if (tensors.length > tf.env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {
              var midIndex = Math.floor(tensors.length / 2);
              var leftSide = this.concat(tensors.slice(0, midIndex), axis);
              var rightSide = this.concat(tensors.slice(midIndex), axis);
              return this.concat([leftSide, rightSide], axis);
          }
          if (tf.env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && tensors[0].rank > 1) {
              var program_1 = new ConcatPackedProgram(tensors.map(function (t) { return t.shape; }), axis);
              return this.compileAndRun(program_1, tensors);
          }
          // Any concat of n-dimensional tensors across any axis can be reduced to
          // a concatenation of two-dimensional tensors across the axis 1 by first
          // partitioning the axes of the original tensors into those less than the
          // axis to be concatenated and the rest. Then reshape the tensors
          // into a two-dimensional tensor by collapsing these two sets of axes and
          // concatenate the resulting matrices across the axis 1, finally reshaping
          // the result to have the proper shape.
          var outShape = tf.backend_util.computeOutShape(tensors.map(function (t) { return t.shape; }), axis);
          var tensors2D = tensors.map(function (t) { return t.as2D(-1, tf.util.sizeFromShape(t.shape.slice(axis))); });
          var program = new ConcatProgram(tensors2D.map(function (t) { return t.shape; }));
          var res = this.compileAndRun(program, tensors2D);
          return res.reshape(outShape);
      };
      MathBackendWebGL.prototype.neg = function (x) {
          if (this.shouldExecuteOnCPU([x])) {
              return this.cpuBackend.neg(x);
          }
          if (tf.env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
              return this.packedUnaryOp(x, NEG, x.dtype);
          }
          var program = new UnaryOpProgram(x.shape, NEG);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.batchMatMul = function (a, b, transposeA, transposeB) {
          var outerShapeA = transposeA ? a.shape[2] : a.shape[1];
          var outerShapeB = transposeB ? b.shape[1] : b.shape[2];
          var sharedDim = transposeA ? a.shape[1] : a.shape[2];
          var _a = a.shape, batch = _a[0];
          // Since the matrices are vectors, it is faster to call mul().sum()
          // because sum() is O(sqrt(N)) due to divide-and-conquer.
          if ((outerShapeA === 1 || outerShapeB === 1) &&
              sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {
              if (transposeA) {
                  a = tf.transpose(a, [0, 2, 1]);
              }
              if (transposeB) {
                  b = tf.transpose(b, [0, 2, 1]);
              }
              var a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);
              var axis = outerShapeB === 1 ? 2 : 1;
              var b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;
              return this.multiply(a3D, b3D).sum(axis, true /* keepDims */);
          }
          var dtype = tf.upcastType(a.dtype, b.dtype);
          var program = new MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB);
          return this.compileAndRun(program, [a, b], dtype);
      };
      MathBackendWebGL.prototype.fusedBatchMatMul = function (_a) {
          var a = _a.a, b = _a.b, transposeA = _a.transposeA, transposeB = _a.transposeB, bias = _a.bias, activation = _a.activation, preluActivationWeights = _a.preluActivationWeights;
          var outerShapeA = transposeA ? a.shape[2] : a.shape[1];
          var outerShapeB = transposeB ? b.shape[1] : b.shape[2];
          var _b = a.shape, batch = _b[0];
          var dtype = tf.upcastType(a.dtype, b.dtype);
          var hasBias = bias != null;
          var hasPreluActivationWeights = preluActivationWeights != null;
          var fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;
          var program = new MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);
          var inputs = [a, b];
          if (bias) {
              inputs.push(bias);
          }
          if (preluActivationWeights) {
              inputs.push(preluActivationWeights);
          }
          return this.compileAndRun(program, inputs, dtype);
      };
      MathBackendWebGL.prototype.multiply = function (a, b) {
          if (a.dtype === 'complex64') {
              var aData = this.texData.get(a.dataId);
              var bData = this.texData.get(b.dataId);
              var realProgram = new BinaryOpComplexProgram(COMPLEX_MULTIPLY.REAL, a.shape, b.shape);
              var imagProgram = new BinaryOpComplexProgram(COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);
              var inputs = [
                  this.makeComplexComponentTensorInfo(a, aData.complexTensors.real),
                  this.makeComplexComponentTensorInfo(a, aData.complexTensors.imag),
                  this.makeComplexComponentTensorInfo(b, bData.complexTensors.real),
                  this.makeComplexComponentTensorInfo(b, bData.complexTensors.imag)
              ];
              var real_1 = this.compileAndRun(realProgram, inputs);
              var imag_1 = this.compileAndRun(imagProgram, inputs);
              var complex_1 = this.complex(real_1, imag_1);
              real_1.dispose();
              imag_1.dispose();
              return complex_1;
          }
          if (this.shouldExecuteOnCPU([a, b])) {
              return this.cpuBackend.multiply(a, b);
          }
          if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
              return this.packedBinaryOp(a, b, MUL, a.dtype);
          }
          var program = new BinaryOpProgram(MUL, a.shape, b.shape);
          return this.compileAndRun(program, [a, b], a.dtype);
      };
      MathBackendWebGL.prototype.batchNorm = function (x, mean, variance, offset, scale, varianceEpsilon) {
          var inputs = [x, mean, variance];
          var offsetShape = null;
          if (offset != null) {
              offsetShape = offset.shape;
              inputs.push(offset);
          }
          var scaleShape = null;
          if (scale != null) {
              scaleShape = scale.shape;
              inputs.push(scale);
          }
          if (tf.env().getBool('WEBGL_PACK_NORMALIZATION')) {
              var batchNormPackedProgram = new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);
              return this.compileAndRun(batchNormPackedProgram, inputs);
          }
          var batchNormProgram = new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);
          return this.compileAndRun(batchNormProgram, inputs);
      };
      MathBackendWebGL.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta) {
          var program = tf.env().getBool('WEBGL_PACK_NORMALIZATION') ?
              new LRNPackedProgram(x.shape, radius, bias, alpha, beta) :
              new LRNProgram(x.shape, radius, bias, alpha, beta);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.LRNGrad = function (dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {
          var program = new LRNGradProgram(inputImage.shape, depthRadius, bias, alpha, beta);
          return this.compileAndRun(program, [inputImage, outputImage, dy]);
      };
      MathBackendWebGL.prototype.tile = function (x, reps) {
          if (x.dtype === 'string') {
              var data = this.readSync(x.dataId);
              var decodedData = data.map(function (d) { return tf.util.decodeString(d); });
              var buf = tf.buffer(x.shape, x.dtype, decodedData);
              return tile(buf, reps);
          }
          var program = new TileProgram(x.shape, reps);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.pad = function (x, paddings, constantValue) {
          var program = tf.env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?
              new PadPackedProgram(x.shape, paddings, constantValue) :
              new PadProgram(x.shape, paddings, constantValue);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.gather = function (x, indices, axis) {
          if (this.shouldExecuteOnCPU([x, indices])) {
              return this.cpuBackend.gather(x, indices, axis);
          }
          var program = new GatherProgram(x.shape, indices.size, axis);
          return this.compileAndRun(program, [x, indices]);
      };
      MathBackendWebGL.prototype.batchToSpaceND = function (x, blockShape, crops) {
          tf.util.assert(x.rank <= 4, function () { return 'batchToSpaceND for rank > 4 with a WebGL backend not ' +
              'implemented yet'; });
          var prod = blockShape.reduce(function (a, b) { return a * b; });
          var reshaped = tf.backend_util.getReshaped(x.shape, blockShape, prod);
          var permuted = tf.backend_util.getPermuted(reshaped.length, blockShape.length);
          var reshapedPermuted = tf.backend_util.getReshapedPermuted(x.shape, blockShape, prod);
          var sliceBeginCoords = tf.backend_util.getSliceBeginCoords(crops, blockShape.length);
          var sliceSize = tf.backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);
          return tf.transpose(x.reshape(reshaped), permuted)
              .reshape(reshapedPermuted)
              .slice(sliceBeginCoords, sliceSize);
      };
      MathBackendWebGL.prototype.spaceToBatchND = function (x, blockShape, paddings) {
          tf.util.assert(x.rank <= 4, function () { return 'spaceToBatchND for rank > 4 with a WebGL backend not ' +
              'implemented yet'; });
          var prod = blockShape.reduce(function (a, b) { return a * b; });
          var completePaddings = [[0, 0]];
          completePaddings.push.apply(completePaddings, paddings);
          for (var i = 1 + blockShape.length; i < x.shape.length; ++i) {
              completePaddings.push([0, 0]);
          }
          var paddedX = x.pad(completePaddings);
          var reshapedPaddedShape = tf.backend_util.getReshaped(paddedX.shape, blockShape, prod, false);
          var permutedReshapedPaddedPermutation = tf.backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);
          var flattenShape = tf.backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);
          var paddedXT = tf.transpose(paddedX.reshape(reshapedPaddedShape), permutedReshapedPaddedPermutation);
          return tf.reshape(paddedXT, flattenShape);
      };
      MathBackendWebGL.prototype.reduce = function (x, reduceType, dtype) {
          var batchSize = x.shape[0];
          var inSize = x.shape[1];
          var windowSize = tf.backend_util.computeOptimalWindowSize(inSize);
          var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };
          var program = new ReduceProgram(reduceInfo, reduceType);
          var output = this.compileAndRun(program, [x], dtype);
          // No need to run another GPGPU program.
          if (output.shape[1] === 1) {
              return output;
          }
          return this.reduce(output, reduceType, dtype);
      };
      MathBackendWebGL.prototype.argReduce = function (x, reduceType, bestIndicesA) {
          if (bestIndicesA === void 0) { bestIndicesA = null; }
          var batchSize = x.shape[0];
          var inSize = x.shape[1];
          if (bestIndicesA != null) {
              batchSize = bestIndicesA.shape[0];
              inSize = bestIndicesA.shape[1];
          }
          var windowSize = tf.backend_util.computeOptimalWindowSize(inSize);
          var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };
          var program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);
          var inputs = [x];
          if (bestIndicesA != null) {
              inputs.push(bestIndicesA);
          }
          var output = this.compileAndRun(program, inputs, 'int32');
          // No need to run another GPGPU program.
          if (output.shape[1] === 1) {
              return output;
          }
          return this.argReduce(x, reduceType, output);
      };
      MathBackendWebGL.prototype.argReducePacked = function (x, reduceType, bestIndicesA) {
          if (bestIndicesA === void 0) { bestIndicesA = null; }
          var inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;
          var inSize = inShape[inShape.length - 1];
          var windowSize = tf.backend_util.computeOptimalWindowSize(inSize);
          var program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);
          var inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];
          var output = this.compileAndRun(program, inputs, 'int32');
          if (output.rank === x.rank) {
              return this.argReducePacked(x, reduceType, output);
          }
          return output;
      };
      MathBackendWebGL.prototype.sum = function (x, axes) {
          tf.backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);
          var _a = tf.backend_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
          var inSize = tf.util.sizeFromShape(reduceShape);
          var a2D = x.as2D(-1, inSize);
          var outputDType = tf.sumOutType(x.dtype);
          return this.reduce(a2D, 'sum', outputDType).reshape(outShape);
      };
      MathBackendWebGL.prototype.prod = function (x, axes) {
          if (this.shouldExecuteOnCPU([x])) {
              return this.cpuBackend.prod(x, axes);
          }
          var _a = tf.backend_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
          var inSize = tf.util.sizeFromShape(reduceShape);
          var a2D = x.as2D(-1, inSize);
          var outputDType = tf.sumOutType(x.dtype);
          return this.reduce(a2D, 'prod', outputDType).reshape(outShape);
      };
      MathBackendWebGL.prototype.unsortedSegmentSum = function (x, segmentIds, numSegments) {
          var axis = 0;
          var permutation = tf.backend_util.getAxesPermutation([axis], x.rank);
          var permutedX = x;
          if (permutation != null) {
              permutedX = tf.transpose(x, permutation);
              axis = tf.backend_util.getInnerMostAxes(1, x.rank)[0];
          }
          var outShape = segment_util.computeOutShape(permutedX.shape, axis, numSegments);
          var inSize = tf.util.sizeFromShape([permutedX.shape[axis]]);
          var a2D = permutedX.as2D(-1, inSize);
          var outputDType = tf.sumOutType(x.dtype);
          var result = this.segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments)
              .reshape(outShape);
          if (permutation != null) {
              result =
                  tf.transpose(result, tf.backend_util.getUndoAxesPermutation(permutation));
          }
          return result;
      };
      MathBackendWebGL.prototype.segOpCompute = function (x, segOpType, segmentIds, dtype, numSegments) {
          var batchSize = x.shape[0];
          var inSize = x.shape[1];
          var windowSize = segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);
          var segOpInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize, numSegments: numSegments };
          var program = new SegmentOpProgram(segOpInfo, segOpType);
          var output = this.compileAndRun(program, [x, segmentIds], dtype);
          // No need to run another GPGPU program.
          if (output.shape[1] === numSegments) {
              return output;
          }
          segmentIds = tf.range(0, numSegments).tile([inSize / windowSize]);
          return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);
      };
      MathBackendWebGL.prototype.argMinMaxReduce = function (x, axis, reduceType) {
          var axes = [axis];
          tf.backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.rank);
          if (!tf.env().getBool('WEBGL_PACK_REDUCE') || x.rank <= 2) {
              var _a = tf.backend_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
              var inSize = tf.util.sizeFromShape(reduceShape);
              var a2D = x.as2D(-1, inSize);
              return this.argReduce(a2D, reduceType).reshape(outShape);
          }
          return this.argReducePacked(x, reduceType);
      };
      MathBackendWebGL.prototype.argMin = function (x, axis) {
          return this.argMinMaxReduce(x, axis, 'min');
      };
      MathBackendWebGL.prototype.argMax = function (x, axis) {
          return this.argMinMaxReduce(x, axis, 'max');
      };
      MathBackendWebGL.prototype.cumsum = function (x, axis, exclusive, reverse) {
          if (axis !== x.rank - 1) {
              throw new Error("WebGL cumsum shader expects an inner-most axis=" + (x.rank - 1) + " " +
                  ("but got axis=" + axis));
          }
          var size = x.shape[axis];
          var result = x;
          // Use cumsum parallel algorithm, ref:
          // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda
          for (var i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {
              var program = new CumSumProgram(x.shape, false, reverse);
              var customSetup = program.getCustomSetupFunc(i);
              var prevResult = result;
              result = this.compileAndRun(program, [result], result.dtype, customSetup);
              prevResult.dispose();
          }
          // For exclusive cumsum, shift the end result in the direction of sum and
          // add 0 to the front index.
          if (exclusive) {
              var program = new CumSumProgram(x.shape, exclusive, reverse);
              var prevResult = result;
              result = this.compileAndRun(program, [result]);
              prevResult.dispose();
          }
          return result;
      };
      MathBackendWebGL.prototype.equal = function (a, b) {
          if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
              return this.packedBinaryOp(a, b, EQUAL$1, 'bool');
          }
          var program = new BinaryOpProgram(EQUAL, a.shape, b.shape);
          return this.compileAndRun(program, [a, b], 'bool');
      };
      MathBackendWebGL.prototype.notEqual = function (a, b) {
          if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
              return this.packedBinaryOp(a, b, NOT_EQUAL$1, 'bool');
          }
          var program = new BinaryOpProgram(NOT_EQUAL, a.shape, b.shape);
          return this.compileAndRun(program, [a, b], 'bool');
      };
      MathBackendWebGL.prototype.less = function (a, b) {
          if (this.shouldExecuteOnCPU([a, b])) {
              return this.cpuBackend.less(a, b);
          }
          if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
              return this.packedBinaryOp(a, b, LESS$1, 'bool');
          }
          var program = new BinaryOpProgram(LESS, a.shape, b.shape);
          return this.compileAndRun(program, [a, b], 'bool');
      };
      MathBackendWebGL.prototype.lessEqual = function (a, b) {
          if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
              return this.packedBinaryOp(a, b, LESS_EQUAL$1, 'bool');
          }
          var program = new BinaryOpProgram(LESS_EQUAL, a.shape, b.shape);
          return this.compileAndRun(program, [a, b], 'bool');
      };
      MathBackendWebGL.prototype.greater = function (a, b) {
          if (this.shouldExecuteOnCPU([a, b])) {
              return this.cpuBackend.greater(a, b);
          }
          if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
              return this.packedBinaryOp(a, b, GREATER$1, 'bool');
          }
          var program = new BinaryOpProgram(GREATER, a.shape, b.shape);
          return this.compileAndRun(program, [a, b], 'bool');
      };
      MathBackendWebGL.prototype.greaterEqual = function (a, b) {
          if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
              return this.packedBinaryOp(a, b, GREATER_EQUAL$1, 'bool');
          }
          var program = new BinaryOpProgram(GREATER_EQUAL, a.shape, b.shape);
          return this.compileAndRun(program, [a, b], 'bool');
      };
      MathBackendWebGL.prototype.logicalNot = function (x) {
          var program = new UnaryOpProgram(x.shape, LOGICAL_NOT);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.logicalAnd = function (a, b) {
          if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
              return this.packedBinaryOp(a, b, LOGICAL_AND$1, 'bool');
          }
          var program = new BinaryOpProgram(LOGICAL_AND, a.shape, b.shape);
          return this.compileAndRun(program, [a, b], 'bool');
      };
      MathBackendWebGL.prototype.logicalOr = function (a, b) {
          if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
              return this.packedBinaryOp(a, b, LOGICAL_OR$1, 'bool');
          }
          var program = new BinaryOpProgram(LOGICAL_OR, a.shape, b.shape);
          return this.compileAndRun(program, [a, b], 'bool');
      };
      MathBackendWebGL.prototype.select = function (condition, a, b) {
          var program = new SelectProgram(condition.rank, a.shape, a.rank);
          return this.compileAndRun(program, [condition, a, b], tf.upcastType(a.dtype, b.dtype));
      };
      MathBackendWebGL.prototype.where = function (condition) {
          tf.backend_util.warn('tf.where() in webgl locks the UI thread. ' +
              'Call tf.whereAsync() instead');
          var condVals = condition.dataSync();
          return whereImpl(condition.shape, condVals);
      };
      MathBackendWebGL.prototype.topk = function (x, k, sorted) {
          var xVals = x.dataSync();
          return topkImpl(xVals, x.shape, x.dtype, k, sorted);
      };
      MathBackendWebGL.prototype.min = function (x, axes) {
          tf.backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);
          var _a = tf.backend_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
          var inSize = tf.util.sizeFromShape(reduceShape);
          var a2D = x.as2D(-1, inSize);
          return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);
      };
      MathBackendWebGL.prototype.minimum = function (a, b) {
          if (this.shouldExecuteOnCPU([a, b])) {
              return this.cpuBackend.minimum(a, b);
          }
          var program = tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?
              new BinaryOpPackedProgram(MIN$1, a.shape, b.shape) :
              new BinaryOpProgram(MIN, a.shape, b.shape);
          return this.compileAndRun(program, [a, b]);
      };
      MathBackendWebGL.prototype.mod = function (a, b) {
          var program = tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?
              new BinaryOpPackedProgram(MOD$1, a.shape, b.shape) :
              new BinaryOpProgram(MOD, a.shape, b.shape);
          return this.compileAndRun(program, [a, b]);
      };
      MathBackendWebGL.prototype.maximum = function (a, b) {
          if (this.shouldExecuteOnCPU([a, b])) {
              return this.cpuBackend.maximum(a, b);
          }
          var program = tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?
              new BinaryOpPackedProgram(MAX$1, a.shape, b.shape) :
              new BinaryOpProgram(MAX, a.shape, b.shape);
          return this.compileAndRun(program, [a, b]);
      };
      MathBackendWebGL.prototype.all = function (x, axes) {
          tf.backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);
          var _a = tf.backend_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
          var inSize = tf.util.sizeFromShape(reduceShape);
          var a2D = x.as2D(-1, inSize);
          return this.reduce(a2D, 'all', a2D.dtype).reshape(outShape);
      };
      MathBackendWebGL.prototype.any = function (x, axes) {
          tf.backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);
          var _a = tf.backend_util.computeOutAndReduceShapes(x.shape, axes), outShape = _a[0], reduceShape = _a[1];
          var inSize = tf.util.sizeFromShape(reduceShape);
          var a2D = x.as2D(-1, inSize);
          return this.reduce(a2D, 'any', a2D.dtype).reshape(outShape);
      };
      MathBackendWebGL.prototype.floorDiv = function (a, b) {
          var op = INT_DIV;
          var outputDtype = 'int32';
          if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
              return this.packedBinaryOp(a, b, INT_DIV$1, outputDtype);
          }
          var program = new BinaryOpProgram(op, a.shape, b.shape);
          return this.compileAndRun(program, [a, b], outputDtype);
      };
      MathBackendWebGL.prototype.add = function (a, b) {
          if (a.dtype === 'complex64' && b.dtype === 'complex64') {
              return this.complexSeparableBinaryOp(a, b, ADD);
          }
          if (this.shouldExecuteOnCPU([a, b])) {
              return this.cpuBackend.add(a, b);
          }
          var dtype = tf.upcastType(a.dtype, b.dtype);
          if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
              return this.packedBinaryOp(a, b, ADD, dtype);
          }
          var program = new BinaryOpProgram(ADD, a.shape, b.shape);
          return this.compileAndRun(program, [a, b], dtype);
      };
      MathBackendWebGL.prototype.packedUnaryOp = function (x, op, dtype) {
          var program = new UnaryOpPackedProgram(x.shape, op);
          return this.compileAndRun(program, [x], dtype);
      };
      MathBackendWebGL.prototype.packedBinaryOp = function (a, b, op, dtype, checkOutOfBounds) {
          if (checkOutOfBounds === void 0) { checkOutOfBounds = false; }
          var program = new BinaryOpPackedProgram(op, a.shape, b.shape, checkOutOfBounds);
          return this.compileAndRun(program, [a, b], dtype);
      };
      /**
       * Computes a complex binary operation that can be decomposed into a simple
       * binary operation on both the real and imagary parts.
       */
      MathBackendWebGL.prototype.complexSeparableBinaryOp = function (a, b, op) {
          var _this = this;
          var aData = this.texData.get(a.dataId);
          var bData = this.texData.get(b.dataId);
          var _a = [
              [aData.complexTensors.real, bData.complexTensors.real],
              [aData.complexTensors.imag, bData.complexTensors.imag]
          ].map(function (complexParts) {
              var aPart = complexParts[0], bPart = complexParts[1];
              var aHandle = _this.makeComplexComponentTensorInfo(a, aPart);
              var bHandle = _this.makeComplexComponentTensorInfo(b, bPart);
              var program = new BinaryOpProgram(op, a.shape, b.shape);
              return _this.compileAndRun(program, [aHandle, bHandle], tf.upcastType(aPart.dtype, bPart.dtype));
          }), real = _a[0], imag = _a[1];
          var complex = this.complex(real, imag);
          real.dispose();
          imag.dispose();
          return complex;
      };
      // Returns a TensorInfo with the complex shape and the dataId of the
      // underlying part. We need to do this because a reshaped complex tensor is
      // not reflected in its parts.
      MathBackendWebGL.prototype.makeComplexComponentTensorInfo = function (complexTensor, complexPart) {
          return {
              dataId: complexPart.dataId,
              dtype: complexPart.dtype,
              shape: complexTensor.shape
          };
      };
      MathBackendWebGL.prototype.addN = function (tensors) {
          if (tensors.length === 1) {
              return tensors[0];
          }
          // Limit the number of uploaded textures for optimization.
          if (tensors.length > tf.env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {
              var midIndex = Math.floor(tensors.length / 2);
              var leftSide = this.addN(tensors.slice(0, midIndex));
              var rightSide = this.addN(tensors.slice(midIndex));
              return this.addN([leftSide, rightSide]);
          }
          var dtype = tensors.map(function (t) { return t.dtype; }).reduce(function (d1, d2) { return tf.upcastType(d1, d2); });
          var shapes = tensors.map(function (t) { return t.shape; });
          // We can make sure shapes are identical in op level.
          var usePackedOp = tf.env().getBool('WEBGL_PACK');
          var program = usePackedOp ?
              new AddNPackedProgram(tensors[0].shape, shapes) :
              new AddNProgram(tensors[0].shape, shapes);
          return this.compileAndRun(program, tensors, dtype);
      };
      MathBackendWebGL.prototype.subtract = function (a, b) {
          if (a.dtype === 'complex64' && b.dtype === 'complex64') {
              return this.complexSeparableBinaryOp(a, b, SUB);
          }
          if (this.shouldExecuteOnCPU([a, b])) {
              return this.cpuBackend.subtract(a, b);
          }
          var dtype = tf.upcastType(a.dtype, b.dtype);
          if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
              return this.packedBinaryOp(a, b, SUB, a.dtype);
          }
          var program = new BinaryOpProgram(SUB, a.shape, b.shape);
          return this.compileAndRun(program, [a, b], dtype);
      };
      MathBackendWebGL.prototype.pow = function (a, b) {
          var usePackedOp = tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS');
          var program = usePackedOp ?
              new BinaryOpPackedProgram(POW$1, a.shape, b.shape) :
              new BinaryOpProgram(POW, a.shape, b.shape);
          var dtype = tf.upcastType(a.dtype, b.dtype);
          return this.compileAndRun(program, [a, b], dtype);
      };
      MathBackendWebGL.prototype.ceil = function (x) {
          if (this.shouldExecuteOnCPU([x])) {
              return this.cpuBackend.ceil(x);
          }
          if (tf.env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
              return this.packedUnaryOp(x, CEIL, x.dtype);
          }
          var program = new UnaryOpProgram(x.shape, CEIL);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.floor = function (x) {
          if (this.shouldExecuteOnCPU([x])) {
              return this.cpuBackend.floor(x);
          }
          if (tf.env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
              return this.packedUnaryOp(x, FLOOR, x.dtype);
          }
          var program = new UnaryOpProgram(x.shape, FLOOR);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.sign = function (x) {
          var program = new UnaryOpProgram(x.shape, SIGN);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.isNaN = function (x) {
          var program = new UnaryOpProgram(x.shape, IS_NAN);
          return this.compileAndRun(program, [x], 'bool');
      };
      MathBackendWebGL.prototype.isInf = function (x) {
          var program = new UnaryOpProgram(x.shape, IS_INF);
          return this.compileAndRun(program, [x], 'bool');
      };
      MathBackendWebGL.prototype.isFinite = function (x) {
          var program = new UnaryOpProgram(x.shape, IS_FINITE);
          return this.compileAndRun(program, [x], 'bool');
      };
      MathBackendWebGL.prototype.round = function (x) {
          var program = new UnaryOpProgram(x.shape, ROUND);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.exp = function (x) {
          if (this.shouldExecuteOnCPU([x])) {
              return this.cpuBackend.exp(x);
          }
          if (tf.env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
              return this.packedUnaryOp(x, EXP, x.dtype);
          }
          var program = new UnaryOpProgram(x.shape, EXP);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.expm1 = function (x) {
          if (this.shouldExecuteOnCPU([x])) {
              return this.cpuBackend.expm1(x);
          }
          if (tf.env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
              return this.packedUnaryOp(x, EXPM1, x.dtype);
          }
          var program = new UnaryOpProgram(x.shape, EXPM1);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.softmax = function (logits, dim) {
          var axes = tf.util.parseAxisParam([dim], logits.shape);
          // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel
          // modularization.
          var maxLogit = tf.max(logits, axes);
          var expandedShape = tf.backend_util.expandShapeToKeepDim(maxLogit.shape, axes);
          var a = this.subtract(logits, maxLogit.reshape(expandedShape));
          var b = this.exp(a);
          var sumExp = this.sum(b, axes).reshape(expandedShape);
          // TODO(annxingyuan): Call divImpl rather than op as part of softmax kernel
          // modularization.
          return tf.div(b, sumExp);
      };
      MathBackendWebGL.prototype.log = function (x) {
          if (this.shouldExecuteOnCPU([x])) {
              return this.cpuBackend.log(x);
          }
          if (tf.env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
              return this.packedUnaryOp(x, LOG$1, x.dtype);
          }
          var program = new UnaryOpProgram(x.shape, LOG);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.log1p = function (x) {
          var program = new UnaryOpProgram(x.shape, LOG1P);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.sqrt = function (x) {
          var program = new UnaryOpProgram(x.shape, SQRT);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.rsqrt = function (x) {
          if (this.shouldExecuteOnCPU([x])) {
              return this.cpuBackend.rsqrt(x);
          }
          var program = new UnaryOpProgram(x.shape, RSQRT);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.reciprocal = function (x) {
          var program = new UnaryOpProgram(x.shape, RECIPROCAL);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.relu = function (x) {
          var program;
          if (tf.env().getBool('WEBGL_PACK')) {
              program = new UnaryOpPackedProgram(x.shape, RELU$1);
          }
          else {
              program = new UnaryOpProgram(x.shape, RELU);
          }
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.relu6 = function (x) {
          var program;
          if (tf.env().getBool('WEBGL_PACK')) {
              program = new UnaryOpPackedProgram(x.shape, RELU6$1);
          }
          else {
              program = new UnaryOpProgram(x.shape, RELU6);
          }
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.prelu = function (x, alpha) {
          var program = tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?
              new BinaryOpPackedProgram(PRELU$1, x.shape, alpha.shape) :
              new BinaryOpProgram(PRELU, x.shape, alpha.shape);
          return this.compileAndRun(program, [x, alpha]);
      };
      MathBackendWebGL.prototype.elu = function (x) {
          if (tf.env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
              return this.packedUnaryOp(x, ELU$1, x.dtype);
          }
          var program = new UnaryOpProgram(x.shape, ELU);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.eluDer = function (dy, y) {
          var program = tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?
              new BinaryOpPackedProgram(ELU_DER$1, dy.shape, y.shape) :
              new BinaryOpProgram(ELU_DER, dy.shape, y.shape);
          return this.compileAndRun(program, [dy, y]);
      };
      MathBackendWebGL.prototype.selu = function (x) {
          var program = new UnaryOpProgram(x.shape, SELU);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.int = function (x) {
          var program = new UnaryOpProgram(x.shape, TO_INT);
          return this.compileAndRun(program, [x], 'int32');
      };
      MathBackendWebGL.prototype.clip = function (x, min, max) {
          var program;
          if (tf.env().getBool('WEBGL_PACK_CLIP')) {
              program = new ClipPackedProgram(x.shape);
          }
          else {
              program = new ClipProgram(x.shape);
          }
          var customSetup = program.getCustomSetupFunc(min, max);
          return this.compileAndRun(program, [x], null, customSetup);
      };
      MathBackendWebGL.prototype.abs = function (x) {
          if (this.shouldExecuteOnCPU([x])) {
              return this.cpuBackend.abs(x);
          }
          if (tf.env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
              return this.packedUnaryOp(x, ABS, x.dtype);
          }
          var program = new UnaryOpProgram(x.shape, ABS);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.complexAbs = function (x) {
          var xData = this.texData.get(x.dataId);
          var program = new ComplexAbsProgram(x.shape);
          var inputs = [
              this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),
              this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),
          ];
          return this.compileAndRun(program, inputs);
      };
      MathBackendWebGL.prototype.sigmoid = function (x) {
          var program = new UnaryOpProgram(x.shape, SIGMOID);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.softplus = function (x) {
          var program = new UnaryOpProgram(x.shape, SOFTPLUS);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.sin = function (x) {
          var program = new UnaryOpProgram(x.shape, SIN);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.cos = function (x) {
          var program = new UnaryOpProgram(x.shape, COS);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.tan = function (x) {
          var program = new UnaryOpProgram(x.shape, TAN);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.asin = function (x) {
          var program = new UnaryOpProgram(x.shape, ASIN);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.acos = function (x) {
          var program = new UnaryOpProgram(x.shape, ACOS);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.atan = function (x) {
          var program = new UnaryOpProgram(x.shape, ATAN);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.atan2 = function (a, b) {
          var program = tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?
              new BinaryOpPackedProgram(ATAN2$1, a.shape, b.shape) :
              new BinaryOpProgram(ATAN2, a.shape, b.shape);
          return this.compileAndRun(program, [a, b]);
      };
      MathBackendWebGL.prototype.sinh = function (x) {
          var program = new UnaryOpProgram(x.shape, SINH);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.cosh = function (x) {
          var program = new UnaryOpProgram(x.shape, COSH);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.tanh = function (x) {
          var program = new UnaryOpProgram(x.shape, TANH);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.asinh = function (x) {
          var program = new UnaryOpProgram(x.shape, ASINH);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.acosh = function (x) {
          var program = new UnaryOpProgram(x.shape, ACOSH);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.atanh = function (x) {
          var program = new UnaryOpProgram(x.shape, ATANH);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.erf = function (x) {
          var program = new UnaryOpProgram(x.shape, ERF);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.step = function (x, alpha) {
          var program = new UnaryOpProgram(x.shape, STEP(alpha));
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.conv2dByMatMul = function (x, filter, convInfo, bias, activation, preluActivationWeights) {
          // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the
          // result from 2D to 4D.
          var xShape = x.shape;
          var xTexData = this.texData.get(x.dataId);
          var sharedMatMulDim = convInfo.inChannels;
          var outerShapeX = xShape[0] * xShape[1] * xShape[2];
          var outerShapeFilter = convInfo.outChannels;
          var isChannelsLast = convInfo.dataFormat === 'channelsLast';
          var transposeA = false;
          var transposeB = false;
          // TODO: Once reduction ops are packed, batchMatMul will always be packed
          // and we can remove this condition.
          var batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) &&
              sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;
          var reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;
          if (batchMatMulWillBeUnpacked || !tf.env().getBool('WEBGL_LAZILY_UNPACK') ||
              !tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||
              !reshapeWillBeExpensive) {
              var targetShape_1 = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :
                  xShape[0] * xShape[2] * xShape[3];
              var xReshaped_1 = this.reshape(x, [1, targetShape_1, convInfo.inChannels]);
              var filterReshaped_1 = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);
              return this.reshape(this.fusedBatchMatMul({
                  a: xReshaped_1,
                  b: filterReshaped_1,
                  transposeA: transposeA,
                  transposeB: transposeB,
                  bias: bias,
                  activation: activation,
                  preluActivationWeights: preluActivationWeights
              }), convInfo.outShape);
          }
          // Following optimization is specific to packed |x| with odd row count
          // (For example, in channelLast mode, 'row count' refers to x.shape[2]):
          // we avoid expensive packed 2x2 reshape by padding row count to next,
          // even number. When x.shape[2] is odd, the result of packed batchMatMul is
          // the same (has the same texture layout and and values in the texture) as
          // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like
          // even-rows tensor before the operation and, after the batchMatMul,
          // fix the even-rows result to have odd number of rows.
          var targetShape = isChannelsLast ?
              xShape[0] * xShape[1] * (xShape[2] + 1) :
              xShape[0] * xShape[2] * (xShape[3] + 1);
          var xReshaped = {
              dataId: x.dataId,
              shape: [1, targetShape, convInfo.inChannels],
              dtype: x.dtype
          };
          // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.
          // Decrementing row count, after batchMatMul->...->compileProgram leads to
          // invalid row count within the reference in GPGPUBinary.inShapeInfos.
          // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos
          // in compileProgram method, but that would affect compilation of all
          // programs - instead, provide a copy here, with even row count, before
          // calling batchMatMul->...->compileProgram and after that, the original
          // xTexData.shape is restored.
          var originalXTexDataShape = xTexData.shape;
          xTexData.shape = xTexData.shape.slice();
          xTexData.shape[xTexData.shape.length - 2]++;
          tf.util.assert(isReshapeFree(xTexData.shape, xReshaped.shape), function () { return "packed reshape " + xTexData.shape + " to " + xReshaped.shape + " isn't free"; });
          var filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);
          var pointwiseConv = this.fusedBatchMatMul({
              a: xReshaped,
              b: filterReshaped,
              transposeA: transposeA,
              transposeB: transposeB,
              bias: bias,
              activation: activation,
              preluActivationWeights: preluActivationWeights
          });
          var pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);
          tf.util.assert(pointwiseConvTexData.isPacked, function () { return 'batchMatMul result is expected to be packed'; });
          // Restore the input shape to original.
          xTexData.shape = originalXTexDataShape;
          // Set the output shape - there is no need for expensive reshape as data
          // layout is already correct.
          pointwiseConvTexData.shape = convInfo.outShape;
          return tf.engine().makeTensorFromDataId(pointwiseConv.dataId, convInfo.outShape, pointwiseConv.dtype);
      };
      MathBackendWebGL.prototype.conv2dWithIm2Row = function (x, filter, convInfo, bias, activation, preluActivationWeights) {
          // Rearranges conv2d input so each block to be convolved over forms the
          // column of a new matrix with shape [filterWidth * filterHeight *
          // inChannels, outHeight * outWidth]. The filter is also rearranged so each
          // output channel forms a row of a new matrix with shape [outChannels,
          // filterWidth * filterHeight * inChannels]. The convolution is then
          // computed by multiplying these matrices and reshaping the result.
          var filterWidth = convInfo.filterWidth, filterHeight = convInfo.filterHeight, inChannels = convInfo.inChannels, outWidth = convInfo.outWidth, outHeight = convInfo.outHeight, dataFormat = convInfo.dataFormat;
          var isChannelsLast = dataFormat === 'channelsLast';
          var sharedDim = filterWidth * filterHeight * inChannels;
          var numCols = outHeight * outWidth;
          var x2ColShape = [sharedDim, numCols];
          var transposeA = true;
          var transposeB = false;
          var xSqueezed = x.squeeze([0]);
          var w2Row = filter.reshape([1, sharedDim, -1]);
          var im2ColProgram = new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);
          var im2Col = this.compileAndRun(im2ColProgram, [xSqueezed]).reshape([
              1, x2ColShape[0], x2ColShape[1]
          ]);
          var hasBias = bias != null;
          var hasPreluActivationWeights = preluActivationWeights != null;
          var fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;
          var matmulProgram = new MatMulPackedProgram(im2Col.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);
          var inputs = [im2Col, w2Row];
          if (bias) {
              inputs.push(bias);
          }
          if (hasPreluActivationWeights) {
              inputs.push(preluActivationWeights);
          }
          var product = this.compileAndRun(matmulProgram, inputs);
          if (isChannelsLast) {
              return product.reshape([1, outHeight, outWidth, convInfo.outChannels]);
          }
          else {
              return product.reshape([1, convInfo.outChannels, outHeight, outWidth]);
          }
      };
      MathBackendWebGL.prototype.fusedConv2d = function (_a) {
          var input = _a.input, filter = _a.filter, convInfo = _a.convInfo, bias = _a.bias, activation = _a.activation, preluActivationWeights = _a.preluActivationWeights;
          if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&
              convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&
              convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&
              (convInfo.padInfo.type === 'SAME' ||
                  convInfo.padInfo.type === 'VALID')) {
              return this.conv2dByMatMul(input, filter, convInfo, bias, activation, preluActivationWeights);
          }
          if (tf.env().getBool('WEBGL_CONV_IM2COL') && input.shape[0] === 1) {
              return this.conv2dWithIm2Row(input, filter, convInfo, bias, activation, preluActivationWeights);
          }
          var hasBias = bias != null;
          var hasPreluActivationWeights = preluActivationWeights != null;
          var fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;
          var program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);
          var inputs = [input, filter];
          if (bias) {
              inputs.push(bias);
          }
          if (preluActivationWeights) {
              inputs.push(preluActivationWeights);
          }
          return this.compileAndRun(program, inputs);
      };
      MathBackendWebGL.prototype.conv2d = function (x, filter, convInfo) {
          if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&
              convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&
              convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&
              (convInfo.padInfo.type === 'SAME' ||
                  convInfo.padInfo.type === 'VALID')) {
              return this.conv2dByMatMul(x, filter, convInfo);
          }
          if (tf.env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {
              return this.conv2dWithIm2Row(x, filter, convInfo);
          }
          var program = new Conv2DProgram(convInfo);
          return this.compileAndRun(program, [x, filter]);
      };
      MathBackendWebGL.prototype.conv2dDerInput = function (dy, filter, convInfo) {
          var program = new Conv2DDerInputProgram(convInfo);
          return this.compileAndRun(program, [dy, filter]);
      };
      MathBackendWebGL.prototype.conv2dDerFilter = function (x, dy, convInfo) {
          var program = new Conv2DDerFilterProgram(convInfo);
          return this.compileAndRun(program, [x, dy]);
      };
      MathBackendWebGL.prototype.fusedDepthwiseConv2D = function (_a) {
          var input = _a.input, filter = _a.filter, convInfo = _a.convInfo, bias = _a.bias, activation = _a.activation, preluActivationWeights = _a.preluActivationWeights;
          var shouldPackDepthwiseConv = tf.env().getBool('WEBGL_PACK_DEPTHWISECONV') &&
              convInfo.strideWidth <= 2 &&
              convInfo.outChannels / convInfo.inChannels === 1;
          var fusedActivation = activation ?
              mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :
              null;
          var inputs = [input, filter];
          var hasBias = bias != null;
          var hasPreluActivationWeights = preluActivationWeights != null;
          if (hasBias) {
              inputs.push(bias);
          }
          if (hasPreluActivationWeights) {
              inputs.push(preluActivationWeights);
          }
          var program;
          if (shouldPackDepthwiseConv) {
              program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);
              return this.compileAndRun(program, inputs);
          }
          program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);
          return this.compileAndRun(program, inputs);
      };
      MathBackendWebGL.prototype.depthwiseConv2D = function (x, filter, convInfo) {
          var program;
          if (tf.env().getBool('WEBGL_PACK_DEPTHWISECONV') &&
              convInfo.strideWidth <= 2 &&
              convInfo.outChannels / convInfo.inChannels === 1) {
              program = new DepthwiseConvPacked2DProgram(convInfo);
              return this.compileAndRun(program, [x, filter]);
          }
          program = new DepthwiseConv2DProgram(convInfo);
          return this.compileAndRun(program, [x, filter]);
      };
      MathBackendWebGL.prototype.depthwiseConv2DDerInput = function (dy, filter, convInfo) {
          var program = new DepthwiseConv2DDerInputProgram(convInfo);
          return this.compileAndRun(program, [dy, filter]);
      };
      MathBackendWebGL.prototype.depthwiseConv2DDerFilter = function (x, dy, convInfo) {
          var program = new DepthwiseConv2DDerFilterProgram(convInfo);
          return this.compileAndRun(program, [x, dy]);
      };
      MathBackendWebGL.prototype.conv3d = function (x, filter, convInfo) {
          var program = new Conv3DProgram(convInfo);
          return this.compileAndRun(program, [x, filter]);
      };
      MathBackendWebGL.prototype.conv3dDerInput = function (dy, filter, convInfo) {
          var program = new Conv3DDerInputProgram(convInfo);
          return this.compileAndRun(program, [dy, filter]);
      };
      MathBackendWebGL.prototype.conv3dDerFilter = function (x, dy, convInfo) {
          var program = new Conv3DDerFilterProgram(convInfo);
          return this.compileAndRun(program, [x, dy]);
      };
      MathBackendWebGL.prototype.maxPool = function (x, convInfo) {
          var program = new Pool2DProgram(convInfo, 'max', false);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.avgPool = function (x, convInfo) {
          var program = new Pool2DProgram(convInfo, 'avg', false);
          return this.compileAndRun(program, [x], 'float32');
      };
      MathBackendWebGL.prototype.maxPoolBackprop = function (dy, x, y, convInfo) {
          var getPositions = true;
          var maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);
          var maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [x]);
          var maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);
          var result = this.compileAndRun(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);
          maxPoolPositions.dispose();
          return result;
      };
      MathBackendWebGL.prototype.avgPoolBackprop = function (dy, x, convInfo) {
          var avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);
          return this.compileAndRun(avgPoolBackpropProgram, [dy], x.dtype);
      };
      MathBackendWebGL.prototype.cast = function (x, dtype) {
          return tf.backend_util.castTensor(x, dtype, this);
      };
      MathBackendWebGL.prototype.unstack = function (x, axis) {
          var num = x.shape[axis];
          var outShape = new Array(x.rank - 1);
          var outIndex = 0;
          for (var i = 0; i < x.rank; i++) {
              if (i !== axis) {
                  outShape[outIndex++] = x.shape[i];
              }
          }
          var begin = new Array(x.rank).fill(0);
          var size = x.shape.slice();
          size[axis] = 1;
          var res = new Array(num);
          for (var i = 0; i < res.length; i++) {
              begin[axis] = i;
              res[i] = this.slice(x, begin, size).reshape(outShape);
          }
          return res;
      };
      MathBackendWebGL.prototype.avgPool3d = function (x, convInfo) {
          var program = new Pool3DProgram(convInfo, 'avg', false);
          return this.compileAndRun(program, [x], 'float32');
      };
      MathBackendWebGL.prototype.avgPool3dBackprop = function (dy, x, convInfo) {
          var avgPool3dBackpropProgram = new AvgPool3DBackpropProgram(convInfo);
          return this.compileAndRun(avgPool3dBackpropProgram, [dy], x.dtype);
      };
      MathBackendWebGL.prototype.maxPool3d = function (x, convInfo) {
          var program = new Pool3DProgram(convInfo, 'max', false);
          return this.compileAndRun(program, [x], 'float32');
      };
      MathBackendWebGL.prototype.maxPool3dBackprop = function (dy, x, y, convInfo) {
          var getPositions = true;
          var maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', getPositions);
          var maxPool3dPositions = this.compileAndRun(maxPool3dPositionsProgram, [x]);
          var maxPool3dBackPropProgram = new MaxPool3DBackpropProgram(convInfo);
          var result = this.compileAndRun(maxPool3dBackPropProgram, [dy, maxPool3dPositions], x.dtype);
          maxPool3dPositions.dispose();
          return result;
      };
      MathBackendWebGL.prototype.reshape = function (x, shape) {
          var texData = this.texData.get(x.dataId);
          if (texData.isPacked && !isReshapeFree(x.shape, shape) &&
              !(texData.texture !== null &&
                  isReshapeFree(texData.shape, shape))) {
              var info = this.packedReshape(x, shape);
              return tf.engine().makeTensorFromDataId(info.dataId, info.shape, info.dtype);
          }
          return tf.backend_util.reshapeTensor(x, shape);
      };
      MathBackendWebGL.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {
          var program = tf.env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?
              new ResizeBilinearPackedProgram(x.shape, newHeight, newWidth, alignCorners) :
              new ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);
          return this.compileAndRun(program, [x], 'float32');
      };
      MathBackendWebGL.prototype.resizeBilinearBackprop = function (dy, x, alignCorners) {
          var program = new ResizeBilinearBackpropProgram(dy, x, alignCorners);
          return this.compileAndRun(program, [dy]);
      };
      MathBackendWebGL.prototype.resizeNearestNeighbor = function (x, newHeight, newWidth, alignCorners) {
          var program = new ResizeNearestNeighborProgram(x.shape, newHeight, newWidth, alignCorners);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.resizeNearestNeighborBackprop = function (dy, x, alignCorners) {
          var program = new ResizeNearestNeigborBackpropProgram(dy, x, alignCorners);
          return this.compileAndRun(program, [dy]);
      };
      MathBackendWebGL.prototype.multinomial = function (logits, normalized, numSamples, seed) {
          var probs = normalized ? logits : tf.softmax(logits);
          var batchSize = probs.shape[0];
          var numOutcomes = probs.shape[1];
          var program = new MultinomialProgram(batchSize, numOutcomes, numSamples);
          var customSetup = program.getCustomSetupFunc(seed);
          return this.compileAndRun(program, [probs], 'int32', customSetup);
      };
      MathBackendWebGL.prototype.oneHot = function (indices, depth, onValue, offValue) {
          var program = new OneHotProgram(indices.size, depth, onValue, offValue);
          return this.compileAndRun(program, [indices]);
      };
      MathBackendWebGL.prototype.diag = function (x) {
          var program = new DiagProgram(x.size);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.cropAndResize = function (image, boxes, boxIndex, cropSize, method, extrapolationValue) {
          var program = new CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);
          return this.compileAndRun(program, [image, boxes, boxIndex], 'float32');
      };
      MathBackendWebGL.prototype.depthToSpace = function (x, blockSize, dataFormat) {
          tf.util.assert(blockSize > 1, function () {
              return "blockSize should be > 1 for depthToSpace, but was: " + blockSize;
          });
          var batchSize = x.shape[0];
          var inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];
          var inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];
          var inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];
          var outputHeight = inputHeight * blockSize;
          var outputWidth = inputWidth * blockSize;
          var outputDepth = inputDepth / (blockSize * blockSize);
          var outputShape = (dataFormat === 'NHWC') ?
              [batchSize, outputHeight, outputWidth, outputDepth] :
              [batchSize, outputDepth, outputHeight, outputWidth];
          var program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);
          return this.compileAndRun(program, [x]);
      };
      MathBackendWebGL.prototype.split = function (x, sizeSplits, axis) {
          return split(x, sizeSplits, axis);
      };
      MathBackendWebGL.prototype.scatterND = function (indices, updates, shape) {
          var _a = tf.backend_util.calculateShapes(updates, indices, shape), sliceRank = _a.sliceRank, numUpdates = _a.numUpdates, sliceSize = _a.sliceSize, strides = _a.strides, outputSize = _a.outputSize;
          var flattenShape = [outputSize / sliceSize, sliceSize];
          var flattenIndices = indices.reshape([numUpdates, sliceRank]);
          var flattenX = updates.reshape([numUpdates, sliceSize]);
          if (outputSize === 0) {
              return tf.backend_util.reshapeTensor(tf.tensor([]), shape);
          }
          var defaultValue = tf.scalar(0);
          var program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides, flattenShape);
          var res = this.compileAndRun(program, [flattenX, flattenIndices, defaultValue]);
          return res.reshape(shape);
      };
      MathBackendWebGL.prototype.sparseToDense = function (sparseIndices, sparseValues, outputShape, defaultValue) {
          var _a = tf.backend_util.calculateShapes(sparseValues, sparseIndices, outputShape), sliceRank = _a.sliceRank, numUpdates = _a.numUpdates, strides = _a.strides, outputSize = _a.outputSize;
          var sumDupeIndices = false;
          var program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides, [outputSize, 1], sumDupeIndices);
          var res = this.compileAndRun(program, [sparseValues, sparseIndices, defaultValue]);
          return res.reshape(outputShape);
      };
      MathBackendWebGL.prototype.fft = function (x) {
          var inverse = false;
          return this.fftImpl(x, inverse);
      };
      MathBackendWebGL.prototype.ifft = function (x) {
          var inverse = true;
          return this.fftImpl(x, inverse);
      };
      MathBackendWebGL.prototype.fftImpl = function (x, inverse) {
          var xData = this.texData.get(x.dataId);
          var realProgram = new FFTProgram(COMPLEX_FFT.REAL, x.shape, inverse);
          var imagProgram = new FFTProgram(COMPLEX_FFT.IMAG, x.shape, inverse);
          var inputs = [
              this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),
              this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),
          ];
          var real = this.compileAndRun(realProgram, inputs);
          var imag = this.compileAndRun(imagProgram, inputs);
          var complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);
          real.dispose();
          imag.dispose();
          return complex;
      };
      MathBackendWebGL.prototype.gatherND = function (x, indices) {
          var indicesShape = indices.shape;
          var sliceRank = indicesShape[indicesShape.length - 1];
          var _a = tf.backend_util.prepareAndValidate(x, indices), resultShape = _a[0], numSlices = _a[1], sliceSize = _a[2], strides = _a[3];
          var flattenIndices = indices.reshape([numSlices, sliceRank]);
          var flattenX = x.reshape([x.size / sliceSize, sliceSize]);
          var program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);
          var res = this.compileAndRun(program, [flattenX, flattenIndices]);
          return res.reshape(resultShape);
      };
      MathBackendWebGL.prototype.fill = function (shape, value, dtype) {
          dtype = dtype || tf.util.inferDtype(value);
          if (dtype === 'string') {
              // String type should be handled in CPU memory.
              var values = tf.util.getArrayFromDType(dtype, tf.util.sizeFromShape(shape));
              values.fill(value);
              return tf.engine().makeTensor(values, shape, dtype, this);
          }
          else {
              var program = new FillProgram(shape, value);
              var customSetup = program.getCustomSetupFunc(value);
              return this.compileAndRun(program, [], dtype, customSetup);
          }
      };
      MathBackendWebGL.prototype.onesLike = function (x) {
          if (x.dtype === 'string') {
              throw new Error('onesLike is not supported under string dtype');
          }
          else {
              // TODO(cais, smilkov): Add WebGL shader for onesLike:
              //   https://github.com/tensorflow/tfjs/issues/1293
              return this.fill(x.shape, 1, x.dtype);
          }
      };
      MathBackendWebGL.prototype.zerosLike = function (x) {
          return this.fill(x.shape, x.dtype === 'string' ? '' : 0, x.dtype);
      };
      MathBackendWebGL.prototype.linspace = function (start, stop, num) {
          // TODO: Use CPU implementation due to the precision problem in Safari.
          return tf.backend_util.linspaceImpl(start, stop, num);
      };
      MathBackendWebGL.prototype.makeTensorInfo = function (shape, dtype) {
          var dataId = this.write(null /* values */, shape, dtype);
          this.texData.get(dataId).usage = null;
          return { dataId: dataId, shape: shape, dtype: dtype };
      };
      MathBackendWebGL.prototype.makeOutput = function (shape, dtype) {
          var dataId = this.makeTensorInfo(shape, dtype).dataId;
          return tf.engine().makeTensorFromDataId(dataId, shape, dtype, this);
      };
      MathBackendWebGL.prototype.unpackTensor = function (input) {
          var program = new UnpackProgram(input.shape);
          return this.runWebGLProgram(program, [input], input.dtype);
      };
      MathBackendWebGL.prototype.packTensor = function (input) {
          var program = new PackProgram(input.shape);
          var preventEagerUnpackingOutput = true;
          return this.runWebGLProgram(program, [input], input.dtype, null /* customSetup */, preventEagerUnpackingOutput);
      };
      MathBackendWebGL.prototype.packedReshape = function (input, afterShape) {
          var input3DShape = [
              getBatchDim(input.shape)
          ].concat(getRowsCols(input.shape));
          var input3D = {
              dtype: input.dtype,
              shape: input3DShape,
              dataId: input.dataId
          };
          var afterShapeAs3D = [
              getBatchDim(afterShape)
          ].concat(getRowsCols(afterShape));
          var program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);
          var preventEagerUnpackingOfOutput = true;
          var output = this.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);
          return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };
      };
      MathBackendWebGL.prototype.decode = function (dataId) {
          var texData = this.texData.get(dataId);
          var isPacked = texData.isPacked, shape = texData.shape, dtype = texData.dtype;
          var shapeAs3D = getShapeAs3D(shape);
          var program;
          if (isPacked) {
              program = new DecodeMatrixPackedProgram(shapeAs3D);
          }
          else {
              program = new DecodeMatrixProgram(shapeAs3D);
          }
          var preventEagerUnpackingOfOutput = true;
          var out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype: dtype, dataId: dataId }], dtype, null /* customSetup */, preventEagerUnpackingOfOutput);
          return { dtype: dtype, shape: shape, dataId: out.dataId };
      };
      MathBackendWebGL.prototype.runWebGLProgram = function (program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput) {
          var _this = this;
          if (preventEagerUnpackingOfOutput === void 0) { preventEagerUnpackingOfOutput = false; }
          var output = this.makeTensorInfo(program.outputShape, outputDtype);
          var outData = this.texData.get(output.dataId);
          if (program.packedOutput) {
              outData.isPacked = true;
          }
          if (program.outPackingScheme === PackingScheme.DENSE) {
              var texelShape = getDenseTexShape(program.outputShape);
              // For a densely packed output, we explicitly set texShape
              // so it doesn't get assigned later according to our typical packing
              // scheme wherein a single texel can only contain values from adjacent
              // rows/cols.
              outData.texShape = texelShape.map(function (d) { return d * 2; });
          }
          if (program.outTexUsage != null) {
              outData.usage = program.outTexUsage;
          }
          if (tf.util.sizeFromShape(output.shape) === 0) {
              // Short-circuit the computation since the result is empty (has 0 in its
              // shape).
              outData.values =
                  tf.util.getTypedArrayFromDType(output.dtype, 0);
              return output;
          }
          var dataToDispose = [];
          var inputsData = inputs.map(function (input) {
              if (input.dtype === 'complex64') {
                  throw new Error("GPGPUProgram does not support complex64 input. For complex64 " +
                      "dtypes, please separate the program into real and imaginary " +
                      "parts.");
              }
              var texData = _this.texData.get(input.dataId);
              if (texData.texture == null) {
                  if (!program.packedInputs &&
                      tf.util.sizeFromShape(input.shape) <=
                          tf.env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {
                      // Upload small tensors that live on the CPU as uniforms, not as
                      // textures. Do this only when the environment supports 32bit floats
                      // due to problems when comparing 16bit floats with 32bit floats.
                      // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it
                      // possible for packed shaders to sample from uniforms.
                      return {
                          shape: input.shape,
                          texData: null,
                          isUniform: true,
                          uniformValues: texData.values
                      };
                  }
                  // This ensures that if a packed program's inputs have not yet been
                  // uploaded to the GPU, they get uploaded as packed right off the bat.
                  if (program.packedInputs) {
                      texData.isPacked = true;
                      texData.shape = input.shape;
                  }
              }
              else if (!!texData.isPacked !== !!program.packedInputs) {
                  input = texData.isPacked ? _this.unpackTensor(input) :
                      _this.packTensor(input);
                  dataToDispose.push(input);
                  texData = _this.texData.get(input.dataId);
              }
              else if (texData.isPacked &&
                  !isReshapeFree(texData.shape, input.shape)) {
                  // This is a special case where a texture exists for a tensor
                  // but the shapes are incompatible (due to packing constraints) because
                  // the tensor did not have a chance to go through the packed reshape
                  // shader. This only happens when we reshape the *same* tensor to form
                  // *distinct* inputs to an op, e.g. dotting a vector with itself. This
                  // case will disappear once packed uploading is the default.
                  var savedInput = input;
                  var targetShape = input.shape;
                  input.shape = texData.shape;
                  input = _this.packedReshape(input, targetShape);
                  dataToDispose.push(input);
                  texData = _this.texData.get(input.dataId);
                  savedInput.shape = targetShape;
              }
              _this.uploadToGPU(input.dataId);
              return { shape: input.shape, texData: texData, isUniform: false };
          });
          this.uploadToGPU(output.dataId);
          var outputData = { shape: output.shape, texData: outData, isUniform: false };
          var key = makeShaderKey(program, inputsData, outputData);
          var binary = this.getAndSaveBinary(key, function () {
              return compileProgram(_this.gpgpu, program, inputsData, outputData);
          });
          var shouldTimeProgram = this.activeTimers != null;
          var query;
          if (shouldTimeProgram) {
              query = this.startTimer();
          }
          runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);
          dataToDispose.forEach(function (info) { return _this.disposeData(info.dataId); });
          if (shouldTimeProgram) {
              query = this.endTimer(query);
              this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });
          }
          if (!tf.env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&
              preventEagerUnpackingOfOutput === false) {
              var unpacked = this.unpackTensor(output);
              this.disposeData(output.dataId);
              return unpacked;
          }
          return output;
      };
      MathBackendWebGL.prototype.compileAndRun = function (program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput) {
          if (preventEagerUnpackingOfOutput === void 0) { preventEagerUnpackingOfOutput = false; }
          outputDtype = outputDtype || inputs[0].dtype;
          var outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);
          return tf.engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);
      };
      MathBackendWebGL.prototype.getAndSaveBinary = function (key, getBinary) {
          if (!(key in this.binaryCache)) {
              this.binaryCache[key] = getBinary();
          }
          return this.binaryCache[key];
      };
      MathBackendWebGL.prototype.getTextureManager = function () {
          return this.textureManager;
      };
      MathBackendWebGL.prototype.dispose = function () {
          var _this = this;
          if (this.disposed) {
              return;
          }
          // Avoid disposing the compiled webgl programs during unit testing because
          // it slows down test execution.
          if (!tf.env().getBool('IS_TEST')) {
              var allKeys = Object.keys(this.binaryCache);
              allKeys.forEach(function (key) {
                  _this.gpgpu.deleteProgram(_this.binaryCache[key].webGLProgram);
                  delete _this.binaryCache[key];
              });
          }
          this.textureManager.dispose();
          if (this.canvas != null &&
              (typeof (HTMLCanvasElement) !== 'undefined' &&
                  this.canvas instanceof HTMLCanvasElement)) {
              this.canvas.remove();
          }
          else {
              this.canvas = null;
          }
          if (this.gpgpuCreatedLocally) {
              this.gpgpu.program = null;
              this.gpgpu.dispose();
          }
          this.disposed = true;
      };
      MathBackendWebGL.prototype.floatPrecision = function () {
          var _this = this;
          if (this.floatPrecisionValue == null) {
              this.floatPrecisionValue = tf.tidy(function () {
                  if (!tf.env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {
                      // Momentarily switching DEBUG flag to false so we don't throw an
                      // error trying to upload a small value.
                      var debugFlag = tf.env().getBool('DEBUG');
                      tf.env().set('DEBUG', false);
                      var underflowCheckValue = _this.abs(tf.scalar(1e-8)).dataSync()[0];
                      tf.env().set('DEBUG', debugFlag);
                      if (underflowCheckValue > 0) {
                          return 32;
                      }
                  }
                  return 16;
              });
          }
          return this.floatPrecisionValue;
      };
      /** Returns the smallest representable number.  */
      MathBackendWebGL.prototype.epsilon = function () {
          return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
      };
      MathBackendWebGL.prototype.uploadToGPU = function (dataId) {
          var _a;
          var texData = this.texData.get(dataId);
          var shape = texData.shape, dtype = texData.dtype, values = texData.values, texture = texData.texture, usage = texData.usage, isPacked = texData.isPacked;
          if (texture != null) {
              // Array is already on GPU. No-op.
              return;
          }
          var shouldTimeProgram = this.activeTimers != null;
          var start;
          if (shouldTimeProgram) {
              start = tf.util.now();
          }
          var texShape = texData.texShape;
          if (texShape == null) {
              texShape = getTextureShapeFromLogicalShape(shape, isPacked);
              texData.texShape = texShape;
          }
          if (values != null) {
              var shapeAs3D = getShapeAs3D(shape);
              var program = void 0;
              var width = texShape[1], height = texShape[0];
              var isByteArray = values instanceof Uint8Array;
              if (isPacked) {
                  _a = getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]), width = _a[0], height = _a[1];
                  program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);
              }
              else {
                  program =
                      new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);
              }
              var tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);
              if (isByteArray) {
                  this.texData.get(tempDenseInputHandle.dataId).usage =
                      TextureUsage.PIXELS;
              }
              else {
                  this.texData.get(tempDenseInputHandle.dataId).usage =
                      TextureUsage.UPLOAD;
              }
              this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);
              // We want the output to remain packed regardless of the value of
              // WEBGL_PACK.
              var preventEagerUnpacking = true;
              var encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);
              // Have the original texture assume the identity of the encoded output.
              var outputTexData = this.texData.get(encodedOutputTarget.dataId);
              texData.texture = outputTexData.texture;
              texData.texShape = outputTexData.texShape;
              texData.isPacked = outputTexData.isPacked;
              texData.usage = outputTexData.usage;
              this.disposeData(tempDenseInputHandle.dataId);
              this.texData.delete(encodedOutputTarget.dataId);
              // Once uploaded, don't store the values on cpu.
              texData.values = null;
              if (shouldTimeProgram) {
                  this.uploadWaitMs += tf.util.now() - start;
              }
          }
          else {
              var newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);
              texData.texture = newTexture;
          }
      };
      MathBackendWebGL.prototype.convertAndCacheOnCPU = function (dataId, float32Values) {
          var texData = this.texData.get(dataId);
          var dtype = texData.dtype;
          this.releaseGPUData(dataId);
          if (float32Values != null) {
              texData.values = float32ToTypedArray(float32Values, dtype);
          }
          return texData.values;
      };
      MathBackendWebGL.prototype.acquireTexture = function (texShape, texType, dtype, isPacked) {
          this.numBytesInGPU += this.computeBytes(texShape, dtype);
          if (!this.warnedAboutMemory &&
              this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
              var mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
              this.warnedAboutMemory = true;
              console.warn("High memory usage in GPU: " + mb + " MB, " +
                  "most likely due to a memory leak");
          }
          return this.textureManager.acquireTexture(texShape, texType, isPacked);
      };
      MathBackendWebGL.prototype.computeBytes = function (shape, dtype) {
          return shape[0] * shape[1] * tf.util.bytesPerElement(dtype);
      };
      return MathBackendWebGL;
  }(tf.KernelBackend));
  function float32ToTypedArray(a, dtype) {
      if (dtype === 'float32' || dtype === 'complex64') {
          return a;
      }
      else if (dtype === 'int32' || dtype === 'bool') {
          var result = (dtype === 'int32') ? new Int32Array(a.length) :
              new Uint8Array(a.length);
          for (var i = 0; i < result.length; ++i) {
              result[i] = Math.round(a[i]);
          }
          return result;
      }
      else {
          throw new Error("Unknown dtype " + dtype);
      }
  }

  /** @license See the LICENSE file. */
  // This code is auto-generated, do not modify this file!
  var version = '2.1.0';

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function divImpl(a, b, backend) {
      var program = new BinaryOpProgram(DIV, a.shape, b.shape);
      if (tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
          program = new BinaryOpPackedProgram(DIV$1, a.shape, b.shape, true);
      }
      var output = backend.runWebGLProgram(program, [a, b], 'float32');
      return output;
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var divConfig = {
      kernelName: tf.Div,
      backendName: 'webgl',
      kernelFunc: function (_a) {
          var inputs = _a.inputs, backend = _a.backend;
          var _b = inputs, a = _b.a, b = _b.b;
          var webglBackend = backend;
          return divImpl(a, b, webglBackend);
      }
  };

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var FromPixelsProgram = /** @class */ (function () {
      function FromPixelsProgram(outputShape) {
          this.variableNames = ['A'];
          var glsl = getGlslDifferences();
          var height = outputShape[0], width = outputShape[1];
          this.outputShape = outputShape;
          this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + width + ".0, " + height + ".0);\n\n        vec4 values = " + glsl.texture2D + "(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ";
      }
      return FromPixelsProgram;
  }());

  /**
   * @license
   * Copyright 2018 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var FromPixelsPackedProgram = /** @class */ (function () {
      function FromPixelsPackedProgram(outputShape) {
          this.variableNames = ['A'];
          this.packedInputs = false;
          this.packedOutput = true;
          var glsl = getGlslDifferences();
          var height = outputShape[0], width = outputShape[1];
          this.outputShape = outputShape;
          this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(" + width + ".0, " + height + ".0);\n            vec4 values = " + glsl.texture2D + "(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        " + glsl.output + " = result;\n      }\n    ";
      }
      return FromPixelsPackedProgram;
  }());

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var fromPixelsConfig = {
      kernelName: tf.FromPixels,
      backendName: 'webgl',
      kernelFunc: fromPixels,
  };
  var fromPixels2DContext;
  function fromPixels(args) {
      var inputs = args.inputs, backend = args.backend, attrs = args.attrs;
      var pixels = inputs.pixels;
      var numChannels = attrs.numChannels;
      var isVideo = typeof (HTMLVideoElement) !== 'undefined' &&
          pixels instanceof HTMLVideoElement;
      var isImage = typeof (HTMLImageElement) !== 'undefined' &&
          pixels instanceof HTMLImageElement;
      var _a = isVideo ?
          [
              pixels.videoWidth,
              pixels.videoHeight
          ] :
          [pixels.width, pixels.height], width = _a[0], height = _a[1];
      var texShape = [height, width];
      var outShape = [height, width, numChannels];
      if (isImage || isVideo) {
          if (fromPixels2DContext == null) {
              fromPixels2DContext = document.createElement('canvas').getContext('2d');
          }
          fromPixels2DContext.canvas.width = width;
          fromPixels2DContext.canvas.height = height;
          fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
          pixels = fromPixels2DContext.canvas;
      }
      var tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');
      // This is a byte texture with pixels.
      backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;
      backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);
      var program = tf.env().getBool('WEBGL_PACK') ?
          new FromPixelsPackedProgram(outShape) :
          new FromPixelsProgram(outShape);
      var res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');
      backend.disposeData(tempPixelHandle.dataId);
      return res;
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function maxImpl(aVals, reduceSize, outShape, dtype) {
      const vals = tf.util.getTypedArrayFromDType(dtype, tf.util.sizeFromShape(outShape));
      for (let i = 0; i < vals.length; ++i) {
          const offset = i * reduceSize;
          let max = aVals[offset];
          for (let j = 0; j < reduceSize; ++j) {
              const value = aVals[offset + j];
              if (value > max) {
                  max = value;
              }
          }
          vals[i] = max;
      }
      return vals;
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function transposeImpl(xVals, xShape, dtype, perm, newShape) {
      const xRank = xShape.length;
      const xSize = tf.util.sizeFromShape(xShape);
      const xStrides = tf.util.computeStrides(xShape);
      const newStrides = tf.util.computeStrides(newShape);
      const result = tf.util.getTypedArrayFromDType(dtype, tf.util.sizeFromShape(newShape));
      for (let i = 0; i < xSize; ++i) {
          const loc = tf.util.indexToLoc(i, xRank, xStrides);
          // Permute location.
          const newLoc = new Array(loc.length);
          for (let i = 0; i < newLoc.length; i++) {
              newLoc[i] = loc[perm[i]];
          }
          const newIndex = tf.util.locToIndex(newLoc, xRank, newStrides);
          result[newIndex] = xVals[i];
      }
      return result;
  }

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  const nonMaxSuppressionV3Impl = tf.kernel_impls.nonMaxSuppressionV3Impl;
  const split$1 = tf.kernel_impls.split;
  const tile$1 = tf.kernel_impls.tile;
  const topkImpl$1 = tf.kernel_impls.topkImpl;
  const whereImpl$1 = tf.kernel_impls.whereImpl;

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var maxImplCPU = maxImpl, transposeImplCPU = transposeImpl;

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function reduce(x, dtype, reductionType, backend) {
      var _a = x.shape, batchSize = _a[0], inSize = _a[1];
      var windowSize = tf.backend_util.computeOptimalWindowSize(inSize);
      var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };
      var program = new ReduceProgram(reduceInfo, reductionType);
      var output = backend.runWebGLProgram(program, [x], dtype);
      if (output.shape[1] === 1) {
          return output;
      }
      return reduce(output, dtype, reductionType, backend);
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function packedReshape(input, afterShape, backend) {
      var input3DShape = [getBatchDim(input.shape)].concat(getRowsCols(input.shape));
      var input3D = {
          dtype: input.dtype,
          shape: input3DShape,
          dataId: input.dataId
      };
      var afterShapeAs3D = [getBatchDim(afterShape)].concat(getRowsCols(afterShape));
      var program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);
      var preventEagerUnpackingOfOutput = true;
      var output = backend.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);
      return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };
  }
  function reshape(x, afterShape, backend) {
      var xTexData = backend.texData.get(x.dataId);
      if (xTexData.isPacked && !isReshapeFree(x.shape, afterShape) &&
          !(xTexData.texture !== null &&
              isReshapeFree(xTexData.shape, afterShape))) {
          return packedReshape(x, afterShape, backend);
      }
      return { dataId: x.dataId, shape: afterShape, dtype: x.dtype };
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function maxImpl$1(x, reduceShape, outShape, backend) {
      var inSize = tf.util.sizeFromShape(reduceShape);
      var xSize = tf.util.sizeFromShape(x.shape);
      var batchSize = xSize / inSize;
      var reshapedInput = reshape(x, [batchSize, inSize], backend);
      var reduced = reduce(reshapedInput, x.dtype, 'max', backend);
      if (reshapedInput.dataId !== x.dataId) {
          // dispose the output of the packed reshape.
          backend.disposeData(reshapedInput.dataId);
      }
      return reshape(reduced, outShape, backend);
  }

  /**
   * @license
   * Copyright 2017 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var TransposeProgram = /** @class */ (function () {
      function TransposeProgram(aShape, newDim) {
          this.variableNames = ['A'];
          var outputShape = new Array(aShape.length);
          for (var i = 0; i < outputShape.length; i++) {
              outputShape[i] = aShape[newDim[i]];
          }
          this.outputShape = outputShape;
          this.rank = outputShape.length;
          var dtype = getCoordsDataType(this.rank);
          var switched = getSwitchedCoords(newDim);
          this.userCode = "\n    void main() {\n      " + dtype + " resRC = getOutputCoords();\n      setOutput(getA(" + switched + "));\n    }\n    ";
      }
      return TransposeProgram;
  }());
  function getSwitchedCoords(newDim) {
      var rank = newDim.length;
      if (rank > 6) {
          throw Error("Transpose for rank " + rank + " is not yet supported");
      }
      var originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];
      var switchedCoords = new Array(rank);
      for (var i = 0; i < newDim.length; i++) {
          switchedCoords[newDim[i]] = originalOrder[i];
      }
      return switchedCoords.join();
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var TransposePackedProgram = /** @class */ (function () {
      function TransposePackedProgram(aShape, newDim) {
          this.variableNames = ['A'];
          this.packedInputs = true;
          this.packedOutput = true;
          var outputShape = new Array(aShape.length);
          for (var i = 0; i < outputShape.length; i++) {
              outputShape[i] = aShape[newDim[i]];
          }
          this.outputShape = outputShape;
          this.rank = outputShape.length;
          if (this.rank > 6) {
              throw Error("Packed transpose for rank " + this.rank + " is not yet supported.");
          }
          var dtype = getCoordsDataType(this.rank);
          var outputOrder = getVecChannels('rc', this.rank);
          var switchedOrder = new Array(this.rank);
          for (var i = 0; i < newDim.length; i++) {
              switchedOrder[newDim[i]] = outputOrder[i];
          }
          var innerDims = "vec2(" + switchedOrder.slice(-2).join() + ")";
          var nextColumn = "++" + outputOrder[this.rank - 1] + " < " + outputShape[this.rank - 1];
          var getc = "getChannel(getA(" + switchedOrder.join() + "), " + innerDims + ")";
          this.userCode = "\n    void main() {\n      " + dtype + " rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = " + getc + ";\n      if(" + nextColumn + ") {\n        result[1] = " + getc + ";\n      }\n      --" + outputOrder[this.rank - 1] + ";\n      if(++" + outputOrder[this.rank - 2] + " < " + outputShape[this.rank - 2] + ") {\n        result[2] = " + getc + ";\n        if(" + nextColumn + ") {\n          result[3] = " + getc + ";\n        }\n      }\n      setOutput(result);\n    }\n    ";
      }
      return TransposePackedProgram;
  }());

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function transposeImpl$1(x, perm, backend) {
      var program = tf.env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?
          new TransposePackedProgram(x.shape, perm) :
          new TransposeProgram(x.shape, perm);
      return backend.runWebGLProgram(program, [x], x.dtype);
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var maxConfig = {
      kernelName: tf.Max,
      backendName: 'webgl',
      kernelFunc: function (_a) {
          var inputs = _a.inputs, attrs = _a.attrs, backend = _a.backend;
          var x = inputs.x;
          var _b = attrs, reductionIndices = _b.reductionIndices, keepDims = _b.keepDims;
          var webglBackend = backend;
          var xRank = x.shape.length;
          var origAxes = tf.util.parseAxisParam(reductionIndices, x.shape);
          var axes = origAxes;
          var permutedAxes = tf.backend_util.getAxesPermutation(axes, xRank);
          var maxInputIsTransposed = permutedAxes != null;
          var shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);
          var maxInput = x;
          if (maxInputIsTransposed) {
              if (shouldExecuteOnCPU) {
                  var xTexData = webglBackend.texData.get(maxInput.dataId);
                  var values = xTexData.values;
                  var newShape = new Array(xRank);
                  for (var i = 0; i < newShape.length; i++) {
                      newShape[i] = x.shape[permutedAxes[i]];
                  }
                  var maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);
                  maxInput = webglBackend.makeTensorInfo(newShape, x.dtype);
                  var maxInputData = webglBackend.texData.get(maxInput.dataId);
                  maxInputData.values = maxInputValues;
              }
              else {
                  maxInput = transposeImpl$1(x, permutedAxes, webglBackend);
              }
              axes = tf.backend_util.getInnerMostAxes(axes.length, xRank);
          }
          tf.backend_util.assertAxesAreInnerMostDims('max', axes, xRank);
          var _c = tf.backend_util.computeOutAndReduceShapes(maxInput.shape, axes), maxOutShape = _c[0], reduceShape = _c[1];
          var outShape = maxOutShape;
          if (keepDims) {
              // rather than reshape at the end, set the target shape here.
              outShape = tf.backend_util.expandShapeToKeepDim(maxOutShape, origAxes);
          }
          var out;
          if (shouldExecuteOnCPU) {
              var xTexData = webglBackend.texData.get(maxInput.dataId);
              var values = xTexData.values;
              var outValues = maxImplCPU(values, tf.util.sizeFromShape(reduceShape), outShape, x.dtype);
              out = webglBackend.makeTensorInfo(outShape, x.dtype);
              var outData = webglBackend.texData.get(out.dataId);
              outData.values = outValues;
          }
          else {
              out = maxImpl$1(maxInput, reduceShape, outShape, webglBackend);
          }
          if (maxInputIsTransposed) {
              webglBackend.disposeData(maxInput.dataId);
          }
          return out;
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, backend) {
      var program = new Pool2DProgram(convInfo, 'max', false);
      var poolOutput = backend.runWebGLProgram(program, [x], 'float32');
      program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);
      var indexOutput = backend.runWebGLProgram(program, [x], 'float32');
      return [poolOutput, indexOutput];
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var maxPoolWithArgmaxConfig = {
      kernelName: tf.MaxPoolWithArgmax,
      backendName: 'webgl',
      kernelFunc: function (_a) {
          var inputs = _a.inputs, attrs = _a.attrs, backend = _a.backend;
          var x = inputs.x;
          var _b = attrs, filterSize = _b.filterSize, strides = _b.strides, pad = _b.pad, includeBatchInIndex = _b.includeBatchInIndex;
          var webglBackend = backend;
          tf.util.assert(x.shape.length === 4, function () { return "Error in maxPool: input must be rank 4 but got rank " + x.shape.length + "."; });
          var dilations = [1, 1];
          tf.util.assert(tf.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), function () { return 'Error in maxPool: Either strides or dilations must be 1. ' +
              ("Got strides " + strides + " and dilations '" + dilations + "'"); });
          var convInfo = tf.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);
          var _c = maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend), result = _c[0], indexes = _c[1];
          return [result, indexes];
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var nonMaxSuppressionV3Config = {
      kernelName: tf.NonMaxSuppressionV3,
      backendName: 'webgl',
      kernelFunc: function (_a) {
          var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;
          tf.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +
              'Call tf.nonMaxSuppressionAsync() instead');
          var _b = inputs, boxes = _b.boxes, scores = _b.scores;
          var _c = attrs, maxOutputSize = _c.maxOutputSize, iouThreshold = _c.iouThreshold, scoreThreshold = _c.scoreThreshold;
          var gpuBackend = backend;
          var boxesVals = gpuBackend.readSync(boxes.dataId);
          var scoresVals = gpuBackend.readSync(scores.dataId);
          var maxOutputSizeVal = maxOutputSize;
          var iouThresholdVal = iouThreshold;
          var scoreThresholdVal = scoreThreshold;
          return tf.kernel_impls.nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal);
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var nonMaxSuppressionV4Impl = tf.kernel_impls.nonMaxSuppressionV4Impl;
  var nonMaxSuppressionV4Config = {
      kernelName: tf.NonMaxSuppressionV4,
      backendName: 'webgl',
      kernelFunc: function (_a) {
          var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;
          tf.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +
              'Call tf.nonMaxSuppressionAsync() instead');
          var _b = inputs, boxes = _b.boxes, scores = _b.scores;
          var _c = attrs, maxOutputSize = _c.maxOutputSize, iouThreshold = _c.iouThreshold, scoreThreshold = _c.scoreThreshold, padToMaxOutputSize = _c.padToMaxOutputSize;
          var gpuBackend = backend;
          var boxesVals = gpuBackend.readSync(boxes.dataId);
          var scoresVals = gpuBackend.readSync(scores.dataId);
          var _d = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize), selectedIndices = _d.selectedIndices, validOutputs = _d.validOutputs;
          return [selectedIndices, validOutputs];
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var nonMaxSuppressionV5Impl = tf.kernel_impls.nonMaxSuppressionV5Impl;
  var nonMaxSuppressionV5Config = {
      kernelName: tf.NonMaxSuppressionV5,
      backendName: 'webgl',
      kernelFunc: function (_a) {
          var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;
          tf.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +
              'Call tf.nonMaxSuppressionAsync() instead');
          var _b = inputs, boxes = _b.boxes, scores = _b.scores;
          var _c = attrs, maxOutputSize = _c.maxOutputSize, iouThreshold = _c.iouThreshold, scoreThreshold = _c.scoreThreshold, softNmsSigma = _c.softNmsSigma;
          var gpuBackend = backend;
          var boxesVals = gpuBackend.readSync(boxes.dataId);
          var scoresVals = gpuBackend.readSync(scores.dataId);
          var maxOutputSizeVal = maxOutputSize;
          var iouThresholdVal = iouThreshold;
          var scoreThresholdVal = scoreThreshold;
          var softNmsSigmaVal = softNmsSigma;
          var _d = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal), selectedIndices = _d.selectedIndices, selectedScores = _d.selectedScores;
          return [selectedIndices, selectedScores];
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var RotateProgram = /** @class */ (function () {
      function RotateProgram(imageShape, radians, fillValue, center) {
          this.variableNames = ['Image'];
          this.outputShape = [];
          var imageHeight = imageShape[1];
          var imageWidth = imageShape[2];
          var sinFactor = Math.sin(radians).toFixed(3);
          var cosFactor = Math.cos(radians).toFixed(3);
          this.outputShape = imageShape;
          var _a = tf.backend_util.getImageCenter(center, imageHeight, imageWidth), centerX = _a[0], centerY = _a[1];
          var centerXString = centerX.toFixed(3);
          var centerYString = centerY.toFixed(3);
          var fillSnippet = '';
          if (typeof fillValue === 'number') {
              fillSnippet = "float outputValue = " + fillValue.toFixed(2) + ";";
          }
          else {
              fillSnippet = "\n        vec3 fill = vec3(" + fillValue.join(',') + ");\n        float outputValue = fill[coords[3]];";
          }
          this.userCode = "\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - " + centerXString + ") * " + cosFactor + " - (float(y) - " + centerYString + ") * " + sinFactor + ";\n          float coordYFloat = (float(x) - " + centerXString + ") * " + sinFactor + " + (float(y) - " + centerYString + ") * " + cosFactor + ";\n          int coordX = int(round(coordXFloat + " + centerXString + "));\n          int coordY = int(round(coordYFloat + " + centerYString + "));\n          " + fillSnippet + "\n          if(coordX >= 0 && coordX < " + imageWidth + " && coordY >= 0 && coordY < " + imageHeight + ") {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    ";
      }
      return RotateProgram;
  }());

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var rotateWithOffsetConfig = {
      kernelName: tf.RotateWithOffset,
      backendName: 'webgl',
      kernelFunc: function (_a) {
          var inputs = _a.inputs, attrs = _a.attrs, backend = _a.backend;
          var image = inputs.image;
          var _b = attrs, radians = _b.radians, fillValue = _b.fillValue, center = _b.center;
          var webglBackend = backend;
          var program = new RotateProgram(image.shape, radians, fillValue, center);
          var output = webglBackend.runWebGLProgram(program, [image], image.dtype);
          return output;
      }
  };

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var squareConfig = {
      kernelName: tf.Square,
      backendName: 'webgl',
      kernelFunc: function (_a) {
          var inputs = _a.inputs, backend = _a.backend;
          var x = inputs.x;
          var webglBackend = backend;
          var program = new UnaryOpProgram(x.shape, SQUARE);
          return webglBackend.runWebGLProgram(program, [x], x.dtype);
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var squaredDifferenceConfig = {
      kernelName: tf.SquaredDifference,
      backendName: 'webgl',
      kernelFunc: function (_a) {
          var inputs = _a.inputs, backend = _a.backend;
          var _b = inputs, a = _b.a, b = _b.b;
          var SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';
          var webGLBackend = backend;
          var program = tf.env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?
              new BinaryOpPackedProgram(SQUARED_DIFFERENCE, a.shape, b.shape) :
              new BinaryOpProgram(SQUARED_DIFFERENCE, a.shape, b.shape);
          return webGLBackend.compileAndRun(program, [a, b]);
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var transposeConfig = {
      kernelName: tf.Transpose,
      backendName: 'webgl',
      kernelFunc: function (_a) {
          var inputs = _a.inputs, attrs = _a.attrs, backend = _a.backend;
          var x = inputs.x;
          var perm = attrs.perm;
          var webglBackend = backend;
          var xRank = x.shape.length;
          var newShape = new Array(xRank);
          for (var i = 0; i < newShape.length; i++) {
              newShape[i] = x.shape[perm[i]];
          }
          var out;
          if (webglBackend.shouldExecuteOnCPU([x])) {
              var xTexData = webglBackend.texData.get(x.dataId);
              var values = xTexData.values;
              var outValues = transposeImplCPU(values, x.shape, x.dtype, perm, newShape);
              out = webglBackend.makeTensorInfo(newShape, x.dtype);
              var outData = webglBackend.texData.get(out.dataId);
              outData.values = outValues;
          }
          else {
              out = transposeImpl$1(x, perm, webglBackend);
          }
          return out;
      }
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // List all kernel configs here
  var kernelConfigs = [
      maxConfig, fromPixelsConfig, divConfig, maxPoolWithArgmaxConfig,
      nonMaxSuppressionV3Config, nonMaxSuppressionV4Config,
      nonMaxSuppressionV5Config, rotateWithOffsetConfig, squareConfig,
      squaredDifferenceConfig, transposeConfig
  ];
  for (var _i = 0, kernelConfigs_1 = kernelConfigs; _i < kernelConfigs_1.length; _i++) {
      var kernelConfig = kernelConfigs_1[_i];
      tf.registerKernel(kernelConfig);
  }

  /**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  /**
   * Enforce use of half precision textures if available on the platform.
   */
  /** @doc {heading: 'Environment', namespace: 'webgl'} */
  function forceHalfFloat() {
      tf.env().set('WEBGL_FORCE_F16_TEXTURES', true);
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  if (tf.device_util.isBrowser()) {
      tf.registerBackend('webgl', function () { return new MathBackendWebGL(); }, 2 /* priority */);
  }
  var webgl = { forceHalfFloat: forceHalfFloat };

  exports.GPGPUContext = GPGPUContext;
  exports.MathBackendWebGL = MathBackendWebGL;
  exports.forceHalfFloat = forceHalfFloat;
  exports.gpgpu_util = gpgpu_util;
  exports.setWebGLContext = setWebGLContext;
  exports.version_webgl = version;
  exports.webgl = webgl;
  exports.webgl_util = webgl_util;

  Object.defineProperty(exports, '__esModule', { value: true });

})));




/**
  * @license
  * Copyright 2020 Google LLC. All Rights Reserved.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  * =============================================================================
  */
 (function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tensorflow/tfjs-converter'), require('@tensorflow/tfjs-core')) :
  typeof define === 'function' && define.amd ? define(['exports', '@tensorflow/tfjs-converter', '@tensorflow/tfjs-core'], factory) :
  (global = global || self, factory(global.handpose = {}, global.tf, global.tf));
}(this, (function (exports, tfconv, tf) { 'use strict';

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * https://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function getBoxSize(box) {
      return [
          Math.abs(box.endPoint[0] - box.startPoint[0]),
          Math.abs(box.endPoint[1] - box.startPoint[1])
      ];
  }
  function getBoxCenter(box) {
      return [
          box.startPoint[0] + (box.endPoint[0] - box.startPoint[0]) / 2,
          box.startPoint[1] + (box.endPoint[1] - box.startPoint[1]) / 2
      ];
  }
  function cutBoxFromImageAndResize(box, image, cropSize) {
      var h = image.shape[1];
      var w = image.shape[2];
      var boxes = [[
              box.startPoint[1] / h, box.startPoint[0] / w, box.endPoint[1] / h,
              box.endPoint[0] / w
          ]];
      return tf.image.cropAndResize(image, boxes, [0], cropSize);
  }
  function scaleBoxCoordinates(box, factor) {
      var startPoint = [box.startPoint[0] * factor[0], box.startPoint[1] * factor[1]];
      var endPoint = [box.endPoint[0] * factor[0], box.endPoint[1] * factor[1]];
      var palmLandmarks = box.palmLandmarks.map(function (coord) {
          var scaledCoord = [coord[0] * factor[0], coord[1] * factor[1]];
          return scaledCoord;
      });
      return { startPoint: startPoint, endPoint: endPoint, palmLandmarks: palmLandmarks };
  }
  function enlargeBox(box, factor) {
      if (factor === void 0) { factor = 1.5; }
      var center = getBoxCenter(box);
      var size = getBoxSize(box);
      var newHalfSize = [factor * size[0] / 2, factor * size[1] / 2];
      var startPoint = [center[0] - newHalfSize[0], center[1] - newHalfSize[1]];
      var endPoint = [center[0] + newHalfSize[0], center[1] + newHalfSize[1]];
      return { startPoint: startPoint, endPoint: endPoint, palmLandmarks: box.palmLandmarks };
  }
  function squarifyBox(box) {
      var centers = getBoxCenter(box);
      var size = getBoxSize(box);
      var maxEdge = Math.max.apply(Math, size);
      var halfSize = maxEdge / 2;
      var startPoint = [centers[0] - halfSize, centers[1] - halfSize];
      var endPoint = [centers[0] + halfSize, centers[1] + halfSize];
      return { startPoint: startPoint, endPoint: endPoint, palmLandmarks: box.palmLandmarks };
  }
  function shiftBox(box, shiftFactor) {
      var boxSize = [
          box.endPoint[0] - box.startPoint[0], box.endPoint[1] - box.startPoint[1]
      ];
      var shiftVector = [boxSize[0] * shiftFactor[0], boxSize[1] * shiftFactor[1]];
      var startPoint = [box.startPoint[0] + shiftVector[0], box.startPoint[1] + shiftVector[1]];
      var endPoint = [box.endPoint[0] + shiftVector[0], box.endPoint[1] + shiftVector[1]];
      return { startPoint: startPoint, endPoint: endPoint, palmLandmarks: box.palmLandmarks };
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * https://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var HandDetector = /** @class */ (function () {
      function HandDetector(model, width, height, anchors, iouThreshold, scoreThreshold) {
          this.model = model;
          this.width = width;
          this.height = height;
          this.iouThreshold = iouThreshold;
          this.scoreThreshold = scoreThreshold;
          this.anchors = anchors.map(function (anchor) { return [anchor.x_center, anchor.y_center]; });
          this.anchorsTensor = tf.tensor2d(this.anchors);
          this.inputSizeTensor = tf.tensor1d([width, height]);
          this.doubleInputSizeTensor = tf.tensor1d([width * 2, height * 2]);
      }
      HandDetector.prototype.normalizeBoxes = function (boxes) {
          var _this = this;
          return tf.tidy(function () {
              var boxOffsets = tf.slice(boxes, [0, 0], [-1, 2]);
              var boxSizes = tf.slice(boxes, [0, 2], [-1, 2]);
              var boxCenterPoints = tf.add(tf.div(boxOffsets, _this.inputSizeTensor), _this.anchorsTensor);
              var halfBoxSizes = tf.div(boxSizes, _this.doubleInputSizeTensor);
              var startPoints = tf.mul(tf.sub(boxCenterPoints, halfBoxSizes), _this.inputSizeTensor);
              var endPoints = tf.mul(tf.add(boxCenterPoints, halfBoxSizes), _this.inputSizeTensor);
              return tf.concat2d([startPoints, endPoints], 1);
          });
      };
      HandDetector.prototype.normalizeLandmarks = function (rawPalmLandmarks, index) {
          var _this = this;
          return tf.tidy(function () {
              var landmarks = tf.add(tf.div(rawPalmLandmarks.reshape([-1, 7, 2]), _this.inputSizeTensor), _this.anchors[index]);
              return tf.mul(landmarks, _this.inputSizeTensor);
          });
      };
      HandDetector.prototype.getBoundingBoxes = function (input) {
          return __awaiter(this, void 0, void 0, function () {
              var normalizedInput, batchedPrediction, savedWebglPackDepthwiseConvFlag, prediction, scores, rawBoxes, boxes, savedConsoleWarnFn, boxesWithHandsTensor, boxesWithHands, toDispose, boxIndex, matchingBox, rawPalmLandmarks, palmLandmarks;
              var _this = this;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          normalizedInput = tf.tidy(function () { return tf.mul(tf.sub(input, 0.5), 2); });
                          if (tf.getBackend() === 'webgl') {
                              savedWebglPackDepthwiseConvFlag = tf.env().get('WEBGL_PACK_DEPTHWISECONV');
                              tf.env().set('WEBGL_PACK_DEPTHWISECONV', true);
                              // The model returns a tensor with the following shape:
                              //  [1 (batch), 2944 (anchor points), 19 (data for each anchor)]
                              batchedPrediction = this.model.predict(normalizedInput);
                              tf.env().set('WEBGL_PACK_DEPTHWISECONV', savedWebglPackDepthwiseConvFlag);
                          }
                          else {
                              batchedPrediction = this.model.predict(normalizedInput);
                          }
                          prediction = batchedPrediction.squeeze();
                          scores = tf.tidy(function () { return tf.sigmoid(tf.slice(prediction, [0, 0], [-1, 1])).squeeze(); });
                          rawBoxes = tf.slice(prediction, [0, 1], [-1, 4]);
                          boxes = this.normalizeBoxes(rawBoxes);
                          savedConsoleWarnFn = console.warn;
                          console.warn = function () { };
                          boxesWithHandsTensor = tf.image.nonMaxSuppression(boxes, scores, 1, this.iouThreshold, this.scoreThreshold);
                          console.warn = savedConsoleWarnFn;
                          return [4 /*yield*/, boxesWithHandsTensor.array()];
                      case 1:
                          boxesWithHands = _a.sent();
                          toDispose = [
                              normalizedInput, batchedPrediction, boxesWithHandsTensor, prediction,
                              boxes, rawBoxes, scores
                          ];
                          if (boxesWithHands.length === 0) {
                              toDispose.forEach(function (tensor) { return tensor.dispose(); });
                              return [2 /*return*/, null];
                          }
                          boxIndex = boxesWithHands[0];
                          matchingBox = tf.slice(boxes, [boxIndex, 0], [1, -1]);
                          rawPalmLandmarks = tf.slice(prediction, [boxIndex, 5], [1, 14]);
                          palmLandmarks = tf.tidy(function () { return _this.normalizeLandmarks(rawPalmLandmarks, boxIndex).reshape([
                              -1, 2
                          ]); });
                          toDispose.push(rawPalmLandmarks);
                          toDispose.forEach(function (tensor) { return tensor.dispose(); });
                          return [2 /*return*/, { boxes: matchingBox, palmLandmarks: palmLandmarks }];
                  }
              });
          });
      };
      /**
       * Returns a Box identifying the bounding box of a hand within the image.
       * Returns null if there is no hand in the image.
       *
       * @param input The image to classify.
       */
      HandDetector.prototype.estimateHandBounds = function (input) {
          return __awaiter(this, void 0, void 0, function () {
              var inputHeight, inputWidth, image, prediction, boundingBoxes, startPoint, endPoint, palmLandmarks;
              var _this = this;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          inputHeight = input.shape[1];
                          inputWidth = input.shape[2];
                          image = tf.tidy(function () { return input.resizeBilinear([_this.width, _this.height]).div(255); });
                          return [4 /*yield*/, this.getBoundingBoxes(image)];
                      case 1:
                          prediction = _a.sent();
                          if (prediction === null) {
                              image.dispose();
                              return [2 /*return*/, null];
                          }
                          boundingBoxes = prediction.boxes.arraySync();
                          startPoint = boundingBoxes[0].slice(0, 2);
                          endPoint = boundingBoxes[0].slice(2, 4);
                          palmLandmarks = prediction.palmLandmarks.arraySync();
                          image.dispose();
                          prediction.boxes.dispose();
                          prediction.palmLandmarks.dispose();
                          return [2 /*return*/, scaleBoxCoordinates({ startPoint: startPoint, endPoint: endPoint, palmLandmarks: palmLandmarks }, [inputWidth / this.width, inputHeight / this.height])];
                  }
              });
          });
      };
      return HandDetector;
  }());

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * https://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var MESH_ANNOTATIONS = {
      thumb: [1, 2, 3, 4],
      indexFinger: [5, 6, 7, 8],
      middleFinger: [9, 10, 11, 12],
      ringFinger: [13, 14, 15, 16],
      pinky: [17, 18, 19, 20],
      palmBase: [0]
  };

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * https://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  function normalizeRadians(angle) {
      return angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));
  }
  function computeRotation(point1, point2) {
      var radians = Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]);
      return normalizeRadians(radians);
  }
  var buildTranslationMatrix = function (x, y) {
      return ([[1, 0, x], [0, 1, y], [0, 0, 1]]);
  };
  function dot(v1, v2) {
      var product = 0;
      for (var i = 0; i < v1.length; i++) {
          product += v1[i] * v2[i];
      }
      return product;
  }
  function getColumnFrom2DArr(arr, columnIndex) {
      var column = [];
      for (var i = 0; i < arr.length; i++) {
          column.push(arr[i][columnIndex]);
      }
      return column;
  }
  function multiplyTransformMatrices(mat1, mat2) {
      var product = [];
      var size = mat1.length;
      for (var row = 0; row < size; row++) {
          product.push([]);
          for (var col = 0; col < size; col++) {
              product[row].push(dot(mat1[row], getColumnFrom2DArr(mat2, col)));
          }
      }
      return product;
  }
  function buildRotationMatrix(rotation, center) {
      var cosA = Math.cos(rotation);
      var sinA = Math.sin(rotation);
      var rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];
      var translationMatrix = buildTranslationMatrix(center[0], center[1]);
      var translationTimesRotation = multiplyTransformMatrices(translationMatrix, rotationMatrix);
      var negativeTranslationMatrix = buildTranslationMatrix(-center[0], -center[1]);
      return multiplyTransformMatrices(translationTimesRotation, negativeTranslationMatrix);
  }
  function invertTransformMatrix(matrix) {
      var rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];
      var translationComponent = [matrix[0][2], matrix[1][2]];
      var invertedTranslation = [
          -dot(rotationComponent[0], translationComponent),
          -dot(rotationComponent[1], translationComponent)
      ];
      return [
          rotationComponent[0].concat(invertedTranslation[0]),
          rotationComponent[1].concat(invertedTranslation[1]),
          [0, 0, 1]
      ];
  }
  function rotatePoint(homogeneousCoordinate, rotationMatrix) {
      return [
          dot(homogeneousCoordinate, rotationMatrix[0]),
          dot(homogeneousCoordinate, rotationMatrix[1])
      ];
  }

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * https://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  var UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD = 0.8;
  var PALM_BOX_SHIFT_VECTOR = [0, -0.4];
  var PALM_BOX_ENLARGE_FACTOR = 3;
  var HAND_BOX_SHIFT_VECTOR = [0, -0.1];
  var HAND_BOX_ENLARGE_FACTOR = 1.65;
  var PALM_LANDMARK_IDS = [0, 5, 9, 13, 17, 1, 2];
  var PALM_LANDMARKS_INDEX_OF_PALM_BASE = 0;
  var PALM_LANDMARKS_INDEX_OF_MIDDLE_FINGER_BASE = 2;
  // The Pipeline coordinates between the bounding box and skeleton models.
  var HandPipeline = /** @class */ (function () {
      function HandPipeline(boundingBoxDetector, meshDetector, meshWidth, meshHeight, maxContinuousChecks, detectionConfidence) {
          // An array of hand bounding boxes.
          this.regionsOfInterest = [];
          this.runsWithoutHandDetector = 0;
          this.boundingBoxDetector = boundingBoxDetector;
          this.meshDetector = meshDetector;
          this.maxContinuousChecks = maxContinuousChecks;
          this.detectionConfidence = detectionConfidence;
          this.meshWidth = meshWidth;
          this.meshHeight = meshHeight;
          this.maxHandsNumber = 1; // TODO(annxingyuan): Add multi-hand support.
      }
      // Get the bounding box surrounding the hand, given palm landmarks.
      HandPipeline.prototype.getBoxForPalmLandmarks = function (palmLandmarks, rotationMatrix) {
          var rotatedPalmLandmarks = palmLandmarks.map(function (coord) {
              var homogeneousCoordinate = coord.concat([1]);
              return rotatePoint(homogeneousCoordinate, rotationMatrix);
          });
          var boxAroundPalm = this.calculateLandmarksBoundingBox(rotatedPalmLandmarks);
          // boxAroundPalm only surrounds the palm - therefore we shift it
          // upwards so it will capture fingers once enlarged + squarified.
          return enlargeBox(squarifyBox(shiftBox(boxAroundPalm, PALM_BOX_SHIFT_VECTOR)), PALM_BOX_ENLARGE_FACTOR);
      };
      // Get the bounding box surrounding the hand, given all hand landmarks.
      HandPipeline.prototype.getBoxForHandLandmarks = function (landmarks) {
          // The MediaPipe hand mesh model is trained on hands with empty space
          // around them, so we still need to shift / enlarge boxAroundHand even
          // though it surrounds the entire hand.
          var boundingBox = this.calculateLandmarksBoundingBox(landmarks);
          var boxAroundHand = enlargeBox(squarifyBox(shiftBox(boundingBox, HAND_BOX_SHIFT_VECTOR)), HAND_BOX_ENLARGE_FACTOR);
          var palmLandmarks = [];
          for (var i = 0; i < PALM_LANDMARK_IDS.length; i++) {
              palmLandmarks.push(landmarks[PALM_LANDMARK_IDS[i]].slice(0, 2));
          }
          boxAroundHand.palmLandmarks = palmLandmarks;
          return boxAroundHand;
      };
      // Scale, rotate, and translate raw keypoints from the model so they map to
      // the input coordinates.
      HandPipeline.prototype.transformRawCoords = function (rawCoords, box, angle, rotationMatrix) {
          var _this = this;
          var boxSize = getBoxSize(box);
          var scaleFactor = [boxSize[0] / this.meshWidth, boxSize[1] / this.meshHeight];
          var coordsScaled = rawCoords.map(function (coord) {
              return [
                  scaleFactor[0] * (coord[0] - _this.meshWidth / 2),
                  scaleFactor[1] * (coord[1] - _this.meshHeight / 2), coord[2]
              ];
          });
          var coordsRotationMatrix = buildRotationMatrix(angle, [0, 0]);
          var coordsRotated = coordsScaled.map(function (coord) {
              var rotated = rotatePoint(coord, coordsRotationMatrix);
              return rotated.concat([coord[2]]);
          });
          var inverseRotationMatrix = invertTransformMatrix(rotationMatrix);
          var boxCenter = getBoxCenter(box).concat([1]);
          var originalBoxCenter = [
              dot(boxCenter, inverseRotationMatrix[0]),
              dot(boxCenter, inverseRotationMatrix[1])
          ];
          return coordsRotated.map(function (coord) {
              return [
                  coord[0] + originalBoxCenter[0], coord[1] + originalBoxCenter[1],
                  coord[2]
              ];
          });
      };
      HandPipeline.prototype.estimateHand = function (image) {
          return __awaiter(this, void 0, void 0, function () {
              var useFreshBox, boundingBoxPrediction, currentBox, angle, palmCenter, palmCenterNormalized, rotatedImage, rotationMatrix, box, croppedInput, handImage, prediction, savedWebglPackDepthwiseConvFlag, flag, keypoints, flagValue, keypointsReshaped, rawCoords, coords, nextBoundingBox, result;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          useFreshBox = this.shouldUpdateRegionsOfInterest();
                          if (!(useFreshBox === true)) return [3 /*break*/, 2];
                          return [4 /*yield*/, this.boundingBoxDetector.estimateHandBounds(image)];
                      case 1:
                          boundingBoxPrediction = _a.sent();
                          if (boundingBoxPrediction === null) {
                              image.dispose();
                              this.regionsOfInterest = [];
                              return [2 /*return*/, null];
                          }
                          this.updateRegionsOfInterest(boundingBoxPrediction, true /*force update*/);
                          this.runsWithoutHandDetector = 0;
                          return [3 /*break*/, 3];
                      case 2:
                          this.runsWithoutHandDetector++;
                          _a.label = 3;
                      case 3:
                          currentBox = this.regionsOfInterest[0];
                          angle = computeRotation(currentBox.palmLandmarks[PALM_LANDMARKS_INDEX_OF_PALM_BASE], currentBox.palmLandmarks[PALM_LANDMARKS_INDEX_OF_MIDDLE_FINGER_BASE]);
                          palmCenter = getBoxCenter(currentBox);
                          palmCenterNormalized = [palmCenter[0] / image.shape[2], palmCenter[1] / image.shape[1]];
                          rotatedImage = tf.image.rotateWithOffset(image, angle, 0, palmCenterNormalized);
                          rotationMatrix = buildRotationMatrix(-angle, palmCenter);
                          // The bounding box detector only detects palms, so if we're using a fresh
                          // bounding box prediction, we have to construct the hand bounding box from
                          // the palm keypoints.
                          if (useFreshBox === true) {
                              box =
                                  this.getBoxForPalmLandmarks(currentBox.palmLandmarks, rotationMatrix);
                          }
                          else {
                              box = currentBox;
                          }
                          croppedInput = cutBoxFromImageAndResize(box, rotatedImage, [this.meshWidth, this.meshHeight]);
                          handImage = croppedInput.div(255);
                          croppedInput.dispose();
                          rotatedImage.dispose();
                          if (tf.getBackend() === 'webgl') {
                              savedWebglPackDepthwiseConvFlag = tf.env().get('WEBGL_PACK_DEPTHWISECONV');
                              tf.env().set('WEBGL_PACK_DEPTHWISECONV', true);
                              prediction =
                                  this.meshDetector.predict(handImage);
                              tf.env().set('WEBGL_PACK_DEPTHWISECONV', savedWebglPackDepthwiseConvFlag);
                          }
                          else {
                              prediction =
                                  this.meshDetector.predict(handImage);
                          }
                          flag = prediction[0], keypoints = prediction[1];
                          handImage.dispose();
                          flagValue = flag.dataSync()[0];
                          flag.dispose();
                          if (flagValue < this.detectionConfidence) {
                              keypoints.dispose();
                              this.regionsOfInterest = [];
                              return [2 /*return*/, null];
                          }
                          keypointsReshaped = tf.reshape(keypoints, [-1, 3]);
                          rawCoords = keypointsReshaped.arraySync();
                          keypoints.dispose();
                          keypointsReshaped.dispose();
                          coords = this.transformRawCoords(rawCoords, box, angle, rotationMatrix);
                          nextBoundingBox = this.getBoxForHandLandmarks(coords);
                          this.updateRegionsOfInterest(nextBoundingBox, false /* force replace */);
                          result = {
                              landmarks: coords,
                              handInViewConfidence: flagValue,
                              boundingBox: {
                                  topLeft: nextBoundingBox.startPoint,
                                  bottomRight: nextBoundingBox.endPoint
                              }
                          };
                          return [2 /*return*/, result];
                  }
              });
          });
      };
      HandPipeline.prototype.calculateLandmarksBoundingBox = function (landmarks) {
          var xs = landmarks.map(function (d) { return d[0]; });
          var ys = landmarks.map(function (d) { return d[1]; });
          var startPoint = [Math.min.apply(Math, xs), Math.min.apply(Math, ys)];
          var endPoint = [Math.max.apply(Math, xs), Math.max.apply(Math, ys)];
          return { startPoint: startPoint, endPoint: endPoint };
      };
      // Updates regions of interest if the intersection over union between
      // the incoming and previous regions falls below a threshold.
      HandPipeline.prototype.updateRegionsOfInterest = function (box, forceUpdate) {
          if (forceUpdate) {
              this.regionsOfInterest = [box];
          }
          else {
              var previousBox = this.regionsOfInterest[0];
              var iou = 0;
              if (previousBox != null && previousBox.startPoint != null) {
                  var _a = box.startPoint, boxStartX = _a[0], boxStartY = _a[1];
                  var _b = box.endPoint, boxEndX = _b[0], boxEndY = _b[1];
                  var _c = previousBox.startPoint, previousBoxStartX = _c[0], previousBoxStartY = _c[1];
                  var _d = previousBox.endPoint, previousBoxEndX = _d[0], previousBoxEndY = _d[1];
                  var xStartMax = Math.max(boxStartX, previousBoxStartX);
                  var yStartMax = Math.max(boxStartY, previousBoxStartY);
                  var xEndMin = Math.min(boxEndX, previousBoxEndX);
                  var yEndMin = Math.min(boxEndY, previousBoxEndY);
                  var intersection = (xEndMin - xStartMax) * (yEndMin - yStartMax);
                  var boxArea = (boxEndX - boxStartX) * (boxEndY - boxStartY);
                  var previousBoxArea = (previousBoxEndX - previousBoxStartX) *
                      (previousBoxEndY - boxStartY);
                  iou = intersection / (boxArea + previousBoxArea - intersection);
              }
              this.regionsOfInterest[0] =
                  iou > UPDATE_REGION_OF_INTEREST_IOU_THRESHOLD ? previousBox : box;
          }
      };
      HandPipeline.prototype.shouldUpdateRegionsOfInterest = function () {
          var roisCount = this.regionsOfInterest.length;
          return roisCount !== this.maxHandsNumber ||
              this.runsWithoutHandDetector >= this.maxContinuousChecks;
      };
      return HandPipeline;
  }());

  /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * https://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */
  // Load the bounding box detector model.
  function loadHandDetectorModel() {
      return __awaiter(this, void 0, void 0, function () {
          var HANDDETECT_MODEL_PATH;
          return __generator(this, function (_a) {
              HANDDETECT_MODEL_PATH = 'https://tfhub.dev/mediapipe/tfjs-model/handdetector/1/default/1';
              return [2 /*return*/, tfconv.loadGraphModel(HANDDETECT_MODEL_PATH, { fromTFHub: true })];
          });
      });
  }
  var MESH_MODEL_INPUT_WIDTH = 256;
  var MESH_MODEL_INPUT_HEIGHT = 256;
  // Load the mesh detector model.
  function loadHandPoseModel() {
      return __awaiter(this, void 0, void 0, function () {
          var HANDPOSE_MODEL_PATH;
          return __generator(this, function (_a) {
              HANDPOSE_MODEL_PATH = 'https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1';
              return [2 /*return*/, tfconv.loadGraphModel(HANDPOSE_MODEL_PATH, { fromTFHub: true })];
          });
      });
  }
  // In single shot detector pipelines, the output space is discretized into a set
  // of bounding boxes, each of which is assigned a score during prediction. The
  // anchors define the coordinates of these boxes.
  function loadAnchors() {
      return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
              return [2 /*return*/, tf.util
                      .fetch('https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1/anchors.json?tfjs-format=file')
                      .then(function (d) { return d.json(); })];
          });
      });
  }
  /**
   * Load handpose.
   *
   * @param config A configuration object with the following properties:
   * - `maxContinuousChecks` How many frames to go without running the bounding
   * box detector. Defaults to infinity. Set to a lower value if you want a safety
   * net in case the mesh detector produces consistently flawed predictions.
   * - `detectionConfidence` Threshold for discarding a prediction. Defaults to
   * 0.8.
   * - `iouThreshold` A float representing the threshold for deciding whether
   * boxes overlap too much in non-maximum suppression. Must be between [0, 1].
   * Defaults to 0.3.
   * - `scoreThreshold` A threshold for deciding when to remove boxes based
   * on score in non-maximum suppression. Defaults to 0.75.
   */
  function load(_a) {
      var _b = _a === void 0 ? {} : _a, _c = _b.maxContinuousChecks, maxContinuousChecks = _c === void 0 ? Infinity : _c, _d = _b.detectionConfidence, detectionConfidence = _d === void 0 ? 0.8 : _d, _e = _b.iouThreshold, iouThreshold = _e === void 0 ? 0.3 : _e, _f = _b.scoreThreshold, scoreThreshold = _f === void 0 ? 0.5 : _f;
      return __awaiter(this, void 0, void 0, function () {
          var _g, ANCHORS, handDetectorModel, handPoseModel, detector, pipeline, handpose;
          return __generator(this, function (_h) {
              switch (_h.label) {
                  case 0: return [4 /*yield*/, Promise.all([loadAnchors(), loadHandDetectorModel(), loadHandPoseModel()])];
                  case 1:
                      _g = _h.sent(), ANCHORS = _g[0], handDetectorModel = _g[1], handPoseModel = _g[2];
                      detector = new HandDetector(handDetectorModel, MESH_MODEL_INPUT_WIDTH, MESH_MODEL_INPUT_HEIGHT, ANCHORS, iouThreshold, scoreThreshold);
                      pipeline = new HandPipeline(detector, handPoseModel, MESH_MODEL_INPUT_WIDTH, MESH_MODEL_INPUT_HEIGHT, maxContinuousChecks, detectionConfidence);
                      handpose = new HandPose(pipeline);
                      return [2 /*return*/, handpose];
              }
          });
      });
  }
  function getInputTensorDimensions(input) {
      return input instanceof tf.Tensor ? [input.shape[0], input.shape[1]] :
          [input.height, input.width];
  }
  function flipHandHorizontal(prediction, width) {
      var handInViewConfidence = prediction.handInViewConfidence, landmarks = prediction.landmarks, boundingBox = prediction.boundingBox;
      return {
          handInViewConfidence: handInViewConfidence,
          landmarks: landmarks.map(function (coord) {
              return [width - 1 - coord[0], coord[1], coord[2]];
          }),
          boundingBox: {
              topLeft: [width - 1 - boundingBox.topLeft[0], boundingBox.topLeft[1]],
              bottomRight: [
                  width - 1 - boundingBox.bottomRight[0], boundingBox.bottomRight[1]
              ]
          }
      };
  }
  var HandPose = /** @class */ (function () {
      function HandPose(pipeline) {
          this.pipeline = pipeline;
      }
      HandPose.getAnnotations = function () {
          return MESH_ANNOTATIONS;
      };
      /**
       * Finds hands in the input image.
       *
       * @param input The image to classify. Can be a tensor, DOM element image,
       * video, or canvas.
       * @param flipHorizontal Whether to flip the hand keypoints horizontally.
       * Should be true for videos that are flipped by default (e.g. webcams).
       */
      HandPose.prototype.estimateHands = function (input, flipHorizontal) {
          if (flipHorizontal === void 0) { flipHorizontal = false; }
          return __awaiter(this, void 0, void 0, function () {
              var _a, width, image, result, prediction, annotations, _i, _b, key;
              return __generator(this, function (_c) {
                  switch (_c.label) {
                      case 0:
                          _a = getInputTensorDimensions(input), width = _a[1];
                          image = tf.tidy(function () {
                              if (!(input instanceof tf.Tensor)) {
                                  input = tf.browser.fromPixels(input);
                              }
                              return input.toFloat().expandDims(0);
                          });
                          return [4 /*yield*/, this.pipeline.estimateHand(image)];
                      case 1:
                          result = _c.sent();
                          image.dispose();
                          if (result === null) {
                              return [2 /*return*/, []];
                          }
                          prediction = result;
                          if (flipHorizontal === true) {
                              prediction = flipHandHorizontal(result, width);
                          }
                          annotations = {};
                          for (_i = 0, _b = Object.keys(MESH_ANNOTATIONS); _i < _b.length; _i++) {
                              key = _b[_i];
                              annotations[key] =
                                  MESH_ANNOTATIONS[key].map(function (index) { return prediction.landmarks[index]; });
                          }
                          return [2 /*return*/, [{
                                      handInViewConfidence: prediction.handInViewConfidence,
                                      boundingBox: prediction.boundingBox,
                                      landmarks: prediction.landmarks,
                                      annotations: annotations
                                  }]];
                  }
              });
          });
      };
      return HandPose;
  }());

  exports.HandPose = HandPose;
  exports.load = load;

  Object.defineProperty(exports, '__esModule', { value: true });

})));

// threejs.org/license
(function(k,Aa){"object"===typeof exports&&"undefined"!==typeof module?Aa(exports):"function"===typeof define&&define.amd?define(["exports"],Aa):(k=k||self,Aa(k.THREE={}))})(this,function(k){function Aa(){}function B(a,b){this.x=a||0;this.y=b||0}function wa(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1}function n(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0}function Z(){this.elements=[1,0,0,0,1,0,0,0,1];0<arguments.length&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}
function Y(a,b,c,d,e,f,g,h,l,m){Object.defineProperty(this,"id",{value:Si++});this.uuid=P.generateUUID();this.name="";this.image=void 0!==a?a:Y.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=void 0!==b?b:Y.DEFAULT_MAPPING;this.wrapS=void 0!==c?c:1001;this.wrapT=void 0!==d?d:1001;this.magFilter=void 0!==e?e:1006;this.minFilter=void 0!==f?f:1008;this.anisotropy=void 0!==l?l:1;this.format=void 0!==g?g:1023;this.type=void 0!==h?h:1009;this.offset=new B(0,0);this.repeat=new B(1,1);this.center=new B(0,0);this.rotation=
0;this.matrixAutoUpdate=!0;this.matrix=new Z;this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.encoding=void 0!==m?m:3E3;this.version=0;this.onUpdate=null}function da(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1}function Ba(a,b,c){this.width=a;this.height=b;this.scissor=new da(0,0,a,b);this.scissorTest=!1;this.viewport=new da(0,0,a,b);c=c||{};this.texture=new Y(void 0,void 0,c.wrapS,c.wrapT,c.magFilter,c.minFilter,c.format,c.type,c.anisotropy,
c.encoding);this.texture.image={};this.texture.image.width=a;this.texture.image.height=b;this.texture.generateMipmaps=void 0!==c.generateMipmaps?c.generateMipmaps:!1;this.texture.minFilter=void 0!==c.minFilter?c.minFilter:1006;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.depthTexture=void 0!==c.depthTexture?c.depthTexture:null}function Sf(a,b,c){Ba.call(this,a,b,c);this.samples=4}function Q(){this.elements=[1,0,0,0,0,
1,0,0,0,0,1,0,0,0,0,1];0<arguments.length&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}function Pb(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._order=d||Pb.DefaultOrder}function Tf(){this.mask=1}function E(){Object.defineProperty(this,"id",{value:Ti++});this.uuid=P.generateUUID();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=E.DefaultUp.clone();var a=new n,b=new Pb,c=new wa,d=new n(1,1,1);b._onChange(function(){c.setFromEuler(b,
!1)});c._onChange(function(){b.setFromQuaternion(c,void 0,!1)});Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:a},rotation:{configurable:!0,enumerable:!0,value:b},quaternion:{configurable:!0,enumerable:!0,value:c},scale:{configurable:!0,enumerable:!0,value:d},modelViewMatrix:{value:new Q},normalMatrix:{value:new Z}});this.matrix=new Q;this.matrixWorld=new Q;this.matrixAutoUpdate=E.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=!1;this.layers=new Tf;this.visible=!0;
this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.renderOrder=0;this.userData={}}function vd(){E.call(this);this.type="Scene";this.overrideMaterial=this.fog=this.background=null;this.autoUpdate=!0;"undefined"!==typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function ab(a,b){this.min=void 0!==a?a:new n(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new n(-Infinity,-Infinity,-Infinity)}function Uf(a,b,c,d,e){var f;var g=0;for(f=
a.length-3;g<=f;g+=3){Qb.fromArray(a,g);var h=e.x*Math.abs(Qb.x)+e.y*Math.abs(Qb.y)+e.z*Math.abs(Qb.z),l=b.dot(Qb),m=c.dot(Qb),r=d.dot(Qb);if(Math.max(-Math.max(l,m,r),Math.min(l,m,r))>h)return!1}return!0}function mb(a,b){this.center=void 0!==a?a:new n;this.radius=void 0!==b?b:0}function Rb(a,b){this.origin=void 0!==a?a:new n;this.direction=void 0!==b?b:new n}function Oa(a,b){this.normal=void 0!==a?a:new n(1,0,0);this.constant=void 0!==b?b:0}function ba(a,b,c){this.a=void 0!==a?a:new n;this.b=void 0!==
b?b:new n;this.c=void 0!==c?c:new n}function J(a,b,c){return void 0===b&&void 0===c?this.set(a):this.setRGB(a,b,c)}function Vf(a,b,c){0>c&&(c+=1);1<c&&--c;return c<1/6?a+6*(b-a)*c:.5>c?b:c<2/3?a+6*(b-a)*(2/3-c):a}function Wf(a){return.04045>a?.0773993808*a:Math.pow(.9478672986*a+.0521327014,2.4)}function Xf(a){return.0031308>a?12.92*a:1.055*Math.pow(a,.41666)-.055}function xc(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d&&d.isVector3?d:new n;this.vertexNormals=Array.isArray(d)?d:[];this.color=
e&&e.isColor?e:new J;this.vertexColors=Array.isArray(e)?e:[];this.materialIndex=void 0!==f?f:0}function O(){Object.defineProperty(this,"id",{value:Ui++});this.uuid=P.generateUUID();this.name="";this.type="Material";this.fog=!0;this.blending=1;this.side=0;this.vertexTangents=this.flatShading=!1;this.vertexColors=0;this.opacity=1;this.transparent=!1;this.blendSrc=204;this.blendDst=205;this.blendEquation=100;this.blendEquationAlpha=this.blendDstAlpha=this.blendSrcAlpha=null;this.depthFunc=3;this.depthWrite=
this.depthTest=!0;this.stencilWriteMask=255;this.stencilFunc=519;this.stencilRef=0;this.stencilFuncMask=255;this.stencilZPass=this.stencilZFail=this.stencilFail=7680;this.stencilWrite=!1;this.clippingPlanes=null;this.clipShadows=this.clipIntersection=!1;this.shadowSide=null;this.colorWrite=!0;this.precision=null;this.polygonOffset=!1;this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.dithering=!1;this.alphaTest=0;this.premultipliedAlpha=!1;this.toneMapped=this.visible=!0;this.userData={};this.needsUpdate=
!0}function Ga(a){O.call(this);this.type="MeshBasicMaterial";this.color=new J(16777215);this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.envMap=this.alphaMap=this.specularMap=null;this.combine=0;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphTargets=this.skinning=!1;this.setValues(a)}function N(a,b,c){if(Array.isArray(a))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
this.name="";this.array=a;this.itemSize=b;this.count=void 0!==a?a.length/b:0;this.normalized=!0===c;this.usage=35044;this.updateRange={offset:0,count:-1};this.version=0}function wd(a,b,c){N.call(this,new Int8Array(a),b,c)}function xd(a,b,c){N.call(this,new Uint8Array(a),b,c)}function yd(a,b,c){N.call(this,new Uint8ClampedArray(a),b,c)}function zd(a,b,c){N.call(this,new Int16Array(a),b,c)}function Sb(a,b,c){N.call(this,new Uint16Array(a),b,c)}function Ad(a,b,c){N.call(this,new Int32Array(a),b,c)}function Tb(a,
b,c){N.call(this,new Uint32Array(a),b,c)}function A(a,b,c){N.call(this,new Float32Array(a),b,c)}function Bd(a,b,c){N.call(this,new Float64Array(a),b,c)}function ih(){this.vertices=[];this.normals=[];this.colors=[];this.uvs=[];this.uvs2=[];this.groups=[];this.morphTargets={};this.skinWeights=[];this.skinIndices=[];this.boundingSphere=this.boundingBox=null;this.groupsNeedUpdate=this.uvsNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=this.verticesNeedUpdate=!1}function jh(a){if(0===a.length)return-Infinity;
for(var b=a[0],c=1,d=a.length;c<d;++c)a[c]>b&&(b=a[c]);return b}function D(){Object.defineProperty(this,"id",{value:Vi+=2});this.uuid=P.generateUUID();this.name="";this.type="BufferGeometry";this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingSphere=this.boundingBox=null;this.drawRange={start:0,count:Infinity};this.userData={}}function ea(a,b){E.call(this);this.type="Mesh";this.geometry=void 0!==a?a:new D;this.material=void 0!==b?b:new Ga({color:16777215*Math.random()});
this.drawMode=0;this.updateMorphTargets()}function kh(a,b,c,d,e,f,g,h){if(null===(1===b.side?d.intersectTriangle(g,f,e,!0,h):d.intersectTriangle(e,f,g,2!==b.side,h)))return null;Ee.copy(h);Ee.applyMatrix4(a.matrixWorld);b=c.ray.origin.distanceTo(Ee);return b<c.near||b>c.far?null:{distance:b,point:Ee.clone(),object:a}}function Fe(a,b,c,d,e,f,g,h,l,m,r){Ub.fromBufferAttribute(e,l);Vb.fromBufferAttribute(e,m);Wb.fromBufferAttribute(e,r);e=a.morphTargetInfluences;if(b.morphTargets&&f&&e){Yf.set(0,0,0);
Zf.set(0,0,0);$f.set(0,0,0);for(var q=0,u=f.length;q<u;q++){var p=e[q],k=f[q];0!==p&&(lh.fromBufferAttribute(k,l),mh.fromBufferAttribute(k,m),nh.fromBufferAttribute(k,r),Yf.addScaledVector(lh.sub(Ub),p),Zf.addScaledVector(mh.sub(Vb),p),$f.addScaledVector(nh.sub(Wb),p))}Ub.add(Yf);Vb.add(Zf);Wb.add($f)}if(a=kh(a,b,c,d,Ub,Vb,Wb,Cd))g&&(yc.fromBufferAttribute(g,l),zc.fromBufferAttribute(g,m),Ac.fromBufferAttribute(g,r),a.uv=ba.getUV(Cd,Ub,Vb,Wb,yc,zc,Ac,new B)),h&&(yc.fromBufferAttribute(h,l),zc.fromBufferAttribute(h,
m),Ac.fromBufferAttribute(h,r),a.uv2=ba.getUV(Cd,Ub,Vb,Wb,yc,zc,Ac,new B)),g=new xc(l,m,r),ba.getNormal(Ub,Vb,Wb,g.normal),a.face=g;return a}function G(){Object.defineProperty(this,"id",{value:Wi+=2});this.uuid=P.generateUUID();this.name="";this.type="Geometry";this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.groupsNeedUpdate=this.lineDistancesNeedUpdate=
this.colorsNeedUpdate=this.normalsNeedUpdate=this.uvsNeedUpdate=this.verticesNeedUpdate=this.elementsNeedUpdate=!1}function Xb(a){var b={},c;for(c in a){b[c]={};for(var d in a[c]){var e=a[c][d];e&&(e.isColor||e.isMatrix3||e.isMatrix4||e.isVector2||e.isVector3||e.isVector4||e.isTexture)?b[c][d]=e.clone():Array.isArray(e)?b[c][d]=e.slice():b[c][d]=e}}return b}function ua(a){for(var b={},c=0;c<a.length;c++){var d=Xb(a[c]),e;for(e in d)b[e]=d[e]}return b}function va(a){O.call(this);this.type="ShaderMaterial";
this.defines={};this.uniforms={};this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.morphNormals=this.morphTargets=this.skinning=this.clipping=this.lights=this.fog=!1;this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1};this.defaultAttributeValues={color:[1,1,
1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=void 0;this.uniformsNeedUpdate=!1;void 0!==a&&(void 0!==a.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(a))}function bb(){E.call(this);this.type="Camera";this.matrixWorldInverse=new Q;this.projectionMatrix=new Q;this.projectionMatrixInverse=new Q}function U(a,b,c,d){bb.call(this);this.type="PerspectiveCamera";this.fov=void 0!==a?a:50;this.zoom=1;this.near=void 0!==
c?c:.1;this.far=void 0!==d?d:2E3;this.focus=10;this.aspect=void 0!==b?b:1;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()}function Bc(a,b,c,d){E.call(this);this.type="CubeCamera";var e=new U(90,1,a,b);e.up.set(0,-1,0);e.lookAt(new n(1,0,0));this.add(e);var f=new U(90,1,a,b);f.up.set(0,-1,0);f.lookAt(new n(-1,0,0));this.add(f);var g=new U(90,1,a,b);g.up.set(0,0,1);g.lookAt(new n(0,1,0));this.add(g);var h=new U(90,1,a,b);h.up.set(0,0,-1);h.lookAt(new n(0,-1,0));this.add(h);
var l=new U(90,1,a,b);l.up.set(0,-1,0);l.lookAt(new n(0,0,1));this.add(l);var m=new U(90,1,a,b);m.up.set(0,-1,0);m.lookAt(new n(0,0,-1));this.add(m);d=d||{format:1022,magFilter:1006,minFilter:1006};this.renderTarget=new Bb(c,c,d);this.renderTarget.texture.name="CubeCamera";this.update=function(a,b){null===this.parent&&this.updateMatrixWorld();var c=a.getRenderTarget(),d=this.renderTarget,r=d.texture.generateMipmaps;d.texture.generateMipmaps=!1;a.setRenderTarget(d,0);a.render(b,e);a.setRenderTarget(d,
1);a.render(b,f);a.setRenderTarget(d,2);a.render(b,g);a.setRenderTarget(d,3);a.render(b,h);a.setRenderTarget(d,4);a.render(b,l);d.texture.generateMipmaps=r;a.setRenderTarget(d,5);a.render(b,m);a.setRenderTarget(c)};this.clear=function(a,b,c,d){for(var e=a.getRenderTarget(),f=this.renderTarget,g=0;6>g;g++)a.setRenderTarget(f,g),a.clear(b,c,d);a.setRenderTarget(e)}}function Bb(a,b,c){Ba.call(this,a,b,c)}function Yb(a,b,c,d,e,f,g,h,l,m,r,q){Y.call(this,null,f,g,h,l,m,d,e,r,q);this.image={data:a||null,
width:b||1,height:c||1};this.magFilter=void 0!==l?l:1003;this.minFilter=void 0!==m?m:1003;this.flipY=this.generateMipmaps=!1;this.unpackAlignment=1;this.needsUpdate=!0}function Dd(a,b,c,d,e,f){this.planes=[void 0!==a?a:new Oa,void 0!==b?b:new Oa,void 0!==c?c:new Oa,void 0!==d?d:new Oa,void 0!==e?e:new Oa,void 0!==f?f:new Oa]}function ag(){function a(e,f){!1!==c&&(d(e,f),b.requestAnimationFrame(a))}var b=null,c=!1,d=null;return{start:function(){!0!==c&&null!==d&&(b.requestAnimationFrame(a),c=!0)},
stop:function(){c=!1},setAnimationLoop:function(a){d=a},setContext:function(a){b=a}}}function Xi(a){function b(b,c){var d=b.array,e=b.usage,h=a.createBuffer();a.bindBuffer(c,h);a.bufferData(c,d,e);b.onUploadCallback();c=5126;d instanceof Float32Array?c=5126:d instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):d instanceof Uint16Array?c=5123:d instanceof Int16Array?c=5122:d instanceof Uint32Array?c=5125:d instanceof Int32Array?c=5124:d instanceof
Int8Array?c=5120:d instanceof Uint8Array&&(c=5121);return{buffer:h,type:c,bytesPerElement:d.BYTES_PER_ELEMENT,version:b.version}}var c=new WeakMap;return{get:function(a){a.isInterleavedBufferAttribute&&(a=a.data);return c.get(a)},remove:function(b){b.isInterleavedBufferAttribute&&(b=b.data);var d=c.get(b);d&&(a.deleteBuffer(d.buffer),c.delete(b))},update:function(d,e){d.isInterleavedBufferAttribute&&(d=d.data);var f=c.get(d);if(void 0===f)c.set(d,b(d,e));else if(f.version<d.version){var g=d.array,
h=d.updateRange;a.bindBuffer(e,f.buffer);-1===h.count?a.bufferSubData(e,0,g):(a.bufferSubData(e,h.offset*g.BYTES_PER_ELEMENT,g.subarray(h.offset,h.offset+h.count)),h.count=-1);f.version=d.version}}}}function Ed(a,b,c,d){G.call(this);this.type="PlaneGeometry";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};this.fromBufferGeometry(new Zb(a,b,c,d));this.mergeVertices()}function Zb(a,b,c,d){D.call(this);this.type="PlaneBufferGeometry";this.parameters={width:a,height:b,widthSegments:c,
heightSegments:d};a=a||1;b=b||1;var e=a/2,f=b/2;c=Math.floor(c)||1;d=Math.floor(d)||1;var g=c+1,h=d+1,l=a/c,m=b/d,r=[],q=[],u=[],p=[];for(a=0;a<h;a++){var k=a*m-f;for(b=0;b<g;b++)q.push(b*l-e,-k,0),u.push(0,0,1),p.push(b/c),p.push(1-a/d)}for(a=0;a<d;a++)for(b=0;b<c;b++)e=b+g*(a+1),f=b+1+g*(a+1),h=b+1+g*a,r.push(b+g*a,e,h),r.push(e,f,h);this.setIndex(r);this.setAttribute("position",new A(q,3));this.setAttribute("normal",new A(u,3));this.setAttribute("uv",new A(p,2))}function Yi(a,b,c,d){function e(a,
c){b.buffers.color.setClear(a.r,a.g,a.b,c,d)}var f=new J(0),g=0,h,l,m=null,r=0;return{getClearColor:function(){return f},setClearColor:function(a,b){f.set(a);g=void 0!==b?b:1;e(f,g)},getClearAlpha:function(){return g},setClearAlpha:function(a){g=a;e(f,g)},render:function(b,d,p,k){d=d.background;p=a.vr;(p=p.getSession&&p.getSession())&&"additive"===p.environmentBlendMode&&(d=null);null===d?(e(f,g),m=null,r=0):d&&d.isColor&&(e(d,1),k=!0,m=null,r=0);(a.autoClear||k)&&a.clear(a.autoClearColor,a.autoClearDepth,
a.autoClearStencil);if(d&&(d.isCubeTexture||d.isWebGLRenderTargetCube)){void 0===l&&(l=new ea(new Fd(1,1,1),new va({type:"BackgroundCubeMaterial",uniforms:Xb(cb.cube.uniforms),vertexShader:cb.cube.vertexShader,fragmentShader:cb.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),l.geometry.deleteAttribute("uv"),l.onBeforeRender=function(a,b,c){this.matrixWorld.copyPosition(c.matrixWorld)},Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.tCube.value}}),
c.update(l));k=d.isWebGLRenderTargetCube?d.texture:d;l.material.uniforms.tCube.value=k;l.material.uniforms.tFlip.value=d.isWebGLRenderTargetCube?1:-1;if(m!==d||r!==k.version)l.material.needsUpdate=!0,m=d,r=k.version;b.unshift(l,l.geometry,l.material,0,0,null)}else if(d&&d.isTexture){void 0===h&&(h=new ea(new Zb(2,2),new va({type:"BackgroundMaterial",uniforms:Xb(cb.background.uniforms),vertexShader:cb.background.vertexShader,fragmentShader:cb.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,
fog:!1})),h.geometry.deleteAttribute("normal"),Object.defineProperty(h.material,"map",{get:function(){return this.uniforms.t2D.value}}),c.update(h));h.material.uniforms.t2D.value=d;!0===d.matrixAutoUpdate&&d.updateMatrix();h.material.uniforms.uvTransform.value.copy(d.matrix);if(m!==d||r!==d.version)h.material.needsUpdate=!0,m=d,r=d.version;b.unshift(h,h.geometry,h.material,0,0,null)}}}}function Zi(a,b,c,d){var e=d.isWebGL2,f;this.setMode=function(a){f=a};this.render=function(b,d){a.drawArrays(f,b,
d);c.update(d,f)};this.renderInstances=function(d,h,l,m){if(0!==m){if(e){d=a;var g="drawArraysInstanced"}else if(d=b.get("ANGLE_instanced_arrays"),g="drawArraysInstancedANGLE",null===d){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}d[g](f,h,l,m);c.update(l,f,m)}}}function $i(a,b,c){function d(b){if("highp"===b){if(0<a.getShaderPrecisionFormat(35633,36338).precision&&0<a.getShaderPrecisionFormat(35632,
36338).precision)return"highp";b="mediump"}return"mediump"===b&&0<a.getShaderPrecisionFormat(35633,36337).precision&&0<a.getShaderPrecisionFormat(35632,36337).precision?"mediump":"lowp"}var e,f="undefined"!==typeof WebGL2RenderingContext&&a instanceof WebGL2RenderingContext||"undefined"!==typeof WebGL2ComputeRenderingContext&&a instanceof WebGL2ComputeRenderingContext,g=void 0!==c.precision?c.precision:"highp",h=d(g);h!==g&&(console.warn("THREE.WebGLRenderer:",g,"not supported, using",h,"instead."),
g=h);c=!0===c.logarithmicDepthBuffer;h=a.getParameter(34930);var l=a.getParameter(35660),m=a.getParameter(3379),r=a.getParameter(34076),q=a.getParameter(34921),k=a.getParameter(36347),p=a.getParameter(36348),t=a.getParameter(36349),v=0<l,y=f||!!b.get("OES_texture_float"),n=v&&y,x=f?a.getParameter(36183):0;return{isWebGL2:f,getMaxAnisotropy:function(){if(void 0!==e)return e;var c=b.get("EXT_texture_filter_anisotropic");return e=null!==c?a.getParameter(c.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:d,
precision:g,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:l,maxTextureSize:m,maxCubemapSize:r,maxAttributes:q,maxVertexUniforms:k,maxVaryings:p,maxFragmentUniforms:t,vertexTextures:v,floatFragmentTextures:y,floatVertexTextures:n,maxSamples:x}}function aj(){function a(){m.value!==d&&(m.value=d,m.needsUpdate=0<e);c.numPlanes=e;c.numIntersection=0}function b(a,b,d,e){var f=null!==a?a.length:0,g=null;if(0!==f){g=m.value;if(!0!==e||null===g){e=d+4*f;b=b.matrixWorldInverse;l.getNormalMatrix(b);
if(null===g||g.length<e)g=new Float32Array(e);for(e=0;e!==f;++e,d+=4)h.copy(a[e]).applyMatrix4(b,l),h.normal.toArray(g,d),g[d+3]=h.constant}m.value=g;m.needsUpdate=!0}c.numPlanes=f;return g}var c=this,d=null,e=0,f=!1,g=!1,h=new Oa,l=new Z,m={value:null,needsUpdate:!1};this.uniform=m;this.numIntersection=this.numPlanes=0;this.init=function(a,c,g){var h=0!==a.length||c||0!==e||f;f=c;d=b(a,g,0);e=a.length;return h};this.beginShadows=function(){g=!0;b(null)};this.endShadows=function(){g=!1;a()};this.setState=
function(c,h,l,p,k,v){if(!f||null===c||0===c.length||g&&!l)g?b(null):a();else{l=g?0:e;var r=4*l,q=k.clippingState||null;m.value=q;q=b(c,p,r,v);for(c=0;c!==r;++c)q[c]=d[c];k.clippingState=q;this.numIntersection=h?this.numPlanes:0;this.numPlanes+=l}}}function bj(a){var b={};return{get:function(c){if(void 0!==b[c])return b[c];switch(c){case "WEBGL_depth_texture":var d=a.getExtension("WEBGL_depth_texture")||a.getExtension("MOZ_WEBGL_depth_texture")||a.getExtension("WEBKIT_WEBGL_depth_texture");break;
case "EXT_texture_filter_anisotropic":d=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case "WEBGL_compressed_texture_s3tc":d=a.getExtension("WEBGL_compressed_texture_s3tc")||a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case "WEBGL_compressed_texture_pvrtc":d=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
break;default:d=a.getExtension(c)}null===d&&console.warn("THREE.WebGLRenderer: "+c+" extension not supported.");return b[c]=d}}}function cj(a,b,c){function d(a){var e=a.target;a=f.get(e);null!==a.index&&b.remove(a.index);for(var h in a.attributes)b.remove(a.attributes[h]);e.removeEventListener("dispose",d);f.delete(e);if(h=g.get(a))b.remove(h),g.delete(a);c.memory.geometries--}function e(a){var c=[],d=a.index,e=a.attributes.position;if(null!==d){var f=d.array;d=d.version;e=0;for(var h=f.length;e<
h;e+=3){var k=f[e+0],t=f[e+1],v=f[e+2];c.push(k,t,t,v,v,k)}}else for(f=e.array,d=e.version,e=0,h=f.length/3-1;e<h;e+=3)k=e+0,t=e+1,v=e+2,c.push(k,t,t,v,v,k);c=new (65535<jh(c)?Tb:Sb)(c,1);c.version=d;b.update(c,34963);(f=g.get(a))&&b.remove(f);g.set(a,c)}var f=new WeakMap,g=new WeakMap;return{get:function(a,b){var e=f.get(b);if(e)return e;b.addEventListener("dispose",d);b.isBufferGeometry?e=b:b.isGeometry&&(void 0===b._bufferGeometry&&(b._bufferGeometry=(new D).setFromObject(a)),e=b._bufferGeometry);
f.set(b,e);c.memory.geometries++;return e},update:function(a){var c=a.index,d=a.attributes;null!==c&&b.update(c,34963);for(var e in d)b.update(d[e],34962);a=a.morphAttributes;for(e in a){c=a[e];d=0;for(var f=c.length;d<f;d++)b.update(c[d],34962)}},getWireframeAttribute:function(a){var b=g.get(a);if(b){var c=a.index;null!==c&&b.version<c.version&&e(a)}else e(a);return g.get(a)}}}function dj(a,b,c,d){var e=d.isWebGL2,f,g,h;this.setMode=function(a){f=a};this.setIndex=function(a){g=a.type;h=a.bytesPerElement};
this.render=function(b,d){a.drawElements(f,d,g,b*h);c.update(d,f)};this.renderInstances=function(d,m,r,q){if(0!==q){if(e){d=a;var l="drawElementsInstanced"}else if(d=b.get("ANGLE_instanced_arrays"),l="drawElementsInstancedANGLE",null===d){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}d[l](f,r,g,m*h,q);c.update(r,f,q)}}}function ej(a){var b={frame:0,calls:0,triangles:0,points:0,lines:0};
return{memory:{geometries:0,textures:0},render:b,programs:null,autoReset:!0,reset:function(){b.frame++;b.calls=0;b.triangles=0;b.points=0;b.lines=0},update:function(a,d,e){e=e||1;b.calls++;switch(d){case 4:b.triangles+=a/3*e;break;case 5:case 6:b.triangles+=e*(a-2);break;case 1:b.lines+=a/2*e;break;case 3:b.lines+=e*(a-1);break;case 2:b.lines+=e*a;break;case 0:b.points+=e*a;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",d)}}}}function fj(a,b){return Math.abs(b[1])-Math.abs(a[1])}
function gj(a){var b={},c=new Float32Array(8);return{update:function(d,e,f,g){var h=d.morphTargetInfluences,l=h.length;d=b[e.id];if(void 0===d){d=[];for(var m=0;m<l;m++)d[m]=[m,0];b[e.id]=d}var r=f.morphTargets&&e.morphAttributes.position;f=f.morphNormals&&e.morphAttributes.normal;for(m=0;m<l;m++){var q=d[m];0!==q[1]&&(r&&e.deleteAttribute("morphTarget"+m),f&&e.deleteAttribute("morphNormal"+m))}for(m=0;m<l;m++)q=d[m],q[0]=m,q[1]=h[m];d.sort(fj);for(m=0;8>m;m++){if(q=d[m])if(h=q[0],l=q[1]){r&&e.setAttribute("morphTarget"+
m,r[h]);f&&e.setAttribute("morphNormal"+m,f[h]);c[m]=l;continue}c[m]=0}g.getUniforms().setValue(a,"morphTargetInfluences",c)}}}function hj(a,b,c,d){var e={};return{update:function(a){var f=d.render.frame,h=a.geometry,l=b.get(a,h);e[l.id]!==f&&(h.isGeometry&&l.updateFromObject(a),b.update(l),e[l.id]=f);a.isInstancedMesh&&c.update(a.instanceMatrix,34962);return l},dispose:function(){e={}}}}function nb(a,b,c,d,e,f,g,h,l,m){a=void 0!==a?a:[];Y.call(this,a,void 0!==b?b:301,c,d,e,f,void 0!==g?g:1022,h,
l,m);this.flipY=!1}function Cc(a,b,c,d){Y.call(this,null);this.image={data:a||null,width:b||1,height:c||1,depth:d||1};this.minFilter=this.magFilter=1003;this.wrapR=1001;this.flipY=this.generateMipmaps=!1;this.needsUpdate=!0}function Dc(a,b,c,d){Y.call(this,null);this.image={data:a||null,width:b||1,height:c||1,depth:d||1};this.minFilter=this.magFilter=1003;this.wrapR=1001;this.flipY=this.generateMipmaps=!1;this.needsUpdate=!0}function Ec(a,b,c){var d=a[0];if(0>=d||0<d)return a;var e=b*c,f=oh[e];void 0===
f&&(f=new Float32Array(e),oh[e]=f);if(0!==b)for(d.toArray(f,0),d=1,e=0;d!==b;++d)e+=c,a[d].toArray(f,e);return f}function La(a,b){if(a.length!==b.length)return!1;for(var c=0,d=a.length;c<d;c++)if(a[c]!==b[c])return!1;return!0}function Ha(a,b){for(var c=0,d=b.length;c<d;c++)a[c]=b[c]}function ph(a,b){var c=qh[b];void 0===c&&(c=new Int32Array(b),qh[b]=c);for(var d=0;d!==b;++d)c[d]=a.allocateTextureUnit();return c}function ij(a,b){var c=this.cache;c[0]!==b&&(a.uniform1f(this.addr,b),c[0]=b)}function jj(a,
b){var c=this.cache;if(void 0!==b.x){if(c[0]!==b.x||c[1]!==b.y)a.uniform2f(this.addr,b.x,b.y),c[0]=b.x,c[1]=b.y}else La(c,b)||(a.uniform2fv(this.addr,b),Ha(c,b))}function kj(a,b){var c=this.cache;if(void 0!==b.x){if(c[0]!==b.x||c[1]!==b.y||c[2]!==b.z)a.uniform3f(this.addr,b.x,b.y,b.z),c[0]=b.x,c[1]=b.y,c[2]=b.z}else if(void 0!==b.r){if(c[0]!==b.r||c[1]!==b.g||c[2]!==b.b)a.uniform3f(this.addr,b.r,b.g,b.b),c[0]=b.r,c[1]=b.g,c[2]=b.b}else La(c,b)||(a.uniform3fv(this.addr,b),Ha(c,b))}function lj(a,b){var c=
this.cache;if(void 0!==b.x){if(c[0]!==b.x||c[1]!==b.y||c[2]!==b.z||c[3]!==b.w)a.uniform4f(this.addr,b.x,b.y,b.z,b.w),c[0]=b.x,c[1]=b.y,c[2]=b.z,c[3]=b.w}else La(c,b)||(a.uniform4fv(this.addr,b),Ha(c,b))}function mj(a,b){var c=this.cache,d=b.elements;void 0===d?La(c,b)||(a.uniformMatrix2fv(this.addr,!1,b),Ha(c,b)):La(c,d)||(rh.set(d),a.uniformMatrix2fv(this.addr,!1,rh),Ha(c,d))}function nj(a,b){var c=this.cache,d=b.elements;void 0===d?La(c,b)||(a.uniformMatrix3fv(this.addr,!1,b),Ha(c,b)):La(c,d)||
(sh.set(d),a.uniformMatrix3fv(this.addr,!1,sh),Ha(c,d))}function oj(a,b){var c=this.cache,d=b.elements;void 0===d?La(c,b)||(a.uniformMatrix4fv(this.addr,!1,b),Ha(c,b)):La(c,d)||(th.set(d),a.uniformMatrix4fv(this.addr,!1,th),Ha(c,d))}function pj(a,b,c){var d=this.cache,e=c.allocateTextureUnit();d[0]!==e&&(a.uniform1i(this.addr,e),d[0]=e);c.safeSetTexture2D(b||uh,e)}function qj(a,b,c){var d=this.cache,e=c.allocateTextureUnit();d[0]!==e&&(a.uniform1i(this.addr,e),d[0]=e);c.setTexture2DArray(b||rj,e)}
function sj(a,b,c){var d=this.cache,e=c.allocateTextureUnit();d[0]!==e&&(a.uniform1i(this.addr,e),d[0]=e);c.setTexture3D(b||tj,e)}function uj(a,b,c){var d=this.cache,e=c.allocateTextureUnit();d[0]!==e&&(a.uniform1i(this.addr,e),d[0]=e);c.safeSetTextureCube(b||vh,e)}function vj(a,b){var c=this.cache;c[0]!==b&&(a.uniform1i(this.addr,b),c[0]=b)}function wj(a,b){var c=this.cache;La(c,b)||(a.uniform2iv(this.addr,b),Ha(c,b))}function xj(a,b){var c=this.cache;La(c,b)||(a.uniform3iv(this.addr,b),Ha(c,b))}
function yj(a,b){var c=this.cache;La(c,b)||(a.uniform4iv(this.addr,b),Ha(c,b))}function zj(a){switch(a){case 5126:return ij;case 35664:return jj;case 35665:return kj;case 35666:return lj;case 35674:return mj;case 35675:return nj;case 35676:return oj;case 35678:case 36198:return pj;case 35679:return sj;case 35680:return uj;case 36289:return qj;case 5124:case 35670:return vj;case 35667:case 35671:return wj;case 35668:case 35672:return xj;case 35669:case 35673:return yj}}function Aj(a,b){a.uniform1fv(this.addr,
b)}function Bj(a,b){a.uniform1iv(this.addr,b)}function Cj(a,b){a.uniform2iv(this.addr,b)}function Dj(a,b){a.uniform3iv(this.addr,b)}function Ej(a,b){a.uniform4iv(this.addr,b)}function Fj(a,b){b=Ec(b,this.size,2);a.uniform2fv(this.addr,b)}function Gj(a,b){b=Ec(b,this.size,3);a.uniform3fv(this.addr,b)}function Hj(a,b){b=Ec(b,this.size,4);a.uniform4fv(this.addr,b)}function Ij(a,b){b=Ec(b,this.size,4);a.uniformMatrix2fv(this.addr,!1,b)}function Jj(a,b){b=Ec(b,this.size,9);a.uniformMatrix3fv(this.addr,
!1,b)}function Kj(a,b){b=Ec(b,this.size,16);a.uniformMatrix4fv(this.addr,!1,b)}function Lj(a,b,c){var d=b.length,e=ph(c,d);a.uniform1iv(this.addr,e);for(a=0;a!==d;++a)c.safeSetTexture2D(b[a]||uh,e[a])}function Mj(a,b,c){var d=b.length,e=ph(c,d);a.uniform1iv(this.addr,e);for(a=0;a!==d;++a)c.safeSetTextureCube(b[a]||vh,e[a])}function Nj(a){switch(a){case 5126:return Aj;case 35664:return Fj;case 35665:return Gj;case 35666:return Hj;case 35674:return Ij;case 35675:return Jj;case 35676:return Kj;case 35678:return Lj;
case 35680:return Mj;case 5124:case 35670:return Bj;case 35667:case 35671:return Cj;case 35668:case 35672:return Dj;case 35669:case 35673:return Ej}}function Oj(a,b,c){this.id=a;this.addr=c;this.cache=[];this.setValue=zj(b.type)}function wh(a,b,c){this.id=a;this.addr=c;this.cache=[];this.size=b.size;this.setValue=Nj(b.type)}function xh(a){this.id=a;this.seq=[];this.map={}}function Cb(a,b){this.seq=[];this.map={};for(var c=a.getProgramParameter(b,35718),d=0;d<c;++d){var e=a.getActiveUniform(b,d),f=
a.getUniformLocation(b,e.name),g=this,h=e.name,l=h.length;for(bg.lastIndex=0;;){var m=bg.exec(h),r=bg.lastIndex,q=m[1],k=m[3];"]"===m[2]&&(q|=0);if(void 0===k||"["===k&&r+2===l){h=g;e=void 0===k?new Oj(q,e,f):new wh(q,e,f);h.seq.push(e);h.map[e.id]=e;break}else k=g.map[q],void 0===k&&(k=new xh(q),q=g,g=k,q.seq.push(g),q.map[g.id]=g),g=k}}}function yh(a,b,c){b=a.createShader(b);a.shaderSource(b,c);a.compileShader(b);return b}function zh(a){switch(a){case 3E3:return["Linear","( value )"];case 3001:return["sRGB",
"( value )"];case 3002:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case 3007:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case 3003:return["LogLuv","( value )"];default:throw Error("unsupported encoding: "+a);}}function Ah(a,b,c){var d=a.getShaderParameter(b,35713),e=a.getShaderInfoLog(b).trim();if(d&&""===e)return"";a=a.getShaderSource(b).split("\n");for(b=0;b<a.length;b++)a[b]=b+
1+": "+a[b];a=a.join("\n");return"THREE.WebGLShader: gl.getShaderInfoLog() "+c+"\n"+e+a}function Ge(a,b){b=zh(b);return"vec4 "+a+"( vec4 value ) { return "+b[0]+"ToLinear"+b[1]+"; }"}function Pj(a,b){b=zh(b);return"vec4 "+a+"( vec4 value ) { return LinearTo"+b[0]+b[1]+"; }"}function Qj(a,b){switch(b){case 1:b="Linear";break;case 2:b="Reinhard";break;case 3:b="Uncharted2";break;case 4:b="OptimizedCineon";break;case 5:b="ACESFilmic";break;default:throw Error("unsupported toneMapping: "+b);}return"vec3 "+
a+"( vec3 color ) { return "+b+"ToneMapping( color ); }"}function Rj(a,b,c){a=a||{};return[a.derivatives||b.envMapCubeUV||b.bumpMap||b.tangentSpaceNormalMap||b.clearcoatNormalMap||b.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(a.fragDepth||b.logarithmicDepthBuffer)&&c.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",a.drawBuffers&&c.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(a.shaderTextureLOD||b.envMap)&&c.get("EXT_shader_texture_lod")?
"#extension GL_EXT_shader_texture_lod : enable":""].filter(Gd).join("\n")}function Sj(a){var b=[],c;for(c in a){var d=a[c];!1!==d&&b.push("#define "+c+" "+d)}return b.join("\n")}function Gd(a){return""!==a}function Bh(a,b){return a.replace(/NUM_DIR_LIGHTS/g,b.numDirLights).replace(/NUM_SPOT_LIGHTS/g,b.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,b.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,b.numPointLights).replace(/NUM_HEMI_LIGHTS/g,b.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,b.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,
b.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,b.numPointLightShadows)}function Ch(a,b){return a.replace(/NUM_CLIPPING_PLANES/g,b.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,b.numClippingPlanes-b.numClipIntersection)}function cg(a,b){a=S[b];if(void 0===a)throw Error("Can not resolve #include <"+b+">");return a.replace(dg,cg)}function Dh(a,b,c,d){a="";for(b=parseInt(b);b<parseInt(c);b++)a+=d.replace(/\[ i \]/g,"[ "+b+" ]").replace(/UNROLLED_LOOP_INDEX/g,b);return a}function Eh(a){var b=
"precision "+a.precision+" float;\nprecision "+a.precision+" int;";"highp"===a.precision?b+="\n#define HIGH_PRECISION":"mediump"===a.precision?b+="\n#define MEDIUM_PRECISION":"lowp"===a.precision&&(b+="\n#define LOW_PRECISION");return b}function Tj(a){var b="SHADOWMAP_TYPE_BASIC";1===a.shadowMapType?b="SHADOWMAP_TYPE_PCF":2===a.shadowMapType?b="SHADOWMAP_TYPE_PCF_SOFT":3===a.shadowMapType&&(b="SHADOWMAP_TYPE_VSM");return b}function Uj(a){var b="ENVMAP_TYPE_CUBE";if(a.envMap)switch(a.envMapMode){case 301:case 302:b=
"ENVMAP_TYPE_CUBE";break;case 306:case 307:b="ENVMAP_TYPE_CUBE_UV";break;case 303:case 304:b="ENVMAP_TYPE_EQUIREC";break;case 305:b="ENVMAP_TYPE_SPHERE"}return b}function Vj(a){var b="ENVMAP_MODE_REFLECTION";if(a.envMap)switch(a.envMapMode){case 302:case 304:b="ENVMAP_MODE_REFRACTION"}return b}function Wj(a){var b="ENVMAP_BLENDING_MULTIPLY";if(a.envMap)switch(a.combine){case 0:b="ENVMAP_BLENDING_MULTIPLY";break;case 1:b="ENVMAP_BLENDING_MIX";break;case 2:b="ENVMAP_BLENDING_ADD"}return b}function Xj(a,
b,c,d,e,f){var g=a.getContext(),h=d.defines,l=e.vertexShader,m=e.fragmentShader,r=Tj(f),q=Uj(f),k=Vj(f),p=Wj(f),t=0<a.gammaFactor?a.gammaFactor:1,v=f.isWebGL2?"":Rj(d.extensions,f,b),n=Sj(h),w=g.createProgram(),x=f.numMultiviewViews;d.isRawShaderMaterial?(h=[n].filter(Gd).join("\n"),0<h.length&&(h+="\n"),b=[v,n].filter(Gd).join("\n"),0<b.length&&(b+="\n")):(h=[Eh(f),"#define SHADER_NAME "+e.name,n,f.instancing?"#define USE_INSTANCING":"",f.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+
t,"#define MAX_BONES "+f.maxBones,f.useFog&&f.fog?"#define USE_FOG":"",f.useFog&&f.fogExp2?"#define FOG_EXP2":"",f.map?"#define USE_MAP":"",f.envMap?"#define USE_ENVMAP":"",f.envMap?"#define "+k:"",f.lightMap?"#define USE_LIGHTMAP":"",f.aoMap?"#define USE_AOMAP":"",f.emissiveMap?"#define USE_EMISSIVEMAP":"",f.bumpMap?"#define USE_BUMPMAP":"",f.normalMap?"#define USE_NORMALMAP":"",f.normalMap&&f.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",f.normalMap&&f.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":
"",f.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",f.displacementMap&&f.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",f.specularMap?"#define USE_SPECULARMAP":"",f.roughnessMap?"#define USE_ROUGHNESSMAP":"",f.metalnessMap?"#define USE_METALNESSMAP":"",f.alphaMap?"#define USE_ALPHAMAP":"",f.vertexTangents?"#define USE_TANGENT":"",f.vertexColors?"#define USE_COLOR":"",f.vertexUvs?"#define USE_UV":"",f.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",f.flatShading?"#define FLAT_SHADED":
"",f.skinning?"#define USE_SKINNING":"",f.useVertexTexture?"#define BONE_TEXTURE":"",f.morphTargets?"#define USE_MORPHTARGETS":"",f.morphNormals&&!1===f.flatShading?"#define USE_MORPHNORMALS":"",f.doubleSided?"#define DOUBLE_SIDED":"",f.flipSided?"#define FLIP_SIDED":"",f.shadowMapEnabled?"#define USE_SHADOWMAP":"",f.shadowMapEnabled?"#define "+r:"",f.sizeAttenuation?"#define USE_SIZEATTENUATION":"",f.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",f.logarithmicDepthBuffer&&(f.isWebGL2||b.get("EXT_frag_depth"))?
"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING"," attribute mat4 instanceMatrix;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS",
"\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;",
"\tattribute vec4 skinWeight;","#endif","\n"].filter(Gd).join("\n"),b=[v,Eh(f),"#define SHADER_NAME "+e.name,n,f.alphaTest?"#define ALPHATEST "+f.alphaTest+(f.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+t,f.useFog&&f.fog?"#define USE_FOG":"",f.useFog&&f.fogExp2?"#define FOG_EXP2":"",f.map?"#define USE_MAP":"",f.matcap?"#define USE_MATCAP":"",f.envMap?"#define USE_ENVMAP":"",f.envMap?"#define "+q:"",f.envMap?"#define "+k:"",f.envMap?"#define "+p:"",f.lightMap?"#define USE_LIGHTMAP":"",f.aoMap?
"#define USE_AOMAP":"",f.emissiveMap?"#define USE_EMISSIVEMAP":"",f.bumpMap?"#define USE_BUMPMAP":"",f.normalMap?"#define USE_NORMALMAP":"",f.normalMap&&f.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",f.normalMap&&f.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",f.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",f.specularMap?"#define USE_SPECULARMAP":"",f.roughnessMap?"#define USE_ROUGHNESSMAP":"",f.metalnessMap?"#define USE_METALNESSMAP":"",f.alphaMap?"#define USE_ALPHAMAP":
"",f.sheen?"#define USE_SHEEN":"",f.vertexTangents?"#define USE_TANGENT":"",f.vertexColors?"#define USE_COLOR":"",f.vertexUvs?"#define USE_UV":"",f.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",f.gradientMap?"#define USE_GRADIENTMAP":"",f.flatShading?"#define FLAT_SHADED":"",f.doubleSided?"#define DOUBLE_SIDED":"",f.flipSided?"#define FLIP_SIDED":"",f.shadowMapEnabled?"#define USE_SHADOWMAP":"",f.shadowMapEnabled?"#define "+r:"",f.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",f.physicallyCorrectLights?
"#define PHYSICALLY_CORRECT_LIGHTS":"",f.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",f.logarithmicDepthBuffer&&(f.isWebGL2||b.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"",(d.extensions&&d.extensions.shaderTextureLOD||f.envMap)&&(f.isWebGL2||b.get("EXT_shader_texture_lod"))?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==f.toneMapping?"#define TONE_MAPPING":"",0!==f.toneMapping?S.tonemapping_pars_fragment:
"",0!==f.toneMapping?Qj("toneMapping",f.toneMapping):"",f.dithering?"#define DITHERING":"",f.outputEncoding||f.mapEncoding||f.matcapEncoding||f.envMapEncoding||f.emissiveMapEncoding?S.encodings_pars_fragment:"",f.mapEncoding?Ge("mapTexelToLinear",f.mapEncoding):"",f.matcapEncoding?Ge("matcapTexelToLinear",f.matcapEncoding):"",f.envMapEncoding?Ge("envMapTexelToLinear",f.envMapEncoding):"",f.emissiveMapEncoding?Ge("emissiveMapTexelToLinear",f.emissiveMapEncoding):"",f.outputEncoding?Pj("linearToOutputTexel",
f.outputEncoding):"",f.depthPacking?"#define DEPTH_PACKING "+d.depthPacking:"","\n"].filter(Gd).join("\n"));l=l.replace(dg,cg);l=Bh(l,f);l=Ch(l,f);m=m.replace(dg,cg);m=Bh(m,f);m=Ch(m,f);l=l.replace(Fh,Dh);m=m.replace(Fh,Dh);f.isWebGL2&&!d.isRawShaderMaterial&&(r=!1,q=/^\s*#version\s+300\s+es\s*\n/,d.isShaderMaterial&&null!==l.match(q)&&null!==m.match(q)&&(r=!0,l=l.replace(q,""),m=m.replace(q,"")),h="#version 300 es\n\n#define attribute in\n#define varying out\n#define texture2D texture\n"+h,b=["#version 300 es\n\n#define varying in",
r?"":"out highp vec4 pc_fragColor;",r?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+b,0<x&&(h=h.replace("#version 300 es\n",
["#version 300 es\n\n#extension GL_OVR_multiview2 : require","layout(num_views = "+x+") in;","#define VIEW_ID gl_ViewID_OVR"].join("\n")),h=h.replace("uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;",["uniform mat4 modelViewMatrices["+x+"];","uniform mat4 projectionMatrices["+x+"];","uniform mat4 viewMatrices["+x+"];","uniform mat3 normalMatrices["+x+"];","#define modelViewMatrix modelViewMatrices[VIEW_ID]\n#define projectionMatrix projectionMatrices[VIEW_ID]\n#define viewMatrix viewMatrices[VIEW_ID]\n#define normalMatrix normalMatrices[VIEW_ID]"].join("\n")),
b=b.replace("#version 300 es\n","#version 300 es\n\n#extension GL_OVR_multiview2 : require\n#define VIEW_ID gl_ViewID_OVR"),b=b.replace("uniform mat4 viewMatrix;",["uniform mat4 viewMatrices["+x+"];","#define viewMatrix viewMatrices[VIEW_ID]"].join("\n"))));m=b+m;l=yh(g,35633,h+l);m=yh(g,35632,m);g.attachShader(w,l);g.attachShader(w,m);void 0!==d.index0AttributeName?g.bindAttribLocation(w,0,d.index0AttributeName):!0===f.morphTargets&&g.bindAttribLocation(w,0,"position");g.linkProgram(w);if(a.debug.checkShaderErrors){a=
g.getProgramInfoLog(w).trim();f=g.getShaderInfoLog(l).trim();r=g.getShaderInfoLog(m).trim();k=q=!0;if(!1===g.getProgramParameter(w,35714))q=!1,p=Ah(g,l,"vertex"),t=Ah(g,m,"fragment"),console.error("THREE.WebGLProgram: shader error: ",g.getError(),"35715",g.getProgramParameter(w,35715),"gl.getProgramInfoLog",a,p,t);else if(""!==a)console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",a);else if(""===f||""===r)k=!1;k&&(this.diagnostics={runnable:q,material:d,programLog:a,vertexShader:{log:f,prefix:h},
fragmentShader:{log:r,prefix:b}})}g.deleteShader(l);g.deleteShader(m);var F;this.getUniforms=function(){void 0===F&&(F=new Cb(g,w));return F};var I;this.getAttributes=function(){if(void 0===I){for(var a={},b=g.getProgramParameter(w,35721),c=0;c<b;c++){var d=g.getActiveAttrib(w,c).name;a[d]=g.getAttribLocation(w,d)}I=a}return I};this.destroy=function(){g.deleteProgram(w);this.program=void 0};this.name=e.name;this.id=Yj++;this.cacheKey=c;this.usedTimes=1;this.program=w;this.vertexShader=l;this.fragmentShader=
m;this.numMultiviewViews=x;return this}function Zj(a,b,c){function d(a,b){if(a)a.isTexture?c=a.encoding:a.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),c=a.texture.encoding);else var c=3E3;3E3===c&&b&&(c=3007);return c}var e=[],f=c.isWebGL2,g=c.logarithmicDepthBuffer,h=c.floatVertexTextures,l=c.precision,m=c.maxVertexUniforms,r=c.vertexTextures,q={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",
MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},k="precision isWebGL2 supportsVertexTextures outputEncoding instancing numMultiviewViews map mapEncoding matcap matcapEncoding envMap envMapMode envMapEncoding envMapCubeUV lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap objectSpaceNormalMap tangentSpaceNormalMap clearcoatNormalMap displacementMap specularMap roughnessMap metalnessMap gradientMap alphaMap combine vertexColors vertexTangents vertexUvs uvsVertexOnly fog useFog fogExp2 flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights numRectAreaLights numDirLightShadows numPointLightShadows numSpotLightShadows shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes numClipIntersection depthPacking dithering sheen".split(" ");
this.getParameters=function(b,e,k,u,n,x,F){var t=q[b.type];if(F.isSkinnedMesh){var p=F.skeleton.bones;if(h)p=1024;else{var v=Math.min(Math.floor((m-20)/4),p.length);v<p.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+p.length+" bones. This GPU supports "+v+"."),p=0):p=v}}else p=0;null!==b.precision&&(l=c.getMaxPrecision(b.precision),l!==b.precision&&console.warn("THREE.WebGLProgram.getParameters:",b.precision,"not supported, using",l,"instead."));v=a.getRenderTarget();return{isWebGL2:f,
shaderID:t,precision:l,instancing:!0===F.isInstancedMesh,supportsVertexTextures:r,numMultiviewViews:v&&v.isWebGLMultiviewRenderTarget?v.numViews:0,outputEncoding:d(v?v.texture:null,a.gammaOutput),map:!!b.map,mapEncoding:d(b.map,a.gammaInput),matcap:!!b.matcap,matcapEncoding:d(b.matcap,a.gammaInput),envMap:!!b.envMap,envMapMode:b.envMap&&b.envMap.mapping,envMapEncoding:d(b.envMap,a.gammaInput),envMapCubeUV:!!b.envMap&&(306===b.envMap.mapping||307===b.envMap.mapping),lightMap:!!b.lightMap,aoMap:!!b.aoMap,
emissiveMap:!!b.emissiveMap,emissiveMapEncoding:d(b.emissiveMap,a.gammaInput),bumpMap:!!b.bumpMap,normalMap:!!b.normalMap,objectSpaceNormalMap:1===b.normalMapType,tangentSpaceNormalMap:0===b.normalMapType,clearcoatNormalMap:!!b.clearcoatNormalMap,displacementMap:!!b.displacementMap,roughnessMap:!!b.roughnessMap,metalnessMap:!!b.metalnessMap,specularMap:!!b.specularMap,alphaMap:!!b.alphaMap,gradientMap:!!b.gradientMap,sheen:!!b.sheen,combine:b.combine,vertexTangents:b.normalMap&&b.vertexTangents,vertexColors:b.vertexColors,
vertexUvs:!!b.map||!!b.bumpMap||!!b.normalMap||!!b.specularMap||!!b.alphaMap||!!b.emissiveMap||!!b.roughnessMap||!!b.metalnessMap||!!b.clearcoatNormalMap||!!b.displacementMap,uvsVertexOnly:!(b.map||b.bumpMap||b.normalMap||b.specularMap||b.alphaMap||b.emissiveMap||b.roughnessMap||b.metalnessMap||b.clearcoatNormalMap)&&!!b.displacementMap,fog:!!u,useFog:b.fog,fogExp2:u&&u.isFogExp2,flatShading:b.flatShading,sizeAttenuation:b.sizeAttenuation,logarithmicDepthBuffer:g,skinning:b.skinning&&0<p,maxBones:p,
useVertexTexture:h,morphTargets:b.morphTargets,morphNormals:b.morphNormals,maxMorphTargets:a.maxMorphTargets,maxMorphNormals:a.maxMorphNormals,numDirLights:e.directional.length,numPointLights:e.point.length,numSpotLights:e.spot.length,numRectAreaLights:e.rectArea.length,numHemiLights:e.hemi.length,numDirLightShadows:e.directionalShadowMap.length,numPointLightShadows:e.pointShadowMap.length,numSpotLightShadows:e.spotShadowMap.length,numClippingPlanes:n,numClipIntersection:x,dithering:b.dithering,shadowMapEnabled:a.shadowMap.enabled&&
0<k.length,shadowMapType:a.shadowMap.type,toneMapping:b.toneMapped?a.toneMapping:0,physicallyCorrectLights:a.physicallyCorrectLights,premultipliedAlpha:b.premultipliedAlpha,alphaTest:b.alphaTest,doubleSided:2===b.side,flipSided:1===b.side,depthPacking:void 0!==b.depthPacking?b.depthPacking:!1}};this.getProgramCacheKey=function(b,c){var d=[];c.shaderID?d.push(c.shaderID):(d.push(b.fragmentShader),d.push(b.vertexShader));if(void 0!==b.defines)for(var e in b.defines)d.push(e),d.push(b.defines[e]);for(e=
0;e<k.length;e++)d.push(c[k[e]]);d.push(b.onBeforeCompile.toString());d.push(a.gammaOutput);d.push(a.gammaFactor);return d.join()};this.acquireProgram=function(c,d,f,g){for(var h,l=0,m=e.length;l<m;l++){var r=e[l];if(r.cacheKey===g){h=r;++h.usedTimes;break}}void 0===h&&(h=new Xj(a,b,g,c,d,f),e.push(h));return h};this.releaseProgram=function(a){if(0===--a.usedTimes){var b=e.indexOf(a);e[b]=e[e.length-1];e.pop();a.destroy()}};this.programs=e}function ak(){var a=new WeakMap;return{get:function(b){var c=
a.get(b);void 0===c&&(c={},a.set(b,c));return c},remove:function(b){a.delete(b)},update:function(b,c,d){a.get(b)[c]=d},dispose:function(){a=new WeakMap}}}function bk(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.program!==b.program?a.program.id-b.program.id:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function ck(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:
a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function Gh(){function a(a,d,e,m,r,q){var g=b[c];void 0===g?(g={id:a.id,object:a,geometry:d,material:e,program:e.program||f,groupOrder:m,renderOrder:a.renderOrder,z:r,group:q},b[c]=g):(g.id=a.id,g.object=a,g.geometry=d,g.material=e,g.program=e.program||f,g.groupOrder=m,g.renderOrder=a.renderOrder,g.z=r,g.group=q);c++;return g}var b=[],c=0,d=[],e=[],f={id:-1};return{opaque:d,transparent:e,init:function(){c=0;d.length=
0;e.length=0},push:function(b,c,f,m,r,q){b=a(b,c,f,m,r,q);(!0===f.transparent?e:d).push(b)},unshift:function(b,c,f,m,r,q){b=a(b,c,f,m,r,q);(!0===f.transparent?e:d).unshift(b)},sort:function(){1<d.length&&d.sort(bk);1<e.length&&e.sort(ck)}}}function dk(){function a(c){c=c.target;c.removeEventListener("dispose",a);b.delete(c)}var b=new WeakMap;return{get:function(c,d){var e=b.get(c);if(void 0===e){var f=new Gh;b.set(c,new WeakMap);b.get(c).set(d,f);c.addEventListener("dispose",a)}else f=e.get(d),void 0===
f&&(f=new Gh,e.set(d,f));return f},dispose:function(){b=new WeakMap}}}function ek(){var a={};return{get:function(b){if(void 0!==a[b.id])return a[b.id];switch(b.type){case "DirectionalLight":var c={direction:new n,color:new J,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new B};break;case "SpotLight":c={position:new n,direction:new n,color:new J,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new B};break;case "PointLight":c={position:new n,color:new J,
distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new B,shadowCameraNear:1,shadowCameraFar:1E3};break;case "HemisphereLight":c={direction:new n,skyColor:new J,groundColor:new J};break;case "RectAreaLight":c={color:new J,position:new n,halfWidth:new n,halfHeight:new n}}return a[b.id]=c}}}function fk(a,b){return(b.castShadow?1:0)-(a.castShadow?1:0)}function gk(){for(var a=new ek,b={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,
numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},c=0;9>c;c++)b.probe.push(new n);var d=new n,e=new Q,f=new Q;return{setup:function(c,h,l){for(var g=0,r=0,q=0,k=0;9>k;k++)b.probe[k].set(0,0,0);var p=h=0,t=0,v=0,n=0,w=0,x=
0,F=0;l=l.matrixWorldInverse;c.sort(fk);k=0;for(var I=c.length;k<I;k++){var z=c[k],Ca=z.color,ia=z.intensity,B=z.distance,la=z.shadow&&z.shadow.map?z.shadow.map.texture:null;if(z.isAmbientLight)g+=Ca.r*ia,r+=Ca.g*ia,q+=Ca.b*ia;else if(z.isLightProbe)for(la=0;9>la;la++)b.probe[la].addScaledVector(z.sh.coefficients[la],ia);else if(z.isDirectionalLight){var H=a.get(z);H.color.copy(z.color).multiplyScalar(z.intensity);H.direction.setFromMatrixPosition(z.matrixWorld);d.setFromMatrixPosition(z.target.matrixWorld);
H.direction.sub(d);H.direction.transformDirection(l);if(H.shadow=z.castShadow)ia=z.shadow,H.shadowBias=ia.bias,H.shadowRadius=ia.radius,H.shadowMapSize=ia.mapSize,b.directionalShadowMap[h]=la,b.directionalShadowMatrix[h]=z.shadow.matrix,w++;b.directional[h]=H;h++}else if(z.isSpotLight){H=a.get(z);H.position.setFromMatrixPosition(z.matrixWorld);H.position.applyMatrix4(l);H.color.copy(Ca).multiplyScalar(ia);H.distance=B;H.direction.setFromMatrixPosition(z.matrixWorld);d.setFromMatrixPosition(z.target.matrixWorld);
H.direction.sub(d);H.direction.transformDirection(l);H.coneCos=Math.cos(z.angle);H.penumbraCos=Math.cos(z.angle*(1-z.penumbra));H.decay=z.decay;if(H.shadow=z.castShadow)ia=z.shadow,H.shadowBias=ia.bias,H.shadowRadius=ia.radius,H.shadowMapSize=ia.mapSize,b.spotShadowMap[t]=la,b.spotShadowMatrix[t]=z.shadow.matrix,F++;b.spot[t]=H;t++}else if(z.isRectAreaLight)H=a.get(z),H.color.copy(Ca).multiplyScalar(ia),H.position.setFromMatrixPosition(z.matrixWorld),H.position.applyMatrix4(l),f.identity(),e.copy(z.matrixWorld),
e.premultiply(l),f.extractRotation(e),H.halfWidth.set(.5*z.width,0,0),H.halfHeight.set(0,.5*z.height,0),H.halfWidth.applyMatrix4(f),H.halfHeight.applyMatrix4(f),b.rectArea[v]=H,v++;else if(z.isPointLight){H=a.get(z);H.position.setFromMatrixPosition(z.matrixWorld);H.position.applyMatrix4(l);H.color.copy(z.color).multiplyScalar(z.intensity);H.distance=z.distance;H.decay=z.decay;if(H.shadow=z.castShadow)ia=z.shadow,H.shadowBias=ia.bias,H.shadowRadius=ia.radius,H.shadowMapSize=ia.mapSize,H.shadowCameraNear=
ia.camera.near,H.shadowCameraFar=ia.camera.far,b.pointShadowMap[p]=la,b.pointShadowMatrix[p]=z.shadow.matrix,x++;b.point[p]=H;p++}else z.isHemisphereLight&&(H=a.get(z),H.direction.setFromMatrixPosition(z.matrixWorld),H.direction.transformDirection(l),H.direction.normalize(),H.skyColor.copy(z.color).multiplyScalar(ia),H.groundColor.copy(z.groundColor).multiplyScalar(ia),b.hemi[n]=H,n++)}b.ambient[0]=g;b.ambient[1]=r;b.ambient[2]=q;c=b.hash;if(c.directionalLength!==h||c.pointLength!==p||c.spotLength!==
t||c.rectAreaLength!==v||c.hemiLength!==n||c.numDirectionalShadows!==w||c.numPointShadows!==x||c.numSpotShadows!==F)b.directional.length=h,b.spot.length=t,b.rectArea.length=v,b.point.length=p,b.hemi.length=n,b.directionalShadowMap.length=w,b.pointShadowMap.length=x,b.spotShadowMap.length=F,b.directionalShadowMatrix.length=w,b.pointShadowMatrix.length=x,b.spotShadowMatrix.length=F,c.directionalLength=h,c.pointLength=p,c.spotLength=t,c.rectAreaLength=v,c.hemiLength=n,c.numDirectionalShadows=w,c.numPointShadows=
x,c.numSpotShadows=F,b.version=hk++},state:b}}function Hh(){var a=new gk,b=[],c=[];return{init:function(){b.length=0;c.length=0},state:{lightsArray:b,shadowsArray:c,lights:a},setupLights:function(d){a.setup(b,c,d)},pushLight:function(a){b.push(a)},pushShadow:function(a){c.push(a)}}}function ik(){function a(c){c=c.target;c.removeEventListener("dispose",a);b.delete(c)}var b=new WeakMap;return{get:function(c,d){if(!1===b.has(c)){var e=new Hh;b.set(c,new WeakMap);b.get(c).set(d,e);c.addEventListener("dispose",
a)}else!1===b.get(c).has(d)?(e=new Hh,b.get(c).set(d,e)):e=b.get(c).get(d);return e},dispose:function(){b=new WeakMap}}}function Db(a){O.call(this);this.type="MeshDepthMaterial";this.depthPacking=3200;this.morphTargets=this.skinning=!1;this.displacementMap=this.alphaMap=this.map=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=!1;this.wireframeLinewidth=1;this.fog=!1;this.setValues(a)}function Eb(a){O.call(this);this.type="MeshDistanceMaterial";this.referencePosition=new n;this.nearDistance=
1;this.farDistance=1E3;this.morphTargets=this.skinning=!1;this.displacementMap=this.alphaMap=this.map=null;this.displacementScale=1;this.displacementBias=0;this.fog=!1;this.setValues(a)}function Ih(a,b,c){function d(a,b,c){c=a<<0|b<<1|c<<2;var d=q[c];void 0===d&&(d=new Db({depthPacking:3201,morphTargets:a,skinning:b}),q[c]=d);return d}function e(a,b,c){c=a<<0|b<<1|c<<2;var d=k[c];void 0===d&&(d=new Eb({morphTargets:a,skinning:b}),k[c]=d);return d}function f(b,c,f,g,h,l){var m=b.geometry,r=d,q=b.customDepthMaterial;
!0===f.isPointLight&&(r=e,q=b.customDistanceMaterial);void 0===q?(q=!1,!0===c.morphTargets&&(!0===m.isBufferGeometry?q=m.morphAttributes&&m.morphAttributes.position&&0<m.morphAttributes.position.length:!0===m.isGeometry&&(q=m.morphTargets&&0<m.morphTargets.length)),m=!1,!0===b.isSkinnedMesh&&(!0===c.skinning?m=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",b)),b=r(q,m,!0===b.isInstancedMesh)):b=q;a.localClippingEnabled&&!0===c.clipShadows&&0!==c.clippingPlanes.length&&
(q=b.uuid,r=c.uuid,m=p[q],void 0===m&&(m={},p[q]=m),q=m[r],void 0===q&&(q=b.clone(),m[r]=q),b=q);b.visible=c.visible;b.wireframe=c.wireframe;b.side=3===l?null!==c.shadowSide?c.shadowSide:c.side:null!==c.shadowSide?c.shadowSide:t[c.side];b.clipShadows=c.clipShadows;b.clippingPlanes=c.clippingPlanes;b.clipIntersection=c.clipIntersection;b.wireframeLinewidth=c.wireframeLinewidth;b.linewidth=c.linewidth;!0===f.isPointLight&&!0===b.isMeshDistanceMaterial&&(b.referencePosition.setFromMatrixPosition(f.matrixWorld),
b.nearDistance=g,b.farDistance=h);return b}function g(c,d,e,l,m){if(!1!==c.visible){if(c.layers.test(d.layers)&&(c.isMesh||c.isLine||c.isPoints)&&(c.castShadow||c.receiveShadow&&3===m)&&(!c.frustumCulled||h.intersectsObject(c))){c.modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,c.matrixWorld);var r=b.update(c),q=c.material;if(Array.isArray(q))for(var k=r.groups,u=0,t=k.length;u<t;u++){var p=k[u],v=q[p.materialIndex];v&&v.visible&&(v=f(c,v,l,e.near,e.far,m),a.renderBufferDirect(e,null,r,v,c,
p))}else q.visible&&(v=f(c,q,l,e.near,e.far,m),a.renderBufferDirect(e,null,r,v,c,null))}c=c.children;r=0;for(q=c.length;r<q;r++)g(c[r],d,e,l,m)}}var h=new Dd,l=new B,m=new B,r=new da,q=[],k=[],p={},t={0:1,1:0,2:2},v=new va({defines:{SAMPLE_RATE:.25,HALF_SAMPLE_RATE:.125},uniforms:{shadow_pass:{value:null},resolution:{value:new B},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n  \n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = decodeHalfRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = pow( squared_mean - mean * mean, 0.5 );\n  gl_FragColor = encodeHalfRGBA( vec2( mean, std_dev ) );\n}"}),
n=v.clone();n.defines.HORIZONAL_PASS=1;var w=new D;w.setAttribute("position",new N(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));var x=new ea(w,v),F=this;this.enabled=!1;this.autoUpdate=!0;this.needsUpdate=!1;this.type=1;this.render=function(d,e,f){if(!1!==F.enabled&&(!1!==F.autoUpdate||!1!==F.needsUpdate)&&0!==d.length){var q=a.getRenderTarget(),k=a.getActiveCubeFace(),u=a.getActiveMipmapLevel(),t=a.state;t.setBlending(0);t.buffers.color.setClear(1,1,1,1);t.buffers.depth.setTest(!0);t.setScissorTest(!1);
for(var p=0,y=d.length;p<y;p++){var w=d[p],z=w.shadow;if(void 0===z)console.warn("THREE.WebGLShadowMap:",w,"has no shadow.");else{l.copy(z.mapSize);var I=z.getFrameExtents();l.multiply(I);m.copy(z.mapSize);if(l.x>c||l.y>c)console.warn("THREE.WebGLShadowMap:",w,"has shadow exceeding max texture size, reducing"),l.x>c&&(m.x=Math.floor(c/I.x),l.x=m.x*I.x,z.mapSize.x=m.x),l.y>c&&(m.y=Math.floor(c/I.y),l.y=m.y*I.y,z.mapSize.y=m.y);null!==z.map||z.isPointLightShadow||3!==this.type||(I={minFilter:1006,magFilter:1006,
format:1023},z.map=new Ba(l.x,l.y,I),z.map.texture.name=w.name+".shadowMap",z.mapPass=new Ba(l.x,l.y,I),z.camera.updateProjectionMatrix());null===z.map&&(I={minFilter:1003,magFilter:1003,format:1023},z.map=new Ba(l.x,l.y,I),z.map.texture.name=w.name+".shadowMap",z.camera.updateProjectionMatrix());a.setRenderTarget(z.map);a.clear();I=z.getViewportCount();for(var Ca=0;Ca<I;Ca++){var B=z.getViewport(Ca);r.set(m.x*B.x,m.y*B.y,m.x*B.z,m.y*B.w);t.viewport(r);z.updateMatrices(w,Ca);h=z.getFrustum();g(e,
f,z.camera,w,this.type)}z.isPointLightShadow||3!==this.type||(w=z,z=f,I=b.update(x),v.uniforms.shadow_pass.value=w.map.texture,v.uniforms.resolution.value=w.mapSize,v.uniforms.radius.value=w.radius,a.setRenderTarget(w.mapPass),a.clear(),a.renderBufferDirect(z,null,I,v,x,null),n.uniforms.shadow_pass.value=w.mapPass.texture,n.uniforms.resolution.value=w.mapSize,n.uniforms.radius.value=w.radius,a.setRenderTarget(w.map),a.clear(),a.renderBufferDirect(z,null,I,n,x,null))}}F.needsUpdate=!1;a.setRenderTarget(q,
k,u)}}}function jk(a,b,c){function d(b,c,d){var e=new Uint8Array(4),f=a.createTexture();a.bindTexture(b,f);a.texParameteri(b,10241,9728);a.texParameteri(b,10240,9728);for(b=0;b<d;b++)a.texImage2D(c+b,0,6408,1,1,0,6408,5121,e);return f}function e(c,d){n[c]=1;0===w[c]&&(a.enableVertexAttribArray(c),w[c]=1);x[c]!==d&&((k?a:b.get("ANGLE_instanced_arrays"))[k?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](c,d),x[c]=d)}function f(b){!0!==F[b]&&(a.enable(b),F[b]=!0)}function g(b){!1!==F[b]&&(a.disable(b),
F[b]=!1)}function h(b,c,d,e,h,l,m,r){if(0===b)z&&(g(3042),z=!1);else if(z||(f(3042),z=!0),5!==b){if(b!==Ca||r!==D){if(100!==B||100!==H)a.blendEquation(32774),H=B=100;if(r)switch(b){case 1:a.blendFuncSeparate(1,771,1,771);break;case 2:a.blendFunc(1,1);break;case 3:a.blendFuncSeparate(0,0,769,771);break;case 4:a.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",b)}else switch(b){case 1:a.blendFuncSeparate(770,771,1,771);break;case 2:a.blendFunc(770,1);
break;case 3:a.blendFunc(0,769);break;case 4:a.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",b)}E=Hd=la=A=null;Ca=b;D=r}}else{h=h||c;l=l||d;m=m||e;if(c!==B||h!==H)a.blendEquationSeparate(Fc[c],Fc[h]),B=c,H=h;if(d!==A||e!==la||l!==Hd||m!==E)a.blendFuncSeparate(M[d],M[e],M[l],M[m]),A=d,la=e,Hd=l,E=m;Ca=b;D=null}}function l(b){J!==b&&(b?a.frontFace(2304):a.frontFace(2305),J=b)}function m(b){0!==b?(f(2884),b!==L&&(1===b?a.cullFace(1029):2===b?a.cullFace(1028):a.cullFace(1032))):
g(2884);L=b}function r(b,c,d){if(b){if(f(32823),G!==c||N!==d)a.polygonOffset(c,d),G=c,N=d}else g(32823)}function q(b){void 0===b&&(b=33984+ha-1);P!==b&&(a.activeTexture(b),P=b)}var k=c.isWebGL2,p=new function(){var b=!1,c=new da,d=null,e=new da(0,0,0,0);return{setMask:function(c){d===c||b||(a.colorMask(c,c,c,c),d=c)},setLocked:function(a){b=a},setClear:function(b,d,f,g,h){!0===h&&(b*=g,d*=g,f*=g);c.set(b,d,f,g);!1===e.equals(c)&&(a.clearColor(b,d,f,g),e.copy(c))},reset:function(){b=!1;d=null;e.set(-1,
0,0,0)}}},t=new function(){var b=!1,c=null,d=null,e=null;return{setTest:function(a){a?f(2929):g(2929)},setMask:function(d){c===d||b||(a.depthMask(d),c=d)},setFunc:function(b){if(d!==b){if(b)switch(b){case 0:a.depthFunc(512);break;case 1:a.depthFunc(519);break;case 2:a.depthFunc(513);break;case 3:a.depthFunc(515);break;case 4:a.depthFunc(514);break;case 5:a.depthFunc(518);break;case 6:a.depthFunc(516);break;case 7:a.depthFunc(517);break;default:a.depthFunc(515)}else a.depthFunc(515);d=b}},setLocked:function(a){b=
a},setClear:function(b){e!==b&&(a.clearDepth(b),e=b)},reset:function(){b=!1;e=d=c=null}}},v=new function(){var b=!1,c=null,d=null,e=null,h=null,l=null,m=null,r=null,q=null;return{setTest:function(a){b||(a?f(2960):g(2960))},setMask:function(d){c===d||b||(a.stencilMask(d),c=d)},setFunc:function(b,c,f){if(d!==b||e!==c||h!==f)a.stencilFunc(b,c,f),d=b,e=c,h=f},setOp:function(b,c,d){if(l!==b||m!==c||r!==d)a.stencilOp(b,c,d),l=b,m=c,r=d},setLocked:function(a){b=a},setClear:function(b){q!==b&&(a.clearStencil(b),
q=b)},reset:function(){b=!1;q=r=m=l=h=e=d=c=null}}};c=a.getParameter(34921);var n=new Uint8Array(c),w=new Uint8Array(c),x=new Uint8Array(c),F={},I=null,z=null,Ca=null,B=null,A=null,la=null,H=null,Hd=null,E=null,D=!1,J=null,L=null,C=null,G=null,N=null,ha=a.getParameter(35661),O=!1;c=0;c=a.getParameter(7938);-1!==c.indexOf("WebGL")?(c=parseFloat(/^WebGL ([0-9])/.exec(c)[1]),O=1<=c):-1!==c.indexOf("OpenGL ES")&&(c=parseFloat(/^OpenGL ES ([0-9])/.exec(c)[1]),O=2<=c);var P=null,Ke={},$b=new da,Jh=new da,
ob={};ob[3553]=d(3553,3553,1);ob[34067]=d(34067,34069,6);p.setClear(0,0,0,1);t.setClear(1);v.setClear(0);f(2929);t.setFunc(3);l(!1);m(1);f(2884);h(0);var Fc={100:32774,101:32778,102:32779};k?(Fc[103]=32775,Fc[104]=32776):(c=b.get("EXT_blend_minmax"),null!==c&&(Fc[103]=c.MIN_EXT,Fc[104]=c.MIN_EXT));var M={200:0,201:1,202:768,204:770,210:776,208:774,206:772,203:769,205:771,209:775,207:773};return{buffers:{color:p,depth:t,stencil:v},initAttributes:function(){for(var a=0,b=n.length;a<b;a++)n[a]=0},enableAttribute:function(a){e(a,
0)},enableAttributeAndDivisor:e,disableUnusedAttributes:function(){for(var b=0,c=w.length;b!==c;++b)w[b]!==n[b]&&(a.disableVertexAttribArray(b),w[b]=0)},enable:f,disable:g,useProgram:function(b){return I!==b?(a.useProgram(b),I=b,!0):!1},setBlending:h,setMaterial:function(a,b){2===a.side?g(2884):f(2884);var c=1===a.side;b&&(c=!c);l(c);1===a.blending&&!1===a.transparent?h(0):h(a.blending,a.blendEquation,a.blendSrc,a.blendDst,a.blendEquationAlpha,a.blendSrcAlpha,a.blendDstAlpha,a.premultipliedAlpha);
t.setFunc(a.depthFunc);t.setTest(a.depthTest);t.setMask(a.depthWrite);p.setMask(a.colorWrite);b=a.stencilWrite;v.setTest(b);b&&(v.setMask(a.stencilWriteMask),v.setFunc(a.stencilFunc,a.stencilRef,a.stencilFuncMask),v.setOp(a.stencilFail,a.stencilZFail,a.stencilZPass));r(a.polygonOffset,a.polygonOffsetFactor,a.polygonOffsetUnits)},setFlipSided:l,setCullFace:m,setLineWidth:function(b){b!==C&&(O&&a.lineWidth(b),C=b)},setPolygonOffset:r,setScissorTest:function(a){a?f(3089):g(3089)},activeTexture:q,bindTexture:function(b,
c){null===P&&q();var d=Ke[P];void 0===d&&(d={type:void 0,texture:void 0},Ke[P]=d);if(d.type!==b||d.texture!==c)a.bindTexture(b,c||ob[b]),d.type=b,d.texture=c},unbindTexture:function(){var b=Ke[P];void 0!==b&&void 0!==b.type&&(a.bindTexture(b.type,null),b.type=void 0,b.texture=void 0)},compressedTexImage2D:function(){try{a.compressedTexImage2D.apply(a,arguments)}catch(W){console.error("THREE.WebGLState:",W)}},texImage2D:function(){try{a.texImage2D.apply(a,arguments)}catch(W){console.error("THREE.WebGLState:",
W)}},texImage3D:function(){try{a.texImage3D.apply(a,arguments)}catch(W){console.error("THREE.WebGLState:",W)}},scissor:function(b){!1===$b.equals(b)&&(a.scissor(b.x,b.y,b.z,b.w),$b.copy(b))},viewport:function(b){!1===Jh.equals(b)&&(a.viewport(b.x,b.y,b.z,b.w),Jh.copy(b))},reset:function(){for(var b=0;b<w.length;b++)1===w[b]&&(a.disableVertexAttribArray(b),w[b]=0);F={};P=null;Ke={};L=J=Ca=I=null;p.reset();t.reset();v.reset()}}}function kk(a,b,c,d,e,f,g){function h(a,b){return C?new OffscreenCanvas(a,
b):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function l(a,b,c,d){var e=1;if(a.width>d||a.height>d)e=d/Math.max(a.width,a.height);if(1>e||!0===b){if("undefined"!==typeof HTMLImageElement&&a instanceof HTMLImageElement||"undefined"!==typeof HTMLCanvasElement&&a instanceof HTMLCanvasElement||"undefined"!==typeof ImageBitmap&&a instanceof ImageBitmap)return d=b?P.floorPowerOfTwo:Math.floor,b=d(e*a.width),e=d(e*a.height),void 0===L&&(L=h(b,e)),c=c?h(b,e):L,c.width=b,c.height=e,
c.getContext("2d").drawImage(a,0,0,b,e),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+a.width+"x"+a.height+") to ("+b+"x"+e+")."),c;"data"in a&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+a.width+"x"+a.height+").")}return a}function m(a){return P.isPowerOfTwo(a.width)&&P.isPowerOfTwo(a.height)}function r(a,b){return a.generateMipmaps&&b&&1003!==a.minFilter&&1006!==a.minFilter}function q(b,c,e,f){a.generateMipmap(b);d.get(c).__maxMipLevel=Math.log(Math.max(e,
f))*Math.LOG2E}function k(a,c){if(!1===la)return a;var d=a;6403===a&&(5126===c&&(d=33326),5131===c&&(d=33325),5121===c&&(d=33321));6407===a&&(5126===c&&(d=34837),5131===c&&(d=34843),5121===c&&(d=32849));6408===a&&(5126===c&&(d=34836),5131===c&&(d=34842),5121===c&&(d=32856));33325===d||33326===d||34842===d||34836===d?b.get("EXT_color_buffer_float"):(34843===d||34837===d)&&console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.");return d}function p(a){return 1003===
a||1004===a||1005===a?9728:9729}function t(b){b=b.target;b.removeEventListener("dispose",t);var c=d.get(b);void 0!==c.__webglInit&&(a.deleteTexture(c.__webglTexture),d.remove(b));b.isVideoTexture&&J.delete(b);g.memory.textures--}function v(b){b=b.target;b.removeEventListener("dispose",v);var c=d.get(b),e=d.get(b.texture);if(b){void 0!==e.__webglTexture&&a.deleteTexture(e.__webglTexture);b.depthTexture&&b.depthTexture.dispose();if(b.isWebGLRenderTargetCube)for(e=0;6>e;e++)a.deleteFramebuffer(c.__webglFramebuffer[e]),
c.__webglDepthbuffer&&a.deleteRenderbuffer(c.__webglDepthbuffer[e]);else a.deleteFramebuffer(c.__webglFramebuffer),c.__webglDepthbuffer&&a.deleteRenderbuffer(c.__webglDepthbuffer);if(b.isWebGLMultiviewRenderTarget){a.deleteTexture(c.__webglColorTexture);a.deleteTexture(c.__webglDepthStencilTexture);g.memory.textures-=2;e=0;for(var f=c.__webglViewFramebuffers.length;e<f;e++)a.deleteFramebuffer(c.__webglViewFramebuffers[e])}d.remove(b.texture);d.remove(b)}g.memory.textures--}function n(a,b){var e=d.get(a);
if(a.isVideoTexture){var f=g.render.frame;J.get(a)!==f&&(J.set(a,f),a.update())}if(0<a.version&&e.__version!==a.version)if(f=a.image,void 0===f)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if(!1===f.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{z(e,a,b);return}c.activeTexture(33984+b);c.bindTexture(3553,e.__webglTexture)}function w(b,e){if(6===b.image.length){var g=d.get(b);if(0<b.version&&g.__version!==
b.version){I(g,b);c.activeTexture(33984+e);c.bindTexture(34067,g.__webglTexture);a.pixelStorei(37440,b.flipY);var h=b&&b.isCompressedTexture;e=b.image[0]&&b.image[0].isDataTexture;for(var t=[],u=0;6>u;u++)t[u]=h||e?e?b.image[u].image:b.image[u]:l(b.image[u],!1,!0,Hd);var p=t[0],v=m(p)||la,n=f.convert(b.format),y=f.convert(b.type),w=k(n,y);F(34067,b,v);if(h){for(u=0;6>u;u++){var z=t[u].mipmaps;for(h=0;h<z.length;h++){var x=z[h];1023!==b.format&&1022!==b.format?null!==n?c.compressedTexImage2D(34069+
u,h,w,x.width,x.height,0,x.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):c.texImage2D(34069+u,h,w,x.width,x.height,0,n,y,x.data)}}g.__maxMipLevel=z.length-1}else{z=b.mipmaps;for(u=0;6>u;u++)if(e)for(c.texImage2D(34069+u,0,w,t[u].width,t[u].height,0,n,y,t[u].data),h=0;h<z.length;h++)x=z[h],x=x.image[u].image,c.texImage2D(34069+u,h+1,w,x.width,x.height,0,n,y,x.data);else for(c.texImage2D(34069+u,0,w,n,y,t[u]),h=0;h<z.length;h++)x=
z[h],c.texImage2D(34069+u,h+1,w,n,y,x.image[u]);g.__maxMipLevel=z.length}r(b,v)&&q(34067,b,p.width,p.height);g.__version=b.version;if(b.onUpdate)b.onUpdate(b)}else c.activeTexture(33984+e),c.bindTexture(34067,g.__webglTexture)}}function x(a,b){c.activeTexture(33984+b);c.bindTexture(34067,d.get(a).__webglTexture)}function F(c,f,g){g?(a.texParameteri(c,10242,N[f.wrapS]),a.texParameteri(c,10243,N[f.wrapT]),32879!==c&&35866!==c||a.texParameteri(c,32882,N[f.wrapR]),a.texParameteri(c,10240,O[f.magFilter]),
a.texParameteri(c,10241,O[f.minFilter])):(a.texParameteri(c,10242,33071),a.texParameteri(c,10243,33071),32879!==c&&35866!==c||a.texParameteri(c,32882,33071),1001===f.wrapS&&1001===f.wrapT||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),a.texParameteri(c,10240,p(f.magFilter)),a.texParameteri(c,10241,p(f.minFilter)),1003!==f.minFilter&&1006!==f.minFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));
!(g=b.get("EXT_texture_filter_anisotropic"))||1015===f.type&&null===b.get("OES_texture_float_linear")||1016===f.type&&null===(la||b.get("OES_texture_half_float_linear"))||!(1<f.anisotropy||d.get(f).__currentAnisotropy)||(a.texParameterf(c,g.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(f.anisotropy,e.getMaxAnisotropy())),d.get(f).__currentAnisotropy=f.anisotropy)}function I(b,c){void 0===b.__webglInit&&(b.__webglInit=!0,c.addEventListener("dispose",t),b.__webglTexture=a.createTexture(),g.memory.textures++)}
function z(b,d,e){var g=3553;d.isDataTexture2DArray&&(g=35866);d.isDataTexture3D&&(g=32879);I(b,d);c.activeTexture(33984+e);c.bindTexture(g,b.__webglTexture);a.pixelStorei(37440,d.flipY);a.pixelStorei(37441,d.premultiplyAlpha);a.pixelStorei(3317,d.unpackAlignment);e=la?!1:1001!==d.wrapS||1001!==d.wrapT||1003!==d.minFilter&&1006!==d.minFilter;e=e&&!1===m(d.image);e=l(d.image,e,!1,E);var h=m(e)||la,u=f.convert(d.format),t=f.convert(d.type),p=k(u,t);F(g,d,h);var v=d.mipmaps;if(d.isDepthTexture){p=6402;
if(1015===d.type){if(!1===la)throw Error("Float Depth Texture only supported in WebGL2.0");p=36012}else la&&(p=33189);1026===d.format&&6402===p&&1012!==d.type&&1014!==d.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),d.type=1012,t=f.convert(d.type));1027===d.format&&(p=34041,1020!==d.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),d.type=1020,t=f.convert(d.type)));c.texImage2D(3553,
0,p,e.width,e.height,0,u,t,null)}else if(d.isDataTexture)if(0<v.length&&h){for(var n=0,y=v.length;n<y;n++)g=v[n],c.texImage2D(3553,n,p,g.width,g.height,0,u,t,g.data);d.generateMipmaps=!1;b.__maxMipLevel=v.length-1}else c.texImage2D(3553,0,p,e.width,e.height,0,u,t,e.data),b.__maxMipLevel=0;else if(d.isCompressedTexture){n=0;for(y=v.length;n<y;n++)g=v[n],1023!==d.format&&1022!==d.format?null!==u?c.compressedTexImage2D(3553,n,p,g.width,g.height,0,g.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):
c.texImage2D(3553,n,p,g.width,g.height,0,u,t,g.data);b.__maxMipLevel=v.length-1}else if(d.isDataTexture2DArray)c.texImage3D(35866,0,p,e.width,e.height,e.depth,0,u,t,e.data),b.__maxMipLevel=0;else if(d.isDataTexture3D)c.texImage3D(32879,0,p,e.width,e.height,e.depth,0,u,t,e.data),b.__maxMipLevel=0;else if(0<v.length&&h){n=0;for(y=v.length;n<y;n++)g=v[n],c.texImage2D(3553,n,p,u,t,g);d.generateMipmaps=!1;b.__maxMipLevel=v.length-1}else c.texImage2D(3553,0,p,u,t,e),b.__maxMipLevel=0;r(d,h)&&q(3553,d,e.width,
e.height);b.__version=d.version;if(d.onUpdate)d.onUpdate(d)}function B(b,e,g,h){var l=f.convert(e.texture.format),m=f.convert(e.texture.type),r=k(l,m);c.texImage2D(h,0,r,e.width,e.height,0,l,m,null);a.bindFramebuffer(36160,b);a.framebufferTexture2D(36160,g,h,d.get(e.texture).__webglTexture,0);a.bindFramebuffer(36160,null)}function ia(b,c,d){a.bindRenderbuffer(36161,b);if(c.depthBuffer&&!c.stencilBuffer)d?(d=A(c),a.renderbufferStorageMultisample(36161,d,33189,c.width,c.height)):a.renderbufferStorage(36161,
33189,c.width,c.height),a.framebufferRenderbuffer(36160,36096,36161,b);else if(c.depthBuffer&&c.stencilBuffer)d?(d=A(c),a.renderbufferStorageMultisample(36161,d,35056,c.width,c.height)):a.renderbufferStorage(36161,34041,c.width,c.height),a.framebufferRenderbuffer(36160,33306,36161,b);else{b=f.convert(c.texture.format);var e=f.convert(c.texture.type);b=k(b,e);d?(d=A(c),a.renderbufferStorageMultisample(36161,d,b,c.width,c.height)):a.renderbufferStorage(36161,b,c.width,c.height)}a.bindRenderbuffer(36161,
null)}function A(a){return la&&a.isWebGLMultisampleRenderTarget?Math.min(D,a.samples):0}var la=e.isWebGL2,H=e.maxTextures,Hd=e.maxCubemapSize,E=e.maxTextureSize,D=e.maxSamples,J=new WeakMap,L,C="undefined"!==typeof OffscreenCanvas&&null!==(new OffscreenCanvas(1,1)).getContext("2d"),G=0,N={1E3:10497,1001:33071,1002:33648},O={1003:9728,1004:9984,1005:9986,1006:9729,1007:9985,1008:9987},Q=!1,S=!1;this.allocateTextureUnit=function(){var a=G;a>=H&&console.warn("THREE.WebGLTextures: Trying to use "+a+" texture units while this GPU supports only "+
H);G+=1;return a};this.resetTextureUnits=function(){G=0};this.setTexture2D=n;this.setTexture2DArray=function(a,b){var e=d.get(a);0<a.version&&e.__version!==a.version?z(e,a,b):(c.activeTexture(33984+b),c.bindTexture(35866,e.__webglTexture))};this.setTexture3D=function(a,b){var e=d.get(a);0<a.version&&e.__version!==a.version?z(e,a,b):(c.activeTexture(33984+b),c.bindTexture(32879,e.__webglTexture))};this.setTextureCube=w;this.setTextureCubeDynamic=x;this.setupRenderTarget=function(e){var h=d.get(e),
l=d.get(e.texture);e.addEventListener("dispose",v);l.__webglTexture=a.createTexture();g.memory.textures++;var u=!0===e.isWebGLRenderTargetCube,t=!0===e.isWebGLMultisampleRenderTarget,p=!0===e.isWebGLMultiviewRenderTarget,y=m(e)||la;if(u){h.__webglFramebuffer=[];for(var w=0;6>w;w++)h.__webglFramebuffer[w]=a.createFramebuffer()}else if(h.__webglFramebuffer=a.createFramebuffer(),t)if(la){h.__webglMultisampledFramebuffer=a.createFramebuffer();h.__webglColorRenderbuffer=a.createRenderbuffer();a.bindRenderbuffer(36161,
h.__webglColorRenderbuffer);t=f.convert(e.texture.format);var z=f.convert(e.texture.type);t=k(t,z);z=A(e);a.renderbufferStorageMultisample(36161,z,t,e.width,e.height);a.bindFramebuffer(36160,h.__webglMultisampledFramebuffer);a.framebufferRenderbuffer(36160,36064,36161,h.__webglColorRenderbuffer);a.bindRenderbuffer(36161,null);e.depthBuffer&&(h.__webglDepthRenderbuffer=a.createRenderbuffer(),ia(h.__webglDepthRenderbuffer,e,!0));a.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
else if(p){w=e.width;var x=e.height;t=e.numViews;a.bindFramebuffer(36160,h.__webglFramebuffer);var I=b.get("OVR_multiview2");g.memory.textures+=2;z=a.createTexture();a.bindTexture(35866,z);a.texParameteri(35866,10240,9728);a.texParameteri(35866,10241,9728);a.texImage3D(35866,0,32856,w,x,t,0,6408,5121,null);I.framebufferTextureMultiviewOVR(36160,36064,z,0,0,t);var H=a.createTexture();a.bindTexture(35866,H);a.texParameteri(35866,10240,9728);a.texParameteri(35866,10241,9728);a.texImage3D(35866,0,35056,
w,x,t,0,34041,34042,null);I.framebufferTextureMultiviewOVR(36160,33306,H,0,0,t);x=Array(t);for(w=0;w<t;++w)x[w]=a.createFramebuffer(),a.bindFramebuffer(36160,x[w]),a.framebufferTextureLayer(36160,36064,z,0,w);h.__webglColorTexture=z;h.__webglDepthStencilTexture=H;h.__webglViewFramebuffers=x;a.bindFramebuffer(36160,null);a.bindTexture(35866,null)}if(u){c.bindTexture(34067,l.__webglTexture);F(34067,e.texture,y);for(w=0;6>w;w++)B(h.__webglFramebuffer[w],e,36064,34069+w);r(e.texture,y)&&q(34067,e.texture,
e.width,e.height);c.bindTexture(34067,null)}else p||(c.bindTexture(3553,l.__webglTexture),F(3553,e.texture,y),B(h.__webglFramebuffer,e,36064,3553),r(e.texture,y)&&q(3553,e.texture,e.width,e.height),c.bindTexture(3553,null));if(e.depthBuffer){h=d.get(e);l=!0===e.isWebGLRenderTargetCube;if(e.depthTexture){if(l)throw Error("target.depthTexture not supported in Cube render targets");if(e&&e.isWebGLRenderTargetCube)throw Error("Depth Texture with cube render targets is not supported");a.bindFramebuffer(36160,
h.__webglFramebuffer);if(!e.depthTexture||!e.depthTexture.isDepthTexture)throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");d.get(e.depthTexture).__webglTexture&&e.depthTexture.image.width===e.width&&e.depthTexture.image.height===e.height||(e.depthTexture.image.width=e.width,e.depthTexture.image.height=e.height,e.depthTexture.needsUpdate=!0);n(e.depthTexture,0);h=d.get(e.depthTexture).__webglTexture;if(1026===e.depthTexture.format)a.framebufferTexture2D(36160,36096,
3553,h,0);else if(1027===e.depthTexture.format)a.framebufferTexture2D(36160,33306,3553,h,0);else throw Error("Unknown depthTexture format");}else if(l)for(h.__webglDepthbuffer=[],l=0;6>l;l++)a.bindFramebuffer(36160,h.__webglFramebuffer[l]),h.__webglDepthbuffer[l]=a.createRenderbuffer(),ia(h.__webglDepthbuffer[l],e);else a.bindFramebuffer(36160,h.__webglFramebuffer),h.__webglDepthbuffer=a.createRenderbuffer(),ia(h.__webglDepthbuffer,e);a.bindFramebuffer(36160,null)}};this.updateRenderTargetMipmap=
function(a){var b=a.texture,e=m(a)||la;if(r(b,e)){e=a.isWebGLRenderTargetCube?34067:3553;var f=d.get(b).__webglTexture;c.bindTexture(e,f);q(e,b,a.width,a.height);c.bindTexture(e,null)}};this.updateMultisampleRenderTarget=function(b){if(b.isWebGLMultisampleRenderTarget)if(la){var c=d.get(b);a.bindFramebuffer(36008,c.__webglMultisampledFramebuffer);a.bindFramebuffer(36009,c.__webglFramebuffer);c=b.width;var e=b.height,f=16384;b.depthBuffer&&(f|=256);b.stencilBuffer&&(f|=1024);a.blitFramebuffer(0,0,
c,e,0,0,c,e,f,9728)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")};this.safeSetTexture2D=function(a,b){a&&a.isWebGLRenderTarget&&(!1===Q&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),Q=!0),a=a.texture);n(a,b)};this.safeSetTextureCube=function(a,b){a&&a.isWebGLRenderTargetCube&&(!1===S&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),
S=!0),a=a.texture);a&&a.isCubeTexture||Array.isArray(a.image)&&6===a.image.length?w(a,b):x(a,b)}}function Kh(a,b,c){var d=c.isWebGL2;return{convert:function(a){if(1009===a)return 5121;if(1017===a)return 32819;if(1018===a)return 32820;if(1019===a)return 33635;if(1010===a)return 5120;if(1011===a)return 5122;if(1012===a)return 5123;if(1013===a)return 5124;if(1014===a)return 5125;if(1015===a)return 5126;if(1016===a){if(d)return 5131;var c=b.get("OES_texture_half_float");return null!==c?c.HALF_FLOAT_OES:
null}if(1021===a)return 6406;if(1022===a)return 6407;if(1023===a)return 6408;if(1024===a)return 6409;if(1025===a)return 6410;if(1026===a)return 6402;if(1027===a)return 34041;if(1028===a)return 6403;if(33776===a||33777===a||33778===a||33779===a)if(c=b.get("WEBGL_compressed_texture_s3tc"),null!==c){if(33776===a)return c.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===a)return c.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===a)return c.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===a)return c.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;
if(35840===a||35841===a||35842===a||35843===a)if(c=b.get("WEBGL_compressed_texture_pvrtc"),null!==c){if(35840===a)return c.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===a)return c.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===a)return c.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===a)return c.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(36196===a)return c=b.get("WEBGL_compressed_texture_etc1"),null!==c?c.COMPRESSED_RGB_ETC1_WEBGL:null;if(37808===a||37809===a||37810===a||37811===a||37812===a||37813===
a||37814===a||37815===a||37816===a||37817===a||37818===a||37819===a||37820===a||37821===a)return c=b.get("WEBGL_compressed_texture_astc"),null!==c?a:null;if(1020===a){if(d)return 34042;c=b.get("WEBGL_depth_texture");return null!==c?c.UNSIGNED_INT_24_8_WEBGL:null}}}}function fg(a,b,c,d){Ba.call(this,a,b,d);this.stencilBuffer=this.depthBuffer=!1;this.numViews=c}function lk(a,b){function c(a){if(a.isArrayCamera)return a.cameras;r[0]=a;return r}function d(a){if(void 0===a.isArrayCamera)return!0;a=a.cameras;
if(a.length>p)return!1;for(var b=1,c=a.length;b<c;b++)if(a[0].viewport.z!==a[b].viewport.z||a[0].viewport.w!==a[b].viewport.w)return!1;return!0}var e=a.extensions,f=a.properties,g,h,l,m,r,q,k,p=0;this.isAvailable=function(){if(void 0===k){var a=e.get("OVR_multiview2");if(k=null!==a&&!1===b.getContextAttributes().antialias)for(p=b.getParameter(a.MAX_VIEWS_OVR),g=new fg(0,0,2),q=new B,m=[],l=[],r=[],a=0;a<p;a++)m[a]=new Q,l[a]=new Z}return k};this.attachCamera=function(b){if(!1!==d(b)){(h=a.getRenderTarget())?
q.set(h.width,h.height):a.getDrawingBufferSize(q);if(b.isArrayCamera){var c=b.cameras[0].viewport;g.setSize(c.z,c.w);g.setNumViews(b.cameras.length)}else g.setSize(q.x,q.y),g.setNumViews(2);a.setRenderTarget(g)}};this.detachCamera=function(c){if(g===a.getRenderTarget()){a.setRenderTarget(h);var d=g,e=d.numViews,l=f.get(d).__webglViewFramebuffers,m=d.width;d=d.height;if(c.isArrayCamera)for(var r=0;r<e;r++){var k=c.cameras[r].viewport,u=k.x,p=k.y,t=u+k.z;k=p+k.w;b.bindFramebuffer(36008,l[r]);b.blitFramebuffer(0,
0,m,d,u,p,t,k,16384,9728)}else b.bindFramebuffer(36008,l[0]),b.blitFramebuffer(0,0,m,d,0,0,q.x,q.y,16384,9728)}};this.updateCameraProjectionMatricesUniform=function(a,d){a=c(a);for(var e=0;e<a.length;e++)m[e].copy(a[e].projectionMatrix);d.setValue(b,"projectionMatrices",m)};this.updateCameraViewMatricesUniform=function(a,d){a=c(a);for(var e=0;e<a.length;e++)m[e].copy(a[e].matrixWorldInverse);d.setValue(b,"viewMatrices",m)};this.updateObjectMatricesUniforms=function(a,d,e){d=c(d);for(var f=0;f<d.length;f++)m[f].multiplyMatrices(d[f].matrixWorldInverse,
a.matrixWorld),l[f].getNormalMatrix(m[f]);e.setValue(b,"modelViewMatrices",m);e.setValue(b,"normalMatrices",l)}}function Gc(){E.call(this);this.type="Group"}function Jd(a){U.call(this);this.cameras=a||[]}function Lh(a,b,c){Mh.setFromMatrixPosition(b.matrixWorld);Nh.setFromMatrixPosition(c.matrixWorld);var d=Mh.distanceTo(Nh),e=b.projectionMatrix.elements,f=c.projectionMatrix.elements,g=e[14]/(e[10]-1);c=e[14]/(e[10]+1);var h=(e[9]+1)/e[5],l=(e[9]-1)/e[5],m=(e[8]-1)/e[0],r=(f[8]+1)/f[0];e=g*m;f=g*
r;r=d/(-m+r);m=r*-m;b.matrixWorld.decompose(a.position,a.quaternion,a.scale);a.translateX(m);a.translateZ(r);a.matrixWorld.compose(a.position,a.quaternion,a.scale);a.matrixWorldInverse.getInverse(a.matrixWorld);b=g+r;g=c+r;a.projectionMatrix.makePerspective(e-m,f+(d-m),h*c/g*b,l*c/g*b,b,g)}function gg(a){function b(){return null!==h&&!0===h.isPresenting}function c(){if(b()){var c=h.getEyeParameters("left");e=2*c.renderWidth*p;f=c.renderHeight*p;Ca=a.getPixelRatio();a.getSize(z);a.setDrawingBufferSize(e,
f,1);x.viewport.set(0,0,e/2,f);F.viewport.set(e/2,0,e/2,f);A.start();g.dispatchEvent({type:"sessionstart"})}else g.enabled&&a.setDrawingBufferSize(z.width,z.height,Ca),A.stop(),g.dispatchEvent({type:"sessionend"})}function d(a,b){null!==b&&4===b.length&&a.set(b[0]*e,b[1]*f,b[2]*e,b[3]*f)}var e,f,g=this,h=null,l=null,m=null,r=[],q=new Q,k=new Q,p=1,t="local-floor";"undefined"!==typeof window&&"VRFrameData"in window&&(l=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",c,!1));
var v=new Q,y=new wa,w=new n,x=new U;x.viewport=new da;x.layers.enable(1);var F=new U;F.viewport=new da;F.layers.enable(2);var I=new Jd([x,F]);I.layers.enable(1);I.layers.enable(2);var z=new B,Ca,ia=[];this.enabled=!1;this.getController=function(a){var b=r[a];void 0===b&&(b=new Gc,b.matrixAutoUpdate=!1,b.visible=!1,r[a]=b);return b};this.getDevice=function(){return h};this.setDevice=function(a){void 0!==a&&(h=a);A.setContext(a)};this.setFramebufferScaleFactor=function(a){p=a};this.setReferenceSpaceType=
function(a){t=a};this.setPoseTarget=function(a){void 0!==a&&(m=a)};this.getCamera=function(a){var c="local-floor"===t?1.6:0;if(!1===b())return a.position.set(0,c,0),a.rotation.set(0,0,0),a;h.depthNear=a.near;h.depthFar=a.far;h.getFrameData(l);if("local-floor"===t){var e=h.stageParameters;e?q.fromArray(e.sittingToStandingTransform):q.makeTranslation(0,c,0)}c=l.pose;e=null!==m?m:a;e.matrix.copy(q);e.matrix.decompose(e.position,e.quaternion,e.scale);null!==c.orientation&&(y.fromArray(c.orientation),
e.quaternion.multiply(y));null!==c.position&&(y.setFromRotationMatrix(q),w.fromArray(c.position),w.applyQuaternion(y),e.position.add(w));e.updateMatrixWorld();x.near=a.near;F.near=a.near;x.far=a.far;F.far=a.far;x.matrixWorldInverse.fromArray(l.leftViewMatrix);F.matrixWorldInverse.fromArray(l.rightViewMatrix);k.getInverse(q);"local-floor"===t&&(x.matrixWorldInverse.multiply(k),F.matrixWorldInverse.multiply(k));a=e.parent;null!==a&&(v.getInverse(a.matrixWorld),x.matrixWorldInverse.multiply(v),F.matrixWorldInverse.multiply(v));
x.matrixWorld.getInverse(x.matrixWorldInverse);F.matrixWorld.getInverse(F.matrixWorldInverse);x.projectionMatrix.fromArray(l.leftProjectionMatrix);F.projectionMatrix.fromArray(l.rightProjectionMatrix);Lh(I,x,F);a=h.getLayers();a.length&&(a=a[0],d(x.viewport,a.leftBounds),d(F.viewport,a.rightBounds));a:for(a=0;a<r.length;a++){c=r[a];b:{e=a;for(var f=navigator.getGamepads&&navigator.getGamepads(),g=0,u=f.length;g<u;g++){var p=f[g];if(p&&("Daydream Controller"===p.id||"Gear VR Controller"===p.id||"Oculus Go Controller"===
p.id||"OpenVR Gamepad"===p.id||p.id.startsWith("Oculus Touch")||p.id.startsWith("HTC Vive Focus")||p.id.startsWith("Spatial Controller"))){var n=p.hand;if(0===e&&(""===n||"right"===n)||1===e&&"left"===n){e=p;break b}}}e=void 0}if(void 0!==e&&void 0!==e.pose){if(null===e.pose)break a;f=e.pose;!1===f.hasPosition&&c.position.set(.2,-.6,-.05);null!==f.position&&c.position.fromArray(f.position);null!==f.orientation&&c.quaternion.fromArray(f.orientation);c.matrix.compose(c.position,c.quaternion,c.scale);
c.matrix.premultiply(q);c.matrix.decompose(c.position,c.quaternion,c.scale);c.matrixWorldNeedsUpdate=!0;c.visible=!0;f="Daydream Controller"===e.id?0:1;void 0===ia[a]&&(ia[a]=!1);ia[a]!==e.buttons[f].pressed&&(ia[a]=e.buttons[f].pressed,!0===ia[a]?c.dispatchEvent({type:"selectstart"}):(c.dispatchEvent({type:"selectend"}),c.dispatchEvent({type:"select"})))}else c.visible=!1}return I};this.getStandingMatrix=function(){return q};this.isPresenting=b;var A=new ag;this.setAnimationLoop=function(a){A.setAnimationLoop(a);
b()&&A.start()};this.submitFrame=function(){b()&&h.submitFrame()};this.dispose=function(){"undefined"!==typeof window&&window.removeEventListener("vrdisplaypresentchange",c)};this.setFrameOfReferenceType=function(){console.warn("THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.")}}function Oh(a,b){function c(){return null!==m&&null!==r}function d(a){for(var b=0;b<p.length;b++)t[b]===a.inputSource&&p[b].dispatchEvent({type:a.type})}function e(){a.setFramebuffer(null);a.setRenderTarget(a.getRenderTarget());
F.stop();l.dispatchEvent({type:"sessionend"})}function f(a){r=a;F.setContext(m);F.start();l.dispatchEvent({type:"sessionstart"})}function g(){for(var a=0;a<p.length;a++){var b=a;a:{var c=m.inputSources;for(var d=0;d<c.length;d++){var e=c[d],f=e.handedness;if(0===a&&("none"===f||"right"===f)){c=e;break a}if(1===a&&"left"===f){c=e;break a}}c=void 0}t[b]=c}}function h(a,b){null===b?a.matrixWorld.copy(a.matrix):a.matrixWorld.multiplyMatrices(b.matrixWorld,a.matrix);a.matrixWorldInverse.getInverse(a.matrixWorld)}
var l=this,m=null,r=null,q="local-floor",k=null,p=[],t=[],n=new U;n.layers.enable(1);n.viewport=new da;var y=new U;y.layers.enable(2);y.viewport=new da;var w=new Jd([n,y]);w.layers.enable(1);w.layers.enable(2);this.enabled=!1;this.getController=function(a){var b=p[a];void 0===b&&(b=new Gc,b.matrixAutoUpdate=!1,b.visible=!1,p[a]=b);return b};this.setFramebufferScaleFactor=function(){};this.setReferenceSpaceType=function(a){q=a};this.getSession=function(){return m};this.setSession=function(a){m=a;null!==
m&&(m.addEventListener("select",d),m.addEventListener("selectstart",d),m.addEventListener("selectend",d),m.addEventListener("end",e),m.updateRenderState({baseLayer:new XRWebGLLayer(m,b)}),m.requestReferenceSpace(q).then(f),m.addEventListener("inputsourceschange",g),g())};this.getCamera=function(a){if(c()){var b=a.parent,d=w.cameras;h(w,b);for(var e=0;e<d.length;e++)h(d[e],b);a.matrixWorld.copy(w.matrixWorld);a=a.children;e=0;for(b=a.length;e<b;e++)a[e].updateMatrixWorld(!0);Lh(w,n,y);return w}return a};
this.isPresenting=c;var x=null,F=new ag;F.setAnimationLoop(function(b,c){k=c.getViewerPose(r);if(null!==k){var d=k.views,e=m.renderState.baseLayer;a.setFramebuffer(e.framebuffer);for(var f=0;f<d.length;f++){var g=d[f],h=e.getViewport(g),l=w.cameras[f];l.matrix.fromArray(g.transform.inverse.matrix).getInverse(l.matrix);l.projectionMatrix.fromArray(g.projectionMatrix);l.viewport.set(h.x,h.y,h.width,h.height);0===f&&w.matrix.copy(l.matrix)}}for(f=0;f<p.length;f++){d=p[f];if(e=t[f])if(e=c.getPose(e.targetRaySpace,
r),null!==e){d.matrix.fromArray(e.transform.matrix);d.matrix.decompose(d.position,d.rotation,d.scale);d.visible=!0;continue}d.visible=!1}x&&x(b)});this.setAnimationLoop=function(a){x=a};this.dispose=function(){};this.getStandingMatrix=function(){console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed.");return new Q};this.getDevice=function(){console.warn("THREE.WebXRManager: getDevice() has been deprecated.")};this.setDevice=function(){console.warn("THREE.WebXRManager: setDevice() has been deprecated.")};
this.setFrameOfReferenceType=function(){console.warn("THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.")};this.submitFrame=function(){}}function hg(a){var b;function c(){qa=new bj(K);Fa=new $i(K,qa,a);!1===Fa.isWebGL2&&(qa.get("WEBGL_depth_texture"),qa.get("OES_texture_float"),qa.get("OES_texture_half_float"),qa.get("OES_texture_half_float_linear"),qa.get("OES_standard_derivatives"),qa.get("OES_element_index_uint"),qa.get("ANGLE_instanced_arrays"));qa.get("OES_texture_float_linear");
pa=new Kh(K,qa,Fa);aa=new jk(K,qa,Fa);aa.scissor(ob.copy(U).multiplyScalar(fa).floor());aa.viewport(T.copy(ea).multiplyScalar(fa).floor());ca=new ej(K);Z=new ak;ba=new kk(K,qa,aa,Z,Fa,pa,ca);ra=new Xi(K);xa=new cj(K,ra,ca);sa=new hj(K,xa,ra,ca);ya=new gj(K);oa=new Zj(G,qa,Fa);wa=new dk;va=new ik;ma=new Yi(G,aa,sa,A);Aa=new Zi(K,qa,ca,Fa);Ba=new dj(K,qa,ca,Fa);ca.programs=oa.programs;G.capabilities=Fa;G.extensions=qa;G.properties=Z;G.renderLists=wa;G.state=aa;G.info=ca}function d(a){a.preventDefault();
console.log("THREE.WebGLRenderer: Context Lost.");N=!0}function e(){console.log("THREE.WebGLRenderer: Context Restored.");N=!1;c()}function f(a){a=a.target;a.removeEventListener("dispose",f);g(a);Z.remove(a)}function g(a){var b=Z.get(a).program;a.program=void 0;void 0!==b&&oa.releaseProgram(b)}function h(a,b){a.render(function(a){G.renderBufferImmediate(a,b)})}function l(a,b,c,d){if(!1!==a.visible){if(a.layers.test(b.layers))if(a.isGroup)c=a.renderOrder;else if(a.isLOD)!0===a.autoUpdate&&a.update(b);
else if(a.isLight)C.pushLight(a),a.castShadow&&C.pushShadow(a);else if(a.isSprite){if(!a.frustumCulled||eg.intersectsSprite(a)){d&&Fb.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Id);var e=sa.update(a),f=a.material;f.visible&&H.push(a,e,f,c,Fb.z,null)}}else if(a.isImmediateRenderObject)d&&Fb.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Id),H.push(a,null,a.material,c,Fb.z,null);else if(a.isMesh||a.isLine||a.isPoints)if(a.isSkinnedMesh&&a.skeleton.frame!==ca.render.frame&&(a.skeleton.update(),
a.skeleton.frame=ca.render.frame),!a.frustumCulled||eg.intersectsObject(a))if(d&&Fb.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Id),e=sa.update(a),f=a.material,Array.isArray(f))for(var g=e.groups,h=0,m=g.length;h<m;h++){var r=g[h],q=f[r.materialIndex];q&&q.visible&&H.push(a,e,q,c,Fb.z,r)}else f.visible&&H.push(a,e,f,c,Fb.z,null);a=a.children;h=0;for(m=a.length;h<m;h++)l(a[h],b,c,d)}}function m(a,b,c,d){for(var e=0,f=a.length;e<f;e++){var g=a[e],h=g.object,l=g.geometry,m=void 0===d?g.material:
d;g=g.group;if(c.isArrayCamera)if($b=c,ja.enabled&&ua.isAvailable())r(h,b,c,l,m,g);else for(var q=c.cameras,k=0,p=q.length;k<p;k++){var u=q[k];h.layers.test(u.layers)&&(aa.viewport(T.copy(u.viewport)),C.setupLights(u),r(h,b,u,l,m,g))}else $b=null,r(h,b,c,l,m,g)}}function r(a,c,d,e,f,g){a.onBeforeRender(G,c,d,e,f,g);C=va.get(c,$b||d);a.modelViewMatrix.multiplyMatrices(d.matrixWorldInverse,a.matrixWorld);a.normalMatrix.getNormalMatrix(a.modelViewMatrix);if(a.isImmediateRenderObject){aa.setMaterial(f);
var l=k(d,c.fog,f,a);Je=b=null;Y=!1;h(a,l)}else G.renderBufferDirect(d,c.fog,e,f,a,g);a.onAfterRender(G,c,d,e,f,g);C=va.get(c,$b||d)}function q(a,b,c){var d=Z.get(a),e=C.state.lights,h=e.state.version;c=oa.getParameters(a,e.state,C.state.shadowsArray,b,Pa.numPlanes,Pa.numIntersection,c);var l=oa.getProgramCacheKey(a,c),m=d.program,r=!0;if(void 0===m)a.addEventListener("dispose",f);else if(m.cacheKey!==l)g(a);else{if(d.lightsStateVersion!==h)d.lightsStateVersion=h;else if(void 0!==c.shaderID)return;
r=!1}r&&(c.shaderID?(l=cb[c.shaderID],d.shader={name:a.type,uniforms:Xb(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader}):d.shader={name:a.type,uniforms:a.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader},a.onBeforeCompile(d.shader,G),l=oa.getProgramCacheKey(a,c),m=oa.acquireProgram(a,d.shader,c,l),d.program=m,a.program=m);c=m.getAttributes();if(a.morphTargets)for(l=a.numSupportedMorphTargets=0;l<G.maxMorphTargets;l++)0<=c["morphTarget"+l]&&a.numSupportedMorphTargets++;
if(a.morphNormals)for(l=a.numSupportedMorphNormals=0;l<G.maxMorphNormals;l++)0<=c["morphNormal"+l]&&a.numSupportedMorphNormals++;c=d.shader.uniforms;if(!a.isShaderMaterial&&!a.isRawShaderMaterial||!0===a.clipping)d.numClippingPlanes=Pa.numPlanes,d.numIntersection=Pa.numIntersection,c.clippingPlanes=Pa.uniform;d.fog=b;d.needsLights=a.isMeshLambertMaterial||a.isMeshPhongMaterial||a.isMeshStandardMaterial||a.isShadowMaterial||a.isShaderMaterial&&!0===a.lights;d.lightsStateVersion=h;d.needsLights&&(c.ambientLightColor.value=
e.state.ambient,c.lightProbe.value=e.state.probe,c.directionalLights.value=e.state.directional,c.spotLights.value=e.state.spot,c.rectAreaLights.value=e.state.rectArea,c.pointLights.value=e.state.point,c.hemisphereLights.value=e.state.hemi,c.directionalShadowMap.value=e.state.directionalShadowMap,c.directionalShadowMatrix.value=e.state.directionalShadowMatrix,c.spotShadowMap.value=e.state.spotShadowMap,c.spotShadowMatrix.value=e.state.spotShadowMatrix,c.pointShadowMap.value=e.state.pointShadowMap,
c.pointShadowMatrix.value=e.state.pointShadowMatrix);a=d.program.getUniforms();a=Cb.seqWithValue(a.seq,c);d.uniformsList=a}function k(a,b,c,d){ba.resetTextureUnits();var e=Z.get(c),f=C.state.lights;He&&(ta||a!==X)&&Pa.setState(c.clippingPlanes,c.clipIntersection,c.clipShadows,a,e,a===X&&c.id===ha);!1===c.needsUpdate&&(void 0===e.program?c.needsUpdate=!0:c.fog&&e.fog!==b?c.needsUpdate=!0:e.needsLights&&e.lightsStateVersion!==f.state.version?c.needsUpdate=!0:void 0===e.numClippingPlanes||e.numClippingPlanes===
Pa.numPlanes&&e.numIntersection===Pa.numIntersection||(c.needsUpdate=!0));c.needsUpdate&&(q(c,b,d),c.needsUpdate=!1);var g=!1,h=!1,l=!1;f=e.program;var m=f.getUniforms(),r=e.shader.uniforms;aa.useProgram(f.program)&&(l=h=g=!0);c.id!==ha&&(ha=c.id,h=!0);if(g||X!==a){0<f.numMultiviewViews?ua.updateCameraProjectionMatricesUniform(a,m):m.setValue(K,"projectionMatrix",a.projectionMatrix);Fa.logarithmicDepthBuffer&&m.setValue(K,"logDepthBufFC",2/(Math.log(a.far+1)/Math.LN2));X!==a&&(X=a,l=h=!0);if(c.isShaderMaterial||
c.isMeshPhongMaterial||c.isMeshStandardMaterial||c.envMap)g=m.map.cameraPosition,void 0!==g&&g.setValue(K,Fb.setFromMatrixPosition(a.matrixWorld));(c.isMeshPhongMaterial||c.isMeshLambertMaterial||c.isMeshBasicMaterial||c.isMeshStandardMaterial||c.isShaderMaterial)&&m.setValue(K,"isOrthographic",!0===a.isOrthographicCamera);if(c.isMeshPhongMaterial||c.isMeshLambertMaterial||c.isMeshBasicMaterial||c.isMeshStandardMaterial||c.isShaderMaterial||c.skinning)0<f.numMultiviewViews?ua.updateCameraViewMatricesUniform(a,
m):m.setValue(K,"viewMatrix",a.matrixWorldInverse)}if(c.skinning&&(m.setOptional(K,d,"bindMatrix"),m.setOptional(K,d,"bindMatrixInverse"),g=d.skeleton)){var k=g.bones;if(Fa.floatVertexTextures){if(void 0===g.boneTexture){k=Math.sqrt(4*k.length);k=P.ceilPowerOfTwo(k);k=Math.max(k,4);var u=new Float32Array(k*k*4);u.set(g.boneMatrices);var n=new Yb(u,k,k,1023,1015);g.boneMatrices=u;g.boneTexture=n;g.boneTextureSize=k}m.setValue(K,"boneTexture",g.boneTexture,ba);m.setValue(K,"boneTextureSize",g.boneTextureSize)}else m.setOptional(K,
g,"boneMatrices")}if(h||e.receiveShadow!==d.receiveShadow)e.receiveShadow=d.receiveShadow,m.setValue(K,"receiveShadow",d.receiveShadow);if(h){m.setValue(K,"toneMappingExposure",G.toneMappingExposure);m.setValue(K,"toneMappingWhitePoint",G.toneMappingWhitePoint);e.needsLights&&(h=l,r.ambientLightColor.needsUpdate=h,r.lightProbe.needsUpdate=h,r.directionalLights.needsUpdate=h,r.pointLights.needsUpdate=h,r.spotLights.needsUpdate=h,r.rectAreaLights.needsUpdate=h,r.hemisphereLights.needsUpdate=h);b&&c.fog&&
(r.fogColor.value.copy(b.color),b.isFog?(r.fogNear.value=b.near,r.fogFar.value=b.far):b.isFogExp2&&(r.fogDensity.value=b.density));if(c.isMeshBasicMaterial)p(r,c);else if(c.isMeshLambertMaterial)p(r,c),c.emissiveMap&&(r.emissiveMap.value=c.emissiveMap);else if(c.isMeshPhongMaterial)p(r,c),c.isMeshToonMaterial?(t(r,c),c.gradientMap&&(r.gradientMap.value=c.gradientMap)):t(r,c);else if(c.isMeshStandardMaterial)p(r,c),c.isMeshPhysicalMaterial?(v(r,c),r.reflectivity.value=c.reflectivity,r.clearcoat.value=
c.clearcoat,r.clearcoatRoughness.value=c.clearcoatRoughness,c.sheen&&r.sheen.value.copy(c.sheen),c.clearcoatNormalMap&&(r.clearcoatNormalScale.value.copy(c.clearcoatNormalScale),r.clearcoatNormalMap.value=c.clearcoatNormalMap,1===c.side&&r.clearcoatNormalScale.value.negate()),r.transparency.value=c.transparency):v(r,c);else if(c.isMeshMatcapMaterial)p(r,c),c.matcap&&(r.matcap.value=c.matcap),c.bumpMap&&(r.bumpMap.value=c.bumpMap,r.bumpScale.value=c.bumpScale,1===c.side&&(r.bumpScale.value*=-1)),c.normalMap&&
(r.normalMap.value=c.normalMap,r.normalScale.value.copy(c.normalScale),1===c.side&&r.normalScale.value.negate()),c.displacementMap&&(r.displacementMap.value=c.displacementMap,r.displacementScale.value=c.displacementScale,r.displacementBias.value=c.displacementBias);else if(c.isMeshDepthMaterial)p(r,c),c.displacementMap&&(r.displacementMap.value=c.displacementMap,r.displacementScale.value=c.displacementScale,r.displacementBias.value=c.displacementBias);else if(c.isMeshDistanceMaterial)p(r,c),c.displacementMap&&
(r.displacementMap.value=c.displacementMap,r.displacementScale.value=c.displacementScale,r.displacementBias.value=c.displacementBias),r.referencePosition.value.copy(c.referencePosition),r.nearDistance.value=c.nearDistance,r.farDistance.value=c.farDistance;else if(c.isMeshNormalMaterial)p(r,c),c.bumpMap&&(r.bumpMap.value=c.bumpMap,r.bumpScale.value=c.bumpScale,1===c.side&&(r.bumpScale.value*=-1)),c.normalMap&&(r.normalMap.value=c.normalMap,r.normalScale.value.copy(c.normalScale),1===c.side&&r.normalScale.value.negate()),
c.displacementMap&&(r.displacementMap.value=c.displacementMap,r.displacementScale.value=c.displacementScale,r.displacementBias.value=c.displacementBias);else if(c.isLineBasicMaterial)r.diffuse.value.copy(c.color),r.opacity.value=c.opacity,c.isLineDashedMaterial&&(r.dashSize.value=c.dashSize,r.totalSize.value=c.dashSize+c.gapSize,r.scale.value=c.scale);else if(c.isPointsMaterial){r.diffuse.value.copy(c.color);r.opacity.value=c.opacity;r.size.value=c.size*fa;r.scale.value=.5*W;c.map&&(r.map.value=c.map);
c.alphaMap&&(r.alphaMap.value=c.alphaMap);if(c.map)var y=c.map;else c.alphaMap&&(y=c.alphaMap);void 0!==y&&(!0===y.matrixAutoUpdate&&y.updateMatrix(),r.uvTransform.value.copy(y.matrix))}else if(c.isSpriteMaterial){r.diffuse.value.copy(c.color);r.opacity.value=c.opacity;r.rotation.value=c.rotation;c.map&&(r.map.value=c.map);c.alphaMap&&(r.alphaMap.value=c.alphaMap);if(c.map)var w=c.map;else c.alphaMap&&(w=c.alphaMap);void 0!==w&&(!0===w.matrixAutoUpdate&&w.updateMatrix(),r.uvTransform.value.copy(w.matrix))}else c.isShadowMaterial&&
(r.color.value.copy(c.color),r.opacity.value=c.opacity);void 0!==r.ltc_1&&(r.ltc_1.value=L.LTC_1);void 0!==r.ltc_2&&(r.ltc_2.value=L.LTC_2);Cb.upload(K,e.uniformsList,r,ba);c.isShaderMaterial&&(c.uniformsNeedUpdate=!1)}c.isShaderMaterial&&!0===c.uniformsNeedUpdate&&(Cb.upload(K,e.uniformsList,r,ba),c.uniformsNeedUpdate=!1);c.isSpriteMaterial&&m.setValue(K,"center",d.center);0<f.numMultiviewViews?ua.updateObjectMatricesUniforms(d,a,m):(m.setValue(K,"modelViewMatrix",d.modelViewMatrix),m.setValue(K,
"normalMatrix",d.normalMatrix));m.setValue(K,"modelMatrix",d.matrixWorld);return f}function p(a,b){a.opacity.value=b.opacity;b.color&&a.diffuse.value.copy(b.color);b.emissive&&a.emissive.value.copy(b.emissive).multiplyScalar(b.emissiveIntensity);b.map&&(a.map.value=b.map);b.alphaMap&&(a.alphaMap.value=b.alphaMap);b.specularMap&&(a.specularMap.value=b.specularMap);b.envMap&&(a.envMap.value=b.envMap,a.flipEnvMap.value=b.envMap.isCubeTexture?-1:1,a.reflectivity.value=b.reflectivity,a.refractionRatio.value=
b.refractionRatio,a.maxMipLevel.value=Z.get(b.envMap).__maxMipLevel);b.lightMap&&(a.lightMap.value=b.lightMap,a.lightMapIntensity.value=b.lightMapIntensity);b.aoMap&&(a.aoMap.value=b.aoMap,a.aoMapIntensity.value=b.aoMapIntensity);if(b.map)var c=b.map;else b.specularMap?c=b.specularMap:b.displacementMap?c=b.displacementMap:b.normalMap?c=b.normalMap:b.bumpMap?c=b.bumpMap:b.roughnessMap?c=b.roughnessMap:b.metalnessMap?c=b.metalnessMap:b.alphaMap?c=b.alphaMap:b.emissiveMap&&(c=b.emissiveMap);void 0!==
c&&(c.isWebGLRenderTarget&&(c=c.texture),!0===c.matrixAutoUpdate&&c.updateMatrix(),a.uvTransform.value.copy(c.matrix))}function t(a,b){a.specular.value.copy(b.specular);a.shininess.value=Math.max(b.shininess,1E-4);b.emissiveMap&&(a.emissiveMap.value=b.emissiveMap);b.bumpMap&&(a.bumpMap.value=b.bumpMap,a.bumpScale.value=b.bumpScale,1===b.side&&(a.bumpScale.value*=-1));b.normalMap&&(a.normalMap.value=b.normalMap,a.normalScale.value.copy(b.normalScale),1===b.side&&a.normalScale.value.negate());b.displacementMap&&
(a.displacementMap.value=b.displacementMap,a.displacementScale.value=b.displacementScale,a.displacementBias.value=b.displacementBias)}function v(a,b){a.roughness.value=b.roughness;a.metalness.value=b.metalness;b.roughnessMap&&(a.roughnessMap.value=b.roughnessMap);b.metalnessMap&&(a.metalnessMap.value=b.metalnessMap);b.emissiveMap&&(a.emissiveMap.value=b.emissiveMap);b.bumpMap&&(a.bumpMap.value=b.bumpMap,a.bumpScale.value=b.bumpScale,1===b.side&&(a.bumpScale.value*=-1));b.normalMap&&(a.normalMap.value=
b.normalMap,a.normalScale.value.copy(b.normalScale),1===b.side&&a.normalScale.value.negate());b.displacementMap&&(a.displacementMap.value=b.displacementMap,a.displacementScale.value=b.displacementScale,a.displacementBias.value=b.displacementBias);b.envMap&&(a.envMapIntensity.value=b.envMapIntensity)}a=a||{};var y=void 0!==a.canvas?a.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),w=void 0!==a.context?a.context:null,x=void 0!==a.alpha?a.alpha:!1,F=void 0!==a.depth?a.depth:
!0,I=void 0!==a.stencil?a.stencil:!0,z=void 0!==a.antialias?a.antialias:!1,A=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,E=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,D=void 0!==a.powerPreference?a.powerPreference:"default",J=void 0!==a.failIfMajorPerformanceCaveat?a.failIfMajorPerformanceCaveat:!1,H=null,C=null;this.domElement=y;this.debug={checkShaderErrors:!0};this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.clippingPlanes=
[];this.localClippingEnabled=!1;this.gammaFactor=2;this.physicallyCorrectLights=this.gammaOutput=this.gammaInput=!1;this.toneMappingWhitePoint=this.toneMappingExposure=this.toneMapping=1;this.maxMorphTargets=8;this.maxMorphNormals=4;var G=this,N=!1,O=null,S=0,V=0,R=null,Ie=null,ha=-1;var Je=b=null;var Y=!1;var X=null,$b=null,T=new da,ob=new da,ka=null,M=y.width,W=y.height,fa=1,ea=new da(0,0,M,W),U=new da(0,0,M,W),na=!1,eg=new Dd,Pa=new aj,He=!1,ta=!1,Id=new Q,Fb=new n;try{x={alpha:x,depth:F,stencil:I,
antialias:z,premultipliedAlpha:A,preserveDrawingBuffer:E,powerPreference:D,failIfMajorPerformanceCaveat:J,xrCompatible:!0};y.addEventListener("webglcontextlost",d,!1);y.addEventListener("webglcontextrestored",e,!1);var K=w||y.getContext("webgl",x)||y.getContext("experimental-webgl",x);if(null===K){if(null!==y.getContext("webgl"))throw Error("Error creating WebGL context with your selected attributes.");throw Error("Error creating WebGL context.");}void 0===K.getShaderPrecisionFormat&&(K.getShaderPrecisionFormat=
function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(Ph){throw console.error("THREE.WebGLRenderer: "+Ph.message),Ph;}var qa,Fa,aa,ca,Z,ba,ra,xa,sa,oa,wa,va,ma,ya,Aa,Ba,pa;c();var ja="undefined"!==typeof navigator&&"xr"in navigator&&"isSessionSupported"in navigator.xr?new Oh(G,K):new gg(G);this.vr=ja;var ua=new lk(G,K),Ea=new Ih(G,sa,Fa.maxTextureSize);this.shadowMap=Ea;this.getContext=function(){return K};this.getContextAttributes=function(){return K.getContextAttributes()};this.forceContextLoss=
function(){var a=qa.get("WEBGL_lose_context");a&&a.loseContext()};this.forceContextRestore=function(){var a=qa.get("WEBGL_lose_context");a&&a.restoreContext()};this.getPixelRatio=function(){return fa};this.setPixelRatio=function(a){void 0!==a&&(fa=a,this.setSize(M,W,!1))};this.getSize=function(a){void 0===a&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),a=new B);return a.set(M,W)};this.setSize=function(a,b,c){ja.isPresenting()?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):
(M=a,W=b,y.width=Math.floor(a*fa),y.height=Math.floor(b*fa),!1!==c&&(y.style.width=a+"px",y.style.height=b+"px"),this.setViewport(0,0,a,b))};this.getDrawingBufferSize=function(a){void 0===a&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),a=new B);return a.set(M*fa,W*fa).floor()};this.setDrawingBufferSize=function(a,b,c){M=a;W=b;fa=c;y.width=Math.floor(a*c);y.height=Math.floor(b*c);this.setViewport(0,0,a,b)};this.getCurrentViewport=function(a){void 0===
a&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),a=new da);return a.copy(T)};this.getViewport=function(a){return a.copy(ea)};this.setViewport=function(a,b,c,d){a.isVector4?ea.set(a.x,a.y,a.z,a.w):ea.set(a,b,c,d);aa.viewport(T.copy(ea).multiplyScalar(fa).floor())};this.getScissor=function(a){return a.copy(U)};this.setScissor=function(a,b,c,d){a.isVector4?U.set(a.x,a.y,a.z,a.w):U.set(a,b,c,d);aa.scissor(ob.copy(U).multiplyScalar(fa).floor())};this.getScissorTest=
function(){return na};this.setScissorTest=function(a){aa.setScissorTest(na=a)};this.getClearColor=function(){return ma.getClearColor()};this.setClearColor=function(){ma.setClearColor.apply(ma,arguments)};this.getClearAlpha=function(){return ma.getClearAlpha()};this.setClearAlpha=function(){ma.setClearAlpha.apply(ma,arguments)};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=16384;if(void 0===b||b)d|=256;if(void 0===c||c)d|=1024;K.clear(d)};this.clearColor=function(){this.clear(!0,!1,!1)};this.clearDepth=
function(){this.clear(!1,!0,!1)};this.clearStencil=function(){this.clear(!1,!1,!0)};this.dispose=function(){y.removeEventListener("webglcontextlost",d,!1);y.removeEventListener("webglcontextrestored",e,!1);wa.dispose();va.dispose();Z.dispose();sa.dispose();ja.dispose();za.stop()};this.renderBufferImmediate=function(a,b){aa.initAttributes();var c=Z.get(a);a.hasPositions&&!c.position&&(c.position=K.createBuffer());a.hasNormals&&!c.normal&&(c.normal=K.createBuffer());a.hasUvs&&!c.uv&&(c.uv=K.createBuffer());
a.hasColors&&!c.color&&(c.color=K.createBuffer());b=b.getAttributes();a.hasPositions&&(K.bindBuffer(34962,c.position),K.bufferData(34962,a.positionArray,35048),aa.enableAttribute(b.position),K.vertexAttribPointer(b.position,3,5126,!1,0,0));a.hasNormals&&(K.bindBuffer(34962,c.normal),K.bufferData(34962,a.normalArray,35048),aa.enableAttribute(b.normal),K.vertexAttribPointer(b.normal,3,5126,!1,0,0));a.hasUvs&&(K.bindBuffer(34962,c.uv),K.bufferData(34962,a.uvArray,35048),aa.enableAttribute(b.uv),K.vertexAttribPointer(b.uv,
2,5126,!1,0,0));a.hasColors&&(K.bindBuffer(34962,c.color),K.bufferData(34962,a.colorArray,35048),aa.enableAttribute(b.color),K.vertexAttribPointer(b.color,3,5126,!1,0,0));aa.disableUnusedAttributes();K.drawArrays(4,0,a.count);a.count=0};this.renderBufferDirect=function(a,c,d,e,f,g){var h=f.isMesh&&0>f.matrixWorld.determinant();aa.setMaterial(e,h);var l=k(a,c,e,f),m=!1;if(b!==d.id||Je!==l.id||Y!==(!0===e.wireframe))b=d.id,Je=l.id,Y=!0===e.wireframe,m=!0;f.morphTargetInfluences&&(ya.update(f,d,e,l),
m=!0);h=d.index;var r=d.attributes.position;c=1;!0===e.wireframe&&(h=xa.getWireframeAttribute(d),c=2);a=Aa;if(null!==h){var q=ra.get(h);a=Ba;a.setIndex(q)}if(m){if(!1!==Fa.isWebGL2||!f.isInstancedMesh&&!d.isInstancedBufferGeometry||null!==qa.get("ANGLE_instanced_arrays")){aa.initAttributes();m=d.attributes;l=l.getAttributes();var u=e.defaultAttributeValues;for(I in l){var p=l[I];if(0<=p){var t=m[I];if(void 0!==t){var n=t.normalized,v=t.itemSize,y=ra.get(t);if(void 0!==y){var w=y.buffer,x=y.type;y=
y.bytesPerElement;if(t.isInterleavedBufferAttribute){var z=t.data,F=z.stride;t=t.offset;z&&z.isInstancedInterleavedBuffer?(aa.enableAttributeAndDivisor(p,z.meshPerAttribute),void 0===d.maxInstancedCount&&(d.maxInstancedCount=z.meshPerAttribute*z.count)):aa.enableAttribute(p);K.bindBuffer(34962,w);K.vertexAttribPointer(p,v,x,n,F*y,t*y)}else t.isInstancedBufferAttribute?(aa.enableAttributeAndDivisor(p,t.meshPerAttribute),void 0===d.maxInstancedCount&&(d.maxInstancedCount=t.meshPerAttribute*t.count)):
aa.enableAttribute(p),K.bindBuffer(34962,w),K.vertexAttribPointer(p,v,x,n,0,0)}}else if("instanceMatrix"===I)y=ra.get(f.instanceMatrix),void 0!==y&&(w=y.buffer,x=y.type,aa.enableAttributeAndDivisor(p+0,1),aa.enableAttributeAndDivisor(p+1,1),aa.enableAttributeAndDivisor(p+2,1),aa.enableAttributeAndDivisor(p+3,1),K.bindBuffer(34962,w),K.vertexAttribPointer(p+0,4,x,!1,64,0),K.vertexAttribPointer(p+1,4,x,!1,64,16),K.vertexAttribPointer(p+2,4,x,!1,64,32),K.vertexAttribPointer(p+3,4,x,!1,64,48));else if(void 0!==
u&&(n=u[I],void 0!==n))switch(n.length){case 2:K.vertexAttrib2fv(p,n);break;case 3:K.vertexAttrib3fv(p,n);break;case 4:K.vertexAttrib4fv(p,n);break;default:K.vertexAttrib1fv(p,n)}}}aa.disableUnusedAttributes()}null!==h&&K.bindBuffer(34963,q.buffer)}q=Infinity;null!==h?q=h.count:void 0!==r&&(q=r.count);h=d.drawRange.start*c;r=null!==g?g.start*c:0;var I=Math.max(h,r);g=Math.max(0,Math.min(q,h+d.drawRange.count*c,r+(null!==g?g.count*c:Infinity))-1-I+1);if(0!==g){if(f.isMesh)if(!0===e.wireframe)aa.setLineWidth(e.wireframeLinewidth*
(null===R?fa:1)),a.setMode(1);else switch(f.drawMode){case 0:a.setMode(4);break;case 1:a.setMode(5);break;case 2:a.setMode(6)}else f.isLine?(e=e.linewidth,void 0===e&&(e=1),aa.setLineWidth(e*(null===R?fa:1)),f.isLineSegments?a.setMode(1):f.isLineLoop?a.setMode(2):a.setMode(3)):f.isPoints?a.setMode(0):f.isSprite&&a.setMode(4);f.isInstancedMesh?a.renderInstances(d,I,g,f.count):d.isInstancedBufferGeometry?a.renderInstances(d,I,g,d.maxInstancedCount):a.render(I,g)}};this.compile=function(a,b){C=va.get(a,
b);C.init();a.traverse(function(a){a.isLight&&(C.pushLight(a),a.castShadow&&C.pushShadow(a))});C.setupLights(b);a.traverse(function(b){if(b.material)if(Array.isArray(b.material))for(var c=0;c<b.material.length;c++)q(b.material[c],a.fog,b);else q(b.material,a.fog,b)})};var Da=null,za=new ag;za.setAnimationLoop(function(a){ja.isPresenting()||Da&&Da(a)});"undefined"!==typeof window&&za.setContext(window);this.setAnimationLoop=function(a){Da=a;ja.setAnimationLoop(a);za.start()};this.render=function(a,
c,d,e){if(void 0!==d){console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");var f=d}if(void 0!==e){console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");var g=e}c&&c.isCamera?N||(Je=b=null,Y=!1,ha=-1,X=null,!0===a.autoUpdate&&a.updateMatrixWorld(),null===c.parent&&c.updateMatrixWorld(),ja.enabled&&(c=ja.getCamera(c)),C=va.get(a,c),C.init(),a.onBeforeRender(G,a,c,f||R),Id.multiplyMatrices(c.projectionMatrix,
c.matrixWorldInverse),eg.setFromMatrix(Id),ta=this.localClippingEnabled,He=Pa.init(this.clippingPlanes,ta,c),H=wa.get(a,c),H.init(),l(a,c,0,G.sortObjects),!0===G.sortObjects&&H.sort(),He&&Pa.beginShadows(),Ea.render(C.state.shadowsArray,a,c),C.setupLights(c),He&&Pa.endShadows(),this.info.autoReset&&this.info.reset(),void 0!==f&&this.setRenderTarget(f),ja.enabled&&ua.isAvailable()&&ua.attachCamera(c),ma.render(H,a,c,g),d=H.opaque,e=H.transparent,a.overrideMaterial?(f=a.overrideMaterial,d.length&&m(d,
a,c,f),e.length&&m(e,a,c,f)):(d.length&&m(d,a,c),e.length&&m(e,a,c)),a.onAfterRender(G,a,c),null!==R&&(ba.updateRenderTargetMipmap(R),ba.updateMultisampleRenderTarget(R)),aa.buffers.depth.setTest(!0),aa.buffers.depth.setMask(!0),aa.buffers.color.setMask(!0),aa.setPolygonOffset(!1),ja.enabled&&(ua.isAvailable()&&ua.detachCamera(c),ja.submitFrame()),C=H=null):console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")};this.setFramebuffer=function(a){O!==a&&null===R&&K.bindFramebuffer(36160,
a);O=a};this.getActiveCubeFace=function(){return S};this.getActiveMipmapLevel=function(){return V};this.getRenderTarget=function(){return R};this.setRenderTarget=function(a,b,c){R=a;S=b;V=c;a&&void 0===Z.get(a).__webglFramebuffer&&ba.setupRenderTarget(a);var d=O,e=!1;a?(d=Z.get(a).__webglFramebuffer,a.isWebGLRenderTargetCube?(d=d[b||0],e=!0):d=a.isWebGLMultisampleRenderTarget?Z.get(a).__webglMultisampledFramebuffer:d,T.copy(a.viewport),ob.copy(a.scissor),ka=a.scissorTest):(T.copy(ea).multiplyScalar(fa).floor(),
ob.copy(U).multiplyScalar(fa).floor(),ka=na);Ie!==d&&(K.bindFramebuffer(36160,d),Ie=d);aa.viewport(T);aa.scissor(ob);aa.setScissorTest(ka);e&&(a=Z.get(a.texture),K.framebufferTexture2D(36160,36064,34069+(b||0),a.__webglTexture,c||0))};this.readRenderTargetPixels=function(a,b,c,d,e,f,g){if(a&&a.isWebGLRenderTarget){var h=Z.get(a).__webglFramebuffer;a.isWebGLRenderTargetCube&&void 0!==g&&(h=h[g]);if(h){g=!1;h!==Ie&&(K.bindFramebuffer(36160,h),g=!0);try{var l=a.texture,m=l.format,r=l.type;1023!==m&&
pa.convert(m)!==K.getParameter(35739)?console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format."):1009===r||pa.convert(r)===K.getParameter(35738)||1015===r&&(Fa.isWebGL2||qa.get("OES_texture_float")||qa.get("WEBGL_color_buffer_float"))||1016===r&&(Fa.isWebGL2?qa.get("EXT_color_buffer_float"):qa.get("EXT_color_buffer_half_float"))?36053===K.checkFramebufferStatus(36160)?0<=b&&b<=a.width-d&&0<=c&&c<=a.height-e&&K.readPixels(b,c,d,e,pa.convert(m),
pa.convert(r),f):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete."):console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.")}finally{g&&K.bindFramebuffer(36160,Ie)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")};this.copyFramebufferToTexture=function(a,b,c){void 0===c&&(c=0);var d=Math.pow(2,
-c),e=Math.floor(b.image.width*d);d=Math.floor(b.image.height*d);var f=pa.convert(b.format);ba.setTexture2D(b,0);K.copyTexImage2D(3553,c,f,a.x,a.y,e,d,0);aa.unbindTexture()};this.copyTextureToTexture=function(a,b,c,d){var e=b.image.width,f=b.image.height,g=pa.convert(c.format),h=pa.convert(c.type);ba.setTexture2D(c,0);b.isDataTexture?K.texSubImage2D(3553,d||0,a.x,a.y,e,f,g,h,b.image.data):K.texSubImage2D(3553,d||0,a.x,a.y,g,h,b.image);aa.unbindTexture()};this.initTexture=function(a){ba.setTexture2D(a,
0);aa.unbindTexture()};"undefined"!==typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function Le(a,b){this.name="";this.color=new J(a);this.density=void 0!==b?b:2.5E-4}function Me(a,b,c){this.name="";this.color=new J(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3}function pb(a,b){this.array=a;this.stride=b;this.count=void 0!==a?a.length/b:0;this.usage=35044;this.updateRange={offset:0,count:-1};this.version=0}function Kd(a,b,c,d){this.data=
a;this.itemSize=b;this.offset=c;this.normalized=!0===d}function Gb(a){O.call(this);this.type="SpriteMaterial";this.color=new J(16777215);this.alphaMap=this.map=null;this.rotation=0;this.transparent=this.sizeAttenuation=!0;this.setValues(a)}function Ld(a){E.call(this);this.type="Sprite";if(void 0===Hc){Hc=new D;var b=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]);b=new pb(b,5);Hc.setIndex([0,1,2,0,2,3]);Hc.setAttribute("position",new Kd(b,3,0,!1));Hc.setAttribute("uv",new Kd(b,
2,3,!1))}this.geometry=Hc;this.material=void 0!==a?a:new Gb;this.center=new B(.5,.5)}function Ne(a,b,c,d,e,f){Ic.subVectors(a,c).addScalar(.5).multiply(d);void 0!==e?(Md.x=f*Ic.x-e*Ic.y,Md.y=e*Ic.x+f*Ic.y):Md.copy(Ic);a.copy(b);a.x+=Md.x;a.y+=Md.y;a.applyMatrix4(Qh)}function Nd(){E.call(this);this.type="LOD";Object.defineProperties(this,{levels:{enumerable:!0,value:[]}});this.autoUpdate=!0}function Od(a,b){a&&a.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
ea.call(this,a,b);this.type="SkinnedMesh";this.bindMode="attached";this.bindMatrix=new Q;this.bindMatrixInverse=new Q}function Oe(a,b){a=a||[];this.bones=a.slice(0);this.boneMatrices=new Float32Array(16*this.bones.length);this.frame=-1;if(void 0===b)this.calculateInverses();else if(this.bones.length===b.length)this.boneInverses=b.slice(0);else for(console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[],a=0,b=this.bones.length;a<b;a++)this.boneInverses.push(new Q)}function ig(){E.call(this);
this.type="Bone"}function Pe(a,b,c){ea.call(this,a,b);this.instanceMatrix=new N(new Float32Array(16*c),16);this.count=c}function R(a){O.call(this);this.type="LineBasicMaterial";this.color=new J(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.setValues(a)}function ra(a,b,c){1===c&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.");E.call(this);this.type="Line";this.geometry=void 0!==a?a:new D;this.material=void 0!==b?b:new R({color:16777215*
Math.random()})}function X(a,b){ra.call(this,a,b);this.type="LineSegments"}function Qe(a,b){ra.call(this,a,b);this.type="LineLoop"}function Qa(a){O.call(this);this.type="PointsMaterial";this.color=new J(16777215);this.alphaMap=this.map=null;this.size=1;this.sizeAttenuation=!0;this.morphTargets=!1;this.setValues(a)}function Jc(a,b){E.call(this);this.type="Points";this.geometry=void 0!==a?a:new D;this.material=void 0!==b?b:new Qa({color:16777215*Math.random()});this.updateMorphTargets()}function jg(a,
b,c,d,e,f,g){var h=kg.distanceSqToPoint(a);h<c&&(c=new n,kg.closestPointToPoint(a,c),c.applyMatrix4(d),a=e.ray.origin.distanceTo(c),a<e.near||a>e.far||f.push({distance:a,distanceToRay:Math.sqrt(h),point:c,index:b,face:null,object:g}))}function lg(a,b,c,d,e,f,g,h,l){Y.call(this,a,b,c,d,e,f,g,h,l);this.format=void 0!==g?g:1022;this.minFilter=void 0!==f?f:1006;this.magFilter=void 0!==e?e:1006;this.generateMipmaps=!1}function Kc(a,b,c,d,e,f,g,h,l,m,r,q){Y.call(this,null,f,g,h,l,m,d,e,r,q);this.image=
{width:b,height:c};this.mipmaps=a;this.generateMipmaps=this.flipY=!1}function Pd(a,b,c,d,e,f,g,h,l){Y.call(this,a,b,c,d,e,f,g,h,l);this.needsUpdate=!0}function Qd(a,b,c,d,e,f,g,h,l,m){m=void 0!==m?m:1026;if(1026!==m&&1027!==m)throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===c&&1026===m&&(c=1012);void 0===c&&1027===m&&(c=1020);Y.call(this,null,d,e,f,g,h,m,c,l);this.image={width:a,height:b};this.magFilter=void 0!==g?g:1003;this.minFilter=void 0!==
h?h:1003;this.generateMipmaps=this.flipY=!1}function Lc(a){D.call(this);this.type="WireframeGeometry";var b=[],c,d,e,f=[0,0],g={},h=["a","b","c"];if(a&&a.isGeometry){var l=a.faces;var m=0;for(d=l.length;m<d;m++){var r=l[m];for(c=0;3>c;c++){var q=r[h[c]];var k=r[h[(c+1)%3]];f[0]=Math.min(q,k);f[1]=Math.max(q,k);q=f[0]+","+f[1];void 0===g[q]&&(g[q]={index1:f[0],index2:f[1]})}}for(q in g)m=g[q],h=a.vertices[m.index1],b.push(h.x,h.y,h.z),h=a.vertices[m.index2],b.push(h.x,h.y,h.z)}else if(a&&a.isBufferGeometry)if(h=
new n,null!==a.index){l=a.attributes.position;r=a.index;var p=a.groups;0===p.length&&(p=[{start:0,count:r.count,materialIndex:0}]);a=0;for(e=p.length;a<e;++a)for(m=p[a],c=m.start,d=m.count,m=c,d=c+d;m<d;m+=3)for(c=0;3>c;c++)q=r.getX(m+c),k=r.getX(m+(c+1)%3),f[0]=Math.min(q,k),f[1]=Math.max(q,k),q=f[0]+","+f[1],void 0===g[q]&&(g[q]={index1:f[0],index2:f[1]});for(q in g)m=g[q],h.fromBufferAttribute(l,m.index1),b.push(h.x,h.y,h.z),h.fromBufferAttribute(l,m.index2),b.push(h.x,h.y,h.z)}else for(l=a.attributes.position,
m=0,d=l.count/3;m<d;m++)for(c=0;3>c;c++)g=3*m+c,h.fromBufferAttribute(l,g),b.push(h.x,h.y,h.z),g=3*m+(c+1)%3,h.fromBufferAttribute(l,g),b.push(h.x,h.y,h.z);this.setAttribute("position",new A(b,3))}function Rd(a,b,c){G.call(this);this.type="ParametricGeometry";this.parameters={func:a,slices:b,stacks:c};this.fromBufferGeometry(new Mc(a,b,c));this.mergeVertices()}function Mc(a,b,c){D.call(this);this.type="ParametricBufferGeometry";this.parameters={func:a,slices:b,stacks:c};var d=[],e=[],f=[],g=[],h=
new n,l=new n,m=new n,r=new n,q=new n,k,p;3>a.length&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var t=b+1;for(k=0;k<=c;k++){var v=k/c;for(p=0;p<=b;p++){var y=p/b;a(y,v,l);e.push(l.x,l.y,l.z);0<=y-1E-5?(a(y-1E-5,v,m),r.subVectors(l,m)):(a(y+1E-5,v,m),r.subVectors(m,l));0<=v-1E-5?(a(y,v-1E-5,m),q.subVectors(l,m)):(a(y,v+1E-5,m),q.subVectors(m,l));h.crossVectors(r,q).normalize();f.push(h.x,h.y,h.z);g.push(y,v)}}for(k=0;k<c;k++)for(p=0;p<b;p++)a=
k*t+p+1,h=(k+1)*t+p+1,l=(k+1)*t+p,d.push(k*t+p,a,l),d.push(a,h,l);this.setIndex(d);this.setAttribute("position",new A(e,3));this.setAttribute("normal",new A(f,3));this.setAttribute("uv",new A(g,2))}function Sd(a,b,c,d){G.call(this);this.type="PolyhedronGeometry";this.parameters={vertices:a,indices:b,radius:c,detail:d};this.fromBufferGeometry(new Ea(a,b,c,d));this.mergeVertices()}function Ea(a,b,c,d){function e(a){h.push(a.x,a.y,a.z)}function f(b,c){b*=3;c.x=a[b+0];c.y=a[b+1];c.z=a[b+2]}function g(a,
b,c,d){0>d&&1===a.x&&(l[b]=a.x-1);0===c.x&&0===c.z&&(l[b]=d/2/Math.PI+.5)}D.call(this);this.type="PolyhedronBufferGeometry";this.parameters={vertices:a,indices:b,radius:c,detail:d};c=c||1;d=d||0;var h=[],l=[];(function(a){for(var c=new n,d=new n,g=new n,h=0;h<b.length;h+=3){f(b[h+0],c);f(b[h+1],d);f(b[h+2],g);var l,m,k=c,w=d,x=g,F=Math.pow(2,a),I=[];for(m=0;m<=F;m++){I[m]=[];var z=k.clone().lerp(x,m/F),B=w.clone().lerp(x,m/F),A=F-m;for(l=0;l<=A;l++)I[m][l]=0===l&&m===F?z:z.clone().lerp(B,l/A)}for(m=
0;m<F;m++)for(l=0;l<2*(F-m)-1;l++)k=Math.floor(l/2),0===l%2?(e(I[m][k+1]),e(I[m+1][k]),e(I[m][k])):(e(I[m][k+1]),e(I[m+1][k+1]),e(I[m+1][k]))}})(d);(function(a){for(var b=new n,c=0;c<h.length;c+=3)b.x=h[c+0],b.y=h[c+1],b.z=h[c+2],b.normalize().multiplyScalar(a),h[c+0]=b.x,h[c+1]=b.y,h[c+2]=b.z})(c);(function(){for(var a=new n,b=0;b<h.length;b+=3)a.x=h[b+0],a.y=h[b+1],a.z=h[b+2],l.push(Math.atan2(a.z,-a.x)/2/Math.PI+.5,1-(Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+.5));a=new n;b=new n;for(var c=
new n,d=new n,e=new B,f=new B,k=new B,y=0,w=0;y<h.length;y+=9,w+=6){a.set(h[y+0],h[y+1],h[y+2]);b.set(h[y+3],h[y+4],h[y+5]);c.set(h[y+6],h[y+7],h[y+8]);e.set(l[w+0],l[w+1]);f.set(l[w+2],l[w+3]);k.set(l[w+4],l[w+5]);d.copy(a).add(b).add(c).divideScalar(3);var x=Math.atan2(d.z,-d.x);g(e,w+0,a,x);g(f,w+2,b,x);g(k,w+4,c,x)}for(a=0;a<l.length;a+=6)b=l[a+0],c=l[a+2],d=l[a+4],e=Math.min(b,c,d),.9<Math.max(b,c,d)&&.1>e&&(.2>b&&(l[a+0]+=1),.2>c&&(l[a+2]+=1),.2>d&&(l[a+4]+=1))})();this.setAttribute("position",
new A(h,3));this.setAttribute("normal",new A(h.slice(),3));this.setAttribute("uv",new A(l,2));0===d?this.computeVertexNormals():this.normalizeNormals()}function Td(a,b){G.call(this);this.type="TetrahedronGeometry";this.parameters={radius:a,detail:b};this.fromBufferGeometry(new Nc(a,b));this.mergeVertices()}function Nc(a,b){Ea.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],a,b);this.type="TetrahedronBufferGeometry";this.parameters={radius:a,detail:b}}function Ud(a,b){G.call(this);
this.type="OctahedronGeometry";this.parameters={radius:a,detail:b};this.fromBufferGeometry(new ac(a,b));this.mergeVertices()}function ac(a,b){Ea.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],a,b);this.type="OctahedronBufferGeometry";this.parameters={radius:a,detail:b}}function Vd(a,b){G.call(this);this.type="IcosahedronGeometry";this.parameters={radius:a,detail:b};this.fromBufferGeometry(new Oc(a,b));this.mergeVertices()}function Oc(a,b){var c=
(1+Math.sqrt(5))/2;Ea.call(this,[-1,c,0,1,c,0,-1,-c,0,1,-c,0,0,-1,c,0,1,c,0,-1,-c,0,1,-c,c,0,-1,c,0,1,-c,0,-1,-c,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],a,b);this.type="IcosahedronBufferGeometry";this.parameters={radius:a,detail:b}}function Wd(a,b){G.call(this);this.type="DodecahedronGeometry";this.parameters={radius:a,detail:b};this.fromBufferGeometry(new Pc(a,b));this.mergeVertices()}function Pc(a,b){var c=
(1+Math.sqrt(5))/2,d=1/c;Ea.call(this,[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-d,-c,0,-d,c,0,d,-c,0,d,c,-d,-c,0,-d,c,0,d,-c,0,d,c,0,-c,0,-d,c,0,-d,-c,0,d,c,0,d],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],a,b);this.type="DodecahedronBufferGeometry";this.parameters=
{radius:a,detail:b}}function Xd(a,b,c,d,e,f){G.call(this);this.type="TubeGeometry";this.parameters={path:a,tubularSegments:b,radius:c,radialSegments:d,closed:e};void 0!==f&&console.warn("THREE.TubeGeometry: taper has been removed.");a=new bc(a,b,c,d,e);this.tangents=a.tangents;this.normals=a.normals;this.binormals=a.binormals;this.fromBufferGeometry(a);this.mergeVertices()}function bc(a,b,c,d,e){function f(e){r=a.getPointAt(e/b,r);var f=g.normals[e];e=g.binormals[e];for(u=0;u<=d;u++){var m=u/d*Math.PI*
2,k=Math.sin(m);m=-Math.cos(m);l.x=m*f.x+k*e.x;l.y=m*f.y+k*e.y;l.z=m*f.z+k*e.z;l.normalize();t.push(l.x,l.y,l.z);h.x=r.x+c*l.x;h.y=r.y+c*l.y;h.z=r.z+c*l.z;p.push(h.x,h.y,h.z)}}D.call(this);this.type="TubeBufferGeometry";this.parameters={path:a,tubularSegments:b,radius:c,radialSegments:d,closed:e};b=b||64;c=c||1;d=d||8;e=e||!1;var g=a.computeFrenetFrames(b,e);this.tangents=g.tangents;this.normals=g.normals;this.binormals=g.binormals;var h=new n,l=new n,m=new B,r=new n,k,u,p=[],t=[],v=[],y=[];for(k=
0;k<b;k++)f(k);f(!1===e?b:0);for(k=0;k<=b;k++)for(u=0;u<=d;u++)m.x=k/b,m.y=u/d,v.push(m.x,m.y);(function(){for(u=1;u<=b;u++)for(k=1;k<=d;k++){var a=(d+1)*u+(k-1),c=(d+1)*u+k,e=(d+1)*(u-1)+k;y.push((d+1)*(u-1)+(k-1),a,e);y.push(a,c,e)}})();this.setIndex(y);this.setAttribute("position",new A(p,3));this.setAttribute("normal",new A(t,3));this.setAttribute("uv",new A(v,2))}function Yd(a,b,c,d,e,f,g){G.call(this);this.type="TorusKnotGeometry";this.parameters={radius:a,tube:b,tubularSegments:c,radialSegments:d,
p:e,q:f};void 0!==g&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");this.fromBufferGeometry(new Qc(a,b,c,d,e,f));this.mergeVertices()}function Qc(a,b,c,d,e,f){function g(a,b,c,d,e){var f=Math.sin(a);b=c/b*a;c=Math.cos(b);e.x=d*(2+c)*.5*Math.cos(a);e.y=d*(2+c)*f*.5;e.z=d*Math.sin(b)*.5}D.call(this);this.type="TorusKnotBufferGeometry";this.parameters={radius:a,tube:b,tubularSegments:c,radialSegments:d,p:e,q:f};a=a||1;b=b||.4;c=Math.floor(c)||
64;d=Math.floor(d)||8;e=e||2;f=f||3;var h=[],l=[],m=[],r=[],k,u=new n,p=new n,t=new n,v=new n,y=new n,w=new n,x=new n;for(k=0;k<=c;++k){var F=k/c*e*Math.PI*2;g(F,e,f,a,t);g(F+.01,e,f,a,v);w.subVectors(v,t);x.addVectors(v,t);y.crossVectors(w,x);x.crossVectors(y,w);y.normalize();x.normalize();for(F=0;F<=d;++F){var I=F/d*Math.PI*2,z=-b*Math.cos(I);I=b*Math.sin(I);u.x=t.x+(z*x.x+I*y.x);u.y=t.y+(z*x.y+I*y.y);u.z=t.z+(z*x.z+I*y.z);l.push(u.x,u.y,u.z);p.subVectors(u,t).normalize();m.push(p.x,p.y,p.z);r.push(k/
c);r.push(F/d)}}for(F=1;F<=c;F++)for(k=1;k<=d;k++)a=(d+1)*F+(k-1),b=(d+1)*F+k,e=(d+1)*(F-1)+k,h.push((d+1)*(F-1)+(k-1),a,e),h.push(a,b,e);this.setIndex(h);this.setAttribute("position",new A(l,3));this.setAttribute("normal",new A(m,3));this.setAttribute("uv",new A(r,2))}function Zd(a,b,c,d,e){G.call(this);this.type="TorusGeometry";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};this.fromBufferGeometry(new Rc(a,b,c,d,e));this.mergeVertices()}function Rc(a,b,c,d,e){D.call(this);
this.type="TorusBufferGeometry";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};a=a||1;b=b||.4;c=Math.floor(c)||8;d=Math.floor(d)||6;e=e||2*Math.PI;var f=[],g=[],h=[],l=[],m=new n,r=new n,k=new n,u,p;for(u=0;u<=c;u++)for(p=0;p<=d;p++){var t=p/d*e,v=u/c*Math.PI*2;r.x=(a+b*Math.cos(v))*Math.cos(t);r.y=(a+b*Math.cos(v))*Math.sin(t);r.z=b*Math.sin(v);g.push(r.x,r.y,r.z);m.x=a*Math.cos(t);m.y=a*Math.sin(t);k.subVectors(r,m).normalize();h.push(k.x,k.y,k.z);l.push(p/d);l.push(u/
c)}for(u=1;u<=c;u++)for(p=1;p<=d;p++)a=(d+1)*(u-1)+p-1,b=(d+1)*(u-1)+p,e=(d+1)*u+p,f.push((d+1)*u+p-1,a,e),f.push(a,b,e);this.setIndex(f);this.setAttribute("position",new A(g,3));this.setAttribute("normal",new A(h,3));this.setAttribute("uv",new A(l,2))}function Rh(a,b,c,d,e){for(var f,g=0,h=b,l=c-d;h<c;h+=d)g+=(a[l]-a[h])*(a[h+1]+a[l+1]),l=h;if(e===0<g)for(e=b;e<c;e+=d)f=Sh(e,a[e],a[e+1],f);else for(e=c-d;e>=b;e-=d)f=Sh(e,a[e],a[e+1],f);f&&cc(f,f.next)&&($d(f),f=f.next);return f}function ae(a,b){if(!a)return a;
b||(b=a);do{var c=!1;if(a.steiner||!cc(a,a.next)&&0!==xa(a.prev,a,a.next))a=a.next;else{$d(a);a=b=a.prev;if(a===a.next)break;c=!0}}while(c||a!==b);return b}function be(a,b,c,d,e,f,g){if(a){if(!g&&f){var h=a,l=h;do null===l.z&&(l.z=mg(l.x,l.y,d,e,f)),l.prevZ=l.prev,l=l.nextZ=l.next;while(l!==h);l.prevZ.nextZ=null;l.prevZ=null;h=l;var m,r,k,u,p=1;do{l=h;var t=h=null;for(r=0;l;){r++;var n=l;for(m=k=0;m<p&&(k++,n=n.nextZ,n);m++);for(u=p;0<k||0<u&&n;)0!==k&&(0===u||!n||l.z<=n.z)?(m=l,l=l.nextZ,k--):(m=
n,n=n.nextZ,u--),t?t.nextZ=m:h=m,m.prevZ=t,t=m;l=n}t.nextZ=null;p*=2}while(1<r)}for(h=a;a.prev!==a.next;){l=a.prev;n=a.next;if(f)t=mk(a,d,e,f);else a:if(t=a,r=t.prev,k=t,p=t.next,0<=xa(r,k,p))t=!1;else{for(m=t.next.next;m!==t.prev;){if(Sc(r.x,r.y,k.x,k.y,p.x,p.y,m.x,m.y)&&0<=xa(m.prev,m,m.next)){t=!1;break a}m=m.next}t=!0}if(t)b.push(l.i/c),b.push(a.i/c),b.push(n.i/c),$d(a),h=a=n.next;else if(a=n,a===h){if(!g)be(ae(a),b,c,d,e,f,1);else if(1===g){g=b;h=c;l=a;do n=l.prev,t=l.next.next,!cc(n,t)&&Th(n,
l,l.next,t)&&ce(n,t)&&ce(t,n)&&(g.push(n.i/h),g.push(l.i/h),g.push(t.i/h),$d(l),$d(l.next),l=a=t),l=l.next;while(l!==a);a=l;be(a,b,c,d,e,f,2)}else if(2===g)a:{g=a;do{for(h=g.next.next;h!==g.prev;){if(l=g.i!==h.i){l=g;n=h;if(t=l.next.i!==n.i&&l.prev.i!==n.i){b:{t=l;do{if(t.i!==l.i&&t.next.i!==l.i&&t.i!==n.i&&t.next.i!==n.i&&Th(t,t.next,l,n)){t=!0;break b}t=t.next}while(t!==l);t=!1}t=!t}if(t=t&&ce(l,n)&&ce(n,l)){t=l;r=!1;k=(l.x+n.x)/2;n=(l.y+n.y)/2;do t.y>n!==t.next.y>n&&t.next.y!==t.y&&k<(t.next.x-
t.x)*(n-t.y)/(t.next.y-t.y)+t.x&&(r=!r),t=t.next;while(t!==l);t=r}l=t}if(l){a=Uh(g,h);g=ae(g,g.next);a=ae(a,a.next);be(g,b,c,d,e,f);be(a,b,c,d,e,f);break a}h=h.next}g=g.next}while(g!==a)}break}}}}function mk(a,b,c,d){var e=a.prev,f=a.next;if(0<=xa(e,a,f))return!1;var g=e.x>a.x?e.x>f.x?e.x:f.x:a.x>f.x?a.x:f.x,h=e.y>a.y?e.y>f.y?e.y:f.y:a.y>f.y?a.y:f.y,l=mg(e.x<a.x?e.x<f.x?e.x:f.x:a.x<f.x?a.x:f.x,e.y<a.y?e.y<f.y?e.y:f.y:a.y<f.y?a.y:f.y,b,c,d);b=mg(g,h,b,c,d);c=a.prevZ;for(d=a.nextZ;c&&c.z>=l&&d&&d.z<=
b;){if(c!==a.prev&&c!==a.next&&Sc(e.x,e.y,a.x,a.y,f.x,f.y,c.x,c.y)&&0<=xa(c.prev,c,c.next))return!1;c=c.prevZ;if(d!==a.prev&&d!==a.next&&Sc(e.x,e.y,a.x,a.y,f.x,f.y,d.x,d.y)&&0<=xa(d.prev,d,d.next))return!1;d=d.nextZ}for(;c&&c.z>=l;){if(c!==a.prev&&c!==a.next&&Sc(e.x,e.y,a.x,a.y,f.x,f.y,c.x,c.y)&&0<=xa(c.prev,c,c.next))return!1;c=c.prevZ}for(;d&&d.z<=b;){if(d!==a.prev&&d!==a.next&&Sc(e.x,e.y,a.x,a.y,f.x,f.y,d.x,d.y)&&0<=xa(d.prev,d,d.next))return!1;d=d.nextZ}return!0}function nk(a,b){return a.x-b.x}
function ok(a,b){var c=b,d=a.x,e=a.y,f=-Infinity;do{if(e<=c.y&&e>=c.next.y&&c.next.y!==c.y){var g=c.x+(e-c.y)*(c.next.x-c.x)/(c.next.y-c.y);if(g<=d&&g>f){f=g;if(g===d){if(e===c.y)return c;if(e===c.next.y)return c.next}var h=c.x<c.next.x?c:c.next}}c=c.next}while(c!==b);if(!h)return null;if(d===f)return h.prev;b=h;g=h.x;var l=h.y,m=Infinity;for(c=h.next;c!==b;){if(d>=c.x&&c.x>=g&&d!==c.x&&Sc(e<l?d:f,e,g,l,e<l?f:d,e,c.x,c.y)){var r=Math.abs(e-c.y)/(d-c.x);(r<m||r===m&&c.x>h.x)&&ce(c,a)&&(h=c,m=r)}c=
c.next}return h}function mg(a,b,c,d,e){a=32767*(a-c)*e;b=32767*(b-d)*e;a=(a|a<<8)&16711935;a=(a|a<<4)&252645135;a=(a|a<<2)&858993459;b=(b|b<<8)&16711935;b=(b|b<<4)&252645135;b=(b|b<<2)&858993459;return(a|a<<1)&1431655765|((b|b<<1)&1431655765)<<1}function pk(a){var b=a,c=a;do{if(b.x<c.x||b.x===c.x&&b.y<c.y)c=b;b=b.next}while(b!==a);return c}function Sc(a,b,c,d,e,f,g,h){return 0<=(e-g)*(b-h)-(a-g)*(f-h)&&0<=(a-g)*(d-h)-(c-g)*(b-h)&&0<=(c-g)*(f-h)-(e-g)*(d-h)}function xa(a,b,c){return(b.y-a.y)*(c.x-
b.x)-(b.x-a.x)*(c.y-b.y)}function cc(a,b){return a.x===b.x&&a.y===b.y}function Th(a,b,c,d){return cc(a,c)&&cc(b,d)||cc(a,d)&&cc(c,b)?!0:0<xa(a,b,c)!==0<xa(a,b,d)&&0<xa(c,d,a)!==0<xa(c,d,b)}function ce(a,b){return 0>xa(a.prev,a,a.next)?0<=xa(a,b,a.next)&&0<=xa(a,a.prev,b):0>xa(a,b,a.prev)||0>xa(a,a.next,b)}function Uh(a,b){var c=new ng(a.i,a.x,a.y),d=new ng(b.i,b.x,b.y),e=a.next,f=b.prev;a.next=b;b.prev=a;c.next=e;e.prev=c;d.next=c;c.prev=d;f.next=d;d.prev=f;return d}function Sh(a,b,c,d){a=new ng(a,
b,c);d?(a.next=d.next,a.prev=d,d.next.prev=a,d.next=a):(a.prev=a,a.next=a);return a}function $d(a){a.next.prev=a.prev;a.prev.next=a.next;a.prevZ&&(a.prevZ.nextZ=a.nextZ);a.nextZ&&(a.nextZ.prevZ=a.prevZ)}function ng(a,b,c){this.i=a;this.x=b;this.y=c;this.nextZ=this.prevZ=this.z=this.next=this.prev=null;this.steiner=!1}function Vh(a){var b=a.length;2<b&&a[b-1].equals(a[0])&&a.pop()}function Wh(a,b){for(var c=0;c<b.length;c++)a.push(b[c].x),a.push(b[c].y)}function dc(a,b){G.call(this);this.type="ExtrudeGeometry";
this.parameters={shapes:a,options:b};this.fromBufferGeometry(new db(a,b));this.mergeVertices()}function db(a,b){function c(a){function c(a,b,c){b||console.error("THREE.ExtrudeGeometry: vec does not exist");return b.clone().multiplyScalar(c).add(a)}function g(a,b,c){var d=a.x-b.x;var e=a.y-b.y;var f=c.x-a.x;var g=c.y-a.y,h=d*d+e*e;if(Math.abs(d*g-e*f)>Number.EPSILON){var l=Math.sqrt(h),m=Math.sqrt(f*f+g*g);h=b.x-e/l;b=b.y+d/l;g=((c.x-g/m-h)*g-(c.y+f/m-b)*f)/(d*g-e*f);f=h+d*g-a.x;d=b+e*g-a.y;e=f*f+
d*d;if(2>=e)return new B(f,d);e=Math.sqrt(e/2)}else a=!1,d>Number.EPSILON?f>Number.EPSILON&&(a=!0):d<-Number.EPSILON?f<-Number.EPSILON&&(a=!0):Math.sign(e)===Math.sign(g)&&(a=!0),a?(f=-e,e=Math.sqrt(h)):(f=d,d=e,e=Math.sqrt(h/2));return new B(f/e,d/e)}function h(a,b){for(M=a.length;0<=--M;){var c=M;var f=M-1;0>f&&(f=a.length-1);var g,h=x+2*E;for(g=0;g<h;g++){var l=Y*g,m=Y*(g+1),r=b+f+l,k=b+f+m;m=b+c+m;t(b+c+l);t(r);t(m);t(r);t(k);t(m);l=e.length/3;l=H.generateSideWallUV(d,e,l-6,l-3,l-2,l-1);v(l[0]);
v(l[1]);v(l[3]);v(l[1]);v(l[2]);v(l[3])}}}function l(a,b,c){y.push(a);y.push(b);y.push(c)}function k(a,b,c){t(a);t(b);t(c);a=e.length/3;a=H.generateTopUV(d,e,a-3,a-2,a-1);v(a[0]);v(a[1]);v(a[2])}function t(a){e.push(y[3*a]);e.push(y[3*a+1]);e.push(y[3*a+2])}function v(a){f.push(a.x);f.push(a.y)}var y=[],w=void 0!==b.curveSegments?b.curveSegments:12,x=void 0!==b.steps?b.steps:1,F=void 0!==b.depth?b.depth:100,I=void 0!==b.bevelEnabled?b.bevelEnabled:!0,z=void 0!==b.bevelThickness?b.bevelThickness:6,
A=void 0!==b.bevelSize?b.bevelSize:z-2,G=void 0!==b.bevelOffset?b.bevelOffset:0,E=void 0!==b.bevelSegments?b.bevelSegments:3,C=b.extrudePath,H=void 0!==b.UVGenerator?b.UVGenerator:qk;void 0!==b.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),F=b.amount);var D=!1;if(C){var J=C.getSpacedPoints(x);D=!0;I=!1;var L=C.computeFrenetFrames(x,!1);var N=new n;var O=new n;var P=new n}I||(G=A=z=E=0);var Q;w=a.extractPoints(w);a=w.shape;var S=w.holes;if(!qb.isClockWise(a)){a=
a.reverse();var ha=0;for(Q=S.length;ha<Q;ha++){var R=S[ha];qb.isClockWise(R)&&(S[ha]=R.reverse())}}var Z=qb.triangulateShape(a,S),X=a;ha=0;for(Q=S.length;ha<Q;ha++)R=S[ha],a=a.concat(R);var T,Y=a.length,V,ca=Z.length;w=[];var M=0;var W=X.length;var fa=W-1;for(T=M+1;M<W;M++,fa++,T++)fa===W&&(fa=0),T===W&&(T=0),w[M]=g(X[M],X[fa],X[T]);C=[];var da=w.concat();ha=0;for(Q=S.length;ha<Q;ha++){R=S[ha];var ba=[];M=0;W=R.length;fa=W-1;for(T=M+1;M<W;M++,fa++,T++)fa===W&&(fa=0),T===W&&(T=0),ba[M]=g(R[M],R[fa],
R[T]);C.push(ba);da=da.concat(ba)}for(fa=0;fa<E;fa++){W=fa/E;var ea=z*Math.cos(W*Math.PI/2);T=A*Math.sin(W*Math.PI/2)+G;M=0;for(W=X.length;M<W;M++){var U=c(X[M],w[M],T);l(U.x,U.y,-ea)}ha=0;for(Q=S.length;ha<Q;ha++)for(R=S[ha],ba=C[ha],M=0,W=R.length;M<W;M++)U=c(R[M],ba[M],T),l(U.x,U.y,-ea)}T=A+G;for(M=0;M<Y;M++)U=I?c(a[M],da[M],T):a[M],D?(O.copy(L.normals[0]).multiplyScalar(U.x),N.copy(L.binormals[0]).multiplyScalar(U.y),P.copy(J[0]).add(O).add(N),l(P.x,P.y,P.z)):l(U.x,U.y,0);for(W=1;W<=x;W++)for(M=
0;M<Y;M++)U=I?c(a[M],da[M],T):a[M],D?(O.copy(L.normals[W]).multiplyScalar(U.x),N.copy(L.binormals[W]).multiplyScalar(U.y),P.copy(J[W]).add(O).add(N),l(P.x,P.y,P.z)):l(U.x,U.y,F/x*W);for(fa=E-1;0<=fa;fa--){W=fa/E;ea=z*Math.cos(W*Math.PI/2);T=A*Math.sin(W*Math.PI/2)+G;M=0;for(W=X.length;M<W;M++)U=c(X[M],w[M],T),l(U.x,U.y,F+ea);ha=0;for(Q=S.length;ha<Q;ha++)for(R=S[ha],ba=C[ha],M=0,W=R.length;M<W;M++)U=c(R[M],ba[M],T),D?l(U.x,U.y+J[x-1].y,J[x-1].x+ea):l(U.x,U.y,F+ea)}(function(){var a=e.length/3;if(I){var b=
0*Y;for(M=0;M<ca;M++)V=Z[M],k(V[2]+b,V[1]+b,V[0]+b);b=Y*(x+2*E);for(M=0;M<ca;M++)V=Z[M],k(V[0]+b,V[1]+b,V[2]+b)}else{for(M=0;M<ca;M++)V=Z[M],k(V[2],V[1],V[0]);for(M=0;M<ca;M++)V=Z[M],k(V[0]+Y*x,V[1]+Y*x,V[2]+Y*x)}d.addGroup(a,e.length/3-a,0)})();(function(){var a=e.length/3,b=0;h(X,b);b+=X.length;ha=0;for(Q=S.length;ha<Q;ha++)R=S[ha],h(R,b),b+=R.length;d.addGroup(a,e.length/3-a,1)})()}D.call(this);this.type="ExtrudeBufferGeometry";this.parameters={shapes:a,options:b};a=Array.isArray(a)?a:[a];for(var d=
this,e=[],f=[],g=0,h=a.length;g<h;g++)c(a[g]);this.setAttribute("position",new A(e,3));this.setAttribute("uv",new A(f,2));this.computeVertexNormals()}function Xh(a,b,c){c.shapes=[];if(Array.isArray(a))for(var d=0,e=a.length;d<e;d++)c.shapes.push(a[d].uuid);else c.shapes.push(a.uuid);void 0!==b.extrudePath&&(c.options.extrudePath=b.extrudePath.toJSON());return c}function de(a,b){G.call(this);this.type="TextGeometry";this.parameters={text:a,parameters:b};this.fromBufferGeometry(new Tc(a,b));this.mergeVertices()}
function Tc(a,b){b=b||{};var c=b.font;if(!c||!c.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new G;a=c.generateShapes(a,b.size);b.depth=void 0!==b.height?b.height:50;void 0===b.bevelThickness&&(b.bevelThickness=10);void 0===b.bevelSize&&(b.bevelSize=8);void 0===b.bevelEnabled&&(b.bevelEnabled=!1);db.call(this,a,b);this.type="TextBufferGeometry"}function ee(a,b,c,d,e,f,g){G.call(this);this.type="SphereGeometry";this.parameters={radius:a,widthSegments:b,
heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};this.fromBufferGeometry(new Hb(a,b,c,d,e,f,g));this.mergeVertices()}function Hb(a,b,c,d,e,f,g){D.call(this);this.type="SphereBufferGeometry";this.parameters={radius:a,widthSegments:b,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};a=a||1;b=Math.max(3,Math.floor(b)||8);c=Math.max(2,Math.floor(c)||6);d=void 0!==d?d:0;e=void 0!==e?e:2*Math.PI;f=void 0!==f?f:0;g=void 0!==g?g:Math.PI;var h=Math.min(f+g,Math.PI),l,m,
r=0,k=[],u=new n,p=new n,t=[],v=[],y=[],w=[];for(m=0;m<=c;m++){var x=[],F=m/c,I=0;0==m&&0==f?I=.5/b:m==c&&h==Math.PI&&(I=-.5/b);for(l=0;l<=b;l++){var z=l/b;u.x=-a*Math.cos(d+z*e)*Math.sin(f+F*g);u.y=a*Math.cos(f+F*g);u.z=a*Math.sin(d+z*e)*Math.sin(f+F*g);v.push(u.x,u.y,u.z);p.copy(u).normalize();y.push(p.x,p.y,p.z);w.push(z+I,1-F);x.push(r++)}k.push(x)}for(m=0;m<c;m++)for(l=0;l<b;l++)a=k[m][l+1],d=k[m][l],e=k[m+1][l],g=k[m+1][l+1],(0!==m||0<f)&&t.push(a,d,g),(m!==c-1||h<Math.PI)&&t.push(d,e,g);this.setIndex(t);
this.setAttribute("position",new A(v,3));this.setAttribute("normal",new A(y,3));this.setAttribute("uv",new A(w,2))}function fe(a,b,c,d,e,f){G.call(this);this.type="RingGeometry";this.parameters={innerRadius:a,outerRadius:b,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f};this.fromBufferGeometry(new Uc(a,b,c,d,e,f));this.mergeVertices()}function Uc(a,b,c,d,e,f){D.call(this);this.type="RingBufferGeometry";this.parameters={innerRadius:a,outerRadius:b,thetaSegments:c,phiSegments:d,thetaStart:e,
thetaLength:f};a=a||.5;b=b||1;e=void 0!==e?e:0;f=void 0!==f?f:2*Math.PI;c=void 0!==c?Math.max(3,c):8;d=void 0!==d?Math.max(1,d):1;var g=[],h=[],l=[],m=[],r=a,k=(b-a)/d,u=new n,p=new B,t,v;for(t=0;t<=d;t++){for(v=0;v<=c;v++)a=e+v/c*f,u.x=r*Math.cos(a),u.y=r*Math.sin(a),h.push(u.x,u.y,u.z),l.push(0,0,1),p.x=(u.x/b+1)/2,p.y=(u.y/b+1)/2,m.push(p.x,p.y);r+=k}for(t=0;t<d;t++)for(b=t*(c+1),v=0;v<c;v++)a=v+b,e=a+c+1,f=a+c+2,r=a+1,g.push(a,e,r),g.push(e,f,r);this.setIndex(g);this.setAttribute("position",new A(h,
3));this.setAttribute("normal",new A(l,3));this.setAttribute("uv",new A(m,2))}function ge(a,b,c,d){G.call(this);this.type="LatheGeometry";this.parameters={points:a,segments:b,phiStart:c,phiLength:d};this.fromBufferGeometry(new Vc(a,b,c,d));this.mergeVertices()}function Vc(a,b,c,d){D.call(this);this.type="LatheBufferGeometry";this.parameters={points:a,segments:b,phiStart:c,phiLength:d};b=Math.floor(b)||12;c=c||0;d=d||2*Math.PI;d=P.clamp(d,0,2*Math.PI);var e=[],f=[],g=[],h=1/b,l=new n,m=new B,r;for(r=
0;r<=b;r++){var k=c+r*h*d;var u=Math.sin(k),p=Math.cos(k);for(k=0;k<=a.length-1;k++)l.x=a[k].x*u,l.y=a[k].y,l.z=a[k].x*p,f.push(l.x,l.y,l.z),m.x=r/b,m.y=k/(a.length-1),g.push(m.x,m.y)}for(r=0;r<b;r++)for(k=0;k<a.length-1;k++)c=k+r*a.length,h=c+a.length,l=c+a.length+1,m=c+1,e.push(c,h,m),e.push(h,l,m);this.setIndex(e);this.setAttribute("position",new A(f,3));this.setAttribute("uv",new A(g,2));this.computeVertexNormals();if(d===2*Math.PI)for(d=this.attributes.normal.array,e=new n,f=new n,g=new n,c=
b*a.length*3,k=r=0;r<a.length;r++,k+=3)e.x=d[k+0],e.y=d[k+1],e.z=d[k+2],f.x=d[c+k+0],f.y=d[c+k+1],f.z=d[c+k+2],g.addVectors(e,f).normalize(),d[k+0]=d[c+k+0]=g.x,d[k+1]=d[c+k+1]=g.y,d[k+2]=d[c+k+2]=g.z}function ec(a,b){G.call(this);this.type="ShapeGeometry";"object"===typeof b&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),b=b.curveSegments);this.parameters={shapes:a,curveSegments:b};this.fromBufferGeometry(new fc(a,b));this.mergeVertices()}function fc(a,b){function c(a){var c,
h=e.length/3;a=a.extractPoints(b);var m=a.shape,k=a.holes;!1===qb.isClockWise(m)&&(m=m.reverse());a=0;for(c=k.length;a<c;a++){var r=k[a];!0===qb.isClockWise(r)&&(k[a]=r.reverse())}var n=qb.triangulateShape(m,k);a=0;for(c=k.length;a<c;a++)r=k[a],m=m.concat(r);a=0;for(c=m.length;a<c;a++)r=m[a],e.push(r.x,r.y,0),f.push(0,0,1),g.push(r.x,r.y);a=0;for(c=n.length;a<c;a++)m=n[a],d.push(m[0]+h,m[1]+h,m[2]+h),l+=3}D.call(this);this.type="ShapeBufferGeometry";this.parameters={shapes:a,curveSegments:b};b=b||
12;var d=[],e=[],f=[],g=[],h=0,l=0;if(!1===Array.isArray(a))c(a);else for(var m=0;m<a.length;m++)c(a[m]),this.addGroup(h,l,m),h+=l,l=0;this.setIndex(d);this.setAttribute("position",new A(e,3));this.setAttribute("normal",new A(f,3));this.setAttribute("uv",new A(g,2))}function Yh(a,b){b.shapes=[];if(Array.isArray(a))for(var c=0,d=a.length;c<d;c++)b.shapes.push(a[c].uuid);else b.shapes.push(a.uuid);return b}function Wc(a,b){D.call(this);this.type="EdgesGeometry";this.parameters={thresholdAngle:b};var c=
[];b=Math.cos(P.DEG2RAD*(void 0!==b?b:1));var d=[0,0],e={},f=["a","b","c"];if(a.isBufferGeometry){var g=new G;g.fromBufferGeometry(a)}else g=a.clone();g.mergeVertices();g.computeFaceNormals();a=g.vertices;g=g.faces;for(var h=0,l=g.length;h<l;h++)for(var m=g[h],k=0;3>k;k++){var q=m[f[k]];var n=m[f[(k+1)%3]];d[0]=Math.min(q,n);d[1]=Math.max(q,n);q=d[0]+","+d[1];void 0===e[q]?e[q]={index1:d[0],index2:d[1],face1:h,face2:void 0}:e[q].face2=h}for(q in e)if(d=e[q],void 0===d.face2||g[d.face1].normal.dot(g[d.face2].normal)<=
b)f=a[d.index1],c.push(f.x,f.y,f.z),f=a[d.index2],c.push(f.x,f.y,f.z);this.setAttribute("position",new A(c,3))}function gc(a,b,c,d,e,f,g,h){G.call(this);this.type="CylinderGeometry";this.parameters={radiusTop:a,radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h};this.fromBufferGeometry(new rb(a,b,c,d,e,f,g,h));this.mergeVertices()}function rb(a,b,c,d,e,f,g,h){function l(c){var e,f=new B,l=new n,r=0,v=!0===c?a:b,x=!0===c?1:-1;var A=t;for(e=1;e<=d;e++)q.push(0,
y*x,0),u.push(0,x,0),p.push(.5,.5),t++;var H=t;for(e=0;e<=d;e++){var E=e/d*h+g,C=Math.cos(E);E=Math.sin(E);l.x=v*E;l.y=y*x;l.z=v*C;q.push(l.x,l.y,l.z);u.push(0,x,0);f.x=.5*C+.5;f.y=.5*E*x+.5;p.push(f.x,f.y);t++}for(e=0;e<d;e++)f=A+e,l=H+e,!0===c?k.push(l,l+1,f):k.push(l+1,l,f),r+=3;m.addGroup(w,r,!0===c?1:2);w+=r}D.call(this);this.type="CylinderBufferGeometry";this.parameters={radiusTop:a,radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h};var m=this;
a=void 0!==a?a:1;b=void 0!==b?b:1;c=c||1;d=Math.floor(d)||8;e=Math.floor(e)||1;f=void 0!==f?f:!1;g=void 0!==g?g:0;h=void 0!==h?h:2*Math.PI;var k=[],q=[],u=[],p=[],t=0,v=[],y=c/2,w=0;(function(){var f,l,r=new n,z=new n,B=0,A=(b-a)/c;for(l=0;l<=e;l++){var E=[],C=l/e,H=C*(b-a)+a;for(f=0;f<=d;f++){var G=f/d,D=G*h+g,J=Math.sin(D);D=Math.cos(D);z.x=H*J;z.y=-C*c+y;z.z=H*D;q.push(z.x,z.y,z.z);r.set(J,A,D).normalize();u.push(r.x,r.y,r.z);p.push(G,1-C);E.push(t++)}v.push(E)}for(f=0;f<d;f++)for(l=0;l<e;l++)r=
v[l+1][f],z=v[l+1][f+1],A=v[l][f+1],k.push(v[l][f],r,A),k.push(r,z,A),B+=6;m.addGroup(w,B,0);w+=B})();!1===f&&(0<a&&l(!0),0<b&&l(!1));this.setIndex(k);this.setAttribute("position",new A(q,3));this.setAttribute("normal",new A(u,3));this.setAttribute("uv",new A(p,2))}function he(a,b,c,d,e,f,g){gc.call(this,0,a,b,c,d,e,f,g);this.type="ConeGeometry";this.parameters={radius:a,height:b,radialSegments:c,heightSegments:d,openEnded:e,thetaStart:f,thetaLength:g}}function ie(a,b,c,d,e,f,g){rb.call(this,0,a,
b,c,d,e,f,g);this.type="ConeBufferGeometry";this.parameters={radius:a,height:b,radialSegments:c,heightSegments:d,openEnded:e,thetaStart:f,thetaLength:g}}function je(a,b,c,d){G.call(this);this.type="CircleGeometry";this.parameters={radius:a,segments:b,thetaStart:c,thetaLength:d};this.fromBufferGeometry(new Xc(a,b,c,d));this.mergeVertices()}function Xc(a,b,c,d){D.call(this);this.type="CircleBufferGeometry";this.parameters={radius:a,segments:b,thetaStart:c,thetaLength:d};a=a||1;b=void 0!==b?Math.max(3,
b):8;c=void 0!==c?c:0;d=void 0!==d?d:2*Math.PI;var e=[],f=[],g=[],h=[],l,m=new n,k=new B;f.push(0,0,0);g.push(0,0,1);h.push(.5,.5);var q=0;for(l=3;q<=b;q++,l+=3){var u=c+q/b*d;m.x=a*Math.cos(u);m.y=a*Math.sin(u);f.push(m.x,m.y,m.z);g.push(0,0,1);k.x=(f[l]/a+1)/2;k.y=(f[l+1]/a+1)/2;h.push(k.x,k.y)}for(l=1;l<=b;l++)e.push(l,l+1,0);this.setIndex(e);this.setAttribute("position",new A(f,3));this.setAttribute("normal",new A(g,3));this.setAttribute("uv",new A(h,2))}function hc(a){O.call(this);this.type=
"ShadowMaterial";this.color=new J(0);this.transparent=!0;this.setValues(a)}function Yc(a){va.call(this,a);this.type="RawShaderMaterial"}function eb(a){O.call(this);this.defines={STANDARD:""};this.type="MeshStandardMaterial";this.color=new J(16777215);this.metalness=this.roughness=.5;this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new J(0);this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=
0;this.normalScale=new B(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.envMap=this.alphaMap=this.metalnessMap=this.roughnessMap=null;this.envMapIntensity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)}function ic(a){eb.call(this);this.defines={STANDARD:"",PHYSICAL:""};this.type="MeshPhysicalMaterial";this.reflectivity=
.5;this.clearcoatRoughness=this.clearcoat=0;this.sheen=null;this.clearcoatNormalScale=new B(1,1);this.clearcoatNormalMap=null;this.transparency=0;this.setValues(a)}function Ra(a){O.call(this);this.type="MeshPhongMaterial";this.color=new J(16777215);this.specular=new J(1118481);this.shininess=30;this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new J(0);this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=
null;this.normalMapType=0;this.normalScale=new B(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.envMap=this.alphaMap=this.specularMap=null;this.combine=0;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)}function jc(a){Ra.call(this);this.defines={TOON:""};this.type="MeshToonMaterial";this.gradientMap=
null;this.setValues(a)}function kc(a){O.call(this);this.type="MeshNormalMaterial";this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=0;this.normalScale=new B(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=!1;this.wireframeLinewidth=1;this.morphNormals=this.morphTargets=this.skinning=this.fog=!1;this.setValues(a)}function lc(a){O.call(this);this.type="MeshLambertMaterial";this.color=new J(16777215);this.lightMap=this.map=null;this.lightMapIntensity=
1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new J(0);this.emissiveIntensity=1;this.envMap=this.alphaMap=this.specularMap=this.emissiveMap=null;this.combine=0;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)}function mc(a){O.call(this);this.defines={MATCAP:""};this.type="MeshMatcapMaterial";this.color=new J(16777215);this.bumpMap=
this.map=this.matcap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=0;this.normalScale=new B(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)}function nc(a){R.call(this);this.type="LineDashedMaterial";this.scale=1;this.dashSize=3;this.gapSize=1;this.setValues(a)}function Ia(a,b,c,d){this.parameterPositions=a;this._cachedIndex=0;this.resultBuffer=void 0!==d?d:new b.constructor(c);
this.sampleValues=b;this.valueSize=c}function Re(a,b,c,d){Ia.call(this,a,b,c,d);this._offsetNext=this._weightNext=this._offsetPrev=this._weightPrev=-0}function ke(a,b,c,d){Ia.call(this,a,b,c,d)}function Se(a,b,c,d){Ia.call(this,a,b,c,d)}function sa(a,b,c,d){if(void 0===a)throw Error("THREE.KeyframeTrack: track name is undefined");if(void 0===b||0===b.length)throw Error("THREE.KeyframeTrack: no keyframes in track named "+a);this.name=a;this.times=ta.convertArray(b,this.TimeBufferType);this.values=
ta.convertArray(c,this.ValueBufferType);this.setInterpolation(d||this.DefaultInterpolation)}function Te(a,b,c){sa.call(this,a,b,c)}function Ue(a,b,c,d){sa.call(this,a,b,c,d)}function Zc(a,b,c,d){sa.call(this,a,b,c,d)}function Ve(a,b,c,d){Ia.call(this,a,b,c,d)}function le(a,b,c,d){sa.call(this,a,b,c,d)}function We(a,b,c,d){sa.call(this,a,b,c,d)}function $c(a,b,c,d){sa.call(this,a,b,c,d)}function Ma(a,b,c){this.name=a;this.tracks=c;this.duration=void 0!==b?b:-1;this.uuid=P.generateUUID();0>this.duration&&
this.resetDuration()}function rk(a){switch(a.toLowerCase()){case "scalar":case "double":case "float":case "number":case "integer":return Zc;case "vector":case "vector2":case "vector3":case "vector4":return $c;case "color":return Ue;case "quaternion":return le;case "bool":case "boolean":return Te;case "string":return We}throw Error("THREE.KeyframeTrack: Unsupported typeName: "+a);}function sk(a){if(void 0===a.type)throw Error("THREE.KeyframeTrack: track type undefined, can not parse");var b=rk(a.type);
if(void 0===a.times){var c=[],d=[];ta.flattenJSON(a.keys,c,d,"value");a.times=c;a.values=d}return void 0!==b.parse?b.parse(a):new b(a.name,a.times,a.values,a.interpolation)}function og(a,b,c){var d=this,e=!1,f=0,g=0,h=void 0,l=[];this.onStart=void 0;this.onLoad=a;this.onProgress=b;this.onError=c;this.itemStart=function(a){g++;if(!1===e&&void 0!==d.onStart)d.onStart(a,f,g);e=!0};this.itemEnd=function(a){f++;if(void 0!==d.onProgress)d.onProgress(a,f,g);if(f===g&&(e=!1,void 0!==d.onLoad))d.onLoad()};
this.itemError=function(a){if(void 0!==d.onError)d.onError(a)};this.resolveURL=function(a){return h?h(a):a};this.setURLModifier=function(a){h=a;return this};this.addHandler=function(a,b){l.push(a,b);return this};this.removeHandler=function(a){a=l.indexOf(a);-1!==a&&l.splice(a,2);return this};this.getHandler=function(a){for(var b=0,c=l.length;b<c;b+=2){var d=l[b+1];if(l[b].test(a))return d}return null}}function V(a){this.manager=void 0!==a?a:Zh;this.crossOrigin="anonymous";this.resourcePath=this.path=
""}function Na(a){V.call(this,a)}function pg(a){V.call(this,a)}function qg(a){V.call(this,a)}function Xe(a){V.call(this,a)}function ad(a){V.call(this,a)}function Ye(a){V.call(this,a)}function Ze(a){V.call(this,a)}function C(){this.type="Curve";this.arcLengthDivisions=200}function Ja(a,b,c,d,e,f,g,h){C.call(this);this.type="EllipseCurve";this.aX=a||0;this.aY=b||0;this.xRadius=c||1;this.yRadius=d||1;this.aStartAngle=e||0;this.aEndAngle=f||2*Math.PI;this.aClockwise=g||!1;this.aRotation=h||0}function bd(a,
b,c,d,e,f){Ja.call(this,a,b,c,c,d,e,f);this.type="ArcCurve"}function rg(){var a=0,b=0,c=0,d=0;return{initCatmullRom:function(e,f,g,h,l){e=l*(g-e);h=l*(h-f);a=f;b=e;c=-3*f+3*g-2*e-h;d=2*f-2*g+e+h},initNonuniformCatmullRom:function(e,f,g,h,l,m,k){e=((f-e)/l-(g-e)/(l+m)+(g-f)/m)*m;h=((g-f)/m-(h-f)/(m+k)+(h-g)/k)*m;a=f;b=e;c=-3*f+3*g-2*e-h;d=2*f-2*g+e+h},calc:function(e){var f=e*e;return a+b*e+c*f+d*f*e}}}function ma(a,b,c,d){C.call(this);this.type="CatmullRomCurve3";this.points=a||[];this.closed=b||
!1;this.curveType=c||"centripetal";this.tension=d||.5}function $h(a,b,c,d,e){b=.5*(d-b);e=.5*(e-c);var f=a*a;return(2*c-2*d+b+e)*a*f+(-3*c+3*d-2*b-e)*f+b*a+c}function me(a,b,c,d){var e=1-a;return e*e*b+2*(1-a)*a*c+a*a*d}function ne(a,b,c,d,e){var f=1-a,g=1-a;return f*f*f*b+3*g*g*a*c+3*(1-a)*a*a*d+a*a*a*e}function Sa(a,b,c,d){C.call(this);this.type="CubicBezierCurve";this.v0=a||new B;this.v1=b||new B;this.v2=c||new B;this.v3=d||new B}function fb(a,b,c,d){C.call(this);this.type="CubicBezierCurve3";
this.v0=a||new n;this.v1=b||new n;this.v2=c||new n;this.v3=d||new n}function Da(a,b){C.call(this);this.type="LineCurve";this.v1=a||new B;this.v2=b||new B}function Ta(a,b){C.call(this);this.type="LineCurve3";this.v1=a||new n;this.v2=b||new n}function Ua(a,b,c){C.call(this);this.type="QuadraticBezierCurve";this.v0=a||new B;this.v1=b||new B;this.v2=c||new B}function gb(a,b,c){C.call(this);this.type="QuadraticBezierCurve3";this.v0=a||new n;this.v1=b||new n;this.v2=c||new n}function Va(a){C.call(this);
this.type="SplineCurve";this.points=a||[]}function sb(){C.call(this);this.type="CurvePath";this.curves=[];this.autoClose=!1}function Wa(a){sb.call(this);this.type="Path";this.currentPoint=new B;a&&this.setFromPoints(a)}function Ib(a){Wa.call(this,a);this.uuid=P.generateUUID();this.type="Shape";this.holes=[]}function T(a,b){E.call(this);this.type="Light";this.color=new J(a);this.intensity=void 0!==b?b:1;this.receiveShadow=void 0}function $e(a,b,c){T.call(this,a,c);this.type="HemisphereLight";this.castShadow=
void 0;this.position.copy(E.DefaultUp);this.updateMatrix();this.groundColor=new J(b)}function hb(a){this.camera=a;this.bias=0;this.radius=1;this.mapSize=new B(512,512);this.mapPass=this.map=null;this.matrix=new Q;this._frustum=new Dd;this._frameExtents=new B(1,1);this._viewportCount=1;this._viewports=[new da(0,0,1,1)]}function af(){hb.call(this,new U(50,1,.5,500))}function bf(a,b,c,d,e,f){T.call(this,a,b);this.type="SpotLight";this.position.copy(E.DefaultUp);this.updateMatrix();this.target=new E;
Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(a){this.intensity=a/Math.PI}});this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/3;this.penumbra=void 0!==e?e:0;this.decay=void 0!==f?f:1;this.shadow=new af}function sg(){hb.call(this,new U(90,1,.5,500));this._frameExtents=new B(4,2);this._viewportCount=6;this._viewports=[new da(2,1,1,1),new da(0,1,1,1),new da(3,1,1,1),new da(1,1,1,1),new da(3,0,1,1),new da(1,0,1,1)];this._cubeDirections=[new n(1,
0,0),new n(-1,0,0),new n(0,0,1),new n(0,0,-1),new n(0,1,0),new n(0,-1,0)];this._cubeUps=[new n(0,1,0),new n(0,1,0),new n(0,1,0),new n(0,1,0),new n(0,0,1),new n(0,0,-1)]}function cf(a,b,c,d){T.call(this,a,b);this.type="PointLight";Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(a){this.intensity=a/(4*Math.PI)}});this.distance=void 0!==c?c:0;this.decay=void 0!==d?d:1;this.shadow=new sg}function oe(a,b,c,d,e,f){bb.call(this);this.type="OrthographicCamera";
this.zoom=1;this.view=null;this.left=void 0!==a?a:-1;this.right=void 0!==b?b:1;this.top=void 0!==c?c:1;this.bottom=void 0!==d?d:-1;this.near=void 0!==e?e:.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()}function df(){hb.call(this,new oe(-5,5,5,-5,.5,500))}function ef(a,b){T.call(this,a,b);this.type="DirectionalLight";this.position.copy(E.DefaultUp);this.updateMatrix();this.target=new E;this.shadow=new df}function ff(a,b){T.call(this,a,b);this.type="AmbientLight";this.castShadow=void 0}function gf(a,
b,c,d){T.call(this,a,b);this.type="RectAreaLight";this.width=void 0!==c?c:10;this.height=void 0!==d?d:10}function hf(a){V.call(this,a);this.textures={}}function jf(){D.call(this);this.type="InstancedBufferGeometry";this.maxInstancedCount=void 0}function kf(a,b,c,d){"number"===typeof c&&(d=c,c=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument."));N.call(this,a,b,c);this.meshPerAttribute=d||1}function lf(a){V.call(this,a)}function mf(a){V.call(this,
a)}function tg(a){"undefined"===typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");"undefined"===typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported.");V.call(this,a);this.options=void 0}function ug(){this.type="ShapePath";this.color=new J;this.subPaths=[];this.currentPath=null}function vg(a){this.type="Font";this.data=a}function wg(a){V.call(this,a)}function nf(a){V.call(this,a)}function of(){this.coefficients=[];for(var a=
0;9>a;a++)this.coefficients.push(new n)}function Xa(a,b){T.call(this,void 0,b);this.sh=void 0!==a?a:new of}function xg(a,b,c){Xa.call(this,void 0,c);a=(new J).set(a);c=(new J).set(b);b=new n(a.r,a.g,a.b);a=new n(c.r,c.g,c.b);c=Math.sqrt(Math.PI);var d=c*Math.sqrt(.75);this.sh.coefficients[0].copy(b).add(a).multiplyScalar(c);this.sh.coefficients[1].copy(b).sub(a).multiplyScalar(d)}function yg(a,b){Xa.call(this,void 0,b);a=(new J).set(a);this.sh.coefficients[0].set(a.r,a.g,a.b).multiplyScalar(2*Math.sqrt(Math.PI))}
function ai(){this.type="StereoCamera";this.aspect=1;this.eyeSep=.064;this.cameraL=new U;this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=!1;this.cameraR=new U;this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=!1;this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}function zg(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1}function Ag(){E.call(this);this.type="AudioListener";this.context=Bg.getContext();
this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null;this.timeDelta=0;this._clock=new zg}function cd(a){E.call(this);this.type="Audio";this.listener=a;this.context=a.context;this.gain=this.context.createGain();this.gain.connect(a.getInput());this.autoplay=!1;this.buffer=null;this.detune=0;this.loop=!1;this.offset=this.loopEnd=this.loopStart=0;this.duration=void 0;this.playbackRate=1;this.isPlaying=!1;this.hasPlaybackControl=!0;this.sourceType="empty";this._pausedAt=
this._startedAt=0;this.filters=[]}function Cg(a){cd.call(this,a);this.panner=this.context.createPanner();this.panner.panningModel="HRTF";this.panner.connect(this.gain)}function Dg(a,b){this.analyser=a.context.createAnalyser();this.analyser.fftSize=void 0!==b?b:2048;this.data=new Uint8Array(this.analyser.frequencyBinCount);a.getOutput().connect(this.analyser)}function Eg(a,b,c){this.binding=a;this.valueSize=c;a=Float64Array;switch(b){case "quaternion":b=this._slerp;break;case "string":case "bool":a=
Array;b=this._select;break;default:b=this._lerp}this.buffer=new a(4*c);this._mixBufferRegion=b;this.referenceCount=this.useCount=this.cumulativeWeight=0}function bi(a,b,c){c=c||ya.parseTrackName(b);this._targetGroup=a;this._bindings=a.subscribe_(b,c)}function ya(a,b,c){this.path=b;this.parsedPath=c||ya.parseTrackName(b);this.node=ya.findNode(a,this.parsedPath.nodeName)||a;this.rootNode=a}function ci(){this.uuid=P.generateUUID();this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=
0;var a={};this._indicesByUUID=a;for(var b=0,c=arguments.length;b!==c;++b)a[arguments[b].uuid]=b;this._paths=[];this._parsedPaths=[];this._bindings=[];this._bindingsIndicesByPath={};var d=this;this.stats={objects:{get total(){return d._objects.length},get inUse(){return this.total-d.nCachedObjects_}},get bindingsPerObject(){return d._bindings.length}}}function di(a,b,c){this._mixer=a;this._clip=b;this._localRoot=c||null;a=b.tracks;b=a.length;c=Array(b);for(var d={endingStart:2400,endingEnd:2400},
e=0;e!==b;++e){var f=a[e].createInterpolant(null);c[e]=f;f.settings=d}this._interpolantSettings=d;this._interpolants=c;this._propertyBindings=Array(b);this._weightInterpolant=this._timeScaleInterpolant=this._byClipCacheIndex=this._cacheIndex=null;this.loop=2201;this._loopCount=-1;this._startTime=null;this.time=0;this._effectiveWeight=this.weight=this._effectiveTimeScale=this.timeScale=1;this.repetitions=Infinity;this.paused=!1;this.enabled=!0;this.clampWhenFinished=!1;this.zeroSlopeAtEnd=this.zeroSlopeAtStart=
!0}function Fg(a){this._root=a;this._initMemoryManager();this.time=this._accuIndex=0;this.timeScale=1}function pf(a,b){"string"===typeof a&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),a=b);this.value=a}function Gg(a,b,c){pb.call(this,a,b);this.meshPerAttribute=c||1}function ei(a,b,c,d){this.ray=new Rb(a,b);this.near=c||0;this.far=d||Infinity;this.camera=null;this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}};Object.defineProperties(this.params,{PointCloud:{get:function(){console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
return this.Points}}})}function fi(a,b){return a.distance-b.distance}function Hg(a,b,c,d){if(!1!==a.visible&&(a.raycast(b,c),!0===d)){a=a.children;d=0;for(var e=a.length;d<e;d++)Hg(a[d],b,c,!0)}}function gi(a,b,c){this.radius=void 0!==a?a:1;this.phi=void 0!==b?b:0;this.theta=void 0!==c?c:0;return this}function hi(a,b,c){this.radius=void 0!==a?a:1;this.theta=void 0!==b?b:0;this.y=void 0!==c?c:0;return this}function Ig(a,b){this.min=void 0!==a?a:new B(Infinity,Infinity);this.max=void 0!==b?b:new B(-Infinity,
-Infinity)}function Jg(a,b){this.start=void 0!==a?a:new n;this.end=void 0!==b?b:new n}function pe(a){E.call(this);this.material=a;this.render=function(){}}function qe(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16711680;d=void 0!==d?d:1;b=0;(c=this.object.geometry)&&c.isGeometry?b=3*c.faces.length:c&&c.isBufferGeometry&&(b=c.attributes.normal.count);c=new D;b=new A(6*b,3);c.setAttribute("position",b);X.call(this,c,new R({color:a,linewidth:d}));this.matrixAutoUpdate=!1;this.update()}
function dd(a,b){E.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.color=b;a=new D;b=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(var c=0,d=1;32>c;c++,d++){var e=c/32*Math.PI*2,f=d/32*Math.PI*2;b.push(Math.cos(e),Math.sin(e),1,Math.cos(f),Math.sin(f),1)}a.setAttribute("position",new A(b,3));b=new R({fog:!1});this.cone=new X(a,b);this.add(this.cone);this.update()}function ii(a){var b=[];a&&a.isBone&&b.push(a);for(var c=
0;c<a.children.length;c++)b.push.apply(b,ii(a.children[c]));return b}function ed(a){for(var b=ii(a),c=new D,d=[],e=[],f=new J(0,0,1),g=new J(0,1,0),h=0;h<b.length;h++){var l=b[h];l.parent&&l.parent.isBone&&(d.push(0,0,0),d.push(0,0,0),e.push(f.r,f.g,f.b),e.push(g.r,g.g,g.b))}c.setAttribute("position",new A(d,3));c.setAttribute("color",new A(e,3));d=new R({vertexColors:2,depthTest:!1,depthWrite:!1,transparent:!0});X.call(this,c,d);this.root=a;this.bones=b;this.matrix=a.matrixWorld;this.matrixAutoUpdate=
!1}function fd(a,b,c){this.light=a;this.light.updateMatrixWorld();this.color=c;a=new Hb(b,4,2);b=new Ga({wireframe:!0,fog:!1});ea.call(this,a,b);this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=!1;this.update()}function gd(a,b){this.type="RectAreaLightHelper";this.light=a;this.color=b;a=new D;a.setAttribute("position",new A([1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3));a.computeBoundingSphere();b=new R({fog:!1});ra.call(this,a,b);a=new D;a.setAttribute("position",new A([1,1,0,-1,1,0,-1,-1,0,1,1,
0,-1,-1,0,1,-1,0],3));a.computeBoundingSphere();this.add(new ea(a,new Ga({side:1,fog:!1})));this.update()}function hd(a,b,c){E.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.color=c;a=new ac(b);a.rotateY(.5*Math.PI);this.material=new Ga({wireframe:!0,fog:!1});void 0===this.color&&(this.material.vertexColors=2);b=a.getAttribute("position");b=new Float32Array(3*b.count);a.setAttribute("color",new N(b,3));this.add(new ea(a,this.material));
this.update()}function id(a,b){this.lightProbe=a;this.size=b;a=new va({defines:{GAMMA_OUTPUT:""},uniforms:{sh:{value:this.lightProbe.sh.coefficients},intensity:{value:this.lightProbe.intensity}},vertexShader:"varying vec3 vNormal;\nvoid main() {\n\tvNormal = normalize( normalMatrix * normal );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"#define RECIPROCAL_PI 0.318309886\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\t// matrix is assumed to be orthogonal\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n}\nvec3 linearToOutput( in vec3 a ) {\n\t#ifdef GAMMA_OUTPUT\n\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n\t#else\n\t\treturn a;\n\t#endif\n}\n// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\t// normal is assumed to have unit length\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\t// band 0\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\t// band 1\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\t// band 2\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nuniform vec3 sh[ 9 ]; // sh coefficients\nuniform float intensity; // light probe intensity\nvarying vec3 vNormal;\nvoid main() {\n\tvec3 normal = normalize( vNormal );\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );\n\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;\n\toutgoingLight = linearToOutput( outgoingLight );\n\tgl_FragColor = vec4( outgoingLight, 1.0 );\n}"});
b=new Hb(1,32,16);ea.call(this,b,a);this.onBeforeRender()}function qf(a,b,c,d){a=a||10;b=b||10;c=new J(void 0!==c?c:4473924);d=new J(void 0!==d?d:8947848);var e=b/2,f=a/b,g=a/2;a=[];for(var h=[],l=0,m=0,k=-g;l<=b;l++,k+=f){a.push(-g,0,k,g,0,k);a.push(k,0,-g,k,0,g);var q=l===e?c:d;q.toArray(h,m);m+=3;q.toArray(h,m);m+=3;q.toArray(h,m);m+=3;q.toArray(h,m);m+=3}b=new D;b.setAttribute("position",new A(a,3));b.setAttribute("color",new A(h,3));c=new R({vertexColors:2});X.call(this,b,c)}function rf(a,b,
c,d,e,f){a=a||10;b=b||16;c=c||8;d=d||64;e=new J(void 0!==e?e:4473924);f=new J(void 0!==f?f:8947848);var g=[],h=[],l;for(l=0;l<=b;l++){var m=l/b*2*Math.PI;var k=Math.sin(m)*a;m=Math.cos(m)*a;g.push(0,0,0);g.push(k,0,m);var q=l&1?e:f;h.push(q.r,q.g,q.b);h.push(q.r,q.g,q.b)}for(l=0;l<=c;l++){q=l&1?e:f;var n=a-a/c*l;for(b=0;b<d;b++)m=b/d*2*Math.PI,k=Math.sin(m)*n,m=Math.cos(m)*n,g.push(k,0,m),h.push(q.r,q.g,q.b),m=(b+1)/d*2*Math.PI,k=Math.sin(m)*n,m=Math.cos(m)*n,g.push(k,0,m),h.push(q.r,q.g,q.b)}a=new D;
a.setAttribute("position",new A(g,3));a.setAttribute("color",new A(h,3));g=new R({vertexColors:2});X.call(this,a,g)}function jd(a,b,c,d){this.audio=a;this.range=b||1;this.divisionsInnerAngle=c||16;this.divisionsOuterAngle=d||2;a=new D;b=new Float32Array(3*(3*(this.divisionsInnerAngle+2*this.divisionsOuterAngle)+3));a.setAttribute("position",new N(b,3));b=new R({color:65280});c=new R({color:16776960});ra.call(this,a,[c,b]);this.update()}function re(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=
void 0!==c?c:16776960;d=void 0!==d?d:1;b=0;(c=this.object.geometry)&&c.isGeometry?b=c.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");c=new D;b=new A(6*b,3);c.setAttribute("position",b);X.call(this,c,new R({color:a,linewidth:d}));this.matrixAutoUpdate=!1;this.update()}function kd(a,b,c){E.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.color=c;void 0===b&&
(b=1);a=new D;a.setAttribute("position",new A([-b,b,0,b,b,0,b,-b,0,-b,-b,0,-b,b,0],3));b=new R({fog:!1});this.lightPlane=new ra(a,b);this.add(this.lightPlane);a=new D;a.setAttribute("position",new A([0,0,0,0,0,1],3));this.targetLine=new ra(a,b);this.add(this.targetLine);this.update()}function se(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){f.push(0,0,0);g.push(b.r,b.g,b.b);void 0===h[a]&&(h[a]=[]);h[a].push(f.length/3-1)}var d=new D,e=new R({color:16777215,vertexColors:1}),f=[],g=[],h={},l=
new J(16755200),m=new J(16711680),k=new J(43775),q=new J(16777215),n=new J(3355443);b("n1","n2",l);b("n2","n4",l);b("n4","n3",l);b("n3","n1",l);b("f1","f2",l);b("f2","f4",l);b("f4","f3",l);b("f3","f1",l);b("n1","f1",l);b("n2","f2",l);b("n3","f3",l);b("n4","f4",l);b("p","n1",m);b("p","n2",m);b("p","n3",m);b("p","n4",m);b("u1","u2",k);b("u2","u3",k);b("u3","u1",k);b("c","t",q);b("p","c",n);b("cn1","cn2",n);b("cn3","cn4",n);b("cf1","cf2",n);b("cf3","cf4",n);d.setAttribute("position",new A(f,3));d.setAttribute("color",
new A(g,3));X.call(this,d,e);this.camera=a;this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=h;this.update()}function na(a,b,c,d,e,f,g){sf.set(e,f,g).unproject(d);a=b[a];if(void 0!==a)for(c=c.getAttribute("position"),b=0,d=a.length;b<d;b++)c.setXYZ(a[b],sf.x,sf.y,sf.z)}function tb(a,b){this.object=a;void 0===b&&(b=16776960);a=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);var c=new Float32Array(24),
d=new D;d.setIndex(new N(a,1));d.setAttribute("position",new N(c,3));X.call(this,d,new R({color:b}));this.matrixAutoUpdate=!1;this.update()}function te(a,b){this.type="Box3Helper";this.box=a;b=b||16776960;a=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);var c=new D;c.setIndex(new N(a,1));c.setAttribute("position",new A([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3));X.call(this,c,new R({color:b}));this.geometry.computeBoundingSphere()}function ue(a,b,c){this.type=
"PlaneHelper";this.plane=a;this.size=void 0===b?1:b;a=void 0!==c?c:16776960;b=new D;b.setAttribute("position",new A([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3));b.computeBoundingSphere();ra.call(this,b,new R({color:a}));b=new D;b.setAttribute("position",new A([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3));b.computeBoundingSphere();this.add(new ea(b,new Ga({color:a,opacity:.2,transparent:!0,depthWrite:!1})))}function ub(a,b,c,d,e,f){E.call(this);void 0===a&&(a=new n(0,
0,1));void 0===b&&(b=new n(0,0,0));void 0===c&&(c=1);void 0===d&&(d=16776960);void 0===e&&(e=.2*c);void 0===f&&(f=.2*e);void 0===tf&&(tf=new D,tf.setAttribute("position",new A([0,0,0,0,1,0],3)),Kg=new rb(0,.5,1,5,1),Kg.translate(0,-.5,0));this.position.copy(b);this.line=new ra(tf,new R({color:d}));this.line.matrixAutoUpdate=!1;this.add(this.line);this.cone=new ea(Kg,new Ga({color:d}));this.cone.matrixAutoUpdate=!1;this.add(this.cone);this.setDirection(a);this.setLength(c,e,f)}function ve(a){a=a||
1;var b=[0,0,0,a,0,0,0,0,0,0,a,0,0,0,0,0,0,a];a=new D;a.setAttribute("position",new A(b,3));a.setAttribute("color",new A([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));b=new R({vertexColors:2});X.call(this,a,b)}function ji(a){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");ma.call(this,a);this.type="catmullrom";this.closed=!0}function ki(a){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");ma.call(this,a);this.type=
"catmullrom"}function Lg(a){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");ma.call(this,a);this.type="catmullrom"}void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52));void 0===Number.isInteger&&(Number.isInteger=function(a){return"number"===typeof a&&isFinite(a)&&Math.floor(a)===a});void 0===Math.sign&&(Math.sign=function(a){return 0>a?-1:0<a?1:+a});!1==="name"in Function.prototype&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}});
void 0===Object.assign&&(Object.assign=function(a){if(void 0===a||null===a)throw new TypeError("Cannot convert undefined or null to object");for(var b=Object(a),c=1;c<arguments.length;c++){var d=arguments[c];if(void 0!==d&&null!==d)for(var e in d)Object.prototype.hasOwnProperty.call(d,e)&&(b[e]=d[e])}return b});Object.assign(Aa.prototype,{addEventListener:function(a,b){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]);-1===c[a].indexOf(b)&&c[a].push(b)},
hasEventListener:function(a,b){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&-1!==c[a].indexOf(b)},removeEventListener:function(a,b){void 0!==this._listeners&&(a=this._listeners[a],void 0!==a&&(b=a.indexOf(b),-1!==b&&a.splice(b,1)))},dispatchEvent:function(a){if(void 0!==this._listeners){var b=this._listeners[a.type];if(void 0!==b){a.target=this;b=b.slice(0);for(var c=0,d=b.length;c<d;c++)b[c].call(this,a)}}}});for(var oa=[],we=0;256>we;we++)oa[we]=(16>we?"0":"")+
we.toString(16);var P={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var a=4294967295*Math.random()|0,b=4294967295*Math.random()|0,c=4294967295*Math.random()|0,d=4294967295*Math.random()|0;return(oa[a&255]+oa[a>>8&255]+oa[a>>16&255]+oa[a>>24&255]+"-"+oa[b&255]+oa[b>>8&255]+"-"+oa[b>>16&15|64]+oa[b>>24&255]+"-"+oa[c&63|128]+oa[c>>8&255]+"-"+oa[c>>16&255]+oa[c>>24&255]+oa[d&255]+oa[d>>8&255]+oa[d>>16&255]+oa[d>>24&255]).toUpperCase()},clamp:function(a,b,c){return Math.max(b,Math.min(c,
a))},euclideanModulo:function(a,b){return(a%b+b)%b},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},lerp:function(a,b,c){return(1-c)*a+c*b},smoothstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*
(.5-Math.random())},degToRad:function(a){return a*P.DEG2RAD},radToDeg:function(a){return a*P.RAD2DEG},isPowerOfTwo:function(a){return 0===(a&a-1)&&0!==a},ceilPowerOfTwo:function(a){return Math.pow(2,Math.ceil(Math.log(a)/Math.LN2))},floorPowerOfTwo:function(a){return Math.pow(2,Math.floor(Math.log(a)/Math.LN2))}};Object.defineProperties(B.prototype,{width:{get:function(){return this.x},set:function(a){this.x=a}},height:{get:function(){return this.y},set:function(a){this.y=a}}});Object.assign(B.prototype,
{isVector2:!0,set:function(a,b){this.x=a;this.y=b;return this},setScalar:function(a){this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error("index is out of range: "+a);}return this},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+a);}},clone:function(){return new this.constructor(this.x,
this.y)},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,b){if(void 0!==b)return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;return this},sub:function(a,b){if(void 0!==b)return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
this.subVectors(a,b);this.x-=a.x;this.y-=a.y;return this},subScalar:function(a){this.x-=a;this.y-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiply:function(a){this.x*=a.x;this.y*=a.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divide:function(a){this.x/=a.x;this.y/=a.y;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},applyMatrix3:function(a){var b=this.x,c=this.y;a=a.elements;this.x=a[0]*b+a[3]*c+a[6];this.y=
a[1]*b+a[4]*c+a[7];return this},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));return this},clampScalar:function(a,b){this.x=Math.max(a,Math.min(b,this.x));this.y=Math.max(a,Math.min(b,this.y));return this},clampLength:function(a,b){var c=this.length();return this.divideScalar(c||
1).multiplyScalar(Math.max(a,Math.min(b,c)))},floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);return this},negate:function(){this.x=-this.x;this.y=-this.y;return this},dot:function(a){return this.x*
a.x+this.y*a.y},cross:function(a){return this.x*a.y-this.y*a.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var a=Math.atan2(this.y,this.x);0>a&&(a+=2*Math.PI);return a},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=
this.x-a.x;a=this.y-a.y;return b*b+a*a},manhattanDistanceTo:function(a){return Math.abs(this.x-a.x)+Math.abs(this.y-a.y)},setLength:function(a){return this.normalize().multiplyScalar(a)},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];return this},toArray:function(a,
b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;return a},fromBufferAttribute:function(a,b,c){void 0!==c&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");this.x=a.getX(b);this.y=a.getY(b);return this},rotateAround:function(a,b){var c=Math.cos(b);b=Math.sin(b);var d=this.x-a.x,e=this.y-a.y;this.x=d*c-e*b+a.x;this.y=d*b+e*c+a.y;return this}});Object.assign(wa,{slerp:function(a,b,c,d){return c.copy(a).slerp(b,d)},slerpFlat:function(a,b,c,d,e,f,g){var h=
c[d+0],l=c[d+1],m=c[d+2];c=c[d+3];d=e[f+0];var k=e[f+1],q=e[f+2];e=e[f+3];if(c!==e||h!==d||l!==k||m!==q){f=1-g;var n=h*d+l*k+m*q+c*e,p=0<=n?1:-1,t=1-n*n;t>Number.EPSILON&&(t=Math.sqrt(t),n=Math.atan2(t,n*p),f=Math.sin(f*n)/t,g=Math.sin(g*n)/t);p*=g;h=h*f+d*p;l=l*f+k*p;m=m*f+q*p;c=c*f+e*p;f===1-g&&(g=1/Math.sqrt(h*h+l*l+m*m+c*c),h*=g,l*=g,m*=g,c*=g)}a[b]=h;a[b+1]=l;a[b+2]=m;a[b+3]=c}});Object.defineProperties(wa.prototype,{x:{get:function(){return this._x},set:function(a){this._x=a;this._onChangeCallback()}},
y:{get:function(){return this._y},set:function(a){this._y=a;this._onChangeCallback()}},z:{get:function(){return this._z},set:function(a){this._z=a;this._onChangeCallback()}},w:{get:function(){return this._w},set:function(a){this._w=a;this._onChangeCallback()}}});Object.assign(wa.prototype,{isQuaternion:!0,set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._w=d;this._onChangeCallback();return this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(a){this._x=
a.x;this._y=a.y;this._z=a.z;this._w=a.w;this._onChangeCallback();return this},setFromEuler:function(a,b){if(!a||!a.isEuler)throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var c=a._x,d=a._y,e=a._z;a=a.order;var f=Math.cos,g=Math.sin,h=f(c/2),l=f(d/2);f=f(e/2);c=g(c/2);d=g(d/2);e=g(e/2);"XYZ"===a?(this._x=c*l*f+h*d*e,this._y=h*d*f-c*l*e,this._z=h*l*e+c*d*f,this._w=h*l*f-c*d*e):"YXZ"===a?(this._x=c*l*f+h*d*e,this._y=h*d*f-c*l*e,this._z=
h*l*e-c*d*f,this._w=h*l*f+c*d*e):"ZXY"===a?(this._x=c*l*f-h*d*e,this._y=h*d*f+c*l*e,this._z=h*l*e+c*d*f,this._w=h*l*f-c*d*e):"ZYX"===a?(this._x=c*l*f-h*d*e,this._y=h*d*f+c*l*e,this._z=h*l*e-c*d*f,this._w=h*l*f+c*d*e):"YZX"===a?(this._x=c*l*f+h*d*e,this._y=h*d*f+c*l*e,this._z=h*l*e-c*d*f,this._w=h*l*f-c*d*e):"XZY"===a&&(this._x=c*l*f-h*d*e,this._y=h*d*f-c*l*e,this._z=h*l*e+c*d*f,this._w=h*l*f+c*d*e);!1!==b&&this._onChangeCallback();return this},setFromAxisAngle:function(a,b){b/=2;var c=Math.sin(b);
this._x=a.x*c;this._y=a.y*c;this._z=a.z*c;this._w=Math.cos(b);this._onChangeCallback();return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0];a=b[4];var d=b[8],e=b[1],f=b[5],g=b[9],h=b[2],l=b[6];b=b[10];var m=c+f+b;0<m?(c=.5/Math.sqrt(m+1),this._w=.25/c,this._x=(l-g)*c,this._y=(d-h)*c,this._z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this._w=(l-g)/c,this._x=.25*c,this._y=(a+e)/c,this._z=(d+h)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this._w=(d-h)/c,this._x=(a+e)/c,this._y=.25*c,this._z=(g+l)/
c):(c=2*Math.sqrt(1+b-c-f),this._w=(e-a)/c,this._x=(d+h)/c,this._y=(g+l)/c,this._z=.25*c);this._onChangeCallback();return this},setFromUnitVectors:function(a,b){var c=a.dot(b)+1;1E-6>c?(c=0,Math.abs(a.x)>Math.abs(a.z)?(this._x=-a.y,this._y=a.x,this._z=0):(this._x=0,this._y=-a.z,this._z=a.y)):(this._x=a.y*b.z-a.z*b.y,this._y=a.z*b.x-a.x*b.z,this._z=a.x*b.y-a.y*b.x);this._w=c;return this.normalize()},angleTo:function(a){return 2*Math.acos(Math.abs(P.clamp(this.dot(a),-1,1)))},rotateTowards:function(a,
b){var c=this.angleTo(a);if(0===c)return this;this.slerp(a,Math.min(1,b/c));return this},inverse:function(){return this.conjugate()},conjugate:function(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this},dot:function(a){return this._x*a._x+this._y*a._y+this._z*a._z+this._w*a._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=
this.length();0===a?(this._z=this._y=this._x=0,this._w=1):(a=1/a,this._x*=a,this._y*=a,this._z*=a,this._w*=a);this._onChangeCallback();return this},multiply:function(a,b){return void 0!==b?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},premultiply:function(a){return this.multiplyQuaternions(a,this)},multiplyQuaternions:function(a,b){var c=a._x,d=a._y,e=a._z;a=a._w;
var f=b._x,g=b._y,h=b._z;b=b._w;this._x=c*b+a*f+d*h-e*g;this._y=d*b+a*g+e*f-c*h;this._z=e*b+a*h+c*g-d*f;this._w=a*b-c*f-d*g-e*h;this._onChangeCallback();return this},slerp:function(a,b){if(0===b)return this;if(1===b)return this.copy(a);var c=this._x,d=this._y,e=this._z,f=this._w,g=f*a._w+c*a._x+d*a._y+e*a._z;0>g?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=-a._z,g=-g):this.copy(a);if(1<=g)return this._w=f,this._x=c,this._y=d,this._z=e,this;a=1-g*g;if(a<=Number.EPSILON)return g=1-b,this._w=g*
f+b*this._w,this._x=g*c+b*this._x,this._y=g*d+b*this._y,this._z=g*e+b*this._z,this.normalize(),this._onChangeCallback(),this;a=Math.sqrt(a);var h=Math.atan2(a,g);g=Math.sin((1-b)*h)/a;b=Math.sin(b*h)/a;this._w=f*g+this._w*b;this._x=c*g+this._x*b;this._y=d*g+this._y*b;this._z=e*g+this._z*b;this._onChangeCallback();return this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w},fromArray:function(a,b){void 0===b&&(b=0);this._x=a[b];this._y=a[b+1];this._z=a[b+2];
this._w=a[b+3];this._onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;a[b+3]=this._w;return a},_onChange:function(a){this._onChangeCallback=a;return this},_onChangeCallback:function(){}});var Mg=new n,li=new wa;Object.assign(n.prototype,{isVector3:!0,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setScalar:function(a){this.z=this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=
a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error("index is out of range: "+a);}return this},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+a);}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},
add:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;this.z+=a.z*b;return this},sub:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},multiply:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=
a;return this},multiplyVectors:function(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyEuler:function(a){a&&a.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");return this.applyQuaternion(li.setFromEuler(a))},applyAxisAngle:function(a,b){return this.applyQuaternion(li.setFromAxisAngle(a,b))},applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*
d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;var e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,g=a.z;a=a.w;var h=a*b+f*d-g*c,l=a*c+g*b-e*d,m=a*d+e*c-f*b;b=-e*b-f*c-g*d;this.x=h*a+b*-e+l*-g-m*-f;this.y=l*a+b*-f+m*-e-h*-g;this.z=m*a+b*-g+h*-f-l*-e;return this},
project:function(a){return this.applyMatrix4(a.matrixWorldInverse).applyMatrix4(a.projectionMatrix)},unproject:function(a){return this.applyMatrix4(a.projectionMatrixInverse).applyMatrix4(a.matrixWorld)},transformDirection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*b+a[6]*c+a[10]*d;return this.normalize()},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){return this.multiplyScalar(1/
a)},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);this.z=Math.min(this.z,a.z);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);this.z=Math.max(this.z,a.z);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));this.z=Math.max(a.z,Math.min(b.z,this.z));return this},clampScalar:function(a,b){this.x=Math.max(a,Math.min(b,this.x));this.y=Math.max(a,Math.min(b,this.y));this.z=Math.max(a,
Math.min(b,this.z));return this},clampLength:function(a,b){var c=this.length();return this.divideScalar(c||1).multiplyScalar(Math.max(a,Math.min(b,c)))},floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this},roundToZero:function(){this.x=
0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);return this},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+
Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(a){return this.normalize().multiplyScalar(a)},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},cross:function(a,b){return void 0!==b?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(a,b)):this.crossVectors(this,
a)},crossVectors:function(a,b){var c=a.x,d=a.y;a=a.z;var e=b.x,f=b.y;b=b.z;this.x=d*b-a*f;this.y=a*e-c*b;this.z=c*f-d*e;return this},projectOnVector:function(a){var b=a.dot(this)/a.lengthSq();return this.copy(a).multiplyScalar(b)},projectOnPlane:function(a){Mg.copy(this).projectOnVector(a);return this.sub(Mg)},reflect:function(a){return this.sub(Mg.copy(a).multiplyScalar(2*this.dot(a)))},angleTo:function(a){var b=Math.sqrt(this.lengthSq()*a.lengthSq());0===b&&console.error("THREE.Vector3: angleTo() can't handle zero length vectors.");
a=this.dot(a)/b;return Math.acos(P.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y;a=this.z-a.z;return b*b+c*c+a*a},manhattanDistanceTo:function(a){return Math.abs(this.x-a.x)+Math.abs(this.y-a.y)+Math.abs(this.z-a.z)},setFromSpherical:function(a){return this.setFromSphericalCoords(a.radius,a.phi,a.theta)},setFromSphericalCoords:function(a,b,c){var d=Math.sin(b)*a;this.x=d*Math.sin(c);this.y=Math.cos(b)*
a;this.z=d*Math.cos(c);return this},setFromCylindrical:function(a){return this.setFromCylindricalCoords(a.radius,a.theta,a.y)},setFromCylindricalCoords:function(a,b,c){this.x=a*Math.sin(b);this.y=c;this.z=a*Math.cos(b);return this},setFromMatrixPosition:function(a){a=a.elements;this.x=a[12];this.y=a[13];this.z=a[14];return this},setFromMatrixScale:function(a){var b=this.setFromMatrixColumn(a,0).length(),c=this.setFromMatrixColumn(a,1).length();a=this.setFromMatrixColumn(a,2).length();this.x=b;this.y=
c;this.z=a;return this},setFromMatrixColumn:function(a,b){return this.fromArray(a.elements,4*b)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+2];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;return a},fromBufferAttribute:function(a,b,c){void 0!==c&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
this.x=a.getX(b);this.y=a.getY(b);this.z=a.getZ(b);return this}});var oc=new n;Object.assign(Z.prototype,{isMatrix3:!0,set:function(a,b,c,d,e,f,g,h,l){var m=this.elements;m[0]=a;m[1]=d;m[2]=g;m[3]=b;m[4]=e;m[5]=h;m[6]=c;m[7]=f;m[8]=l;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(a){var b=this.elements;a=a.elements;b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=
a[7];b[8]=a[8];return this},setFromMatrix4:function(a){a=a.elements;this.set(a[0],a[4],a[8],a[1],a[5],a[9],a[2],a[6],a[10]);return this},applyToBufferAttribute:function(a){for(var b=0,c=a.count;b<c;b++)oc.x=a.getX(b),oc.y=a.getY(b),oc.z=a.getZ(b),oc.applyMatrix3(this),a.setXYZ(b,oc.x,oc.y,oc.z);return a},multiply:function(a){return this.multiplyMatrices(this,a)},premultiply:function(a){return this.multiplyMatrices(a,this)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements;b=this.elements;
a=c[0];var e=c[3],f=c[6],g=c[1],h=c[4],l=c[7],m=c[2],k=c[5];c=c[8];var q=d[0],n=d[3],p=d[6],t=d[1],v=d[4],y=d[7],w=d[2],x=d[5];d=d[8];b[0]=a*q+e*t+f*w;b[3]=a*n+e*v+f*x;b[6]=a*p+e*y+f*d;b[1]=g*q+h*t+l*w;b[4]=g*n+h*v+l*x;b[7]=g*p+h*y+l*d;b[2]=m*q+k*t+c*w;b[5]=m*n+k*v+c*x;b[8]=m*p+k*y+c*d;return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],
f=a[4],g=a[5],h=a[6],l=a[7];a=a[8];return b*f*a-b*g*l-c*e*a+c*g*h+d*e*l-d*f*h},getInverse:function(a,b){a&&a.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var c=a.elements;a=this.elements;var d=c[0],e=c[1],f=c[2],g=c[3],h=c[4],l=c[5],m=c[6],k=c[7];c=c[8];var q=c*h-l*k,n=l*m-c*g,p=k*g-h*m,t=d*q+e*n+f*p;if(0===t){if(!0===b)throw Error("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");console.warn("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");
return this.identity()}b=1/t;a[0]=q*b;a[1]=(f*k-c*e)*b;a[2]=(l*e-f*h)*b;a[3]=n*b;a[4]=(c*d-f*m)*b;a[5]=(f*g-l*d)*b;a[6]=p*b;a[7]=(e*m-k*d)*b;a[8]=(h*d-e*g)*b;return this},transpose:function(){var a=this.elements;var b=a[1];a[1]=a[3];a[3]=b;b=a[2];a[2]=a[6];a[6]=b;b=a[5];a[5]=a[7];a[7]=b;return this},getNormalMatrix:function(a){return this.setFromMatrix4(a).getInverse(this).transpose()},transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=
b[2];a[7]=b[5];a[8]=b[8];return this},setUvTransform:function(a,b,c,d,e,f,g){var h=Math.cos(e);e=Math.sin(e);this.set(c*h,c*e,-c*(h*f+e*g)+f+a,-d*e,d*h,-d*(-e*f+h*g)+g+b,0,0,1)},scale:function(a,b){var c=this.elements;c[0]*=a;c[3]*=a;c[6]*=a;c[1]*=b;c[4]*=b;c[7]*=b;return this},rotate:function(a){var b=Math.cos(a);a=Math.sin(a);var c=this.elements,d=c[0],e=c[3],f=c[6],g=c[1],h=c[4],l=c[7];c[0]=b*d+a*g;c[3]=b*e+a*h;c[6]=b*f+a*l;c[1]=-a*d+b*g;c[4]=-a*e+b*h;c[7]=-a*f+b*l;return this},translate:function(a,
b){var c=this.elements;c[0]+=a*c[2];c[3]+=a*c[5];c[6]+=a*c[8];c[1]+=b*c[2];c[4]+=b*c[5];c[7]+=b*c[8];return this},equals:function(a){var b=this.elements;a=a.elements;for(var c=0;9>c;c++)if(b[c]!==a[c])return!1;return!0},fromArray:function(a,b){void 0===b&&(b=0);for(var c=0;9>c;c++)this.elements[c]=a[c+b];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];
return a}});var ld,Jb={getDataURL:function(a){if("undefined"==typeof HTMLCanvasElement)return a.src;if(!(a instanceof HTMLCanvasElement)){void 0===ld&&(ld=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"));ld.width=a.width;ld.height=a.height;var b=ld.getContext("2d");a instanceof ImageData?b.putImageData(a,0,0):b.drawImage(a,0,0,a.width,a.height);a=ld}return 2048<a.width||2048<a.height?a.toDataURL("image/jpeg",.6):a.toDataURL("image/png")}},Si=0;Y.DEFAULT_IMAGE=void 0;Y.DEFAULT_MAPPING=
300;Y.prototype=Object.assign(Object.create(Aa.prototype),{constructor:Y,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.name=a.name;this.image=a.image;this.mipmaps=a.mipmaps.slice(0);this.mapping=a.mapping;this.wrapS=a.wrapS;this.wrapT=a.wrapT;this.magFilter=a.magFilter;this.minFilter=a.minFilter;this.anisotropy=
a.anisotropy;this.format=a.format;this.type=a.type;this.offset.copy(a.offset);this.repeat.copy(a.repeat);this.center.copy(a.center);this.rotation=a.rotation;this.matrixAutoUpdate=a.matrixAutoUpdate;this.matrix.copy(a.matrix);this.generateMipmaps=a.generateMipmaps;this.premultiplyAlpha=a.premultiplyAlpha;this.flipY=a.flipY;this.unpackAlignment=a.unpackAlignment;this.encoding=a.encoding;return this},toJSON:function(a){var b=void 0===a||"string"===typeof a;if(!b&&void 0!==a.textures[this.uuid])return a.textures[this.uuid];
var c={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};
if(void 0!==this.image){var d=this.image;void 0===d.uuid&&(d.uuid=P.generateUUID());if(!b&&void 0===a.images[d.uuid]){if(Array.isArray(d)){var e=[];for(var f=0,g=d.length;f<g;f++)e.push(Jb.getDataURL(d[f]))}else e=Jb.getDataURL(d);a.images[d.uuid]={uuid:d.uuid,url:e}}c.image=d.uuid}b||(a.textures[this.uuid]=c);return c},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(a){if(300!==this.mapping)return a;a.applyMatrix3(this.matrix);if(0>a.x||1<a.x)switch(this.wrapS){case 1E3:a.x-=
Math.floor(a.x);break;case 1001:a.x=0>a.x?0:1;break;case 1002:a.x=1===Math.abs(Math.floor(a.x)%2)?Math.ceil(a.x)-a.x:a.x-Math.floor(a.x)}if(0>a.y||1<a.y)switch(this.wrapT){case 1E3:a.y-=Math.floor(a.y);break;case 1001:a.y=0>a.y?0:1;break;case 1002:a.y=1===Math.abs(Math.floor(a.y)%2)?Math.ceil(a.y)-a.y:a.y-Math.floor(a.y)}this.flipY&&(a.y=1-a.y);return a}});Object.defineProperty(Y.prototype,"needsUpdate",{set:function(a){!0===a&&this.version++}});Object.defineProperties(da.prototype,{width:{get:function(){return this.z},
set:function(a){this.z=a}},height:{get:function(){return this.w},set:function(a){this.w=a}}});Object.assign(da.prototype,{isVector4:!0,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setScalar:function(a){this.w=this.z=this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;
break;case 2:this.z=b;break;case 3:this.w=b;break;default:throw Error("index is out of range: "+a);}return this},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+a);}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;this.z+=a.z*b;this.w+=a.w*b;return this},sub:function(a,b){if(void 0!==b)return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,
b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;this.w-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=this.w;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*
e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b);return this},setAxisAngleFromRotationMatrix:function(a){a=a.elements;var b=a[0];var c=a[4];var d=a[8],e=a[1],f=a[5],g=a[9];var h=a[2];var l=a[6];var m=a[10];if(.01>Math.abs(c-e)&&.01>Math.abs(d-h)&&.01>Math.abs(g-l)){if(.1>Math.abs(c+
e)&&.1>Math.abs(d+h)&&.1>Math.abs(g+l)&&.1>Math.abs(b+f+m-3))return this.set(1,0,0,0),this;a=Math.PI;b=(b+1)/2;f=(f+1)/2;m=(m+1)/2;c=(c+e)/4;d=(d+h)/4;g=(g+l)/4;b>f&&b>m?.01>b?(l=0,c=h=.707106781):(l=Math.sqrt(b),h=c/l,c=d/l):f>m?.01>f?(l=.707106781,h=0,c=.707106781):(h=Math.sqrt(f),l=c/h,c=g/h):.01>m?(h=l=.707106781,c=0):(c=Math.sqrt(m),l=d/c,h=g/c);this.set(l,h,c,a);return this}a=Math.sqrt((l-g)*(l-g)+(d-h)*(d-h)+(e-c)*(e-c));.001>Math.abs(a)&&(a=1);this.x=(l-g)/a;this.y=(d-h)/a;this.z=(e-c)/a;
this.w=Math.acos((b+f+m-1)/2);return this},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);this.z=Math.min(this.z,a.z);this.w=Math.min(this.w,a.w);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);this.z=Math.max(this.z,a.z);this.w=Math.max(this.w,a.w);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));this.z=Math.max(a.z,Math.min(b.z,this.z));this.w=Math.max(a.w,Math.min(b.w,
this.w));return this},clampScalar:function(a,b){this.x=Math.max(a,Math.min(b,this.x));this.y=Math.max(a,Math.min(b,this.y));this.z=Math.max(a,Math.min(b,this.z));this.w=Math.max(a,Math.min(b,this.w));return this},clampLength:function(a,b){var c=this.length();return this.divideScalar(c||1).multiplyScalar(Math.max(a,Math.min(b,c)))},floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this},ceil:function(){this.x=Math.ceil(this.x);
this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);this.w=0>this.w?Math.ceil(this.w):Math.floor(this.w);return this},negate:function(){this.x=-this.x;
this.y=-this.y;this.z=-this.z;this.w=-this.w;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(a){return this.normalize().multiplyScalar(a)},
lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+2];this.w=a[b+3];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;a[b+3]=
this.w;return a},fromBufferAttribute:function(a,b,c){void 0!==c&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");this.x=a.getX(b);this.y=a.getY(b);this.z=a.getZ(b);this.w=a.getW(b);return this}});Ba.prototype=Object.assign(Object.create(Aa.prototype),{constructor:Ba,isWebGLRenderTarget:!0,setSize:function(a,b){if(this.width!==a||this.height!==b)this.width=a,this.height=b,this.texture.image.width=a,this.texture.image.height=b,this.dispose();this.viewport.set(0,0,
a,b);this.scissor.set(0,0,a,b)},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.width=a.width;this.height=a.height;this.viewport.copy(a.viewport);this.texture=a.texture.clone();this.depthBuffer=a.depthBuffer;this.stencilBuffer=a.stencilBuffer;this.depthTexture=a.depthTexture;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});Sf.prototype=Object.assign(Object.create(Ba.prototype),{constructor:Sf,isWebGLMultisampleRenderTarget:!0,copy:function(a){Ba.prototype.copy.call(this,
a);this.samples=a.samples;return this}});var Ka=new n,ca=new Q,tk=new n(0,0,0),uk=new n(1,1,1),Kb=new n,uf=new n,pa=new n;Object.assign(Q.prototype,{isMatrix4:!0,set:function(a,b,c,d,e,f,g,h,l,m,k,q,n,p,t,v){var r=this.elements;r[0]=a;r[4]=b;r[8]=c;r[12]=d;r[1]=e;r[5]=f;r[9]=g;r[13]=h;r[2]=l;r[6]=m;r[10]=k;r[14]=q;r[3]=n;r[7]=p;r[11]=t;r[15]=v;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},clone:function(){return(new Q).fromArray(this.elements)},copy:function(a){var b=
this.elements;a=a.elements;b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=a[12];b[13]=a[13];b[14]=a[14];b[15]=a[15];return this},copyPosition:function(a){var b=this.elements;a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractBasis:function(a,b,c){a.setFromMatrixColumn(this,0);b.setFromMatrixColumn(this,1);c.setFromMatrixColumn(this,2);return this},makeBasis:function(a,b,c){this.set(a.x,b.x,c.x,0,a.y,
b.y,c.y,0,a.z,b.z,c.z,0,0,0,0,1);return this},extractRotation:function(a){var b=this.elements,c=a.elements,d=1/Ka.setFromMatrixColumn(a,0).length(),e=1/Ka.setFromMatrixColumn(a,1).length();a=1/Ka.setFromMatrixColumn(a,2).length();b[0]=c[0]*d;b[1]=c[1]*d;b[2]=c[2]*d;b[3]=0;b[4]=c[4]*e;b[5]=c[5]*e;b[6]=c[6]*e;b[7]=0;b[8]=c[8]*a;b[9]=c[9]*a;b[10]=c[10]*a;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},makeRotationFromEuler:function(a){a&&a.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
var b=this.elements,c=a.x,d=a.y,e=a.z,f=Math.cos(c);c=Math.sin(c);var g=Math.cos(d);d=Math.sin(d);var h=Math.cos(e);e=Math.sin(e);if("XYZ"===a.order){a=f*h;var l=f*e,m=c*h,k=c*e;b[0]=g*h;b[4]=-g*e;b[8]=d;b[1]=l+m*d;b[5]=a-k*d;b[9]=-c*g;b[2]=k-a*d;b[6]=m+l*d;b[10]=f*g}else"YXZ"===a.order?(a=g*h,l=g*e,m=d*h,k=d*e,b[0]=a+k*c,b[4]=m*c-l,b[8]=f*d,b[1]=f*e,b[5]=f*h,b[9]=-c,b[2]=l*c-m,b[6]=k+a*c,b[10]=f*g):"ZXY"===a.order?(a=g*h,l=g*e,m=d*h,k=d*e,b[0]=a-k*c,b[4]=-f*e,b[8]=m+l*c,b[1]=l+m*c,b[5]=f*h,b[9]=
k-a*c,b[2]=-f*d,b[6]=c,b[10]=f*g):"ZYX"===a.order?(a=f*h,l=f*e,m=c*h,k=c*e,b[0]=g*h,b[4]=m*d-l,b[8]=a*d+k,b[1]=g*e,b[5]=k*d+a,b[9]=l*d-m,b[2]=-d,b[6]=c*g,b[10]=f*g):"YZX"===a.order?(a=f*g,l=f*d,m=c*g,k=c*d,b[0]=g*h,b[4]=k-a*e,b[8]=m*e+l,b[1]=e,b[5]=f*h,b[9]=-c*h,b[2]=-d*h,b[6]=l*e+m,b[10]=a-k*e):"XZY"===a.order&&(a=f*g,l=f*d,m=c*g,k=c*d,b[0]=g*h,b[4]=-e,b[8]=d*h,b[1]=a*e+k,b[5]=f*h,b[9]=l*e-m,b[2]=m*e-l,b[6]=c*h,b[10]=k*e+a);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},makeRotationFromQuaternion:function(a){return this.compose(tk,
a,uk)},lookAt:function(a,b,c){var d=this.elements;pa.subVectors(a,b);0===pa.lengthSq()&&(pa.z=1);pa.normalize();Kb.crossVectors(c,pa);0===Kb.lengthSq()&&(1===Math.abs(c.z)?pa.x+=1E-4:pa.z+=1E-4,pa.normalize(),Kb.crossVectors(c,pa));Kb.normalize();uf.crossVectors(pa,Kb);d[0]=Kb.x;d[4]=uf.x;d[8]=pa.x;d[1]=Kb.y;d[5]=uf.y;d[9]=pa.y;d[2]=Kb.z;d[6]=uf.z;d[10]=pa.z;return this},multiply:function(a,b){return void 0!==b?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),
this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},premultiply:function(a){return this.multiplyMatrices(a,this)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements;b=this.elements;a=c[0];var e=c[4],f=c[8],g=c[12],h=c[1],l=c[5],m=c[9],k=c[13],q=c[2],n=c[6],p=c[10],t=c[14],v=c[3],y=c[7],w=c[11];c=c[15];var x=d[0],B=d[4],I=d[8],z=d[12],A=d[1],E=d[5],C=d[9],D=d[13],H=d[2],G=d[6],J=d[10],L=d[14],N=d[3],O=d[7],P=d[11];d=d[15];b[0]=a*x+e*A+f*H+g*N;b[4]=a*B+e*E+f*G+g*O;b[8]=a*I+e*C+f*J+
g*P;b[12]=a*z+e*D+f*L+g*d;b[1]=h*x+l*A+m*H+k*N;b[5]=h*B+l*E+m*G+k*O;b[9]=h*I+l*C+m*J+k*P;b[13]=h*z+l*D+m*L+k*d;b[2]=q*x+n*A+p*H+t*N;b[6]=q*B+n*E+p*G+t*O;b[10]=q*I+n*C+p*J+t*P;b[14]=q*z+n*D+p*L+t*d;b[3]=v*x+y*A+w*H+c*N;b[7]=v*B+y*E+w*G+c*O;b[11]=v*I+y*C+w*J+c*P;b[15]=v*z+y*D+w*L+c*d;return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},applyToBufferAttribute:function(a){for(var b=
0,c=a.count;b<c;b++)Ka.x=a.getX(b),Ka.y=a.getY(b),Ka.z=a.getZ(b),Ka.applyMatrix4(this),a.setXYZ(b,Ka.x,Ka.y,Ka.z);return a},determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=a[5],h=a[9],l=a[13],m=a[2],k=a[6],q=a[10],n=a[14];return a[3]*(+e*h*k-d*l*k-e*g*q+c*l*q+d*g*n-c*h*n)+a[7]*(+b*h*n-b*l*q+e*f*q-d*f*n+d*l*m-e*h*m)+a[11]*(+b*l*k-b*g*n-e*f*k+c*f*n+e*g*m-c*l*m)+a[15]*(-d*g*m-b*h*k+b*g*q+d*f*k-c*f*q+c*h*m)},transpose:function(){var a=this.elements;var b=a[1];a[1]=a[4];
a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},setPosition:function(a,b,c){var d=this.elements;a.isVector3?(d[12]=a.x,d[13]=a.y,d[14]=a.z):(d[12]=a,d[13]=b,d[14]=c);return this},getInverse:function(a,b){var c=this.elements,d=a.elements;a=d[0];var e=d[1],f=d[2],g=d[3],h=d[4],l=d[5],m=d[6],k=d[7],q=d[8],n=d[9],p=d[10],t=d[11],v=d[12],y=d[13],w=d[14];d=d[15];var x=n*w*k-y*p*k+y*m*t-l*w*t-n*m*d+l*p*d,
B=v*p*k-q*w*k-v*m*t+h*w*t+q*m*d-h*p*d,I=q*y*k-v*n*k+v*l*t-h*y*t-q*l*d+h*n*d,z=v*n*m-q*y*m-v*l*p+h*y*p+q*l*w-h*n*w,A=a*x+e*B+f*I+g*z;if(0===A){if(!0===b)throw Error("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");console.warn("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");return this.identity()}b=1/A;c[0]=x*b;c[1]=(y*p*g-n*w*g-y*f*t+e*w*t+n*f*d-e*p*d)*b;c[2]=(l*w*g-y*m*g+y*f*k-e*w*k-l*f*d+e*m*d)*b;c[3]=(n*m*g-l*p*g-n*f*k+e*p*k+l*f*t-e*m*t)*b;c[4]=B*b;c[5]=
(q*w*g-v*p*g+v*f*t-a*w*t-q*f*d+a*p*d)*b;c[6]=(v*m*g-h*w*g-v*f*k+a*w*k+h*f*d-a*m*d)*b;c[7]=(h*p*g-q*m*g+q*f*k-a*p*k-h*f*t+a*m*t)*b;c[8]=I*b;c[9]=(v*n*g-q*y*g-v*e*t+a*y*t+q*e*d-a*n*d)*b;c[10]=(h*y*g-v*l*g+v*e*k-a*y*k-h*e*d+a*l*d)*b;c[11]=(q*l*g-h*n*g-q*e*k+a*n*k+h*e*t-a*l*t)*b;c[12]=z*b;c[13]=(q*y*f-v*n*f+v*e*p-a*y*p-q*e*w+a*n*w)*b;c[14]=(v*l*f-h*y*f-v*e*m+a*y*m+h*e*w-a*l*w)*b;c[15]=(h*n*f-q*l*f+q*e*m-a*n*m-h*e*p+a*l*p)*b;return this},scale:function(a){var b=this.elements,c=a.x,d=a.y;a=a.z;b[0]*=c;
b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10]))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=
Math.cos(a);a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b);b=Math.sin(b);var d=1-c,e=a.x,f=a.y;a=a.z;var g=d*e,h=d*f;this.set(g*e+c,g*f-b*a,g*a+b*f,0,g*f+b*a,h*f+c,h*a-b*e,0,g*a-b*f,h*a+b*e,d*a*a+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},makeShear:function(a,
b,c){this.set(1,b,c,0,a,1,c,0,a,b,1,0,0,0,0,1);return this},compose:function(a,b,c){var d=this.elements,e=b._x,f=b._y,g=b._z,h=b._w,l=e+e,m=f+f,k=g+g;b=e*l;var n=e*m;e*=k;var u=f*m;f*=k;g*=k;l*=h;m*=h;h*=k;k=c.x;var p=c.y;c=c.z;d[0]=(1-(u+g))*k;d[1]=(n+h)*k;d[2]=(e-m)*k;d[3]=0;d[4]=(n-h)*p;d[5]=(1-(b+g))*p;d[6]=(f+l)*p;d[7]=0;d[8]=(e+m)*c;d[9]=(f-l)*c;d[10]=(1-(b+u))*c;d[11]=0;d[12]=a.x;d[13]=a.y;d[14]=a.z;d[15]=1;return this},decompose:function(a,b,c){var d=this.elements,e=Ka.set(d[0],d[1],d[2]).length(),
f=Ka.set(d[4],d[5],d[6]).length(),g=Ka.set(d[8],d[9],d[10]).length();0>this.determinant()&&(e=-e);a.x=d[12];a.y=d[13];a.z=d[14];ca.copy(this);a=1/e;d=1/f;var h=1/g;ca.elements[0]*=a;ca.elements[1]*=a;ca.elements[2]*=a;ca.elements[4]*=d;ca.elements[5]*=d;ca.elements[6]*=d;ca.elements[8]*=h;ca.elements[9]*=h;ca.elements[10]*=h;b.setFromRotationMatrix(ca);c.x=e;c.y=f;c.z=g;return this},makePerspective:function(a,b,c,d,e,f){void 0===f&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
var g=this.elements;g[0]=2*e/(b-a);g[4]=0;g[8]=(b+a)/(b-a);g[12]=0;g[1]=0;g[5]=2*e/(c-d);g[9]=(c+d)/(c-d);g[13]=0;g[2]=0;g[6]=0;g[10]=-(f+e)/(f-e);g[14]=-2*f*e/(f-e);g[3]=0;g[7]=0;g[11]=-1;g[15]=0;return this},makeOrthographic:function(a,b,c,d,e,f){var g=this.elements,h=1/(b-a),l=1/(c-d),m=1/(f-e);g[0]=2*h;g[4]=0;g[8]=0;g[12]=-((b+a)*h);g[1]=0;g[5]=2*l;g[9]=0;g[13]=-((c+d)*l);g[2]=0;g[6]=0;g[10]=-2*m;g[14]=-((f+e)*m);g[3]=0;g[7]=0;g[11]=0;g[15]=1;return this},equals:function(a){var b=this.elements;
a=a.elements;for(var c=0;16>c;c++)if(b[c]!==a[c])return!1;return!0},fromArray:function(a,b){void 0===b&&(b=0);for(var c=0;16>c;c++)this.elements[c]=a[c+b];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a}});var mi=new Q,ni=new wa;Pb.RotationOrders=
"XYZ YZX ZXY XZY YXZ ZYX".split(" ");Pb.DefaultOrder="XYZ";Object.defineProperties(Pb.prototype,{x:{get:function(){return this._x},set:function(a){this._x=a;this._onChangeCallback()}},y:{get:function(){return this._y},set:function(a){this._y=a;this._onChangeCallback()}},z:{get:function(){return this._z},set:function(a){this._z=a;this._onChangeCallback()}},order:{get:function(){return this._order},set:function(a){this._order=a;this._onChangeCallback()}}});Object.assign(Pb.prototype,{isEuler:!0,set:function(a,
b,c,d){this._x=a;this._y=b;this._z=c;this._order=d||this._order;this._onChangeCallback();return this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(a){this._x=a._x;this._y=a._y;this._z=a._z;this._order=a._order;this._onChangeCallback();return this},setFromRotationMatrix:function(a,b,c){var d=P.clamp,e=a.elements;a=e[0];var f=e[4],g=e[8],h=e[1],l=e[5],m=e[9],k=e[2],n=e[6];e=e[10];b=b||this._order;"XYZ"===b?(this._y=Math.asin(d(g,-1,1)),.9999999>Math.abs(g)?
(this._x=Math.atan2(-m,e),this._z=Math.atan2(-f,a)):(this._x=Math.atan2(n,l),this._z=0)):"YXZ"===b?(this._x=Math.asin(-d(m,-1,1)),.9999999>Math.abs(m)?(this._y=Math.atan2(g,e),this._z=Math.atan2(h,l)):(this._y=Math.atan2(-k,a),this._z=0)):"ZXY"===b?(this._x=Math.asin(d(n,-1,1)),.9999999>Math.abs(n)?(this._y=Math.atan2(-k,e),this._z=Math.atan2(-f,l)):(this._y=0,this._z=Math.atan2(h,a))):"ZYX"===b?(this._y=Math.asin(-d(k,-1,1)),.9999999>Math.abs(k)?(this._x=Math.atan2(n,e),this._z=Math.atan2(h,a)):
(this._x=0,this._z=Math.atan2(-f,l))):"YZX"===b?(this._z=Math.asin(d(h,-1,1)),.9999999>Math.abs(h)?(this._x=Math.atan2(-m,l),this._y=Math.atan2(-k,a)):(this._x=0,this._y=Math.atan2(g,e))):"XZY"===b?(this._z=Math.asin(-d(f,-1,1)),.9999999>Math.abs(f)?(this._x=Math.atan2(n,l),this._y=Math.atan2(g,a)):(this._x=Math.atan2(-m,e),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+b);this._order=b;!1!==c&&this._onChangeCallback();return this},setFromQuaternion:function(a,
b,c){mi.makeRotationFromQuaternion(a);return this.setFromRotationMatrix(mi,b,c)},setFromVector3:function(a,b){return this.set(a.x,a.y,a.z,b||this._order)},reorder:function(a){ni.setFromEuler(this);return this.setFromQuaternion(ni,a)},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];void 0!==a[3]&&(this._order=a[3]);this._onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=
[]);void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;a[b+3]=this._order;return a},toVector3:function(a){return a?a.set(this._x,this._y,this._z):new n(this._x,this._y,this._z)},_onChange:function(a){this._onChangeCallback=a;return this},_onChangeCallback:function(){}});Object.assign(Tf.prototype,{set:function(a){this.mask=1<<a|0},enable:function(a){this.mask=this.mask|1<<a|0},enableAll:function(){this.mask=-1},toggle:function(a){this.mask^=1<<a|0},disable:function(a){this.mask&=~(1<<a|
0)},disableAll:function(){this.mask=0},test:function(a){return 0!==(this.mask&a.mask)}});var Ti=0,oi=new n,md=new wa,vb=new Q,vf=new n,xe=new n,vk=new n,wk=new wa,pi=new n(1,0,0),qi=new n(0,1,0),ri=new n(0,0,1),xk={type:"added"},yk={type:"removed"};E.DefaultUp=new n(0,1,0);E.DefaultMatrixAutoUpdate=!0;E.prototype=Object.assign(Object.create(Aa.prototype),{constructor:E,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(a){this.matrixAutoUpdate&&this.updateMatrix();
this.matrix.premultiply(a);this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(a){this.quaternion.premultiply(a);return this},setRotationFromAxisAngle:function(a,b){this.quaternion.setFromAxisAngle(a,b)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,!0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(a,b){md.setFromAxisAngle(a,b);
this.quaternion.multiply(md);return this},rotateOnWorldAxis:function(a,b){md.setFromAxisAngle(a,b);this.quaternion.premultiply(md);return this},rotateX:function(a){return this.rotateOnAxis(pi,a)},rotateY:function(a){return this.rotateOnAxis(qi,a)},rotateZ:function(a){return this.rotateOnAxis(ri,a)},translateOnAxis:function(a,b){oi.copy(a).applyQuaternion(this.quaternion);this.position.add(oi.multiplyScalar(b));return this},translateX:function(a){return this.translateOnAxis(pi,a)},translateY:function(a){return this.translateOnAxis(qi,
a)},translateZ:function(a){return this.translateOnAxis(ri,a)},localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(a){return a.applyMatrix4(vb.getInverse(this.matrixWorld))},lookAt:function(a,b,c){a.isVector3?vf.copy(a):vf.set(a,b,c);a=this.parent;this.updateWorldMatrix(!0,!1);xe.setFromMatrixPosition(this.matrixWorld);this.isCamera||this.isLight?vb.lookAt(xe,vf,this.up):vb.lookAt(vf,xe,this.up);this.quaternion.setFromRotationMatrix(vb);a&&(vb.extractRotation(a.matrixWorld),
md.setFromRotationMatrix(vb),this.quaternion.premultiply(md.inverse()))},add:function(a){if(1<arguments.length){for(var b=0;b<arguments.length;b++)this.add(arguments[b]);return this}if(a===this)return console.error("THREE.Object3D.add: object can't be added as a child of itself.",a),this;a&&a.isObject3D?(null!==a.parent&&a.parent.remove(a),a.parent=this,this.children.push(a),a.dispatchEvent(xk)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",a);return this},remove:function(a){if(1<
arguments.length){for(var b=0;b<arguments.length;b++)this.remove(arguments[b]);return this}b=this.children.indexOf(a);-1!==b&&(a.parent=null,this.children.splice(b,1),a.dispatchEvent(yk));return this},attach:function(a){this.updateWorldMatrix(!0,!1);vb.getInverse(this.matrixWorld);null!==a.parent&&(a.parent.updateWorldMatrix(!0,!1),vb.multiply(a.parent.matrixWorld));a.applyMatrix(vb);a.updateWorldMatrix(!1,!1);this.add(a);return this},getObjectById:function(a){return this.getObjectByProperty("id",
a)},getObjectByName:function(a){return this.getObjectByProperty("name",a)},getObjectByProperty:function(a,b){if(this[a]===b)return this;for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c].getObjectByProperty(a,b);if(void 0!==e)return e}},getWorldPosition:function(a){void 0===a&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),a=new n);this.updateMatrixWorld(!0);return a.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(a){void 0===a&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),
a=new wa);this.updateMatrixWorld(!0);this.matrixWorld.decompose(xe,a,vk);return a},getWorldScale:function(a){void 0===a&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),a=new n);this.updateMatrixWorld(!0);this.matrixWorld.decompose(xe,wk,a);return a},getWorldDirection:function(a){void 0===a&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),a=new n);this.updateMatrixWorld(!0);var b=this.matrixWorld.elements;return a.set(b[8],b[9],b[10]).normalize()},
raycast:function(){},traverse:function(a){a(this);for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].traverse(a)},traverseVisible:function(a){if(!1!==this.visible){a(this);for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].traverseVisible(a)}},traverseAncestors:function(a){var b=this.parent;null!==b&&(a(b),b.traverseAncestors(a))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){this.matrixAutoUpdate&&
this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].updateMatrixWorld(a)},updateWorldMatrix:function(a,b){var c=this.parent;!0===a&&null!==c&&c.updateWorldMatrix(!0,!1);this.matrixAutoUpdate&&this.updateMatrix();null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,
this.matrix);if(!0===b)for(a=this.children,b=0,c=a.length;b<c;b++)a[b].updateWorldMatrix(!1,!0)},toJSON:function(a){function b(b,c){void 0===b[c.uuid]&&(b[c.uuid]=c.toJSON(a));return c.uuid}function c(a){var b=[],c;for(c in a){var d=a[c];delete d.metadata;b.push(d)}return b}var d=void 0===a||"string"===typeof a,e={};d&&(a={geometries:{},materials:{},textures:{},images:{},shapes:{}},e.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var f={};f.uuid=this.uuid;f.type=this.type;""!==
this.name&&(f.name=this.name);!0===this.castShadow&&(f.castShadow=!0);!0===this.receiveShadow&&(f.receiveShadow=!0);!1===this.visible&&(f.visible=!1);!1===this.frustumCulled&&(f.frustumCulled=!1);0!==this.renderOrder&&(f.renderOrder=this.renderOrder);"{}"!==JSON.stringify(this.userData)&&(f.userData=this.userData);f.layers=this.layers.mask;f.matrix=this.matrix.toArray();!1===this.matrixAutoUpdate&&(f.matrixAutoUpdate=!1);this.isMesh&&0!==this.drawMode&&(f.drawMode=this.drawMode);this.isInstancedMesh&&
(f.type="InstancedMesh",f.count=this.count,f.instanceMatrix=this.instanceMatrix.toJSON());if(this.isMesh||this.isLine||this.isPoints){f.geometry=b(a.geometries,this.geometry);var g=this.geometry.parameters;if(void 0!==g&&void 0!==g.shapes)if(g=g.shapes,Array.isArray(g))for(var h=0,l=g.length;h<l;h++)b(a.shapes,g[h]);else b(a.shapes,g)}if(void 0!==this.material)if(Array.isArray(this.material)){g=[];h=0;for(l=this.material.length;h<l;h++)g.push(b(a.materials,this.material[h]));f.material=g}else f.material=
b(a.materials,this.material);if(0<this.children.length)for(f.children=[],h=0;h<this.children.length;h++)f.children.push(this.children[h].toJSON(a).object);if(d){d=c(a.geometries);h=c(a.materials);l=c(a.textures);var m=c(a.images);g=c(a.shapes);0<d.length&&(e.geometries=d);0<h.length&&(e.materials=h);0<l.length&&(e.textures=l);0<m.length&&(e.images=m);0<g.length&&(e.shapes=g)}e.object=f;return e},clone:function(a){return(new this.constructor).copy(this,a)},copy:function(a,b){void 0===b&&(b=!0);this.name=
a.name;this.up.copy(a.up);this.position.copy(a.position);this.quaternion.copy(a.quaternion);this.scale.copy(a.scale);this.matrix.copy(a.matrix);this.matrixWorld.copy(a.matrixWorld);this.matrixAutoUpdate=a.matrixAutoUpdate;this.matrixWorldNeedsUpdate=a.matrixWorldNeedsUpdate;this.layers.mask=a.layers.mask;this.visible=a.visible;this.castShadow=a.castShadow;this.receiveShadow=a.receiveShadow;this.frustumCulled=a.frustumCulled;this.renderOrder=a.renderOrder;this.userData=JSON.parse(JSON.stringify(a.userData));
if(!0===b)for(b=0;b<a.children.length;b++)this.add(a.children[b].clone());return this}});vd.prototype=Object.assign(Object.create(E.prototype),{constructor:vd,isScene:!0,copy:function(a,b){E.prototype.copy.call(this,a,b);null!==a.background&&(this.background=a.background.clone());null!==a.fog&&(this.fog=a.fog.clone());null!==a.overrideMaterial&&(this.overrideMaterial=a.overrideMaterial.clone());this.autoUpdate=a.autoUpdate;this.matrixAutoUpdate=a.matrixAutoUpdate;return this},toJSON:function(a){var b=
E.prototype.toJSON.call(this,a);null!==this.background&&(b.object.background=this.background.toJSON(a));null!==this.fog&&(b.object.fog=this.fog.toJSON());return b},dispose:function(){this.dispatchEvent({type:"dispose"})}});var wb=[new n,new n,new n,new n,new n,new n,new n,new n],ib=new n,nd=new n,od=new n,pd=new n,Lb=new n,Mb=new n,pc=new n,ye=new n,wf=new n,xf=new n,Qb=new n;Object.assign(ab.prototype,{isBox3:!0,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromArray:function(a){for(var b=
Infinity,c=Infinity,d=Infinity,e=-Infinity,f=-Infinity,g=-Infinity,h=0,l=a.length;h<l;h+=3){var m=a[h],k=a[h+1],n=a[h+2];m<b&&(b=m);k<c&&(c=k);n<d&&(d=n);m>e&&(e=m);k>f&&(f=k);n>g&&(g=n)}this.min.set(b,c,d);this.max.set(e,f,g);return this},setFromBufferAttribute:function(a){for(var b=Infinity,c=Infinity,d=Infinity,e=-Infinity,f=-Infinity,g=-Infinity,h=0,l=a.count;h<l;h++){var m=a.getX(h),k=a.getY(h),n=a.getZ(h);m<b&&(b=m);k<c&&(c=k);n<d&&(d=n);m>e&&(e=m);k>f&&(f=k);n>g&&(g=n)}this.min.set(b,c,d);
this.max.set(e,f,g);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(a,b){b=ib.copy(b).multiplyScalar(.5);this.min.copy(a).sub(b);this.max.copy(a).add(b);return this},setFromObject:function(a){this.makeEmpty();return this.expandByObject(a)},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=
this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(a){void 0===a&&(console.warn("THREE.Box3: .getCenter() target is now required"),a=new n);return this.isEmpty()?a.set(0,0,0):a.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(a){void 0===a&&(console.warn("THREE.Box3: .getSize() target is now required"),a=new n);return this.isEmpty()?
a.set(0,0,0):a.subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},expandByObject:function(a){var b;a.updateWorldMatrix(!1,!1);var c=a.geometry;if(void 0!==c)if(c.isGeometry){var d=c.vertices;c=0;for(b=d.length;c<b;c++)ib.copy(d[c]),ib.applyMatrix4(a.matrixWorld),this.expandByPoint(ib)}else if(c.isBufferGeometry&&
(d=c.attributes.position,void 0!==d))for(c=0,b=d.count;c<b;c++)ib.fromBufferAttribute(d,c).applyMatrix4(a.matrixWorld),this.expandByPoint(ib);a=a.children;c=0;for(b=a.length;c<b;c++)this.expandByObject(a[c]);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=
this.max.z},getParameter:function(a,b){void 0===b&&(console.warn("THREE.Box3: .getParameter() target is now required"),b=new n);return b.set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},intersectsSphere:function(a){this.clampPoint(a.center,ib);return ib.distanceToSquared(a.center)<=
a.radius*a.radius},intersectsPlane:function(a){if(0<a.normal.x){var b=a.normal.x*this.min.x;var c=a.normal.x*this.max.x}else b=a.normal.x*this.max.x,c=a.normal.x*this.min.x;0<a.normal.y?(b+=a.normal.y*this.min.y,c+=a.normal.y*this.max.y):(b+=a.normal.y*this.max.y,c+=a.normal.y*this.min.y);0<a.normal.z?(b+=a.normal.z*this.min.z,c+=a.normal.z*this.max.z):(b+=a.normal.z*this.max.z,c+=a.normal.z*this.min.z);return b<=-a.constant&&c>=-a.constant},intersectsTriangle:function(a){if(this.isEmpty())return!1;
this.getCenter(ye);wf.subVectors(this.max,ye);nd.subVectors(a.a,ye);od.subVectors(a.b,ye);pd.subVectors(a.c,ye);Lb.subVectors(od,nd);Mb.subVectors(pd,od);pc.subVectors(nd,pd);a=[0,-Lb.z,Lb.y,0,-Mb.z,Mb.y,0,-pc.z,pc.y,Lb.z,0,-Lb.x,Mb.z,0,-Mb.x,pc.z,0,-pc.x,-Lb.y,Lb.x,0,-Mb.y,Mb.x,0,-pc.y,pc.x,0];if(!Uf(a,nd,od,pd,wf))return!1;a=[1,0,0,0,1,0,0,0,1];if(!Uf(a,nd,od,pd,wf))return!1;xf.crossVectors(Lb,Mb);a=[xf.x,xf.y,xf.z];return Uf(a,nd,od,pd,wf)},clampPoint:function(a,b){void 0===b&&(console.warn("THREE.Box3: .clampPoint() target is now required"),
b=new n);return b.copy(a).clamp(this.min,this.max)},distanceToPoint:function(a){return ib.copy(a).clamp(this.min,this.max).sub(a).length()},getBoundingSphere:function(a){void 0===a&&console.error("THREE.Box3: .getBoundingSphere() target is now required");this.getCenter(a.center);a.radius=.5*this.getSize(ib).length();return a},intersect:function(a){this.min.max(a.min);this.max.min(a.max);this.isEmpty()&&this.makeEmpty();return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},
applyMatrix4:function(a){if(this.isEmpty())return this;wb[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(a);wb[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(a);wb[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(a);wb[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(a);wb[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(a);wb[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(a);wb[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(a);wb[7].set(this.max.x,this.max.y,
this.max.z).applyMatrix4(a);this.setFromPoints(wb);return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)}});var zk=new ab;Object.assign(mb.prototype,{set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromPoints:function(a,b){var c=this.center;void 0!==b?c.copy(b):zk.setFromPoints(a).getCenter(c);for(var d=b=0,e=a.length;d<e;d++)b=Math.max(b,c.distanceToSquared(a[d]));this.radius=Math.sqrt(b);
return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},empty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},intersectsBox:function(a){return a.intersectsSphere(this)},
intersectsPlane:function(a){return Math.abs(a.distanceToPoint(this.center))<=this.radius},clampPoint:function(a,b){var c=this.center.distanceToSquared(a);void 0===b&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),b=new n);b.copy(a);c>this.radius*this.radius&&(b.sub(this.center).normalize(),b.multiplyScalar(this.radius).add(this.center));return b},getBoundingBox:function(a){void 0===a&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),a=new ab);a.set(this.center,
this.center);a.expandByScalar(this.radius);return a},applyMatrix4:function(a){this.center.applyMatrix4(a);this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius}});var xb=new n,Ng=new n,yf=new n,Nb=new n,Og=new n,zf=new n,Pg=new n;Object.assign(Rb.prototype,{set:function(a,b){this.origin.copy(a);this.direction.copy(b);return this},clone:function(){return(new this.constructor).copy(this)},
copy:function(a){this.origin.copy(a.origin);this.direction.copy(a.direction);return this},at:function(a,b){void 0===b&&(console.warn("THREE.Ray: .at() target is now required"),b=new n);return b.copy(this.direction).multiplyScalar(a).add(this.origin)},lookAt:function(a){this.direction.copy(a).sub(this.origin).normalize();return this},recast:function(a){this.origin.copy(this.at(a,xb));return this},closestPointToPoint:function(a,b){void 0===b&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),
b=new n);b.subVectors(a,this.origin);a=b.dot(this.direction);return 0>a?b.copy(this.origin):b.copy(this.direction).multiplyScalar(a).add(this.origin)},distanceToPoint:function(a){return Math.sqrt(this.distanceSqToPoint(a))},distanceSqToPoint:function(a){var b=xb.subVectors(a,this.origin).dot(this.direction);if(0>b)return this.origin.distanceToSquared(a);xb.copy(this.direction).multiplyScalar(b).add(this.origin);return xb.distanceToSquared(a)},distanceSqToSegment:function(a,b,c,d){Ng.copy(a).add(b).multiplyScalar(.5);
yf.copy(b).sub(a).normalize();Nb.copy(this.origin).sub(Ng);var e=.5*a.distanceTo(b),f=-this.direction.dot(yf),g=Nb.dot(this.direction),h=-Nb.dot(yf),l=Nb.lengthSq(),m=Math.abs(1-f*f);if(0<m){a=f*h-g;b=f*g-h;var k=e*m;0<=a?b>=-k?b<=k?(e=1/m,a*=e,b*=e,f=a*(a+f*b+2*g)+b*(f*a+b+2*h)+l):(b=e,a=Math.max(0,-(f*b+g)),f=-a*a+b*(b+2*h)+l):(b=-e,a=Math.max(0,-(f*b+g)),f=-a*a+b*(b+2*h)+l):b<=-k?(a=Math.max(0,-(-f*e+g)),b=0<a?-e:Math.min(Math.max(-e,-h),e),f=-a*a+b*(b+2*h)+l):b<=k?(a=0,b=Math.min(Math.max(-e,
-h),e),f=b*(b+2*h)+l):(a=Math.max(0,-(f*e+g)),b=0<a?e:Math.min(Math.max(-e,-h),e),f=-a*a+b*(b+2*h)+l)}else b=0<f?-e:e,a=Math.max(0,-(f*b+g)),f=-a*a+b*(b+2*h)+l;c&&c.copy(this.direction).multiplyScalar(a).add(this.origin);d&&d.copy(yf).multiplyScalar(b).add(Ng);return f},intersectSphere:function(a,b){xb.subVectors(a.center,this.origin);var c=xb.dot(this.direction),d=xb.dot(xb)-c*c;a=a.radius*a.radius;if(d>a)return null;a=Math.sqrt(a-d);d=c-a;c+=a;return 0>d&&0>c?null:0>d?this.at(c,b):this.at(d,b)},
intersectsSphere:function(a){return this.distanceSqToPoint(a.center)<=a.radius*a.radius},distanceToPlane:function(a){var b=a.normal.dot(this.direction);if(0===b)return 0===a.distanceToPoint(this.origin)?0:null;a=-(this.origin.dot(a.normal)+a.constant)/b;return 0<=a?a:null},intersectPlane:function(a,b){a=this.distanceToPlane(a);return null===a?null:this.at(a,b)},intersectsPlane:function(a){var b=a.distanceToPoint(this.origin);return 0===b||0>a.normal.dot(this.direction)*b?!0:!1},intersectBox:function(a,
b){var c=1/this.direction.x;var d=1/this.direction.y;var e=1/this.direction.z,f=this.origin;if(0<=c){var g=(a.min.x-f.x)*c;c*=a.max.x-f.x}else g=(a.max.x-f.x)*c,c*=a.min.x-f.x;if(0<=d){var h=(a.min.y-f.y)*d;d*=a.max.y-f.y}else h=(a.max.y-f.y)*d,d*=a.min.y-f.y;if(g>d||h>c)return null;if(h>g||g!==g)g=h;if(d<c||c!==c)c=d;0<=e?(h=(a.min.z-f.z)*e,a=(a.max.z-f.z)*e):(h=(a.max.z-f.z)*e,a=(a.min.z-f.z)*e);if(g>a||h>c)return null;if(h>g||g!==g)g=h;if(a<c||c!==c)c=a;return 0>c?null:this.at(0<=g?g:c,b)},intersectsBox:function(a){return null!==
this.intersectBox(a,xb)},intersectTriangle:function(a,b,c,d,e){Og.subVectors(b,a);zf.subVectors(c,a);Pg.crossVectors(Og,zf);b=this.direction.dot(Pg);if(0<b){if(d)return null;d=1}else if(0>b)d=-1,b=-b;else return null;Nb.subVectors(this.origin,a);a=d*this.direction.dot(zf.crossVectors(Nb,zf));if(0>a)return null;c=d*this.direction.dot(Og.cross(Nb));if(0>c||a+c>b)return null;a=-d*Nb.dot(Pg);return 0>a?null:this.at(a/b,e)},applyMatrix4:function(a){this.origin.applyMatrix4(a);this.direction.transformDirection(a);
return this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)}});var Qg=new n,Ak=new n,Bk=new Z;Object.assign(Oa.prototype,{isPlane:!0,set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(a,b,c){b=Qg.subVectors(c,b).cross(Ak.subVectors(a,
b)).normalize();this.setFromNormalAndCoplanarPoint(b,a);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-
a.radius},projectPoint:function(a,b){void 0===b&&(console.warn("THREE.Plane: .projectPoint() target is now required"),b=new n);return b.copy(this.normal).multiplyScalar(-this.distanceToPoint(a)).add(a)},intersectLine:function(a,b){void 0===b&&(console.warn("THREE.Plane: .intersectLine() target is now required"),b=new n);var c=a.delta(Qg),d=this.normal.dot(c);if(0===d){if(0===this.distanceToPoint(a.start))return b.copy(a.start)}else if(d=-(a.start.dot(this.normal)+this.constant)/d,!(0>d||1<d))return b.copy(c).multiplyScalar(d).add(a.start)},
intersectsLine:function(a){var b=this.distanceToPoint(a.start);a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectsBox:function(a){return a.intersectsPlane(this)},intersectsSphere:function(a){return a.intersectsPlane(this)},coplanarPoint:function(a){void 0===a&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),a=new n);return a.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(a,b){b=b||Bk.getNormalMatrix(a);a=this.coplanarPoint(Qg).applyMatrix4(a);
b=this.normal.applyMatrix3(b).normalize();this.constant=-a.dot(b);return this},translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&a.constant===this.constant}});var Ya=new n,yb=new n,Rg=new n,zb=new n,qd=new n,rd=new n,si=new n,Sg=new n,Tg=new n,Ug=new n;Object.assign(ba,{getNormal:function(a,b,c,d){void 0===d&&(console.warn("THREE.Triangle: .getNormal() target is now required"),d=new n);d.subVectors(c,b);Ya.subVectors(a,b);
d.cross(Ya);a=d.lengthSq();return 0<a?d.multiplyScalar(1/Math.sqrt(a)):d.set(0,0,0)},getBarycoord:function(a,b,c,d,e){Ya.subVectors(d,b);yb.subVectors(c,b);Rg.subVectors(a,b);a=Ya.dot(Ya);b=Ya.dot(yb);c=Ya.dot(Rg);var f=yb.dot(yb);d=yb.dot(Rg);var g=a*f-b*b;void 0===e&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),e=new n);if(0===g)return e.set(-2,-1,-1);g=1/g;f=(f*c-b*d)*g;a=(a*d-b*c)*g;return e.set(1-f-a,a,f)},containsPoint:function(a,b,c,d){ba.getBarycoord(a,b,c,d,zb);
return 0<=zb.x&&0<=zb.y&&1>=zb.x+zb.y},getUV:function(a,b,c,d,e,f,g,h){this.getBarycoord(a,b,c,d,zb);h.set(0,0);h.addScaledVector(e,zb.x);h.addScaledVector(f,zb.y);h.addScaledVector(g,zb.z);return h},isFrontFacing:function(a,b,c,d){Ya.subVectors(c,b);yb.subVectors(a,b);return 0>Ya.cross(yb).dot(d)?!0:!1}});Object.assign(ba.prototype,{set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);
return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},getArea:function(){Ya.subVectors(this.c,this.b);yb.subVectors(this.a,this.b);return.5*Ya.cross(yb).length()},getMidpoint:function(a){void 0===a&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),a=new n);return a.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(a){return ba.getNormal(this.a,this.b,
this.c,a)},getPlane:function(a){void 0===a&&(console.warn("THREE.Triangle: .getPlane() target is now required"),a=new Oa);return a.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(a,b){return ba.getBarycoord(a,this.a,this.b,this.c,b)},getUV:function(a,b,c,d,e){return ba.getUV(a,this.a,this.b,this.c,b,c,d,e)},containsPoint:function(a){return ba.containsPoint(a,this.a,this.b,this.c)},isFrontFacing:function(a){return ba.isFrontFacing(this.a,this.b,this.c,a)},intersectsBox:function(a){return a.intersectsTriangle(this)},
closestPointToPoint:function(a,b){void 0===b&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),b=new n);var c=this.a,d=this.b,e=this.c;qd.subVectors(d,c);rd.subVectors(e,c);Sg.subVectors(a,c);var f=qd.dot(Sg),g=rd.dot(Sg);if(0>=f&&0>=g)return b.copy(c);Tg.subVectors(a,d);var h=qd.dot(Tg),l=rd.dot(Tg);if(0<=h&&l<=h)return b.copy(d);var m=f*l-h*g;if(0>=m&&0<=f&&0>=h)return d=f/(f-h),b.copy(c).addScaledVector(qd,d);Ug.subVectors(a,e);a=qd.dot(Ug);var k=rd.dot(Ug);if(0<=
k&&a<=k)return b.copy(e);f=a*g-f*k;if(0>=f&&0<=g&&0>=k)return m=g/(g-k),b.copy(c).addScaledVector(rd,m);g=h*k-a*l;if(0>=g&&0<=l-h&&0<=a-k)return si.subVectors(e,d),m=(l-h)/(l-h+(a-k)),b.copy(d).addScaledVector(si,m);e=1/(g+f+m);d=f*e;m*=e;return b.copy(c).addScaledVector(qd,d).addScaledVector(rd,m)},equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)}});var ti={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,
black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,
darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,
lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,
mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,
purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},
za={h:0,s:0,l:0},Af={h:0,s:0,l:0};Object.assign(J.prototype,{isColor:!0,r:1,g:1,b:1,set:function(a){a&&a.isColor?this.copy(a):"number"===typeof a?this.setHex(a):"string"===typeof a&&this.setStyle(a);return this},setScalar:function(a){this.b=this.g=this.r=a;return this},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSL:function(a,b,c){a=P.euclideanModulo(a,1);b=P.clamp(b,
0,1);c=P.clamp(c,0,1);0===b?this.r=this.g=this.b=c:(b=.5>=c?c*(1+b):c+b-c*b,c=2*c-b,this.r=Vf(c,b,a+1/3),this.g=Vf(c,b,a),this.b=Vf(c,b,a-1/3));return this},setStyle:function(a){function b(b){void 0!==b&&1>parseFloat(b)&&console.warn("THREE.Color: Alpha component of "+a+" will be ignored.")}var c;if(c=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)){var d=c[2];switch(c[1]){case "rgb":case "rgba":if(c=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d))return this.r=Math.min(255,parseInt(c[1],
10))/255,this.g=Math.min(255,parseInt(c[2],10))/255,this.b=Math.min(255,parseInt(c[3],10))/255,b(c[5]),this;if(c=/^(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d))return this.r=Math.min(100,parseInt(c[1],10))/100,this.g=Math.min(100,parseInt(c[2],10))/100,this.b=Math.min(100,parseInt(c[3],10))/100,b(c[5]),this;break;case "hsl":case "hsla":if(c=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)){d=parseFloat(c[1])/360;var e=parseInt(c[2],
10)/100,f=parseInt(c[3],10)/100;b(c[5]);return this.setHSL(d,e,f)}}}else if(c=/^#([A-Fa-f0-9]+)$/.exec(a)){c=c[1];d=c.length;if(3===d)return this.r=parseInt(c.charAt(0)+c.charAt(0),16)/255,this.g=parseInt(c.charAt(1)+c.charAt(1),16)/255,this.b=parseInt(c.charAt(2)+c.charAt(2),16)/255,this;if(6===d)return this.r=parseInt(c.charAt(0)+c.charAt(1),16)/255,this.g=parseInt(c.charAt(2)+c.charAt(3),16)/255,this.b=parseInt(c.charAt(4)+c.charAt(5),16)/255,this}return a&&0<a.length?this.setColorName(a):this},
setColorName:function(a){var b=ti[a];void 0!==b?this.setHex(b):console.warn("THREE.Color: Unknown color "+a);return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(a){this.r=a.r;this.g=a.g;this.b=a.b;return this},copyGammaToLinear:function(a,b){void 0===b&&(b=2);this.r=Math.pow(a.r,b);this.g=Math.pow(a.g,b);this.b=Math.pow(a.b,b);return this},copyLinearToGamma:function(a,b){void 0===b&&(b=2);b=0<b?1/b:1;this.r=Math.pow(a.r,b);this.g=Math.pow(a.g,b);this.b=Math.pow(a.b,
b);return this},convertGammaToLinear:function(a){this.copyGammaToLinear(this,a);return this},convertLinearToGamma:function(a){this.copyLinearToGamma(this,a);return this},copySRGBToLinear:function(a){this.r=Wf(a.r);this.g=Wf(a.g);this.b=Wf(a.b);return this},copyLinearToSRGB:function(a){this.r=Xf(a.r);this.g=Xf(a.g);this.b=Xf(a.b);return this},convertSRGBToLinear:function(){this.copySRGBToLinear(this);return this},convertLinearToSRGB:function(){this.copyLinearToSRGB(this);return this},getHex:function(){return 255*
this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(a){void 0===a&&(console.warn("THREE.Color: .getHSL() target is now required"),a={h:0,s:0,l:0});var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),f=Math.min(b,c,d),g,h=(f+e)/2;if(f===e)f=g=0;else{var l=e-f;f=.5>=h?l/(e+f):l/(2-e-f);switch(e){case b:g=(c-d)/l+(c<d?6:0);break;case c:g=(d-b)/l+2;break;case d:g=(b-c)/l+4}g/=6}a.h=g;a.s=f;a.l=h;return a},getStyle:function(){return"rgb("+
(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(a,b,c){this.getHSL(za);za.h+=a;za.s+=b;za.l+=c;this.setHSL(za.h,za.s,za.l);return this},add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=a.b+b.b;return this},addScalar:function(a){this.r+=a;this.g+=a;this.b+=a;return this},sub:function(a){this.r=Math.max(0,this.r-a.r);this.g=Math.max(0,this.g-a.g);this.b=Math.max(0,this.b-a.b);return this},multiply:function(a){this.r*=
a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},lerpHSL:function(a,b){this.getHSL(za);a.getHSL(Af);a=P.lerp(za.h,Af.h,b);var c=P.lerp(za.s,Af.s,b);b=P.lerp(za.l,Af.l,b);this.setHSL(a,c,b);return this},equals:function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a,b){void 0===b&&(b=0);this.r=a[b];this.g=a[b+1];
this.b=a[b+2];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.r;a[b+1]=this.g;a[b+2]=this.b;return a},toJSON:function(){return this.getHex()}});J.NAMES=ti;Object.assign(xc.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.a=a.a;this.b=a.b;this.c=a.c;this.normal.copy(a.normal);this.color.copy(a.color);this.materialIndex=a.materialIndex;for(var b=0,c=a.vertexNormals.length;b<c;b++)this.vertexNormals[b]=a.vertexNormals[b].clone();
b=0;for(c=a.vertexColors.length;b<c;b++)this.vertexColors[b]=a.vertexColors[b].clone();return this}});var Ui=0;O.prototype=Object.assign(Object.create(Aa.prototype),{constructor:O,isMaterial:!0,onBeforeCompile:function(){},setValues:function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)console.warn("THREE.Material: '"+b+"' parameter is undefined.");else if("shading"===b)console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=
1===c?!0:!1;else{var d=this[b];void 0===d?console.warn("THREE."+this.type+": '"+b+"' is not a property of this material."):d&&d.isColor?d.set(c):d&&d.isVector3&&c&&c.isVector3?d.copy(c):this[b]=c}}},toJSON:function(a){function b(a){var b=[],c;for(c in a){var d=a[c];delete d.metadata;b.push(d)}return b}var c=void 0===a||"string"===typeof a;c&&(a={textures:{},images:{}});var d={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};d.uuid=this.uuid;d.type=this.type;""!==this.name&&(d.name=
this.name);this.color&&this.color.isColor&&(d.color=this.color.getHex());void 0!==this.roughness&&(d.roughness=this.roughness);void 0!==this.metalness&&(d.metalness=this.metalness);this.sheen&&this.sheen.isColor&&(d.sheen=this.sheen.getHex());this.emissive&&this.emissive.isColor&&(d.emissive=this.emissive.getHex());this.emissiveIntensity&&1!==this.emissiveIntensity&&(d.emissiveIntensity=this.emissiveIntensity);this.specular&&this.specular.isColor&&(d.specular=this.specular.getHex());void 0!==this.shininess&&
(d.shininess=this.shininess);void 0!==this.clearcoat&&(d.clearcoat=this.clearcoat);void 0!==this.clearcoatRoughness&&(d.clearcoatRoughness=this.clearcoatRoughness);this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(d.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(a).uuid,d.clearcoatNormalScale=this.clearcoatNormalScale.toArray());this.map&&this.map.isTexture&&(d.map=this.map.toJSON(a).uuid);this.matcap&&this.matcap.isTexture&&(d.matcap=this.matcap.toJSON(a).uuid);this.alphaMap&&this.alphaMap.isTexture&&
(d.alphaMap=this.alphaMap.toJSON(a).uuid);this.lightMap&&this.lightMap.isTexture&&(d.lightMap=this.lightMap.toJSON(a).uuid);this.aoMap&&this.aoMap.isTexture&&(d.aoMap=this.aoMap.toJSON(a).uuid,d.aoMapIntensity=this.aoMapIntensity);this.bumpMap&&this.bumpMap.isTexture&&(d.bumpMap=this.bumpMap.toJSON(a).uuid,d.bumpScale=this.bumpScale);this.normalMap&&this.normalMap.isTexture&&(d.normalMap=this.normalMap.toJSON(a).uuid,d.normalMapType=this.normalMapType,d.normalScale=this.normalScale.toArray());this.displacementMap&&
this.displacementMap.isTexture&&(d.displacementMap=this.displacementMap.toJSON(a).uuid,d.displacementScale=this.displacementScale,d.displacementBias=this.displacementBias);this.roughnessMap&&this.roughnessMap.isTexture&&(d.roughnessMap=this.roughnessMap.toJSON(a).uuid);this.metalnessMap&&this.metalnessMap.isTexture&&(d.metalnessMap=this.metalnessMap.toJSON(a).uuid);this.emissiveMap&&this.emissiveMap.isTexture&&(d.emissiveMap=this.emissiveMap.toJSON(a).uuid);this.specularMap&&this.specularMap.isTexture&&
(d.specularMap=this.specularMap.toJSON(a).uuid);this.envMap&&this.envMap.isTexture&&(d.envMap=this.envMap.toJSON(a).uuid,d.reflectivity=this.reflectivity,d.refractionRatio=this.refractionRatio,void 0!==this.combine&&(d.combine=this.combine),void 0!==this.envMapIntensity&&(d.envMapIntensity=this.envMapIntensity));this.gradientMap&&this.gradientMap.isTexture&&(d.gradientMap=this.gradientMap.toJSON(a).uuid);void 0!==this.size&&(d.size=this.size);void 0!==this.sizeAttenuation&&(d.sizeAttenuation=this.sizeAttenuation);
1!==this.blending&&(d.blending=this.blending);!0===this.flatShading&&(d.flatShading=this.flatShading);0!==this.side&&(d.side=this.side);0!==this.vertexColors&&(d.vertexColors=this.vertexColors);1>this.opacity&&(d.opacity=this.opacity);!0===this.transparent&&(d.transparent=this.transparent);d.depthFunc=this.depthFunc;d.depthTest=this.depthTest;d.depthWrite=this.depthWrite;d.stencilWrite=this.stencilWrite;d.stencilWriteMask=this.stencilWriteMask;d.stencilFunc=this.stencilFunc;d.stencilRef=this.stencilRef;
d.stencilFuncMask=this.stencilFuncMask;d.stencilFail=this.stencilFail;d.stencilZFail=this.stencilZFail;d.stencilZPass=this.stencilZPass;this.rotation&&0!==this.rotation&&(d.rotation=this.rotation);!0===this.polygonOffset&&(d.polygonOffset=!0);0!==this.polygonOffsetFactor&&(d.polygonOffsetFactor=this.polygonOffsetFactor);0!==this.polygonOffsetUnits&&(d.polygonOffsetUnits=this.polygonOffsetUnits);this.linewidth&&1!==this.linewidth&&(d.linewidth=this.linewidth);void 0!==this.dashSize&&(d.dashSize=this.dashSize);
void 0!==this.gapSize&&(d.gapSize=this.gapSize);void 0!==this.scale&&(d.scale=this.scale);!0===this.dithering&&(d.dithering=!0);0<this.alphaTest&&(d.alphaTest=this.alphaTest);!0===this.premultipliedAlpha&&(d.premultipliedAlpha=this.premultipliedAlpha);!0===this.wireframe&&(d.wireframe=this.wireframe);1<this.wireframeLinewidth&&(d.wireframeLinewidth=this.wireframeLinewidth);"round"!==this.wireframeLinecap&&(d.wireframeLinecap=this.wireframeLinecap);"round"!==this.wireframeLinejoin&&(d.wireframeLinejoin=
this.wireframeLinejoin);!0===this.morphTargets&&(d.morphTargets=!0);!0===this.morphNormals&&(d.morphNormals=!0);!0===this.skinning&&(d.skinning=!0);!1===this.visible&&(d.visible=!1);!1===this.toneMapped&&(d.toneMapped=!1);"{}"!==JSON.stringify(this.userData)&&(d.userData=this.userData);c&&(c=b(a.textures),a=b(a.images),0<c.length&&(d.textures=c),0<a.length&&(d.images=a));return d},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.name=a.name;this.fog=a.fog;this.blending=
a.blending;this.side=a.side;this.flatShading=a.flatShading;this.vertexTangents=a.vertexTangents;this.vertexColors=a.vertexColors;this.opacity=a.opacity;this.transparent=a.transparent;this.blendSrc=a.blendSrc;this.blendDst=a.blendDst;this.blendEquation=a.blendEquation;this.blendSrcAlpha=a.blendSrcAlpha;this.blendDstAlpha=a.blendDstAlpha;this.blendEquationAlpha=a.blendEquationAlpha;this.depthFunc=a.depthFunc;this.depthTest=a.depthTest;this.depthWrite=a.depthWrite;this.stencilWriteMask=a.stencilWriteMask;
this.stencilFunc=a.stencilFunc;this.stencilRef=a.stencilRef;this.stencilFuncMask=a.stencilFuncMask;this.stencilFail=a.stencilFail;this.stencilZFail=a.stencilZFail;this.stencilZPass=a.stencilZPass;this.stencilWrite=a.stencilWrite;var b=a.clippingPlanes,c=null;if(null!==b){var d=b.length;c=Array(d);for(var e=0;e!==d;++e)c[e]=b[e].clone()}this.clippingPlanes=c;this.clipIntersection=a.clipIntersection;this.clipShadows=a.clipShadows;this.shadowSide=a.shadowSide;this.colorWrite=a.colorWrite;this.precision=
a.precision;this.polygonOffset=a.polygonOffset;this.polygonOffsetFactor=a.polygonOffsetFactor;this.polygonOffsetUnits=a.polygonOffsetUnits;this.dithering=a.dithering;this.alphaTest=a.alphaTest;this.premultipliedAlpha=a.premultipliedAlpha;this.visible=a.visible;this.toneMapped=a.toneMapped;this.userData=JSON.parse(JSON.stringify(a.userData));return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});Ga.prototype=Object.create(O.prototype);Ga.prototype.constructor=Ga;Ga.prototype.isMeshBasicMaterial=
!0;Ga.prototype.copy=function(a){O.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;
this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=a.morphTargets;return this};Object.defineProperty(N.prototype,"needsUpdate",{set:function(a){!0===a&&this.version++}});Object.assign(N.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setUsage:function(a){this.usage=a;return this},copy:function(a){this.name=a.name;this.array=new a.array.constructor(a.array);this.itemSize=a.itemSize;this.count=a.count;this.normalized=a.normalized;this.usage=a.usage;return this},
copyAt:function(a,b,c){a*=this.itemSize;c*=b.itemSize;for(var d=0,e=this.itemSize;d<e;d++)this.array[a+d]=b.array[c+d];return this},copyArray:function(a){this.array.set(a);return this},copyColorsArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",d),f=new J);b[c++]=f.r;b[c++]=f.g;b[c++]=f.b}return this},copyVector2sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=
a[d];void 0===f&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",d),f=new B);b[c++]=f.x;b[c++]=f.y}return this},copyVector3sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",d),f=new n);b[c++]=f.x;b[c++]=f.y;b[c++]=f.z}return this},copyVector4sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",
d),f=new da);b[c++]=f.x;b[c++]=f.y;b[c++]=f.z;b[c++]=f.w}return this},set:function(a,b){void 0===b&&(b=0);this.array.set(a,b);return this},getX:function(a){return this.array[a*this.itemSize]},setX:function(a,b){this.array[a*this.itemSize]=b;return this},getY:function(a){return this.array[a*this.itemSize+1]},setY:function(a,b){this.array[a*this.itemSize+1]=b;return this},getZ:function(a){return this.array[a*this.itemSize+2]},setZ:function(a,b){this.array[a*this.itemSize+2]=b;return this},getW:function(a){return this.array[a*
this.itemSize+3]},setW:function(a,b){this.array[a*this.itemSize+3]=b;return this},setXY:function(a,b,c){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;return this},setXYZ:function(a,b,c,d){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;this.array[a+2]=d;return this},setXYZW:function(a,b,c,d,e){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;this.array[a+2]=d;this.array[a+3]=e;return this},onUpload:function(a){this.onUploadCallback=a;return this},clone:function(){return(new this.constructor(this.array,
this.itemSize)).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}});wd.prototype=Object.create(N.prototype);wd.prototype.constructor=wd;xd.prototype=Object.create(N.prototype);xd.prototype.constructor=xd;yd.prototype=Object.create(N.prototype);yd.prototype.constructor=yd;zd.prototype=Object.create(N.prototype);zd.prototype.constructor=zd;Sb.prototype=Object.create(N.prototype);Sb.prototype.constructor=
Sb;Ad.prototype=Object.create(N.prototype);Ad.prototype.constructor=Ad;Tb.prototype=Object.create(N.prototype);Tb.prototype.constructor=Tb;A.prototype=Object.create(N.prototype);A.prototype.constructor=A;Bd.prototype=Object.create(N.prototype);Bd.prototype.constructor=Bd;Object.assign(ih.prototype,{computeGroups:function(a){var b=[],c=void 0;a=a.faces;for(var d=0;d<a.length;d++){var e=a[d];if(e.materialIndex!==c){c=e.materialIndex;void 0!==f&&(f.count=3*d-f.start,b.push(f));var f={start:3*d,materialIndex:c}}}void 0!==
f&&(f.count=3*d-f.start,b.push(f));this.groups=b},fromGeometry:function(a){var b=a.faces,c=a.vertices,d=a.faceVertexUvs,e=d[0]&&0<d[0].length,f=d[1]&&0<d[1].length,g=a.morphTargets,h=g.length;if(0<h){var l=[];for(var m=0;m<h;m++)l[m]={name:g[m].name,data:[]};this.morphTargets.position=l}var k=a.morphNormals,n=k.length;if(0<n){var u=[];for(m=0;m<n;m++)u[m]={name:k[m].name,data:[]};this.morphTargets.normal=u}var p=a.skinIndices,t=a.skinWeights,v=p.length===c.length,y=t.length===c.length;0<c.length&&
0===b.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(m=0;m<b.length;m++){var w=b[m];this.vertices.push(c[w.a],c[w.b],c[w.c]);var x=w.vertexNormals;3===x.length?this.normals.push(x[0],x[1],x[2]):(x=w.normal,this.normals.push(x,x,x));x=w.vertexColors;3===x.length?this.colors.push(x[0],x[1],x[2]):(x=w.color,this.colors.push(x,x,x));!0===e&&(x=d[0][m],void 0!==x?this.uvs.push(x[0],x[1],x[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",
m),this.uvs.push(new B,new B,new B)));!0===f&&(x=d[1][m],void 0!==x?this.uvs2.push(x[0],x[1],x[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",m),this.uvs2.push(new B,new B,new B)));for(x=0;x<h;x++){var A=g[x].vertices;l[x].data.push(A[w.a],A[w.b],A[w.c])}for(x=0;x<n;x++)A=k[x].vertexNormals[m],u[x].data.push(A.a,A.b,A.c);v&&this.skinIndices.push(p[w.a],p[w.b],p[w.c]);y&&this.skinWeights.push(t[w.a],t[w.b],t[w.c])}this.computeGroups(a);this.verticesNeedUpdate=a.verticesNeedUpdate;
this.normalsNeedUpdate=a.normalsNeedUpdate;this.colorsNeedUpdate=a.colorsNeedUpdate;this.uvsNeedUpdate=a.uvsNeedUpdate;this.groupsNeedUpdate=a.groupsNeedUpdate;null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone());return this}});var Vi=1,jb=new Q,Vg=new E,Bf=new n,qc=new ab,Wg=new ab,Za=new n;D.prototype=Object.assign(Object.create(Aa.prototype),{constructor:D,isBufferGeometry:!0,getIndex:function(){return this.index},
setIndex:function(a){Array.isArray(a)?this.index=new (65535<jh(a)?Tb:Sb)(a,1):this.index=a},getAttribute:function(a){return this.attributes[a]},setAttribute:function(a,b){this.attributes[a]=b;return this},deleteAttribute:function(a){delete this.attributes[a];return this},addGroup:function(a,b,c){this.groups.push({start:a,count:b,materialIndex:void 0!==c?c:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(a,b){this.drawRange.start=a;this.drawRange.count=b},applyMatrix:function(a){var b=
this.attributes.position;void 0!==b&&(a.applyToBufferAttribute(b),b.needsUpdate=!0);var c=this.attributes.normal;void 0!==c&&(b=(new Z).getNormalMatrix(a),b.applyToBufferAttribute(c),c.needsUpdate=!0);c=this.attributes.tangent;void 0!==c&&(b=(new Z).getNormalMatrix(a),b.applyToBufferAttribute(c),c.needsUpdate=!0);null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();return this},rotateX:function(a){jb.makeRotationX(a);this.applyMatrix(jb);return this},
rotateY:function(a){jb.makeRotationY(a);this.applyMatrix(jb);return this},rotateZ:function(a){jb.makeRotationZ(a);this.applyMatrix(jb);return this},translate:function(a,b,c){jb.makeTranslation(a,b,c);this.applyMatrix(jb);return this},scale:function(a,b,c){jb.makeScale(a,b,c);this.applyMatrix(jb);return this},lookAt:function(a){Vg.lookAt(a);Vg.updateMatrix();this.applyMatrix(Vg.matrix);return this},center:function(){this.computeBoundingBox();this.boundingBox.getCenter(Bf).negate();this.translate(Bf.x,
Bf.y,Bf.z);return this},setFromObject:function(a){var b=a.geometry;if(a.isPoints||a.isLine){a=new A(3*b.vertices.length,3);var c=new A(3*b.colors.length,3);this.setAttribute("position",a.copyVector3sArray(b.vertices));this.setAttribute("color",c.copyColorsArray(b.colors));b.lineDistances&&b.lineDistances.length===b.vertices.length&&(a=new A(b.lineDistances.length,1),this.setAttribute("lineDistance",a.copyArray(b.lineDistances)));null!==b.boundingSphere&&(this.boundingSphere=b.boundingSphere.clone());
null!==b.boundingBox&&(this.boundingBox=b.boundingBox.clone())}else a.isMesh&&b&&b.isGeometry&&this.fromGeometry(b);return this},setFromPoints:function(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=a[c];b.push(e.x,e.y,e.z||0)}this.setAttribute("position",new A(b,3));return this},updateFromObject:function(a){var b=a.geometry;if(a.isMesh){var c=b.__directGeometry;!0===b.elementsNeedUpdate&&(c=void 0,b.elementsNeedUpdate=!1);if(void 0===c)return this.fromGeometry(b);c.verticesNeedUpdate=b.verticesNeedUpdate;
c.normalsNeedUpdate=b.normalsNeedUpdate;c.colorsNeedUpdate=b.colorsNeedUpdate;c.uvsNeedUpdate=b.uvsNeedUpdate;c.groupsNeedUpdate=b.groupsNeedUpdate;b.verticesNeedUpdate=!1;b.normalsNeedUpdate=!1;b.colorsNeedUpdate=!1;b.uvsNeedUpdate=!1;b.groupsNeedUpdate=!1;b=c}!0===b.verticesNeedUpdate&&(c=this.attributes.position,void 0!==c&&(c.copyVector3sArray(b.vertices),c.needsUpdate=!0),b.verticesNeedUpdate=!1);!0===b.normalsNeedUpdate&&(c=this.attributes.normal,void 0!==c&&(c.copyVector3sArray(b.normals),
c.needsUpdate=!0),b.normalsNeedUpdate=!1);!0===b.colorsNeedUpdate&&(c=this.attributes.color,void 0!==c&&(c.copyColorsArray(b.colors),c.needsUpdate=!0),b.colorsNeedUpdate=!1);b.uvsNeedUpdate&&(c=this.attributes.uv,void 0!==c&&(c.copyVector2sArray(b.uvs),c.needsUpdate=!0),b.uvsNeedUpdate=!1);b.lineDistancesNeedUpdate&&(c=this.attributes.lineDistance,void 0!==c&&(c.copyArray(b.lineDistances),c.needsUpdate=!0),b.lineDistancesNeedUpdate=!1);b.groupsNeedUpdate&&(b.computeGroups(a.geometry),this.groups=
b.groups,b.groupsNeedUpdate=!1);return this},fromGeometry:function(a){a.__directGeometry=(new ih).fromGeometry(a);return this.fromDirectGeometry(a.__directGeometry)},fromDirectGeometry:function(a){var b=new Float32Array(3*a.vertices.length);this.setAttribute("position",(new N(b,3)).copyVector3sArray(a.vertices));0<a.normals.length&&(b=new Float32Array(3*a.normals.length),this.setAttribute("normal",(new N(b,3)).copyVector3sArray(a.normals)));0<a.colors.length&&(b=new Float32Array(3*a.colors.length),
this.setAttribute("color",(new N(b,3)).copyColorsArray(a.colors)));0<a.uvs.length&&(b=new Float32Array(2*a.uvs.length),this.setAttribute("uv",(new N(b,2)).copyVector2sArray(a.uvs)));0<a.uvs2.length&&(b=new Float32Array(2*a.uvs2.length),this.setAttribute("uv2",(new N(b,2)).copyVector2sArray(a.uvs2)));this.groups=a.groups;for(var c in a.morphTargets){b=[];for(var d=a.morphTargets[c],e=0,f=d.length;e<f;e++){var g=d[e],h=new A(3*g.data.length,3);h.name=g.name;b.push(h.copyVector3sArray(g.data))}this.morphAttributes[c]=
b}0<a.skinIndices.length&&(c=new A(4*a.skinIndices.length,4),this.setAttribute("skinIndex",c.copyVector4sArray(a.skinIndices)));0<a.skinWeights.length&&(c=new A(4*a.skinWeights.length,4),this.setAttribute("skinWeight",c.copyVector4sArray(a.skinWeights)));null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone());return this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new ab);var a=this.attributes.position,
b=this.morphAttributes.position;if(void 0!==a){if(this.boundingBox.setFromBufferAttribute(a),b){a=0;for(var c=b.length;a<c;a++)qc.setFromBufferAttribute(b[a]),this.boundingBox.expandByPoint(qc.min),this.boundingBox.expandByPoint(qc.max)}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',
this)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new mb);var a=this.attributes.position,b=this.morphAttributes.position;if(a){var c=this.boundingSphere.center;qc.setFromBufferAttribute(a);if(b)for(var d=0,e=b.length;d<e;d++){var f=b[d];Wg.setFromBufferAttribute(f);qc.expandByPoint(Wg.min);qc.expandByPoint(Wg.max)}qc.getCenter(c);var g=0;d=0;for(e=a.count;d<e;d++)Za.fromBufferAttribute(a,d),g=Math.max(g,c.distanceToSquared(Za));if(b)for(d=0,e=b.length;d<e;d++){f=
b[d];a=0;for(var h=f.count;a<h;a++)Za.fromBufferAttribute(f,a),g=Math.max(g,c.distanceToSquared(Za))}this.boundingSphere.radius=Math.sqrt(g);isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}},computeFaceNormals:function(){},computeVertexNormals:function(){var a=this.index,b=this.attributes;if(b.position){var c=b.position.array;if(void 0===b.normal)this.setAttribute("normal",
new N(new Float32Array(c.length),3));else for(var d=b.normal.array,e=0,f=d.length;e<f;e++)d[e]=0;d=b.normal.array;var g=new n,h=new n,l=new n,m=new n,k=new n;if(a){var q=a.array;e=0;for(f=a.count;e<f;e+=3){a=3*q[e+0];var u=3*q[e+1];var p=3*q[e+2];g.fromArray(c,a);h.fromArray(c,u);l.fromArray(c,p);m.subVectors(l,h);k.subVectors(g,h);m.cross(k);d[a]+=m.x;d[a+1]+=m.y;d[a+2]+=m.z;d[u]+=m.x;d[u+1]+=m.y;d[u+2]+=m.z;d[p]+=m.x;d[p+1]+=m.y;d[p+2]+=m.z}}else for(e=0,f=c.length;e<f;e+=9)g.fromArray(c,e),h.fromArray(c,
e+3),l.fromArray(c,e+6),m.subVectors(l,h),k.subVectors(g,h),m.cross(k),d[e]=m.x,d[e+1]=m.y,d[e+2]=m.z,d[e+3]=m.x,d[e+4]=m.y,d[e+5]=m.z,d[e+6]=m.x,d[e+7]=m.y,d[e+8]=m.z;this.normalizeNormals();b.normal.needsUpdate=!0}},merge:function(a,b){if(a&&a.isBufferGeometry){void 0===b&&(b=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var c=this.attributes,d;for(d in c)if(void 0!==a.attributes[d]){var e=
c[d].array,f=a.attributes[d],g=f.array,h=f.itemSize*b;f=Math.min(g.length,e.length-h);for(var l=0;l<f;l++,h++)e[h]=g[l]}return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",a)},normalizeNormals:function(){for(var a=this.attributes.normal,b=0,c=a.count;b<c;b++)Za.x=a.getX(b),Za.y=a.getY(b),Za.z=a.getZ(b),Za.normalize(),a.setXYZ(b,Za.x,Za.y,Za.z)},toNonIndexed:function(){function a(a,b){var c=a.array;a=a.itemSize;for(var d=new c.constructor(b.length*
a),e,f=0,g=0,h=b.length;g<h;g++){e=b[g]*a;for(var l=0;l<a;l++)d[f++]=c[e++]}return new N(d,a)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var b=new D,c=this.index.array,d=this.attributes,e;for(e in d){var f=d[e];f=a(f,c);b.setAttribute(e,f)}var g=this.morphAttributes;for(e in g){var h=[],l=g[e];d=0;for(var m=l.length;d<m;d++)f=l[d],f=a(f,c),h.push(f);b.morphAttributes[e]=h}c=this.groups;d=0;for(e=c.length;d<e;d++)f=c[d],b.addGroup(f.start,
f.count,f.materialIndex);return b},toJSON:function(){var a={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};a.uuid=this.uuid;a.type=this.type;""!==this.name&&(a.name=this.name);0<Object.keys(this.userData).length&&(a.userData=this.userData);if(void 0!==this.parameters){var b=this.parameters;for(m in b)void 0!==b[m]&&(a[m]=b[m]);return a}a.data={attributes:{}};b=this.index;null!==b&&(a.data.index={type:b.array.constructor.name,array:Array.prototype.slice.call(b.array)});
var c=this.attributes;for(m in c){b=c[m];var d=b.toJSON();""!==b.name&&(d.name=b.name);a.data.attributes[m]=d}c={};var e=!1;for(m in this.morphAttributes){for(var f=this.morphAttributes[m],g=[],h=0,l=f.length;h<l;h++)b=f[h],d=b.toJSON(),""!==b.name&&(d.name=b.name),g.push(d);0<g.length&&(c[m]=g,e=!0)}e&&(a.data.morphAttributes=c);var m=this.groups;0<m.length&&(a.data.groups=JSON.parse(JSON.stringify(m)));m=this.boundingSphere;null!==m&&(a.data.boundingSphere={center:m.center.toArray(),radius:m.radius});
return a},clone:function(){return(new D).copy(this)},copy:function(a){var b;this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingSphere=this.boundingBox=null;this.name=a.name;var c=a.index;null!==c&&this.setIndex(c.clone());c=a.attributes;for(g in c)this.setAttribute(g,c[g].clone());var d=a.morphAttributes;for(g in d){var e=[],f=d[g];c=0;for(b=f.length;c<b;c++)e.push(f[c].clone());this.morphAttributes[g]=e}var g=a.groups;c=0;for(b=g.length;c<b;c++)d=g[c],this.addGroup(d.start,
d.count,d.materialIndex);g=a.boundingBox;null!==g&&(this.boundingBox=g.clone());g=a.boundingSphere;null!==g&&(this.boundingSphere=g.clone());this.drawRange.start=a.drawRange.start;this.drawRange.count=a.drawRange.count;this.userData=a.userData;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});var ui=new Q,rc=new Rb,Xg=new mb,Ub=new n,Vb=new n,Wb=new n,lh=new n,mh=new n,nh=new n,Yf=new n,Zf=new n,$f=new n,yc=new B,zc=new B,Ac=new B,Cd=new n,Ee=new n;ea.prototype=Object.assign(Object.create(E.prototype),
{constructor:ea,isMesh:!0,setDrawMode:function(a){this.drawMode=a},copy:function(a){E.prototype.copy.call(this,a);this.drawMode=a.drawMode;void 0!==a.morphTargetInfluences&&(this.morphTargetInfluences=a.morphTargetInfluences.slice());void 0!==a.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},a.morphTargetDictionary));return this},updateMorphTargets:function(){var a=this.geometry;if(a.isBufferGeometry){a=a.morphAttributes;var b=Object.keys(a);if(0<b.length){var c=a[b[0]];if(void 0!==
c)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},a=0,b=c.length;a<b;a++){var d=c[a].name||String(a);this.morphTargetInfluences.push(0);this.morphTargetDictionary[d]=a}}}else a=a.morphTargets,void 0!==a&&0<a.length&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")},raycast:function(a,b){var c=this.geometry,d=this.material,e=this.matrixWorld;if(void 0!==d&&(null===c.boundingSphere&&c.computeBoundingSphere(),Xg.copy(c.boundingSphere),
Xg.applyMatrix4(e),!1!==a.ray.intersectsSphere(Xg)&&(ui.getInverse(e),rc.copy(a.ray).applyMatrix4(ui),null===c.boundingBox||!1!==rc.intersectsBox(c.boundingBox))))if(0!==this.drawMode)console.warn("THREE.Mesh: TriangleStripDrawMode and TriangleFanDrawMode are not supported by .raycast().");else if(c.isBufferGeometry){var f=c.index;e=c.attributes.position;var g=c.morphAttributes.position,h=c.attributes.uv,l=c.attributes.uv2,m=c.groups,k=c.drawRange,n,u;if(null!==f)if(Array.isArray(d)){var p=0;for(n=
m.length;p<n;p++){var t=m[p];var v=d[t.materialIndex];var y=Math.max(t.start,k.start);for(u=c=Math.min(t.start+t.count,k.start+k.count);y<u;y+=3){c=f.getX(y);var w=f.getX(y+1);var x=f.getX(y+2);if(c=Fe(this,v,a,rc,e,g,h,l,c,w,x))c.faceIndex=Math.floor(y/3),c.face.materialIndex=t.materialIndex,b.push(c)}}}else for(y=Math.max(0,k.start),c=Math.min(f.count,k.start+k.count),p=y,n=c;p<n;p+=3){if(c=f.getX(p),w=f.getX(p+1),x=f.getX(p+2),c=Fe(this,d,a,rc,e,g,h,l,c,w,x))c.faceIndex=Math.floor(p/3),b.push(c)}else if(void 0!==
e)if(Array.isArray(d))for(p=0,n=m.length;p<n;p++)for(t=m[p],v=d[t.materialIndex],y=Math.max(t.start,k.start),u=c=Math.min(t.start+t.count,k.start+k.count);y<u;y+=3){if(c=y,w=y+1,x=y+2,c=Fe(this,v,a,rc,e,g,h,l,c,w,x))c.faceIndex=Math.floor(y/3),c.face.materialIndex=t.materialIndex,b.push(c)}else for(y=Math.max(0,k.start),c=Math.min(e.count,k.start+k.count),p=y,n=c;p<n;p+=3)if(c=p,w=p+1,x=p+2,c=Fe(this,d,a,rc,e,g,h,l,c,w,x))c.faceIndex=Math.floor(p/3),b.push(c)}else if(c.isGeometry)for(e=Array.isArray(d),
g=c.vertices,h=c.faces,c=c.faceVertexUvs[0],0<c.length&&(f=c),p=0,n=h.length;p<n;p++)if(t=h[p],c=e?d[t.materialIndex]:d,void 0!==c&&(l=g[t.a],m=g[t.b],k=g[t.c],c=kh(this,c,a,rc,l,m,k,Cd)))f&&f[p]&&(v=f[p],yc.copy(v[0]),zc.copy(v[1]),Ac.copy(v[2]),c.uv=ba.getUV(Cd,l,m,k,yc,zc,Ac,new B)),c.face=t,c.faceIndex=p,b.push(c)},clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});var Wi=0,kb=new Q,Yg=new E,Cf=new n;G.prototype=Object.assign(Object.create(Aa.prototype),{constructor:G,
isGeometry:!0,applyMatrix:function(a){for(var b=(new Z).getNormalMatrix(a),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){a=this.faces[c];a.normal.applyMatrix3(b).normalize();for(var e=0,f=a.vertexNormals.length;e<f;e++)a.vertexNormals[e].applyMatrix3(b).normalize()}null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();this.normalsNeedUpdate=this.verticesNeedUpdate=!0;return this},rotateX:function(a){kb.makeRotationX(a);
this.applyMatrix(kb);return this},rotateY:function(a){kb.makeRotationY(a);this.applyMatrix(kb);return this},rotateZ:function(a){kb.makeRotationZ(a);this.applyMatrix(kb);return this},translate:function(a,b,c){kb.makeTranslation(a,b,c);this.applyMatrix(kb);return this},scale:function(a,b,c){kb.makeScale(a,b,c);this.applyMatrix(kb);return this},lookAt:function(a){Yg.lookAt(a);Yg.updateMatrix();this.applyMatrix(Yg.matrix);return this},fromBufferGeometry:function(a){function b(a,b,d,e){var f=void 0===
h?[]:[c.colors[a].clone(),c.colors[b].clone(),c.colors[d].clone()],k=void 0===g?[]:[(new n).fromArray(g,3*a),(new n).fromArray(g,3*b),(new n).fromArray(g,3*d)];e=new xc(a,b,d,k,f,e);c.faces.push(e);void 0!==l&&c.faceVertexUvs[0].push([(new B).fromArray(l,2*a),(new B).fromArray(l,2*b),(new B).fromArray(l,2*d)]);void 0!==m&&c.faceVertexUvs[1].push([(new B).fromArray(m,2*a),(new B).fromArray(m,2*b),(new B).fromArray(m,2*d)])}var c=this,d=null!==a.index?a.index.array:void 0,e=a.attributes;if(void 0===
e.position)return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."),this;var f=e.position.array,g=void 0!==e.normal?e.normal.array:void 0,h=void 0!==e.color?e.color.array:void 0,l=void 0!==e.uv?e.uv.array:void 0,m=void 0!==e.uv2?e.uv2.array:void 0;void 0!==m&&(this.faceVertexUvs[1]=[]);for(e=0;e<f.length;e+=3)c.vertices.push((new n).fromArray(f,e)),void 0!==h&&c.colors.push((new J).fromArray(h,e));var k=a.groups;if(0<k.length)for(e=0;e<k.length;e++){f=
k[e];var q=f.start,u=q;for(q+=f.count;u<q;u+=3)void 0!==d?b(d[u],d[u+1],d[u+2],f.materialIndex):b(u,u+1,u+2,f.materialIndex)}else if(void 0!==d)for(e=0;e<d.length;e+=3)b(d[e],d[e+1],d[e+2]);else for(e=0;e<f.length/3;e+=3)b(e,e+1,e+2);this.computeFaceNormals();null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone());null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());return this},center:function(){this.computeBoundingBox();this.boundingBox.getCenter(Cf).negate();this.translate(Cf.x,
Cf.y,Cf.z);return this},normalize:function(){this.computeBoundingSphere();var a=this.boundingSphere.center,b=this.boundingSphere.radius;b=0===b?1:1/b;var c=new Q;c.set(b,0,0,-b*a.x,0,b,0,-b*a.y,0,0,b,-b*a.z,0,0,0,1);this.applyMatrix(c);return this},computeFaceNormals:function(){for(var a=new n,b=new n,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],f=this.vertices[e.a],g=this.vertices[e.b];a.subVectors(this.vertices[e.c],g);b.subVectors(f,g);a.cross(b);a.normalize();e.normal.copy(a)}},computeVertexNormals:function(a){void 0===
a&&(a=!0);var b;var c=Array(this.vertices.length);var d=0;for(b=this.vertices.length;d<b;d++)c[d]=new n;if(a){var e=new n,f=new n;a=0;for(d=this.faces.length;a<d;a++){b=this.faces[a];var g=this.vertices[b.a];var h=this.vertices[b.b];var l=this.vertices[b.c];e.subVectors(l,h);f.subVectors(g,h);e.cross(f);c[b.a].add(e);c[b.b].add(e);c[b.c].add(e)}}else for(this.computeFaceNormals(),a=0,d=this.faces.length;a<d;a++)b=this.faces[a],c[b.a].add(b.normal),c[b.b].add(b.normal),c[b.c].add(b.normal);d=0;for(b=
this.vertices.length;d<b;d++)c[d].normalize();a=0;for(d=this.faces.length;a<d;a++)b=this.faces[a],g=b.vertexNormals,3===g.length?(g[0].copy(c[b.a]),g[1].copy(c[b.b]),g[2].copy(c[b.c])):(g[0]=c[b.a].clone(),g[1]=c[b.b].clone(),g[2]=c[b.c].clone());0<this.faces.length&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var a;this.computeFaceNormals();var b=0;for(a=this.faces.length;b<a;b++){var c=this.faces[b];var d=c.vertexNormals;3===d.length?(d[0].copy(c.normal),d[1].copy(c.normal),
d[2].copy(c.normal)):(d[0]=c.normal.clone(),d[1]=c.normal.clone(),d[2]=c.normal.clone())}0<this.faces.length&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var a,b;var c=0;for(b=this.faces.length;c<b;c++){var d=this.faces[c];d.__originalFaceNormal?d.__originalFaceNormal.copy(d.normal):d.__originalFaceNormal=d.normal.clone();d.__originalVertexNormals||(d.__originalVertexNormals=[]);var e=0;for(a=d.vertexNormals.length;e<a;e++)d.__originalVertexNormals[e]?d.__originalVertexNormals[e].copy(d.vertexNormals[e]):
d.__originalVertexNormals[e]=d.vertexNormals[e].clone()}var f=new G;f.faces=this.faces;e=0;for(a=this.morphTargets.length;e<a;e++){if(!this.morphNormals[e]){this.morphNormals[e]={};this.morphNormals[e].faceNormals=[];this.morphNormals[e].vertexNormals=[];d=this.morphNormals[e].faceNormals;var g=this.morphNormals[e].vertexNormals;c=0;for(b=this.faces.length;c<b;c++){var h=new n;var l={a:new n,b:new n,c:new n};d.push(h);g.push(l)}}g=this.morphNormals[e];f.vertices=this.morphTargets[e].vertices;f.computeFaceNormals();
f.computeVertexNormals();c=0;for(b=this.faces.length;c<b;c++)d=this.faces[c],h=g.faceNormals[c],l=g.vertexNormals[c],h.copy(d.normal),l.a.copy(d.vertexNormals[0]),l.b.copy(d.vertexNormals[1]),l.c.copy(d.vertexNormals[2])}c=0;for(b=this.faces.length;c<b;c++)d=this.faces[c],d.normal=d.__originalFaceNormal,d.vertexNormals=d.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new ab);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===
this.boundingSphere&&(this.boundingSphere=new mb);this.boundingSphere.setFromPoints(this.vertices)},merge:function(a,b,c){if(a&&a.isGeometry){var d,e=this.vertices.length,f=this.vertices,g=a.vertices,h=this.faces,l=a.faces,m=this.colors,k=a.colors;void 0===c&&(c=0);void 0!==b&&(d=(new Z).getNormalMatrix(b));for(var n=0,u=g.length;n<u;n++){var p=g[n].clone();void 0!==b&&p.applyMatrix4(b);f.push(p)}n=0;for(u=k.length;n<u;n++)m.push(k[n].clone());n=0;for(u=l.length;n<u;n++){g=l[n];var t=g.vertexNormals;
k=g.vertexColors;m=new xc(g.a+e,g.b+e,g.c+e);m.normal.copy(g.normal);void 0!==d&&m.normal.applyMatrix3(d).normalize();b=0;for(f=t.length;b<f;b++)p=t[b].clone(),void 0!==d&&p.applyMatrix3(d).normalize(),m.vertexNormals.push(p);m.color.copy(g.color);b=0;for(f=k.length;b<f;b++)p=k[b],m.vertexColors.push(p.clone());m.materialIndex=g.materialIndex+c;h.push(m)}n=0;for(u=a.faceVertexUvs.length;n<u;n++)for(c=a.faceVertexUvs[n],void 0===this.faceVertexUvs[n]&&(this.faceVertexUvs[n]=[]),b=0,f=c.length;b<f;b++){d=
c[b];e=[];h=0;for(l=d.length;h<l;h++)e.push(d[h].clone());this.faceVertexUvs[n].push(e)}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",a)},mergeMesh:function(a){a&&a.isMesh?(a.matrixAutoUpdate&&a.updateMatrix(),this.merge(a.geometry,a.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",a)},mergeVertices:function(){var a={},b=[],c=[],d=Math.pow(10,4),e;var f=0;for(e=this.vertices.length;f<e;f++){var g=this.vertices[f];
g=Math.round(g.x*d)+"_"+Math.round(g.y*d)+"_"+Math.round(g.z*d);void 0===a[g]?(a[g]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[g]]}a=[];f=0;for(e=this.faces.length;f<e;f++)for(d=this.faces[f],d.a=c[d.a],d.b=c[d.b],d.c=c[d.c],d=[d.a,d.b,d.c],g=0;3>g;g++)if(d[g]===d[(g+1)%3]){a.push(f);break}for(f=a.length-1;0<=f;f--)for(d=a[f],this.faces.splice(d,1),c=0,e=this.faceVertexUvs.length;c<e;c++)this.faceVertexUvs[c].splice(d,1);f=this.vertices.length-b.length;this.vertices=b;return f},setFromPoints:function(a){this.vertices=
[];for(var b=0,c=a.length;b<c;b++){var d=a[b];this.vertices.push(new n(d.x,d.y,d.z||0))}return this},sortFacesByMaterialIndex:function(){for(var a=this.faces,b=a.length,c=0;c<b;c++)a[c]._id=c;a.sort(function(a,b){return a.materialIndex-b.materialIndex});var d=this.faceVertexUvs[0],e=this.faceVertexUvs[1],f,g;d&&d.length===b&&(f=[]);e&&e.length===b&&(g=[]);for(c=0;c<b;c++){var h=a[c]._id;f&&f.push(d[h]);g&&g.push(e[h])}f&&(this.faceVertexUvs[0]=f);g&&(this.faceVertexUvs[1]=g)},toJSON:function(){function a(a,
b,c){return c?a|1<<b:a&~(1<<b)}function b(a){var b=a.x.toString()+a.y.toString()+a.z.toString();if(void 0!==m[b])return m[b];m[b]=l.length/3;l.push(a.x,a.y,a.z);return m[b]}function c(a){var b=a.r.toString()+a.g.toString()+a.b.toString();if(void 0!==n[b])return n[b];n[b]=k.length;k.push(a.getHex());return n[b]}function d(a){var b=a.x.toString()+a.y.toString();if(void 0!==p[b])return p[b];p[b]=u.length/2;u.push(a.x,a.y);return p[b]}var e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};
e.uuid=this.uuid;e.type=this.type;""!==this.name&&(e.name=this.name);if(void 0!==this.parameters){var f=this.parameters,g;for(g in f)void 0!==f[g]&&(e[g]=f[g]);return e}f=[];for(g=0;g<this.vertices.length;g++){var h=this.vertices[g];f.push(h.x,h.y,h.z)}h=[];var l=[],m={},k=[],n={},u=[],p={};for(g=0;g<this.faces.length;g++){var t=this.faces[g],v=void 0!==this.faceVertexUvs[0][g],y=0<t.normal.length(),w=0<t.vertexNormals.length,x=1!==t.color.r||1!==t.color.g||1!==t.color.b,B=0<t.vertexColors.length,
A=0;A=a(A,0,0);A=a(A,1,!0);A=a(A,2,!1);A=a(A,3,v);A=a(A,4,y);A=a(A,5,w);A=a(A,6,x);A=a(A,7,B);h.push(A);h.push(t.a,t.b,t.c);h.push(t.materialIndex);v&&(v=this.faceVertexUvs[0][g],h.push(d(v[0]),d(v[1]),d(v[2])));y&&h.push(b(t.normal));w&&(y=t.vertexNormals,h.push(b(y[0]),b(y[1]),b(y[2])));x&&h.push(c(t.color));B&&(t=t.vertexColors,h.push(c(t[0]),c(t[1]),c(t[2])))}e.data={};e.data.vertices=f;e.data.normals=l;0<k.length&&(e.data.colors=k);0<u.length&&(e.data.uvs=[u]);e.data.faces=h;return e},clone:function(){return(new G).copy(this)},
copy:function(a){var b,c,d;this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.name=a.name;var e=a.vertices;var f=0;for(b=e.length;f<b;f++)this.vertices.push(e[f].clone());e=a.colors;f=0;for(b=e.length;f<b;f++)this.colors.push(e[f].clone());e=a.faces;f=0;for(b=e.length;f<b;f++)this.faces.push(e[f].clone());f=0;for(b=a.faceVertexUvs.length;f<
b;f++){var g=a.faceVertexUvs[f];void 0===this.faceVertexUvs[f]&&(this.faceVertexUvs[f]=[]);e=0;for(c=g.length;e<c;e++){var h=g[e],l=[];var m=0;for(d=h.length;m<d;m++)l.push(h[m].clone());this.faceVertexUvs[f].push(l)}}m=a.morphTargets;f=0;for(b=m.length;f<b;f++){d={};d.name=m[f].name;if(void 0!==m[f].vertices)for(d.vertices=[],e=0,c=m[f].vertices.length;e<c;e++)d.vertices.push(m[f].vertices[e].clone());if(void 0!==m[f].normals)for(d.normals=[],e=0,c=m[f].normals.length;e<c;e++)d.normals.push(m[f].normals[e].clone());
this.morphTargets.push(d)}m=a.morphNormals;f=0;for(b=m.length;f<b;f++){d={};if(void 0!==m[f].vertexNormals)for(d.vertexNormals=[],e=0,c=m[f].vertexNormals.length;e<c;e++)g=m[f].vertexNormals[e],h={},h.a=g.a.clone(),h.b=g.b.clone(),h.c=g.c.clone(),d.vertexNormals.push(h);if(void 0!==m[f].faceNormals)for(d.faceNormals=[],e=0,c=m[f].faceNormals.length;e<c;e++)d.faceNormals.push(m[f].faceNormals[e].clone());this.morphNormals.push(d)}e=a.skinWeights;f=0;for(b=e.length;f<b;f++)this.skinWeights.push(e[f].clone());
e=a.skinIndices;f=0;for(b=e.length;f<b;f++)this.skinIndices.push(e[f].clone());e=a.lineDistances;f=0;for(b=e.length;f<b;f++)this.lineDistances.push(e[f]);f=a.boundingBox;null!==f&&(this.boundingBox=f.clone());f=a.boundingSphere;null!==f&&(this.boundingSphere=f.clone());this.elementsNeedUpdate=a.elementsNeedUpdate;this.verticesNeedUpdate=a.verticesNeedUpdate;this.uvsNeedUpdate=a.uvsNeedUpdate;this.normalsNeedUpdate=a.normalsNeedUpdate;this.colorsNeedUpdate=a.colorsNeedUpdate;this.lineDistancesNeedUpdate=
a.lineDistancesNeedUpdate;this.groupsNeedUpdate=a.groupsNeedUpdate;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});var Zg=function(a){function b(b,d,e,f,g,h){a.call(this);this.type="BoxGeometry";this.parameters={width:b,height:d,depth:e,widthSegments:f,heightSegments:g,depthSegments:h};this.fromBufferGeometry(new Fd(b,d,e,f,g,h));this.mergeVertices()}a&&(b.__proto__=a);b.prototype=Object.create(a&&a.prototype);return b.prototype.constructor=b}(G),Fd=function(a){function b(b,
d,e,f,g,h){function c(a,b,c,d,e,f,g,h,l,r,A){var w=f/l,y=g/r,x=f/2,z=g/2,B=h/2;g=l+1;var E=r+1,I=f=0,C,F,D=new n;for(F=0;F<E;F++){var G=F*y-z;for(C=0;C<g;C++)D[a]=(C*w-x)*d,D[b]=G*e,D[c]=B,q.push(D.x,D.y,D.z),D[a]=0,D[b]=0,D[c]=0<h?1:-1,u.push(D.x,D.y,D.z),p.push(C/l),p.push(1-F/r),f+=1}for(F=0;F<r;F++)for(C=0;C<l;C++)a=t+C+g*(F+1),b=t+(C+1)+g*(F+1),c=t+(C+1)+g*F,k.push(t+C+g*F,a,c),k.push(a,b,c),I+=6;m.addGroup(v,I,A);v+=I;t+=f}a.call(this);this.type="BoxBufferGeometry";this.parameters={width:b,
height:d,depth:e,widthSegments:f,heightSegments:g,depthSegments:h};var m=this;b=b||1;d=d||1;e=e||1;f=Math.floor(f)||1;g=Math.floor(g)||1;h=Math.floor(h)||1;var k=[],q=[],u=[],p=[],t=0,v=0;c("z","y","x",-1,-1,e,d,b,h,g,0);c("z","y","x",1,-1,e,d,-b,h,g,1);c("x","z","y",1,1,b,e,d,f,h,2);c("x","z","y",1,-1,b,e,-d,f,h,3);c("x","y","z",1,-1,b,d,e,f,g,4);c("x","y","z",-1,-1,b,d,-e,f,g,5);this.setIndex(k);this.setAttribute("position",new A(q,3));this.setAttribute("normal",new A(u,3));this.setAttribute("uv",
new A(p,2))}a&&(b.__proto__=a);b.prototype=Object.create(a&&a.prototype);return b.prototype.constructor=b}(D),Ck={clone:Xb,merge:ua};va.prototype=Object.create(O.prototype);va.prototype.constructor=va;va.prototype.isShaderMaterial=!0;va.prototype.copy=function(a){O.prototype.copy.call(this,a);this.fragmentShader=a.fragmentShader;this.vertexShader=a.vertexShader;this.uniforms=Xb(a.uniforms);this.defines=Object.assign({},a.defines);this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;
this.lights=a.lights;this.clipping=a.clipping;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;this.extensions=a.extensions;return this};va.prototype.toJSON=function(a){var b=O.prototype.toJSON.call(this,a);b.uniforms={};for(var c in this.uniforms){var d=this.uniforms[c].value;b.uniforms[c]=d&&d.isTexture?{type:"t",value:d.toJSON(a).uuid}:d&&d.isColor?{type:"c",value:d.getHex()}:d&&d.isVector2?{type:"v2",value:d.toArray()}:d&&d.isVector3?{type:"v3",value:d.toArray()}:
d&&d.isVector4?{type:"v4",value:d.toArray()}:d&&d.isMatrix3?{type:"m3",value:d.toArray()}:d&&d.isMatrix4?{type:"m4",value:d.toArray()}:{value:d}}0<Object.keys(this.defines).length&&(b.defines=this.defines);b.vertexShader=this.vertexShader;b.fragmentShader=this.fragmentShader;a={};for(var e in this.extensions)!0===this.extensions[e]&&(a[e]=!0);0<Object.keys(a).length&&(b.extensions=a);return b};bb.prototype=Object.assign(Object.create(E.prototype),{constructor:bb,isCamera:!0,copy:function(a,b){E.prototype.copy.call(this,
a,b);this.matrixWorldInverse.copy(a.matrixWorldInverse);this.projectionMatrix.copy(a.projectionMatrix);this.projectionMatrixInverse.copy(a.projectionMatrixInverse);return this},getWorldDirection:function(a){void 0===a&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),a=new n);this.updateMatrixWorld(!0);var b=this.matrixWorld.elements;return a.set(-b[8],-b[9],-b[10]).normalize()},updateMatrixWorld:function(a){E.prototype.updateMatrixWorld.call(this,a);this.matrixWorldInverse.getInverse(this.matrixWorld)},
clone:function(){return(new this.constructor).copy(this)}});U.prototype=Object.assign(Object.create(bb.prototype),{constructor:U,isPerspectiveCamera:!0,copy:function(a,b){bb.prototype.copy.call(this,a,b);this.fov=a.fov;this.zoom=a.zoom;this.near=a.near;this.far=a.far;this.focus=a.focus;this.aspect=a.aspect;this.view=null===a.view?null:Object.assign({},a.view);this.filmGauge=a.filmGauge;this.filmOffset=a.filmOffset;return this},setFocalLength:function(a){a=.5*this.getFilmHeight()/a;this.fov=2*P.RAD2DEG*
Math.atan(a);this.updateProjectionMatrix()},getFocalLength:function(){var a=Math.tan(.5*P.DEG2RAD*this.fov);return.5*this.getFilmHeight()/a},getEffectiveFOV:function(){return 2*P.RAD2DEG*Math.atan(Math.tan(.5*P.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(a,b,c,d,e,f){this.aspect=a/b;null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,
offsetX:0,offsetY:0,width:1,height:1});this.view.enabled=!0;this.view.fullWidth=a;this.view.fullHeight=b;this.view.offsetX=c;this.view.offsetY=d;this.view.width=e;this.view.height=f;this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1);this.updateProjectionMatrix()},updateProjectionMatrix:function(){var a=this.near,b=a*Math.tan(.5*P.DEG2RAD*this.fov)/this.zoom,c=2*b,d=this.aspect*c,e=-.5*d,f=this.view;if(null!==this.view&&this.view.enabled){var g=f.fullWidth,
h=f.fullHeight;e+=f.offsetX*d/g;b-=f.offsetY*c/h;d*=f.width/g;c*=f.height/h}f=this.filmOffset;0!==f&&(e+=a*f/this.getFilmWidth());this.projectionMatrix.makePerspective(e,e+d,b,b-c,a,this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(a){a=E.prototype.toJSON.call(this,a);a.object.fov=this.fov;a.object.zoom=this.zoom;a.object.near=this.near;a.object.far=this.far;a.object.focus=this.focus;a.object.aspect=this.aspect;null!==this.view&&(a.object.view=Object.assign({},
this.view));a.object.filmGauge=this.filmGauge;a.object.filmOffset=this.filmOffset;return a}});Bc.prototype=Object.create(E.prototype);Bc.prototype.constructor=Bc;Bb.prototype=Object.create(Ba.prototype);Bb.prototype.constructor=Bb;Bb.prototype.isWebGLRenderTargetCube=!0;Bb.prototype.fromEquirectangularTexture=function(a,b){this.texture.type=b.type;this.texture.format=b.format;this.texture.encoding=b.encoding;var c=new vd,d=new va({type:"CubemapFromEquirect",uniforms:Xb({tEquirect:{value:null}}),vertexShader:"varying vec3 vWorldDirection;\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",
fragmentShader:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}",side:1,blending:0});d.uniforms.tEquirect.value=b;b=new ea(new Fd(5,
5,5),d);c.add(b);d=new Bc(1,10,1);d.renderTarget=this;d.renderTarget.texture.name="CubeCameraTexture";d.update(a,c);b.geometry.dispose();b.material.dispose();return this};Yb.prototype=Object.create(Y.prototype);Yb.prototype.constructor=Yb;Yb.prototype.isDataTexture=!0;var sd=new mb,Df=new n;Object.assign(Dd.prototype,{set:function(a,b,c,d,e,f){var g=this.planes;g[0].copy(a);g[1].copy(b);g[2].copy(c);g[3].copy(d);g[4].copy(e);g[5].copy(f);return this},clone:function(){return(new this.constructor).copy(this)},
copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements;a=c[0];var d=c[1],e=c[2],f=c[3],g=c[4],h=c[5],l=c[6],m=c[7],k=c[8],n=c[9],u=c[10],p=c[11],t=c[12],v=c[13],y=c[14];c=c[15];b[0].setComponents(f-a,m-g,p-k,c-t).normalize();b[1].setComponents(f+a,m+g,p+k,c+t).normalize();b[2].setComponents(f+d,m+h,p+n,c+v).normalize();b[3].setComponents(f-d,m-h,p-n,c-v).normalize();b[4].setComponents(f-e,m-l,p-u,c-y).normalize();
b[5].setComponents(f+e,m+l,p+u,c+y).normalize();return this},intersectsObject:function(a){var b=a.geometry;null===b.boundingSphere&&b.computeBoundingSphere();sd.copy(b.boundingSphere).applyMatrix4(a.matrixWorld);return this.intersectsSphere(sd)},intersectsSprite:function(a){sd.center.set(0,0,0);sd.radius=.7071067811865476;sd.applyMatrix4(a.matrixWorld);return this.intersectsSphere(sd)},intersectsSphere:function(a){var b=this.planes,c=a.center;a=-a.radius;for(var d=0;6>d;d++)if(b[d].distanceToPoint(c)<
a)return!1;return!0},intersectsBox:function(a){for(var b=this.planes,c=0;6>c;c++){var d=b[c];Df.x=0<d.normal.x?a.max.x:a.min.x;Df.y=0<d.normal.y?a.max.y:a.min.y;Df.z=0<d.normal.z?a.max.z:a.min.z;if(0>d.distanceToPoint(Df))return!1}return!0},containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0}});var S={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",
aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",
bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",
clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif",
color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}",
cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif",
defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",
displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",
encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",
envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",
envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif",
lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif",
lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",
lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",
lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = saturate( clearcoat );\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",
lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",
lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",
lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",
logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",
map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",
map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",
morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",
normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",
normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\t#ifdef USE_TANGENT\n\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, normalScale, normalMap );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",
normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec2 normalScale, in sampler2D normalMap ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy *= normalScale;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tbool frontFacing = dot( cross( S, T ), N ) > 0.0;\n\t\t\tmapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif",
clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 vTBN = mat3( tangent, bitangent, clearcoatNormal );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = clearcoatNormalScale * mapN.xy;\n\t\tclearcoatNormal = normalize( vTBN * mapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatNormalScale, clearcoatNormalMap );\n\t#endif\n#endif",
clearcoat_normalmap_pars_fragment:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 encodeHalfRGBA ( vec2 v ) {\n\tvec4 encoded = vec4( 0.0 );\n\tconst vec2 offset = vec2( 1.0 / 255.0, 0.0 );\n\tencoded.xy = vec2( v.x, fract( v.x * 255.0 ) );\n\tencoded.xy = encoded.xy - ( encoded.yy * offset );\n\tencoded.zw = vec2( v.y, fract( v.y * 255.0 ) );\n\tencoded.zw = encoded.zw - ( encoded.ww * offset );\n\treturn encoded;\n}\nvec2 decodeHalfRGBA( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",
premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn decodeHalfRGBA( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",
shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif",
shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}",
skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",
skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",
uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",
uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}",
depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}",
distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",
normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},
L={common:{diffuse:{value:new J(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Z},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},
normalScale:{value:new B(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:2.5E-4},fogNear:{value:1},fogFar:{value:2E3},fogColor:{value:new J(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},
shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},
pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new J(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Z}},sprite:{diffuse:{value:new J(15658734)},opacity:{value:1},center:{value:new B(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},
uvTransform:{value:new Z}}},cb={basic:{uniforms:ua([L.common,L.specularmap,L.envmap,L.aomap,L.lightmap,L.fog]),vertexShader:S.meshbasic_vert,fragmentShader:S.meshbasic_frag},lambert:{uniforms:ua([L.common,L.specularmap,L.envmap,L.aomap,L.lightmap,L.emissivemap,L.fog,L.lights,{emissive:{value:new J(0)}}]),vertexShader:S.meshlambert_vert,fragmentShader:S.meshlambert_frag},phong:{uniforms:ua([L.common,L.specularmap,L.envmap,L.aomap,L.lightmap,L.emissivemap,L.bumpmap,L.normalmap,L.displacementmap,L.gradientmap,
L.fog,L.lights,{emissive:{value:new J(0)},specular:{value:new J(1118481)},shininess:{value:30}}]),vertexShader:S.meshphong_vert,fragmentShader:S.meshphong_frag},standard:{uniforms:ua([L.common,L.envmap,L.aomap,L.lightmap,L.emissivemap,L.bumpmap,L.normalmap,L.displacementmap,L.roughnessmap,L.metalnessmap,L.fog,L.lights,{emissive:{value:new J(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:S.meshphysical_vert,fragmentShader:S.meshphysical_frag},matcap:{uniforms:ua([L.common,
L.bumpmap,L.normalmap,L.displacementmap,L.fog,{matcap:{value:null}}]),vertexShader:S.meshmatcap_vert,fragmentShader:S.meshmatcap_frag},points:{uniforms:ua([L.points,L.fog]),vertexShader:S.points_vert,fragmentShader:S.points_frag},dashed:{uniforms:ua([L.common,L.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:S.linedashed_vert,fragmentShader:S.linedashed_frag},depth:{uniforms:ua([L.common,L.displacementmap]),vertexShader:S.depth_vert,fragmentShader:S.depth_frag},normal:{uniforms:ua([L.common,
L.bumpmap,L.normalmap,L.displacementmap,{opacity:{value:1}}]),vertexShader:S.normal_vert,fragmentShader:S.normal_frag},sprite:{uniforms:ua([L.sprite,L.fog]),vertexShader:S.sprite_vert,fragmentShader:S.sprite_frag},background:{uniforms:{uvTransform:{value:new Z},t2D:{value:null}},vertexShader:S.background_vert,fragmentShader:S.background_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:S.cube_vert,fragmentShader:S.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},
vertexShader:S.equirect_vert,fragmentShader:S.equirect_frag},distanceRGBA:{uniforms:ua([L.common,L.displacementmap,{referencePosition:{value:new n},nearDistance:{value:1},farDistance:{value:1E3}}]),vertexShader:S.distanceRGBA_vert,fragmentShader:S.distanceRGBA_frag},shadow:{uniforms:ua([L.lights,L.fog,{color:{value:new J(0)},opacity:{value:1}}]),vertexShader:S.shadow_vert,fragmentShader:S.shadow_frag}};cb.physical={uniforms:ua([cb.standard.uniforms,{transparency:{value:0},clearcoat:{value:0},clearcoatRoughness:{value:0},
sheen:{value:new J(0)},clearcoatNormalScale:{value:new B(1,1)},clearcoatNormalMap:{value:null}}]),vertexShader:S.meshphysical_vert,fragmentShader:S.meshphysical_frag};Ed.prototype=Object.create(G.prototype);Ed.prototype.constructor=Ed;Zb.prototype=Object.create(D.prototype);Zb.prototype.constructor=Zb;nb.prototype=Object.create(Y.prototype);nb.prototype.constructor=nb;nb.prototype.isCubeTexture=!0;Object.defineProperty(nb.prototype,"images",{get:function(){return this.image},set:function(a){this.image=
a}});Cc.prototype=Object.create(Y.prototype);Cc.prototype.constructor=Cc;Cc.prototype.isDataTexture2DArray=!0;Dc.prototype=Object.create(Y.prototype);Dc.prototype.constructor=Dc;Dc.prototype.isDataTexture3D=!0;var uh=new Y,rj=new Cc,tj=new Dc,vh=new nb,oh=[],qh=[],th=new Float32Array(16),sh=new Float32Array(9),rh=new Float32Array(4);wh.prototype.updateCache=function(a){var b=this.cache;a instanceof Float32Array&&b.length!==a.length&&(this.cache=new Float32Array(a.length));Ha(b,a)};xh.prototype.setValue=
function(a,b,c){for(var d=this.seq,e=0,f=d.length;e!==f;++e){var g=d[e];g.setValue(a,b[g.id],c)}};var bg=/([\w\d_]+)(\])?(\[|\.)?/g;Cb.prototype.setValue=function(a,b,c,d){b=this.map[b];void 0!==b&&b.setValue(a,c,d)};Cb.prototype.setOptional=function(a,b,c){b=b[c];void 0!==b&&this.setValue(a,c,b)};Cb.upload=function(a,b,c,d){for(var e=0,f=b.length;e!==f;++e){var g=b[e],h=c[g.id];!1!==h.needsUpdate&&g.setValue(a,h.value,d)}};Cb.seqWithValue=function(a,b){for(var c=[],d=0,e=a.length;d!==e;++d){var f=
a[d];f.id in b&&c.push(f)}return c};var Yj=0,dg=/^[ \t]*#include +<([\w\d./]+)>/gm,Fh=/#pragma unroll_loop[\s]+?for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}/g,hk=0;Db.prototype=Object.create(O.prototype);Db.prototype.constructor=Db;Db.prototype.isMeshDepthMaterial=!0;Db.prototype.copy=function(a){O.prototype.copy.call(this,a);this.depthPacking=a.depthPacking;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.map=a.map;this.alphaMap=a.alphaMap;this.displacementMap=a.displacementMap;
this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;return this};Eb.prototype=Object.create(O.prototype);Eb.prototype.constructor=Eb;Eb.prototype.isMeshDistanceMaterial=!0;Eb.prototype.copy=function(a){O.prototype.copy.call(this,a);this.referencePosition.copy(a.referencePosition);this.nearDistance=a.nearDistance;this.farDistance=a.farDistance;this.skinning=a.skinning;this.morphTargets=a.morphTargets;
this.map=a.map;this.alphaMap=a.alphaMap;this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;return this};fg.prototype=Object.assign(Object.create(Ba.prototype),{constructor:fg,isWebGLMultiviewRenderTarget:!0,copy:function(a){Ba.prototype.copy.call(this,a);this.numViews=a.numViews;return this},setNumViews:function(a){this.numViews!==a&&(this.numViews=a,this.dispose());return this}});Gc.prototype=Object.assign(Object.create(E.prototype),
{constructor:Gc,isGroup:!0});Jd.prototype=Object.assign(Object.create(U.prototype),{constructor:Jd,isArrayCamera:!0});var Mh=new n,Nh=new n;Object.assign(gg.prototype,Aa.prototype);Object.assign(Oh.prototype,Aa.prototype);Object.assign(Le.prototype,{isFogExp2:!0,clone:function(){return new Le(this.color,this.density)},toJSON:function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}});Object.assign(Me.prototype,{isFog:!0,clone:function(){return new Me(this.color,this.near,this.far)},
toJSON:function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}});Object.defineProperty(pb.prototype,"needsUpdate",{set:function(a){!0===a&&this.version++}});Object.assign(pb.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setUsage:function(a){this.usage=a;return this},copy:function(a){this.array=new a.array.constructor(a.array);this.count=a.count;this.stride=a.stride;this.usage=a.usage;return this},copyAt:function(a,b,c){a*=this.stride;c*=b.stride;for(var d=
0,e=this.stride;d<e;d++)this.array[a+d]=b.array[c+d];return this},set:function(a,b){void 0===b&&(b=0);this.array.set(a,b);return this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(a){this.onUploadCallback=a;return this}});Object.defineProperties(Kd.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}});Object.assign(Kd.prototype,{isInterleavedBufferAttribute:!0,setX:function(a,b){this.data.array[a*this.data.stride+
this.offset]=b;return this},setY:function(a,b){this.data.array[a*this.data.stride+this.offset+1]=b;return this},setZ:function(a,b){this.data.array[a*this.data.stride+this.offset+2]=b;return this},setW:function(a,b){this.data.array[a*this.data.stride+this.offset+3]=b;return this},getX:function(a){return this.data.array[a*this.data.stride+this.offset]},getY:function(a){return this.data.array[a*this.data.stride+this.offset+1]},getZ:function(a){return this.data.array[a*this.data.stride+this.offset+2]},
getW:function(a){return this.data.array[a*this.data.stride+this.offset+3]},setXY:function(a,b,c){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;return this},setXYZ:function(a,b,c,d){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;this.data.array[a+2]=d;return this},setXYZW:function(a,b,c,d,e){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;this.data.array[a+2]=d;this.data.array[a+3]=e;return this}});Gb.prototype=
Object.create(O.prototype);Gb.prototype.constructor=Gb;Gb.prototype.isSpriteMaterial=!0;Gb.prototype.copy=function(a){O.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.alphaMap=a.alphaMap;this.rotation=a.rotation;this.sizeAttenuation=a.sizeAttenuation;return this};var Hc,ze=new n,td=new n,ud=new n,Ic=new B,Md=new B,Qh=new Q,Ef=new n,Ae=new n,Ff=new n,vi=new B,$g=new B,wi=new B;Ld.prototype=Object.assign(Object.create(E.prototype),{constructor:Ld,isSprite:!0,raycast:function(a,
b){null===a.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');td.setFromMatrixScale(this.matrixWorld);Qh.copy(a.camera.matrixWorld);this.modelViewMatrix.multiplyMatrices(a.camera.matrixWorldInverse,this.matrixWorld);ud.setFromMatrixPosition(this.modelViewMatrix);a.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&td.multiplyScalar(-ud.z);var c=this.material.rotation;if(0!==c){var d=Math.cos(c);var e=Math.sin(c)}c=this.center;
Ne(Ef.set(-.5,-.5,0),ud,c,td,e,d);Ne(Ae.set(.5,-.5,0),ud,c,td,e,d);Ne(Ff.set(.5,.5,0),ud,c,td,e,d);vi.set(0,0);$g.set(1,0);wi.set(1,1);var f=a.ray.intersectTriangle(Ef,Ae,Ff,!1,ze);if(null===f&&(Ne(Ae.set(-.5,.5,0),ud,c,td,e,d),$g.set(0,1),f=a.ray.intersectTriangle(Ef,Ff,Ae,!1,ze),null===f))return;e=a.ray.origin.distanceTo(ze);e<a.near||e>a.far||b.push({distance:e,point:ze.clone(),uv:ba.getUV(ze,Ef,Ae,Ff,vi,$g,wi,new B),face:null,object:this})},clone:function(){return(new this.constructor(this.material)).copy(this)},
copy:function(a){E.prototype.copy.call(this,a);void 0!==a.center&&this.center.copy(a.center);return this}});var Gf=new n,xi=new n;Nd.prototype=Object.assign(Object.create(E.prototype),{constructor:Nd,isLOD:!0,copy:function(a){E.prototype.copy.call(this,a,!1);a=a.levels;for(var b=0,c=a.length;b<c;b++){var d=a[b];this.addLevel(d.object.clone(),d.distance)}return this},addLevel:function(a,b){void 0===b&&(b=0);b=Math.abs(b);for(var c=this.levels,d=0;d<c.length&&!(b<c[d].distance);d++);c.splice(d,0,{distance:b,
object:a});this.add(a);return this},getObjectForDistance:function(a){for(var b=this.levels,c=1,d=b.length;c<d&&!(a<b[c].distance);c++);return b[c-1].object},raycast:function(a,b){Gf.setFromMatrixPosition(this.matrixWorld);var c=a.ray.origin.distanceTo(Gf);this.getObjectForDistance(c).raycast(a,b)},update:function(a){var b=this.levels;if(1<b.length){Gf.setFromMatrixPosition(a.matrixWorld);xi.setFromMatrixPosition(this.matrixWorld);a=Gf.distanceTo(xi);b[0].object.visible=!0;for(var c=1,d=b.length;c<
d;c++)if(a>=b[c].distance)b[c-1].object.visible=!1,b[c].object.visible=!0;else break;for(;c<d;c++)b[c].object.visible=!1}},toJSON:function(a){a=E.prototype.toJSON.call(this,a);a.object.levels=[];for(var b=this.levels,c=0,d=b.length;c<d;c++){var e=b[c];a.object.levels.push({object:e.object.uuid,distance:e.distance})}return a}});Od.prototype=Object.assign(Object.create(ea.prototype),{constructor:Od,isSkinnedMesh:!0,bind:function(a,b){this.skeleton=a;void 0===b&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),
b=this.matrixWorld);this.bindMatrix.copy(b);this.bindMatrixInverse.getInverse(b)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){for(var a=new da,b=this.geometry.attributes.skinWeight,c=0,d=b.count;c<d;c++){a.x=b.getX(c);a.y=b.getY(c);a.z=b.getZ(c);a.w=b.getW(c);var e=1/a.manhattanLength();Infinity!==e?a.multiplyScalar(e):a.set(1,0,0,0);b.setXYZW(c,a.x,a.y,a.z,a.w)}},updateMatrixWorld:function(a){ea.prototype.updateMatrixWorld.call(this,a);"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):
"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});var yi=new Q,Dk=new Q;Object.assign(Oe.prototype,{calculateInverses:function(){this.boneInverses=[];for(var a=0,b=this.bones.length;a<b;a++){var c=new Q;this.bones[a]&&c.getInverse(this.bones[a].matrixWorld);this.boneInverses.push(c)}},pose:function(){var a,b;
var c=0;for(b=this.bones.length;c<b;c++)(a=this.bones[c])&&a.matrixWorld.getInverse(this.boneInverses[c]);c=0;for(b=this.bones.length;c<b;c++)if(a=this.bones[c])a.parent&&a.parent.isBone?(a.matrix.getInverse(a.parent.matrixWorld),a.matrix.multiply(a.matrixWorld)):a.matrix.copy(a.matrixWorld),a.matrix.decompose(a.position,a.quaternion,a.scale)},update:function(){for(var a=this.bones,b=this.boneInverses,c=this.boneMatrices,d=this.boneTexture,e=0,f=a.length;e<f;e++)yi.multiplyMatrices(a[e]?a[e].matrixWorld:
Dk,b[e]),yi.toArray(c,16*e);void 0!==d&&(d.needsUpdate=!0)},clone:function(){return new Oe(this.bones,this.boneInverses)},getBoneByName:function(a){for(var b=0,c=this.bones.length;b<c;b++){var d=this.bones[b];if(d.name===a)return d}}});ig.prototype=Object.assign(Object.create(E.prototype),{constructor:ig,isBone:!0});Pe.prototype=Object.assign(Object.create(ea.prototype),{constructor:Pe,isInstancedMesh:!0,raycast:function(){},setMatrixAt:function(a,b){b.toArray(this.instanceMatrix.array,16*a)},updateMorphTargets:function(){}});
R.prototype=Object.create(O.prototype);R.prototype.constructor=R;R.prototype.isLineBasicMaterial=!0;R.prototype.copy=function(a){O.prototype.copy.call(this,a);this.color.copy(a.color);this.linewidth=a.linewidth;this.linecap=a.linecap;this.linejoin=a.linejoin;return this};var zi=new n,Ai=new n,Bi=new Q,Hf=new Rb,Be=new mb;ra.prototype=Object.assign(Object.create(E.prototype),{constructor:ra,isLine:!0,computeLineDistances:function(){var a=this.geometry;if(a.isBufferGeometry)if(null===a.index){for(var b=
a.attributes.position,c=[0],d=1,e=b.count;d<e;d++)zi.fromBufferAttribute(b,d-1),Ai.fromBufferAttribute(b,d),c[d]=c[d-1],c[d]+=zi.distanceTo(Ai);a.setAttribute("lineDistance",new A(c,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(a.isGeometry)for(b=a.vertices,c=a.lineDistances,c[0]=0,d=1,e=b.length;d<e;d++)c[d]=c[d-1],c[d]+=b[d-1].distanceTo(b[d]);return this},raycast:function(a,b){var c=a.linePrecision,d=this.geometry,
e=this.matrixWorld;null===d.boundingSphere&&d.computeBoundingSphere();Be.copy(d.boundingSphere);Be.applyMatrix4(e);Be.radius+=c;if(!1!==a.ray.intersectsSphere(Be)){Bi.getInverse(e);Hf.copy(a.ray).applyMatrix4(Bi);c/=(this.scale.x+this.scale.y+this.scale.z)/3;c*=c;var f=new n,g=new n;e=new n;var h=new n,l=this&&this.isLineSegments?2:1;if(d.isBufferGeometry){var m=d.index,k=d.attributes.position.array;if(null!==m){m=m.array;d=0;for(var q=m.length-1;d<q;d+=l){var u=m[d+1];f.fromArray(k,3*m[d]);g.fromArray(k,
3*u);u=Hf.distanceSqToSegment(f,g,h,e);u>c||(h.applyMatrix4(this.matrixWorld),u=a.ray.origin.distanceTo(h),u<a.near||u>a.far||b.push({distance:u,point:e.clone().applyMatrix4(this.matrixWorld),index:d,face:null,faceIndex:null,object:this}))}}else for(d=0,q=k.length/3-1;d<q;d+=l)f.fromArray(k,3*d),g.fromArray(k,3*d+3),u=Hf.distanceSqToSegment(f,g,h,e),u>c||(h.applyMatrix4(this.matrixWorld),u=a.ray.origin.distanceTo(h),u<a.near||u>a.far||b.push({distance:u,point:e.clone().applyMatrix4(this.matrixWorld),
index:d,face:null,faceIndex:null,object:this}))}else if(d.isGeometry)for(f=d.vertices,g=f.length,d=0;d<g-1;d+=l)u=Hf.distanceSqToSegment(f[d],f[d+1],h,e),u>c||(h.applyMatrix4(this.matrixWorld),u=a.ray.origin.distanceTo(h),u<a.near||u>a.far||b.push({distance:u,point:e.clone().applyMatrix4(this.matrixWorld),index:d,face:null,faceIndex:null,object:this}))}},clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});var If=new n,Jf=new n;X.prototype=Object.assign(Object.create(ra.prototype),
{constructor:X,isLineSegments:!0,computeLineDistances:function(){var a=this.geometry;if(a.isBufferGeometry)if(null===a.index){for(var b=a.attributes.position,c=[],d=0,e=b.count;d<e;d+=2)If.fromBufferAttribute(b,d),Jf.fromBufferAttribute(b,d+1),c[d]=0===d?0:c[d-1],c[d+1]=c[d]+If.distanceTo(Jf);a.setAttribute("lineDistance",new A(c,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(a.isGeometry)for(b=a.vertices,c=a.lineDistances,
d=0,e=b.length;d<e;d+=2)If.copy(b[d]),Jf.copy(b[d+1]),c[d]=0===d?0:c[d-1],c[d+1]=c[d]+If.distanceTo(Jf);return this}});Qe.prototype=Object.assign(Object.create(ra.prototype),{constructor:Qe,isLineLoop:!0});Qa.prototype=Object.create(O.prototype);Qa.prototype.constructor=Qa;Qa.prototype.isPointsMaterial=!0;Qa.prototype.copy=function(a){O.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.alphaMap=a.alphaMap;this.size=a.size;this.sizeAttenuation=a.sizeAttenuation;this.morphTargets=
a.morphTargets;return this};var Ci=new Q,kg=new Rb,Ce=new mb,Kf=new n;Jc.prototype=Object.assign(Object.create(E.prototype),{constructor:Jc,isPoints:!0,raycast:function(a,b){var c=this.geometry,d=this.matrixWorld,e=a.params.Points.threshold;null===c.boundingSphere&&c.computeBoundingSphere();Ce.copy(c.boundingSphere);Ce.applyMatrix4(d);Ce.radius+=e;if(!1!==a.ray.intersectsSphere(Ce))if(Ci.getInverse(d),kg.copy(a.ray).applyMatrix4(Ci),e/=(this.scale.x+this.scale.y+this.scale.z)/3,e*=e,c.isBufferGeometry){var f=
c.index;c=c.attributes.position.array;if(null!==f){var g=f.array;f=0;for(var h=g.length;f<h;f++){var l=g[f];Kf.fromArray(c,3*l);jg(Kf,l,e,d,a,b,this)}}else for(f=0,g=c.length/3;f<g;f++)Kf.fromArray(c,3*f),jg(Kf,f,e,d,a,b,this)}else for(c=c.vertices,f=0,g=c.length;f<g;f++)jg(c[f],f,e,d,a,b,this)},updateMorphTargets:function(){var a=this.geometry;if(a.isBufferGeometry){a=a.morphAttributes;var b=Object.keys(a);if(0<b.length){var c=a[b[0]];if(void 0!==c)for(this.morphTargetInfluences=[],this.morphTargetDictionary=
{},a=0,b=c.length;a<b;a++){var d=c[a].name||String(a);this.morphTargetInfluences.push(0);this.morphTargetDictionary[d]=a}}}else a=a.morphTargets,void 0!==a&&0<a.length&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")},clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});lg.prototype=Object.assign(Object.create(Y.prototype),{constructor:lg,isVideoTexture:!0,update:function(){var a=this.image;a.readyState>=
a.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}});Kc.prototype=Object.create(Y.prototype);Kc.prototype.constructor=Kc;Kc.prototype.isCompressedTexture=!0;Pd.prototype=Object.create(Y.prototype);Pd.prototype.constructor=Pd;Pd.prototype.isCanvasTexture=!0;Qd.prototype=Object.create(Y.prototype);Qd.prototype.constructor=Qd;Qd.prototype.isDepthTexture=!0;Lc.prototype=Object.create(D.prototype);Lc.prototype.constructor=Lc;Rd.prototype=Object.create(G.prototype);Rd.prototype.constructor=Rd;Mc.prototype=Object.create(D.prototype);
Mc.prototype.constructor=Mc;Sd.prototype=Object.create(G.prototype);Sd.prototype.constructor=Sd;Ea.prototype=Object.create(D.prototype);Ea.prototype.constructor=Ea;Td.prototype=Object.create(G.prototype);Td.prototype.constructor=Td;Nc.prototype=Object.create(Ea.prototype);Nc.prototype.constructor=Nc;Ud.prototype=Object.create(G.prototype);Ud.prototype.constructor=Ud;ac.prototype=Object.create(Ea.prototype);ac.prototype.constructor=ac;Vd.prototype=Object.create(G.prototype);Vd.prototype.constructor=
Vd;Oc.prototype=Object.create(Ea.prototype);Oc.prototype.constructor=Oc;Wd.prototype=Object.create(G.prototype);Wd.prototype.constructor=Wd;Pc.prototype=Object.create(Ea.prototype);Pc.prototype.constructor=Pc;Xd.prototype=Object.create(G.prototype);Xd.prototype.constructor=Xd;bc.prototype=Object.create(D.prototype);bc.prototype.constructor=bc;bc.prototype.toJSON=function(){var a=D.prototype.toJSON.call(this);a.path=this.parameters.path.toJSON();return a};Yd.prototype=Object.create(G.prototype);Yd.prototype.constructor=
Yd;Qc.prototype=Object.create(D.prototype);Qc.prototype.constructor=Qc;Zd.prototype=Object.create(G.prototype);Zd.prototype.constructor=Zd;Rc.prototype=Object.create(D.prototype);Rc.prototype.constructor=Rc;var Ek={triangulate:function(a,b,c){c=c||2;var d=b&&b.length,e=d?b[0]*c:a.length,f=Rh(a,0,e,c,!0),g=[];if(!f||f.next===f.prev)return g;var h;if(d){var l=c;d=[];var m;var k=0;for(m=b.length;k<m;k++){var n=b[k]*l;var u=k<m-1?b[k+1]*l:a.length;n=Rh(a,n,u,l,!1);n===n.next&&(n.steiner=!0);d.push(pk(n))}d.sort(nk);
for(k=0;k<d.length;k++){b=d[k];l=f;if(l=ok(b,l))b=Uh(l,b),ae(b,b.next);f=ae(f,f.next)}}if(a.length>80*c){var p=h=a[0];var t=d=a[1];for(l=c;l<e;l+=c)k=a[l],b=a[l+1],k<p&&(p=k),b<t&&(t=b),k>h&&(h=k),b>d&&(d=b);h=Math.max(h-p,d-t);h=0!==h?1/h:0}be(f,g,c,p,t,h);return g}},qb={area:function(a){for(var b=a.length,c=0,d=b-1,e=0;e<b;d=e++)c+=a[d].x*a[e].y-a[e].x*a[d].y;return.5*c},isClockWise:function(a){return 0>qb.area(a)},triangulateShape:function(a,b){var c=[],d=[],e=[];Vh(a);Wh(c,a);var f=a.length;b.forEach(Vh);
for(a=0;a<b.length;a++)d.push(f),f+=b[a].length,Wh(c,b[a]);b=Ek.triangulate(c,d);for(a=0;a<b.length;a+=3)e.push(b.slice(a,a+3));return e}};dc.prototype=Object.create(G.prototype);dc.prototype.constructor=dc;dc.prototype.toJSON=function(){var a=G.prototype.toJSON.call(this);return Xh(this.parameters.shapes,this.parameters.options,a)};db.prototype=Object.create(D.prototype);db.prototype.constructor=db;db.prototype.toJSON=function(){var a=D.prototype.toJSON.call(this);return Xh(this.parameters.shapes,
this.parameters.options,a)};var qk={generateTopUV:function(a,b,c,d,e){a=b[3*d];d=b[3*d+1];var f=b[3*e];e=b[3*e+1];return[new B(b[3*c],b[3*c+1]),new B(a,d),new B(f,e)]},generateSideWallUV:function(a,b,c,d,e,f){a=b[3*c];var g=b[3*c+1];c=b[3*c+2];var h=b[3*d],l=b[3*d+1];d=b[3*d+2];var k=b[3*e],n=b[3*e+1];e=b[3*e+2];var q=b[3*f],u=b[3*f+1];b=b[3*f+2];return.01>Math.abs(g-l)?[new B(a,1-c),new B(h,1-d),new B(k,1-e),new B(q,1-b)]:[new B(g,1-c),new B(l,1-d),new B(n,1-e),new B(u,1-b)]}};de.prototype=Object.create(G.prototype);
de.prototype.constructor=de;Tc.prototype=Object.create(db.prototype);Tc.prototype.constructor=Tc;ee.prototype=Object.create(G.prototype);ee.prototype.constructor=ee;Hb.prototype=Object.create(D.prototype);Hb.prototype.constructor=Hb;fe.prototype=Object.create(G.prototype);fe.prototype.constructor=fe;Uc.prototype=Object.create(D.prototype);Uc.prototype.constructor=Uc;ge.prototype=Object.create(G.prototype);ge.prototype.constructor=ge;Vc.prototype=Object.create(D.prototype);Vc.prototype.constructor=
Vc;ec.prototype=Object.create(G.prototype);ec.prototype.constructor=ec;ec.prototype.toJSON=function(){var a=G.prototype.toJSON.call(this);return Yh(this.parameters.shapes,a)};fc.prototype=Object.create(D.prototype);fc.prototype.constructor=fc;fc.prototype.toJSON=function(){var a=D.prototype.toJSON.call(this);return Yh(this.parameters.shapes,a)};Wc.prototype=Object.create(D.prototype);Wc.prototype.constructor=Wc;gc.prototype=Object.create(G.prototype);gc.prototype.constructor=gc;rb.prototype=Object.create(D.prototype);
rb.prototype.constructor=rb;he.prototype=Object.create(gc.prototype);he.prototype.constructor=he;ie.prototype=Object.create(rb.prototype);ie.prototype.constructor=ie;je.prototype=Object.create(G.prototype);je.prototype.constructor=je;Xc.prototype=Object.create(D.prototype);Xc.prototype.constructor=Xc;var ja=Object.freeze({__proto__:null,WireframeGeometry:Lc,ParametricGeometry:Rd,ParametricBufferGeometry:Mc,TetrahedronGeometry:Td,TetrahedronBufferGeometry:Nc,OctahedronGeometry:Ud,OctahedronBufferGeometry:ac,
IcosahedronGeometry:Vd,IcosahedronBufferGeometry:Oc,DodecahedronGeometry:Wd,DodecahedronBufferGeometry:Pc,PolyhedronGeometry:Sd,PolyhedronBufferGeometry:Ea,TubeGeometry:Xd,TubeBufferGeometry:bc,TorusKnotGeometry:Yd,TorusKnotBufferGeometry:Qc,TorusGeometry:Zd,TorusBufferGeometry:Rc,TextGeometry:de,TextBufferGeometry:Tc,SphereGeometry:ee,SphereBufferGeometry:Hb,RingGeometry:fe,RingBufferGeometry:Uc,PlaneGeometry:Ed,PlaneBufferGeometry:Zb,LatheGeometry:ge,LatheBufferGeometry:Vc,ShapeGeometry:ec,ShapeBufferGeometry:fc,
ExtrudeGeometry:dc,ExtrudeBufferGeometry:db,EdgesGeometry:Wc,ConeGeometry:he,ConeBufferGeometry:ie,CylinderGeometry:gc,CylinderBufferGeometry:rb,CircleGeometry:je,CircleBufferGeometry:Xc,BoxGeometry:Zg,BoxBufferGeometry:Fd});hc.prototype=Object.create(O.prototype);hc.prototype.constructor=hc;hc.prototype.isShadowMaterial=!0;hc.prototype.copy=function(a){O.prototype.copy.call(this,a);this.color.copy(a.color);return this};Yc.prototype=Object.create(va.prototype);Yc.prototype.constructor=Yc;Yc.prototype.isRawShaderMaterial=
!0;eb.prototype=Object.create(O.prototype);eb.prototype.constructor=eb;eb.prototype.isMeshStandardMaterial=!0;eb.prototype.copy=function(a){O.prototype.copy.call(this,a);this.defines={STANDARD:""};this.color.copy(a.color);this.roughness=a.roughness;this.metalness=a.metalness;this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;
this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=a.normalMap;this.normalMapType=a.normalMapType;this.normalScale.copy(a.normalScale);this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.roughnessMap=a.roughnessMap;this.metalnessMap=a.metalnessMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.envMapIntensity=a.envMapIntensity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=
a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};ic.prototype=Object.create(eb.prototype);ic.prototype.constructor=ic;ic.prototype.isMeshPhysicalMaterial=!0;ic.prototype.copy=function(a){eb.prototype.copy.call(this,a);this.defines={STANDARD:"",PHYSICAL:""};this.reflectivity=a.reflectivity;this.clearcoat=a.clearcoat;this.clearcoatRoughness=
a.clearcoatRoughness;this.sheen=a.sheen?(this.sheen||new J).copy(a.sheen):null;this.clearcoatNormalMap=a.clearcoatNormalMap;this.clearcoatNormalScale.copy(a.clearcoatNormalScale);this.transparency=a.transparency;return this};Ra.prototype=Object.create(O.prototype);Ra.prototype.constructor=Ra;Ra.prototype.isMeshPhongMaterial=!0;Ra.prototype.copy=function(a){O.prototype.copy.call(this,a);this.color.copy(a.color);this.specular.copy(a.specular);this.shininess=a.shininess;this.map=a.map;this.lightMap=
a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=a.normalMap;this.normalMapType=a.normalMapType;this.normalScale.copy(a.normalScale);this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.specularMap=
a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};jc.prototype=Object.create(Ra.prototype);jc.prototype.constructor=jc;jc.prototype.isMeshToonMaterial=
!0;jc.prototype.copy=function(a){Ra.prototype.copy.call(this,a);this.gradientMap=a.gradientMap;return this};kc.prototype=Object.create(O.prototype);kc.prototype.constructor=kc;kc.prototype.isMeshNormalMaterial=!0;kc.prototype.copy=function(a){O.prototype.copy.call(this,a);this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=a.normalMap;this.normalMapType=a.normalMapType;this.normalScale.copy(a.normalScale);this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;
this.displacementBias=a.displacementBias;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};lc.prototype=Object.create(O.prototype);lc.prototype.constructor=lc;lc.prototype.isMeshLambertMaterial=!0;lc.prototype.copy=function(a){O.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=
a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;
this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};mc.prototype=Object.create(O.prototype);mc.prototype.constructor=mc;mc.prototype.isMeshMatcapMaterial=!0;mc.prototype.copy=function(a){O.prototype.copy.call(this,a);this.defines={MATCAP:""};this.color.copy(a.color);this.matcap=a.matcap;this.map=a.map;this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=a.normalMap;this.normalMapType=a.normalMapType;this.normalScale.copy(a.normalScale);this.displacementMap=a.displacementMap;
this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.alphaMap=a.alphaMap;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};nc.prototype=Object.create(R.prototype);nc.prototype.constructor=nc;nc.prototype.isLineDashedMaterial=!0;nc.prototype.copy=function(a){R.prototype.copy.call(this,a);this.scale=a.scale;this.dashSize=a.dashSize;this.gapSize=a.gapSize;return this};var Fk=Object.freeze({__proto__:null,ShadowMaterial:hc,
SpriteMaterial:Gb,RawShaderMaterial:Yc,ShaderMaterial:va,PointsMaterial:Qa,MeshPhysicalMaterial:ic,MeshStandardMaterial:eb,MeshPhongMaterial:Ra,MeshToonMaterial:jc,MeshNormalMaterial:kc,MeshLambertMaterial:lc,MeshDepthMaterial:Db,MeshDistanceMaterial:Eb,MeshBasicMaterial:Ga,MeshMatcapMaterial:mc,LineDashedMaterial:nc,LineBasicMaterial:R,Material:O}),ta={arraySlice:function(a,b,c){return ta.isTypedArray(a)?new a.constructor(a.subarray(b,void 0!==c?c:a.length)):a.slice(b,c)},convertArray:function(a,
b,c){return!a||!c&&a.constructor===b?a:"number"===typeof b.BYTES_PER_ELEMENT?new b(a):Array.prototype.slice.call(a)},isTypedArray:function(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)},getKeyframeOrder:function(a){for(var b=a.length,c=Array(b),d=0;d!==b;++d)c[d]=d;c.sort(function(b,c){return a[b]-a[c]});return c},sortedArray:function(a,b,c){for(var d=a.length,e=new a.constructor(d),f=0,g=0;g!==d;++f)for(var h=c[f]*b,l=0;l!==b;++l)e[g++]=a[h+l];return e},flattenJSON:function(a,b,c,d){for(var e=
1,f=a[0];void 0!==f&&void 0===f[d];)f=a[e++];if(void 0!==f){var g=f[d];if(void 0!==g)if(Array.isArray(g)){do g=f[d],void 0!==g&&(b.push(f.time),c.push.apply(c,g)),f=a[e++];while(void 0!==f)}else if(void 0!==g.toArray){do g=f[d],void 0!==g&&(b.push(f.time),g.toArray(c,c.length)),f=a[e++];while(void 0!==f)}else{do g=f[d],void 0!==g&&(b.push(f.time),c.push(g)),f=a[e++];while(void 0!==f)}}},subclip:function(a,b,c,d,e){e=e||30;a=a.clone();a.name=b;var f=[];for(b=0;b<a.tracks.length;++b){for(var g=a.tracks[b],
h=g.getValueSize(),l=[],k=[],n=0;n<g.times.length;++n){var q=g.times[n]*e;if(!(q<c||q>=d))for(l.push(g.times[n]),q=0;q<h;++q)k.push(g.values[n*h+q])}0!==l.length&&(g.times=ta.convertArray(l,g.times.constructor),g.values=ta.convertArray(k,g.values.constructor),f.push(g))}a.tracks=f;c=Infinity;for(b=0;b<a.tracks.length;++b)c>a.tracks[b].times[0]&&(c=a.tracks[b].times[0]);for(b=0;b<a.tracks.length;++b)a.tracks[b].shift(-1*c);a.resetDuration();return a}};Object.assign(Ia.prototype,{evaluate:function(a){var b=
this.parameterPositions,c=this._cachedIndex,d=b[c],e=b[c-1];a:{b:{c:{d:if(!(a<d)){for(var f=c+2;;){if(void 0===d){if(a<e)break d;this._cachedIndex=c=b.length;return this.afterEnd_(c-1,a,e)}if(c===f)break;e=d;d=b[++c];if(a<d)break b}d=b.length;break c}if(a>=e)break a;else{f=b[1];a<f&&(c=2,e=f);for(f=c-2;;){if(void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(c===f)break;d=e;e=b[--c-1];if(a>=e)break b}d=c;c=0}}for(;c<d;)e=c+d>>>1,a<b[e]?d=e:c=e+1;d=b[c];e=b[c-1];if(void 0===e)return this._cachedIndex=
0,this.beforeStart_(0,a,d);if(void 0===d)return this._cachedIndex=c=b.length,this.afterEnd_(c-1,e,a)}this._cachedIndex=c;this.intervalChanged_(c,e,d)}return this.interpolate_(c,e,a,d)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(a){var b=this.resultBuffer,c=this.sampleValues,d=this.valueSize;a*=d;for(var e=0;e!==d;++e)b[e]=c[a+e];return b},interpolate_:function(){throw Error("call to abstract method");},intervalChanged_:function(){}});
Object.assign(Ia.prototype,{beforeStart_:Ia.prototype.copySampleValue_,afterEnd_:Ia.prototype.copySampleValue_});Re.prototype=Object.assign(Object.create(Ia.prototype),{constructor:Re,DefaultSettings_:{endingStart:2400,endingEnd:2400},intervalChanged_:function(a,b,c){var d=this.parameterPositions,e=a-2,f=a+1,g=d[e],h=d[f];if(void 0===g)switch(this.getSettings_().endingStart){case 2401:e=a;g=2*b-c;break;case 2402:e=d.length-2;g=b+d[e]-d[e+1];break;default:e=a,g=c}if(void 0===h)switch(this.getSettings_().endingEnd){case 2401:f=
a;h=2*c-b;break;case 2402:f=1;h=c+d[1]-d[0];break;default:f=a-1,h=b}a=.5*(c-b);d=this.valueSize;this._weightPrev=a/(b-g);this._weightNext=a/(h-c);this._offsetPrev=e*d;this._offsetNext=f*d},interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;var h=a-g,l=this._offsetPrev,k=this._offsetNext,n=this._weightPrev,q=this._weightNext,u=(c-b)/(d-b);c=u*u;d=c*u;b=-n*d+2*n*c-n*u;n=(1+n)*d+(-1.5-2*n)*c+(-.5+n)*u+1;u=(-1-q)*d+(1.5+q)*c+.5*u;q=q*d-q*c;for(c=0;c!==g;++c)e[c]=
b*f[l+c]+n*f[h+c]+u*f[a+c]+q*f[k+c];return e}});ke.prototype=Object.assign(Object.create(Ia.prototype),{constructor:ke,interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;var h=a-g;b=(c-b)/(d-b);c=1-b;for(d=0;d!==g;++d)e[d]=f[h+d]*c+f[a+d]*b;return e}});Se.prototype=Object.assign(Object.create(Ia.prototype),{constructor:Se,interpolate_:function(a){return this.copySampleValue_(a-1)}});Object.assign(sa,{toJSON:function(a){var b=a.constructor;if(void 0!==
b.toJSON)b=b.toJSON(a);else{b={name:a.name,times:ta.convertArray(a.times,Array),values:ta.convertArray(a.values,Array)};var c=a.getInterpolation();c!==a.DefaultInterpolation&&(b.interpolation=c)}b.type=a.ValueTypeName;return b}});Object.assign(sa.prototype,{constructor:sa,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:2301,InterpolantFactoryMethodDiscrete:function(a){return new Se(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodLinear:function(a){return new ke(this.times,
this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:function(a){return new Re(this.times,this.values,this.getValueSize(),a)},setInterpolation:function(a){switch(a){case 2300:var b=this.InterpolantFactoryMethodDiscrete;break;case 2301:b=this.InterpolantFactoryMethodLinear;break;case 2302:b=this.InterpolantFactoryMethodSmooth}if(void 0===b){b="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant)if(a!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);
else throw Error(b);console.warn("THREE.KeyframeTrack:",b);return this}this.createInterpolant=b;return this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}},getValueSize:function(){return this.values.length/this.times.length},shift:function(a){if(0!==a)for(var b=this.times,c=0,d=b.length;c!==d;++c)b[c]+=a;return this},scale:function(a){if(1!==
a)for(var b=this.times,c=0,d=b.length;c!==d;++c)b[c]*=a;return this},trim:function(a,b){for(var c=this.times,d=c.length,e=0,f=d-1;e!==d&&c[e]<a;)++e;for(;-1!==f&&c[f]>b;)--f;++f;if(0!==e||f!==d)e>=f&&(f=Math.max(f,1),e=f-1),a=this.getValueSize(),this.times=ta.arraySlice(c,e,f),this.values=ta.arraySlice(this.values,e*a,f*a);return this},validate:function(){var a=!0,b=this.getValueSize();0!==b-Math.floor(b)&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),a=!1);var c=this.times;
b=this.values;var d=c.length;0===d&&(console.error("THREE.KeyframeTrack: Track is empty.",this),a=!1);for(var e=null,f=0;f!==d;f++){var g=c[f];if("number"===typeof g&&isNaN(g)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,f,g);a=!1;break}if(null!==e&&e>g){console.error("THREE.KeyframeTrack: Out of order keys.",this,f,g,e);a=!1;break}e=g}if(void 0!==b&&ta.isTypedArray(b))for(f=0,c=b.length;f!==c;++f)if(d=b[f],isNaN(d)){console.error("THREE.KeyframeTrack: Value is not a valid number.",
this,f,d);a=!1;break}return a},optimize:function(){for(var a=this.times,b=this.values,c=this.getValueSize(),d=2302===this.getInterpolation(),e=1,f=a.length-1,g=1;g<f;++g){var h=!1,l=a[g];if(l!==a[g+1]&&(1!==g||l!==l[0]))if(d)h=!0;else{var k=g*c,n=k-c,q=k+c;for(l=0;l!==c;++l){var u=b[k+l];if(u!==b[n+l]||u!==b[q+l]){h=!0;break}}}if(h){if(g!==e)for(a[e]=a[g],h=g*c,k=e*c,l=0;l!==c;++l)b[k+l]=b[h+l];++e}}if(0<f){a[e]=a[f];h=f*c;k=e*c;for(l=0;l!==c;++l)b[k+l]=b[h+l];++e}e!==a.length&&(this.times=ta.arraySlice(a,
0,e),this.values=ta.arraySlice(b,0,e*c));return this},clone:function(){var a=ta.arraySlice(this.times,0),b=ta.arraySlice(this.values,0);a=new this.constructor(this.name,a,b);a.createInterpolant=this.createInterpolant;return a}});Te.prototype=Object.assign(Object.create(sa.prototype),{constructor:Te,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});Ue.prototype=Object.assign(Object.create(sa.prototype),
{constructor:Ue,ValueTypeName:"color"});Zc.prototype=Object.assign(Object.create(sa.prototype),{constructor:Zc,ValueTypeName:"number"});Ve.prototype=Object.assign(Object.create(Ia.prototype),{constructor:Ve,interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;b=(c-b)/(d-b);for(c=a+g;a!==c;a+=4)wa.slerpFlat(e,0,f,a-g,f,a,b);return e}});le.prototype=Object.assign(Object.create(sa.prototype),{constructor:le,ValueTypeName:"quaternion",DefaultInterpolation:2301,
InterpolantFactoryMethodLinear:function(a){return new Ve(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:void 0});We.prototype=Object.assign(Object.create(sa.prototype),{constructor:We,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});$c.prototype=Object.assign(Object.create(sa.prototype),{constructor:$c,ValueTypeName:"vector"});Object.assign(Ma,{parse:function(a){for(var b=
[],c=a.tracks,d=1/(a.fps||1),e=0,f=c.length;e!==f;++e)b.push(sk(c[e]).scale(d));return new Ma(a.name,a.duration,b)},toJSON:function(a){var b=[],c=a.tracks;a={name:a.name,duration:a.duration,tracks:b,uuid:a.uuid};for(var d=0,e=c.length;d!==e;++d)b.push(sa.toJSON(c[d]));return a},CreateFromMorphTargetSequence:function(a,b,c,d){for(var e=b.length,f=[],g=0;g<e;g++){var h=[],l=[];h.push((g+e-1)%e,g,(g+1)%e);l.push(0,1,0);var k=ta.getKeyframeOrder(h);h=ta.sortedArray(h,1,k);l=ta.sortedArray(l,1,k);d||0!==
h[0]||(h.push(e),l.push(l[0]));f.push((new Zc(".morphTargetInfluences["+b[g].name+"]",h,l)).scale(1/c))}return new Ma(a,-1,f)},findByName:function(a,b){var c=a;Array.isArray(a)||(c=a.geometry&&a.geometry.animations||a.animations);for(a=0;a<c.length;a++)if(c[a].name===b)return c[a];return null},CreateClipsFromMorphTargetSequences:function(a,b,c){for(var d={},e=/^([\w-]*?)([\d]+)$/,f=0,g=a.length;f<g;f++){var h=a[f],l=h.name.match(e);if(l&&1<l.length){var k=l[1];(l=d[k])||(d[k]=l=[]);l.push(h)}}a=[];
for(k in d)a.push(Ma.CreateFromMorphTargetSequence(k,d[k],b,c));return a},parseAnimation:function(a,b){if(!a)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;var c=function(a,b,c,d,e){if(0!==c.length){var f=[],g=[];ta.flattenJSON(c,f,g,d);0!==f.length&&e.push(new a(b,f,g))}},d=[],e=a.name||"default",f=a.length||-1,g=a.fps||30;a=a.hierarchy||[];for(var h=0;h<a.length;h++){var l=a[h].keys;if(l&&0!==l.length)if(l[0].morphTargets){f={};for(var k=0;k<l.length;k++)if(l[k].morphTargets)for(var n=
0;n<l[k].morphTargets.length;n++)f[l[k].morphTargets[n]]=-1;for(var q in f){var u=[],p=[];for(n=0;n!==l[k].morphTargets.length;++n){var t=l[k];u.push(t.time);p.push(t.morphTarget===q?1:0)}d.push(new Zc(".morphTargetInfluence["+q+"]",u,p))}f=f.length*(g||1)}else k=".bones["+b[h].name+"]",c($c,k+".position",l,"pos",d),c(le,k+".quaternion",l,"rot",d),c($c,k+".scale",l,"scl",d)}return 0===d.length?null:new Ma(e,f,d)}});Object.assign(Ma.prototype,{resetDuration:function(){for(var a=0,b=0,c=this.tracks.length;b!==
c;++b){var d=this.tracks[b];a=Math.max(a,d.times[d.times.length-1])}this.duration=a;return this},trim:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].trim(0,this.duration);return this},validate:function(){for(var a=!0,b=0;b<this.tracks.length;b++)a=a&&this.tracks[b].validate();return a},optimize:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].optimize();return this},clone:function(){for(var a=[],b=0;b<this.tracks.length;b++)a.push(this.tracks[b].clone());return new Ma(this.name,
this.duration,a)}});var sc={enabled:!1,files:{},add:function(a,b){!1!==this.enabled&&(this.files[a]=b)},get:function(a){if(!1!==this.enabled)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}},Zh=new og;Object.assign(V.prototype,{load:function(){},parse:function(){},setCrossOrigin:function(a){this.crossOrigin=a;return this},setPath:function(a){this.path=a;return this},setResourcePath:function(a){this.resourcePath=a;return this}});var $a={};Na.prototype=
Object.assign(Object.create(V.prototype),{constructor:Na,load:function(a,b,c,d){void 0===a&&(a="");void 0!==this.path&&(a=this.path+a);a=this.manager.resolveURL(a);var e=this,f=sc.get(a);if(void 0!==f)return e.manager.itemStart(a),setTimeout(function(){b&&b(f);e.manager.itemEnd(a)},0),f;if(void 0!==$a[a])$a[a].push({onLoad:b,onProgress:c,onError:d});else{var g=a.match(/^data:(.*?)(;base64)?,(.*)$/);if(g){c=g[1];var h=!!g[2];g=g[3];g=decodeURIComponent(g);h&&(g=atob(g));try{var l=(this.responseType||
"").toLowerCase();switch(l){case "arraybuffer":case "blob":var k=new Uint8Array(g.length);for(h=0;h<g.length;h++)k[h]=g.charCodeAt(h);var n="blob"===l?new Blob([k.buffer],{type:c}):k.buffer;break;case "document":n=(new DOMParser).parseFromString(g,c);break;case "json":n=JSON.parse(g);break;default:n=g}setTimeout(function(){b&&b(n);e.manager.itemEnd(a)},0)}catch(u){setTimeout(function(){d&&d(u);e.manager.itemError(a);e.manager.itemEnd(a)},0)}}else{$a[a]=[];$a[a].push({onLoad:b,onProgress:c,onError:d});
var q=new XMLHttpRequest;q.open("GET",a,!0);q.addEventListener("load",function(b){var c=this.response,d=$a[a];delete $a[a];if(200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received.");sc.add(a,c);for(var f=0,g=d.length;f<g;f++){var h=d[f];if(h.onLoad)h.onLoad(c)}}else{f=0;for(g=d.length;f<g;f++)if(h=d[f],h.onError)h.onError(b);e.manager.itemError(a)}e.manager.itemEnd(a)},!1);q.addEventListener("progress",function(b){for(var c=$a[a],d=0,e=c.length;d<
e;d++){var f=c[d];if(f.onProgress)f.onProgress(b)}},!1);q.addEventListener("error",function(b){var c=$a[a];delete $a[a];for(var d=0,f=c.length;d<f;d++){var g=c[d];if(g.onError)g.onError(b)}e.manager.itemError(a);e.manager.itemEnd(a)},!1);q.addEventListener("abort",function(b){var c=$a[a];delete $a[a];for(var d=0,f=c.length;d<f;d++){var g=c[d];if(g.onError)g.onError(b)}e.manager.itemError(a);e.manager.itemEnd(a)},!1);void 0!==this.responseType&&(q.responseType=this.responseType);void 0!==this.withCredentials&&
(q.withCredentials=this.withCredentials);q.overrideMimeType&&q.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain");for(h in this.requestHeader)q.setRequestHeader(h,this.requestHeader[h]);q.send(null)}e.manager.itemStart(a);return q}},setResponseType:function(a){this.responseType=a;return this},setWithCredentials:function(a){this.withCredentials=a;return this},setMimeType:function(a){this.mimeType=a;return this},setRequestHeader:function(a){this.requestHeader=a;return this}});pg.prototype=
Object.assign(Object.create(V.prototype),{constructor:pg,load:function(a,b,c,d){var e=this,f=new Na(e.manager);f.setPath(e.path);f.load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},parse:function(a){for(var b=[],c=0;c<a.length;c++){var d=Ma.parse(a[c]);b.push(d)}return b}});qg.prototype=Object.assign(Object.create(V.prototype),{constructor:qg,load:function(a,b,c,d){function e(e){l.load(a[e],function(a){a=f.parse(a,!0);g[e]={width:a.width,height:a.height,format:a.format,mipmaps:a.mipmaps};k+=1;6===
k&&(1===a.mipmapCount&&(h.minFilter=1006),h.format=a.format,h.needsUpdate=!0,b&&b(h))},c,d)}var f=this,g=[],h=new Kc;h.image=g;var l=new Na(this.manager);l.setPath(this.path);l.setResponseType("arraybuffer");if(Array.isArray(a))for(var k=0,n=0,q=a.length;n<q;++n)e(n);else l.load(a,function(a){a=f.parse(a,!0);if(a.isCubemap)for(var c=a.mipmaps.length/a.mipmapCount,d=0;d<c;d++){g[d]={mipmaps:[]};for(var e=0;e<a.mipmapCount;e++)g[d].mipmaps.push(a.mipmaps[d*a.mipmapCount+e]),g[d].format=a.format,g[d].width=
a.width,g[d].height=a.height}else h.image.width=a.width,h.image.height=a.height,h.mipmaps=a.mipmaps;1===a.mipmapCount&&(h.minFilter=1006);h.format=a.format;h.needsUpdate=!0;b&&b(h)},c,d);return h}});Xe.prototype=Object.assign(Object.create(V.prototype),{constructor:Xe,load:function(a,b,c,d){var e=this,f=new Yb,g=new Na(this.manager);g.setResponseType("arraybuffer");g.setPath(this.path);g.load(a,function(a){if(a=e.parse(a))void 0!==a.image?f.image=a.image:void 0!==a.data&&(f.image.width=a.width,f.image.height=
a.height,f.image.data=a.data),f.wrapS=void 0!==a.wrapS?a.wrapS:1001,f.wrapT=void 0!==a.wrapT?a.wrapT:1001,f.magFilter=void 0!==a.magFilter?a.magFilter:1006,f.minFilter=void 0!==a.minFilter?a.minFilter:1006,f.anisotropy=void 0!==a.anisotropy?a.anisotropy:1,void 0!==a.format&&(f.format=a.format),void 0!==a.type&&(f.type=a.type),void 0!==a.mipmaps&&(f.mipmaps=a.mipmaps,f.minFilter=1008),1===a.mipmapCount&&(f.minFilter=1006),f.needsUpdate=!0,b&&b(f,a)},c,d);return f}});ad.prototype=Object.assign(Object.create(V.prototype),
{constructor:ad,load:function(a,b,c,d){function e(){l.removeEventListener("load",e,!1);l.removeEventListener("error",f,!1);sc.add(a,this);b&&b(this);g.manager.itemEnd(a)}function f(b){l.removeEventListener("load",e,!1);l.removeEventListener("error",f,!1);d&&d(b);g.manager.itemError(a);g.manager.itemEnd(a)}void 0!==this.path&&(a=this.path+a);a=this.manager.resolveURL(a);var g=this,h=sc.get(a);if(void 0!==h)return g.manager.itemStart(a),setTimeout(function(){b&&b(h);g.manager.itemEnd(a)},0),h;var l=
document.createElementNS("http://www.w3.org/1999/xhtml","img");l.addEventListener("load",e,!1);l.addEventListener("error",f,!1);"data:"!==a.substr(0,5)&&void 0!==this.crossOrigin&&(l.crossOrigin=this.crossOrigin);g.manager.itemStart(a);l.src=a;return l}});Ye.prototype=Object.assign(Object.create(V.prototype),{constructor:Ye,load:function(a,b,c,d){function e(c){g.load(a[c],function(a){f.images[c]=a;h++;6===h&&(f.needsUpdate=!0,b&&b(f))},void 0,d)}var f=new nb,g=new ad(this.manager);g.setCrossOrigin(this.crossOrigin);
g.setPath(this.path);var h=0;for(c=0;c<a.length;++c)e(c);return f}});Ze.prototype=Object.assign(Object.create(V.prototype),{constructor:Ze,load:function(a,b,c,d){var e=new Y,f=new ad(this.manager);f.setCrossOrigin(this.crossOrigin);f.setPath(this.path);f.load(a,function(c){e.image=c;c=0<a.search(/\.jpe?g($|\?)/i)||0===a.search(/^data:image\/jpeg/);e.format=c?1022:1023;e.needsUpdate=!0;void 0!==b&&b(e)},c,d);return e}});Object.assign(C.prototype,{getPoint:function(){console.warn("THREE.Curve: .getPoint() not implemented.");
return null},getPointAt:function(a,b){a=this.getUtoTmapping(a);return this.getPoint(a,b)},getPoints:function(a){void 0===a&&(a=5);for(var b=[],c=0;c<=a;c++)b.push(this.getPoint(c/a));return b},getSpacedPoints:function(a){void 0===a&&(a=5);for(var b=[],c=0;c<=a;c++)b.push(this.getPointAt(c/a));return b},getLength:function(){var a=this.getLengths();return a[a.length-1]},getLengths:function(a){void 0===a&&(a=this.arcLengthDivisions);if(this.cacheArcLengths&&this.cacheArcLengths.length===a+1&&!this.needsUpdate)return this.cacheArcLengths;
this.needsUpdate=!1;var b=[],c=this.getPoint(0),d,e=0;b.push(0);for(d=1;d<=a;d++){var f=this.getPoint(d/a);e+=f.distanceTo(c);b.push(e);c=f}return this.cacheArcLengths=b},updateArcLengths:function(){this.needsUpdate=!0;this.getLengths()},getUtoTmapping:function(a,b){var c=this.getLengths(),d=c.length;b=b?b:a*c[d-1];for(var e=0,f=d-1,g;e<=f;)if(a=Math.floor(e+(f-e)/2),g=c[a]-b,0>g)e=a+1;else if(0<g)f=a-1;else{f=a;break}a=f;if(c[a]===b)return a/(d-1);e=c[a];return(a+(b-e)/(c[a+1]-e))/(d-1)},getTangent:function(a){var b=
a-1E-4;a+=1E-4;0>b&&(b=0);1<a&&(a=1);b=this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize()},getTangentAt:function(a){a=this.getUtoTmapping(a);return this.getTangent(a)},computeFrenetFrames:function(a,b){var c=new n,d=[],e=[],f=[],g=new n,h=new Q,l;for(l=0;l<=a;l++){var k=l/a;d[l]=this.getTangentAt(k);d[l].normalize()}e[0]=new n;f[0]=new n;l=Number.MAX_VALUE;k=Math.abs(d[0].x);var r=Math.abs(d[0].y),q=Math.abs(d[0].z);k<=l&&(l=k,c.set(1,0,0));r<=l&&(l=r,c.set(0,1,0));q<=l&&c.set(0,
0,1);g.crossVectors(d[0],c).normalize();e[0].crossVectors(d[0],g);f[0].crossVectors(d[0],e[0]);for(l=1;l<=a;l++)e[l]=e[l-1].clone(),f[l]=f[l-1].clone(),g.crossVectors(d[l-1],d[l]),g.length()>Number.EPSILON&&(g.normalize(),c=Math.acos(P.clamp(d[l-1].dot(d[l]),-1,1)),e[l].applyMatrix4(h.makeRotationAxis(g,c))),f[l].crossVectors(d[l],e[l]);if(!0===b)for(c=Math.acos(P.clamp(e[0].dot(e[a]),-1,1)),c/=a,0<d[0].dot(g.crossVectors(e[0],e[a]))&&(c=-c),l=1;l<=a;l++)e[l].applyMatrix4(h.makeRotationAxis(d[l],
c*l)),f[l].crossVectors(d[l],e[l]);return{tangents:d,normals:e,binormals:f}},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.arcLengthDivisions=a.arcLengthDivisions;return this},toJSON:function(){var a={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};a.arcLengthDivisions=this.arcLengthDivisions;a.type=this.type;return a},fromJSON:function(a){this.arcLengthDivisions=a.arcLengthDivisions;return this}});Ja.prototype=Object.create(C.prototype);Ja.prototype.constructor=
Ja;Ja.prototype.isEllipseCurve=!0;Ja.prototype.getPoint=function(a,b){b=b||new B;for(var c=2*Math.PI,d=this.aEndAngle-this.aStartAngle,e=Math.abs(d)<Number.EPSILON;0>d;)d+=c;for(;d>c;)d-=c;d<Number.EPSILON&&(d=e?0:c);!0!==this.aClockwise||e||(d=d===c?-c:d-c);c=this.aStartAngle+a*d;a=this.aX+this.xRadius*Math.cos(c);var f=this.aY+this.yRadius*Math.sin(c);0!==this.aRotation&&(c=Math.cos(this.aRotation),d=Math.sin(this.aRotation),e=a-this.aX,f-=this.aY,a=e*c-f*d+this.aX,f=e*d+f*c+this.aY);return b.set(a,
f)};Ja.prototype.copy=function(a){C.prototype.copy.call(this,a);this.aX=a.aX;this.aY=a.aY;this.xRadius=a.xRadius;this.yRadius=a.yRadius;this.aStartAngle=a.aStartAngle;this.aEndAngle=a.aEndAngle;this.aClockwise=a.aClockwise;this.aRotation=a.aRotation;return this};Ja.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.aX=this.aX;a.aY=this.aY;a.xRadius=this.xRadius;a.yRadius=this.yRadius;a.aStartAngle=this.aStartAngle;a.aEndAngle=this.aEndAngle;a.aClockwise=this.aClockwise;a.aRotation=
this.aRotation;return a};Ja.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.aX=a.aX;this.aY=a.aY;this.xRadius=a.xRadius;this.yRadius=a.yRadius;this.aStartAngle=a.aStartAngle;this.aEndAngle=a.aEndAngle;this.aClockwise=a.aClockwise;this.aRotation=a.aRotation;return this};bd.prototype=Object.create(Ja.prototype);bd.prototype.constructor=bd;bd.prototype.isArcCurve=!0;var Lf=new n,ah=new rg,bh=new rg,ch=new rg;ma.prototype=Object.create(C.prototype);ma.prototype.constructor=ma;ma.prototype.isCatmullRomCurve3=
!0;ma.prototype.getPoint=function(a,b){b=b||new n;var c=this.points,d=c.length;a*=d-(this.closed?0:1);var e=Math.floor(a);a-=e;this.closed?e+=0<e?0:(Math.floor(Math.abs(e)/d)+1)*d:0===a&&e===d-1&&(e=d-2,a=1);if(this.closed||0<e)var f=c[(e-1)%d];else Lf.subVectors(c[0],c[1]).add(c[0]),f=Lf;var g=c[e%d];var h=c[(e+1)%d];this.closed||e+2<d?c=c[(e+2)%d]:(Lf.subVectors(c[d-1],c[d-2]).add(c[d-1]),c=Lf);if("centripetal"===this.curveType||"chordal"===this.curveType){var l="chordal"===this.curveType?.5:.25;
d=Math.pow(f.distanceToSquared(g),l);e=Math.pow(g.distanceToSquared(h),l);l=Math.pow(h.distanceToSquared(c),l);1E-4>e&&(e=1);1E-4>d&&(d=e);1E-4>l&&(l=e);ah.initNonuniformCatmullRom(f.x,g.x,h.x,c.x,d,e,l);bh.initNonuniformCatmullRom(f.y,g.y,h.y,c.y,d,e,l);ch.initNonuniformCatmullRom(f.z,g.z,h.z,c.z,d,e,l)}else"catmullrom"===this.curveType&&(ah.initCatmullRom(f.x,g.x,h.x,c.x,this.tension),bh.initCatmullRom(f.y,g.y,h.y,c.y,this.tension),ch.initCatmullRom(f.z,g.z,h.z,c.z,this.tension));b.set(ah.calc(a),
bh.calc(a),ch.calc(a));return b};ma.prototype.copy=function(a){C.prototype.copy.call(this,a);this.points=[];for(var b=0,c=a.points.length;b<c;b++)this.points.push(a.points[b].clone());this.closed=a.closed;this.curveType=a.curveType;this.tension=a.tension;return this};ma.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.points=[];for(var b=0,c=this.points.length;b<c;b++)a.points.push(this.points[b].toArray());a.closed=this.closed;a.curveType=this.curveType;a.tension=this.tension;return a};
ma.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.points=[];for(var b=0,c=a.points.length;b<c;b++){var d=a.points[b];this.points.push((new n).fromArray(d))}this.closed=a.closed;this.curveType=a.curveType;this.tension=a.tension;return this};Sa.prototype=Object.create(C.prototype);Sa.prototype.constructor=Sa;Sa.prototype.isCubicBezierCurve=!0;Sa.prototype.getPoint=function(a,b){b=b||new B;var c=this.v0,d=this.v1,e=this.v2,f=this.v3;b.set(ne(a,c.x,d.x,e.x,f.x),ne(a,c.y,d.y,e.y,
f.y));return b};Sa.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);this.v3.copy(a.v3);return this};Sa.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v0=this.v0.toArray();a.v1=this.v1.toArray();a.v2=this.v2.toArray();a.v3=this.v3.toArray();return a};Sa.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);this.v3.fromArray(a.v3);return this};
fb.prototype=Object.create(C.prototype);fb.prototype.constructor=fb;fb.prototype.isCubicBezierCurve3=!0;fb.prototype.getPoint=function(a,b){b=b||new n;var c=this.v0,d=this.v1,e=this.v2,f=this.v3;b.set(ne(a,c.x,d.x,e.x,f.x),ne(a,c.y,d.y,e.y,f.y),ne(a,c.z,d.z,e.z,f.z));return b};fb.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);this.v3.copy(a.v3);return this};fb.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v0=this.v0.toArray();
a.v1=this.v1.toArray();a.v2=this.v2.toArray();a.v3=this.v3.toArray();return a};fb.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);this.v3.fromArray(a.v3);return this};Da.prototype=Object.create(C.prototype);Da.prototype.constructor=Da;Da.prototype.isLineCurve=!0;Da.prototype.getPoint=function(a,b){b=b||new B;1===a?b.copy(this.v2):(b.copy(this.v2).sub(this.v1),b.multiplyScalar(a).add(this.v1));return b};Da.prototype.getPointAt=
function(a,b){return this.getPoint(a,b)};Da.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()};Da.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v1.copy(a.v1);this.v2.copy(a.v2);return this};Da.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v1=this.v1.toArray();a.v2=this.v2.toArray();return a};Da.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this};Ta.prototype=
Object.create(C.prototype);Ta.prototype.constructor=Ta;Ta.prototype.isLineCurve3=!0;Ta.prototype.getPoint=function(a,b){b=b||new n;1===a?b.copy(this.v2):(b.copy(this.v2).sub(this.v1),b.multiplyScalar(a).add(this.v1));return b};Ta.prototype.getPointAt=function(a,b){return this.getPoint(a,b)};Ta.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v1.copy(a.v1);this.v2.copy(a.v2);return this};Ta.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v1=this.v1.toArray();a.v2=this.v2.toArray();
return a};Ta.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this};Ua.prototype=Object.create(C.prototype);Ua.prototype.constructor=Ua;Ua.prototype.isQuadraticBezierCurve=!0;Ua.prototype.getPoint=function(a,b){b=b||new B;var c=this.v0,d=this.v1,e=this.v2;b.set(me(a,c.x,d.x,e.x),me(a,c.y,d.y,e.y));return b};Ua.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);return this};
Ua.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v0=this.v0.toArray();a.v1=this.v1.toArray();a.v2=this.v2.toArray();return a};Ua.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this};gb.prototype=Object.create(C.prototype);gb.prototype.constructor=gb;gb.prototype.isQuadraticBezierCurve3=!0;gb.prototype.getPoint=function(a,b){b=b||new n;var c=this.v0,d=this.v1,e=this.v2;b.set(me(a,c.x,
d.x,e.x),me(a,c.y,d.y,e.y),me(a,c.z,d.z,e.z));return b};gb.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);return this};gb.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v0=this.v0.toArray();a.v1=this.v1.toArray();a.v2=this.v2.toArray();return a};gb.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this};Va.prototype=Object.create(C.prototype);
Va.prototype.constructor=Va;Va.prototype.isSplineCurve=!0;Va.prototype.getPoint=function(a,b){b=b||new B;var c=this.points,d=(c.length-1)*a;a=Math.floor(d);d-=a;var e=c[0===a?a:a-1],f=c[a],g=c[a>c.length-2?c.length-1:a+1];c=c[a>c.length-3?c.length-1:a+2];b.set($h(d,e.x,f.x,g.x,c.x),$h(d,e.y,f.y,g.y,c.y));return b};Va.prototype.copy=function(a){C.prototype.copy.call(this,a);this.points=[];for(var b=0,c=a.points.length;b<c;b++)this.points.push(a.points[b].clone());return this};Va.prototype.toJSON=function(){var a=
C.prototype.toJSON.call(this);a.points=[];for(var b=0,c=this.points.length;b<c;b++)a.points.push(this.points[b].toArray());return a};Va.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.points=[];for(var b=0,c=a.points.length;b<c;b++){var d=a.points[b];this.points.push((new B).fromArray(d))}return this};var dh=Object.freeze({__proto__:null,ArcCurve:bd,CatmullRomCurve3:ma,CubicBezierCurve:Sa,CubicBezierCurve3:fb,EllipseCurve:Ja,LineCurve:Da,LineCurve3:Ta,QuadraticBezierCurve:Ua,
QuadraticBezierCurve3:gb,SplineCurve:Va});sb.prototype=Object.assign(Object.create(C.prototype),{constructor:sb,add:function(a){this.curves.push(a)},closePath:function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new Da(b,a))},getPoint:function(a){var b=a*this.getLength(),c=this.getCurveLengths();for(a=0;a<c.length;){if(c[a]>=b)return b=c[a]-b,a=this.curves[a],c=a.getLength(),a.getPointAt(0===c?0:1-b/c);a++}return null},getLength:function(){var a=
this.getCurveLengths();return a[a.length-1]},updateArcLengths:function(){this.needsUpdate=!0;this.cacheLengths=null;this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var a=[],b=0,c=0,d=this.curves.length;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a},getSpacedPoints:function(a){void 0===a&&(a=40);for(var b=[],c=0;c<=a;c++)b.push(this.getPoint(c/a));this.autoClose&&b.push(b[0]);
return b},getPoints:function(a){a=a||12;for(var b=[],c,d=0,e=this.curves;d<e.length;d++){var f=e[d];f=f.getPoints(f&&f.isEllipseCurve?2*a:f&&(f.isLineCurve||f.isLineCurve3)?1:f&&f.isSplineCurve?a*f.points.length:a);for(var g=0;g<f.length;g++){var h=f[g];c&&c.equals(h)||(b.push(h),c=h)}}this.autoClose&&1<b.length&&!b[b.length-1].equals(b[0])&&b.push(b[0]);return b},copy:function(a){C.prototype.copy.call(this,a);this.curves=[];for(var b=0,c=a.curves.length;b<c;b++)this.curves.push(a.curves[b].clone());
this.autoClose=a.autoClose;return this},toJSON:function(){var a=C.prototype.toJSON.call(this);a.autoClose=this.autoClose;a.curves=[];for(var b=0,c=this.curves.length;b<c;b++)a.curves.push(this.curves[b].toJSON());return a},fromJSON:function(a){C.prototype.fromJSON.call(this,a);this.autoClose=a.autoClose;this.curves=[];for(var b=0,c=a.curves.length;b<c;b++){var d=a.curves[b];this.curves.push((new dh[d.type]).fromJSON(d))}return this}});Wa.prototype=Object.assign(Object.create(sb.prototype),{constructor:Wa,
setFromPoints:function(a){this.moveTo(a[0].x,a[0].y);for(var b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y);return this},moveTo:function(a,b){this.currentPoint.set(a,b);return this},lineTo:function(a,b){var c=new Da(this.currentPoint.clone(),new B(a,b));this.curves.push(c);this.currentPoint.set(a,b);return this},quadraticCurveTo:function(a,b,c,d){a=new Ua(this.currentPoint.clone(),new B(a,b),new B(c,d));this.curves.push(a);this.currentPoint.set(c,d);return this},bezierCurveTo:function(a,b,c,d,
e,f){a=new Sa(this.currentPoint.clone(),new B(a,b),new B(c,d),new B(e,f));this.curves.push(a);this.currentPoint.set(e,f);return this},splineThru:function(a){var b=[this.currentPoint.clone()].concat(a);b=new Va(b);this.curves.push(b);this.currentPoint.copy(a[a.length-1]);return this},arc:function(a,b,c,d,e,f){this.absarc(a+this.currentPoint.x,b+this.currentPoint.y,c,d,e,f);return this},absarc:function(a,b,c,d,e,f){this.absellipse(a,b,c,c,d,e,f);return this},ellipse:function(a,b,c,d,e,f,g,h){this.absellipse(a+
this.currentPoint.x,b+this.currentPoint.y,c,d,e,f,g,h);return this},absellipse:function(a,b,c,d,e,f,g,h){a=new Ja(a,b,c,d,e,f,g,h);0<this.curves.length&&(b=a.getPoint(0),b.equals(this.currentPoint)||this.lineTo(b.x,b.y));this.curves.push(a);a=a.getPoint(1);this.currentPoint.copy(a);return this},copy:function(a){sb.prototype.copy.call(this,a);this.currentPoint.copy(a.currentPoint);return this},toJSON:function(){var a=sb.prototype.toJSON.call(this);a.currentPoint=this.currentPoint.toArray();return a},
fromJSON:function(a){sb.prototype.fromJSON.call(this,a);this.currentPoint.fromArray(a.currentPoint);return this}});Ib.prototype=Object.assign(Object.create(Wa.prototype),{constructor:Ib,getPointsHoles:function(a){for(var b=[],c=0,d=this.holes.length;c<d;c++)b[c]=this.holes[c].getPoints(a);return b},extractPoints:function(a){return{shape:this.getPoints(a),holes:this.getPointsHoles(a)}},copy:function(a){Wa.prototype.copy.call(this,a);this.holes=[];for(var b=0,c=a.holes.length;b<c;b++)this.holes.push(a.holes[b].clone());
return this},toJSON:function(){var a=Wa.prototype.toJSON.call(this);a.uuid=this.uuid;a.holes=[];for(var b=0,c=this.holes.length;b<c;b++)a.holes.push(this.holes[b].toJSON());return a},fromJSON:function(a){Wa.prototype.fromJSON.call(this,a);this.uuid=a.uuid;this.holes=[];for(var b=0,c=a.holes.length;b<c;b++){var d=a.holes[b];this.holes.push((new Wa).fromJSON(d))}return this}});T.prototype=Object.assign(Object.create(E.prototype),{constructor:T,isLight:!0,copy:function(a){E.prototype.copy.call(this,
a);this.color.copy(a.color);this.intensity=a.intensity;return this},toJSON:function(a){a=E.prototype.toJSON.call(this,a);a.object.color=this.color.getHex();a.object.intensity=this.intensity;void 0!==this.groundColor&&(a.object.groundColor=this.groundColor.getHex());void 0!==this.distance&&(a.object.distance=this.distance);void 0!==this.angle&&(a.object.angle=this.angle);void 0!==this.decay&&(a.object.decay=this.decay);void 0!==this.penumbra&&(a.object.penumbra=this.penumbra);void 0!==this.shadow&&
(a.object.shadow=this.shadow.toJSON());return a}});$e.prototype=Object.assign(Object.create(T.prototype),{constructor:$e,isHemisphereLight:!0,copy:function(a){T.prototype.copy.call(this,a);this.groundColor.copy(a.groundColor);return this}});Object.assign(hb.prototype,{_projScreenMatrix:new Q,_lightPositionWorld:new n,_lookTarget:new n,getViewportCount:function(){return this._viewportCount},getFrustum:function(){return this._frustum},updateMatrices:function(a){var b=this.camera,c=this.matrix,d=this._projScreenMatrix,
e=this._lookTarget,f=this._lightPositionWorld;f.setFromMatrixPosition(a.matrixWorld);b.position.copy(f);e.setFromMatrixPosition(a.target.matrixWorld);b.lookAt(e);b.updateMatrixWorld();d.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);this._frustum.setFromMatrix(d);c.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);c.multiply(b.projectionMatrix);c.multiply(b.matrixWorldInverse)},getViewport:function(a){return this._viewports[a]},getFrameExtents:function(){return this._frameExtents},copy:function(a){this.camera=
a.camera.clone();this.bias=a.bias;this.radius=a.radius;this.mapSize.copy(a.mapSize);return this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var a={};0!==this.bias&&(a.bias=this.bias);1!==this.radius&&(a.radius=this.radius);if(512!==this.mapSize.x||512!==this.mapSize.y)a.mapSize=this.mapSize.toArray();a.camera=this.camera.toJSON(!1).object;delete a.camera.matrix;return a}});af.prototype=Object.assign(Object.create(hb.prototype),{constructor:af,isSpotLightShadow:!0,
updateMatrices:function(a){var b=this.camera,c=2*P.RAD2DEG*a.angle,d=this.mapSize.width/this.mapSize.height,e=a.distance||b.far;if(c!==b.fov||d!==b.aspect||e!==b.far)b.fov=c,b.aspect=d,b.far=e,b.updateProjectionMatrix();hb.prototype.updateMatrices.call(this,a)}});bf.prototype=Object.assign(Object.create(T.prototype),{constructor:bf,isSpotLight:!0,copy:function(a){T.prototype.copy.call(this,a);this.distance=a.distance;this.angle=a.angle;this.penumbra=a.penumbra;this.decay=a.decay;this.target=a.target.clone();
this.shadow=a.shadow.clone();return this}});sg.prototype=Object.assign(Object.create(hb.prototype),{constructor:sg,isPointLightShadow:!0,updateMatrices:function(a,b){void 0===b&&(b=0);var c=this.camera,d=this.matrix,e=this._lightPositionWorld,f=this._lookTarget,g=this._projScreenMatrix;e.setFromMatrixPosition(a.matrixWorld);c.position.copy(e);f.copy(c.position);f.add(this._cubeDirections[b]);c.up.copy(this._cubeUps[b]);c.lookAt(f);c.updateMatrixWorld();d.makeTranslation(-e.x,-e.y,-e.z);g.multiplyMatrices(c.projectionMatrix,
c.matrixWorldInverse);this._frustum.setFromMatrix(g)}});cf.prototype=Object.assign(Object.create(T.prototype),{constructor:cf,isPointLight:!0,copy:function(a){T.prototype.copy.call(this,a);this.distance=a.distance;this.decay=a.decay;this.shadow=a.shadow.clone();return this}});oe.prototype=Object.assign(Object.create(bb.prototype),{constructor:oe,isOrthographicCamera:!0,copy:function(a,b){bb.prototype.copy.call(this,a,b);this.left=a.left;this.right=a.right;this.top=a.top;this.bottom=a.bottom;this.near=
a.near;this.far=a.far;this.zoom=a.zoom;this.view=null===a.view?null:Object.assign({},a.view);return this},setViewOffset:function(a,b,c,d,e,f){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1});this.view.enabled=!0;this.view.fullWidth=a;this.view.fullHeight=b;this.view.offsetX=c;this.view.offsetY=d;this.view.width=e;this.view.height=f;this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1);this.updateProjectionMatrix()},
updateProjectionMatrix:function(){var a=(this.right-this.left)/(2*this.zoom),b=(this.top-this.bottom)/(2*this.zoom),c=(this.right+this.left)/2,d=(this.top+this.bottom)/2,e=c-a;c+=a;a=d+b;b=d-b;if(null!==this.view&&this.view.enabled){c=this.zoom/(this.view.width/this.view.fullWidth);b=this.zoom/(this.view.height/this.view.fullHeight);var f=(this.right-this.left)/this.view.width;d=(this.top-this.bottom)/this.view.height;e+=this.view.offsetX/c*f;c=e+this.view.width/c*f;a-=this.view.offsetY/b*d;b=a-this.view.height/
b*d}this.projectionMatrix.makeOrthographic(e,c,a,b,this.near,this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(a){a=E.prototype.toJSON.call(this,a);a.object.zoom=this.zoom;a.object.left=this.left;a.object.right=this.right;a.object.top=this.top;a.object.bottom=this.bottom;a.object.near=this.near;a.object.far=this.far;null!==this.view&&(a.object.view=Object.assign({},this.view));return a}});df.prototype=Object.assign(Object.create(hb.prototype),{constructor:df,
isDirectionalLightShadow:!0,updateMatrices:function(a){hb.prototype.updateMatrices.call(this,a)}});ef.prototype=Object.assign(Object.create(T.prototype),{constructor:ef,isDirectionalLight:!0,copy:function(a){T.prototype.copy.call(this,a);this.target=a.target.clone();this.shadow=a.shadow.clone();return this}});ff.prototype=Object.assign(Object.create(T.prototype),{constructor:ff,isAmbientLight:!0});gf.prototype=Object.assign(Object.create(T.prototype),{constructor:gf,isRectAreaLight:!0,copy:function(a){T.prototype.copy.call(this,
a);this.width=a.width;this.height=a.height;return this},toJSON:function(a){a=T.prototype.toJSON.call(this,a);a.object.width=this.width;a.object.height=this.height;return a}});hf.prototype=Object.assign(Object.create(V.prototype),{constructor:hf,load:function(a,b,c,d){var e=this,f=new Na(e.manager);f.setPath(e.path);f.load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},parse:function(a){function b(a){void 0===c[a]&&console.warn("THREE.MaterialLoader: Undefined texture",a);return c[a]}var c=this.textures,
d=new Fk[a.type];void 0!==a.uuid&&(d.uuid=a.uuid);void 0!==a.name&&(d.name=a.name);void 0!==a.color&&d.color.setHex(a.color);void 0!==a.roughness&&(d.roughness=a.roughness);void 0!==a.metalness&&(d.metalness=a.metalness);void 0!==a.sheen&&(d.sheen=(new J).setHex(a.sheen));void 0!==a.emissive&&d.emissive.setHex(a.emissive);void 0!==a.specular&&d.specular.setHex(a.specular);void 0!==a.shininess&&(d.shininess=a.shininess);void 0!==a.clearcoat&&(d.clearcoat=a.clearcoat);void 0!==a.clearcoatRoughness&&
(d.clearcoatRoughness=a.clearcoatRoughness);void 0!==a.vertexColors&&(d.vertexColors=a.vertexColors);void 0!==a.fog&&(d.fog=a.fog);void 0!==a.flatShading&&(d.flatShading=a.flatShading);void 0!==a.blending&&(d.blending=a.blending);void 0!==a.combine&&(d.combine=a.combine);void 0!==a.side&&(d.side=a.side);void 0!==a.opacity&&(d.opacity=a.opacity);void 0!==a.transparent&&(d.transparent=a.transparent);void 0!==a.alphaTest&&(d.alphaTest=a.alphaTest);void 0!==a.depthTest&&(d.depthTest=a.depthTest);void 0!==
a.depthWrite&&(d.depthWrite=a.depthWrite);void 0!==a.colorWrite&&(d.colorWrite=a.colorWrite);void 0!==a.stencilWrite&&(d.stencilWrite=a.stencilWrite);void 0!==a.stencilWriteMask&&(d.stencilWriteMask=a.stencilWriteMask);void 0!==a.stencilFunc&&(d.stencilFunc=a.stencilFunc);void 0!==a.stencilRef&&(d.stencilRef=a.stencilRef);void 0!==a.stencilFuncMask&&(d.stencilFuncMask=a.stencilFuncMask);void 0!==a.stencilFail&&(d.stencilFail=a.stencilFail);void 0!==a.stencilZFail&&(d.stencilZFail=a.stencilZFail);
void 0!==a.stencilZPass&&(d.stencilZPass=a.stencilZPass);void 0!==a.wireframe&&(d.wireframe=a.wireframe);void 0!==a.wireframeLinewidth&&(d.wireframeLinewidth=a.wireframeLinewidth);void 0!==a.wireframeLinecap&&(d.wireframeLinecap=a.wireframeLinecap);void 0!==a.wireframeLinejoin&&(d.wireframeLinejoin=a.wireframeLinejoin);void 0!==a.rotation&&(d.rotation=a.rotation);1!==a.linewidth&&(d.linewidth=a.linewidth);void 0!==a.dashSize&&(d.dashSize=a.dashSize);void 0!==a.gapSize&&(d.gapSize=a.gapSize);void 0!==
a.scale&&(d.scale=a.scale);void 0!==a.polygonOffset&&(d.polygonOffset=a.polygonOffset);void 0!==a.polygonOffsetFactor&&(d.polygonOffsetFactor=a.polygonOffsetFactor);void 0!==a.polygonOffsetUnits&&(d.polygonOffsetUnits=a.polygonOffsetUnits);void 0!==a.skinning&&(d.skinning=a.skinning);void 0!==a.morphTargets&&(d.morphTargets=a.morphTargets);void 0!==a.morphNormals&&(d.morphNormals=a.morphNormals);void 0!==a.dithering&&(d.dithering=a.dithering);void 0!==a.visible&&(d.visible=a.visible);void 0!==a.toneMapped&&
(d.toneMapped=a.toneMapped);void 0!==a.userData&&(d.userData=a.userData);if(void 0!==a.uniforms)for(var e in a.uniforms){var f=a.uniforms[e];d.uniforms[e]={};switch(f.type){case "t":d.uniforms[e].value=b(f.value);break;case "c":d.uniforms[e].value=(new J).setHex(f.value);break;case "v2":d.uniforms[e].value=(new B).fromArray(f.value);break;case "v3":d.uniforms[e].value=(new n).fromArray(f.value);break;case "v4":d.uniforms[e].value=(new da).fromArray(f.value);break;case "m3":d.uniforms[e].value=(new Z).fromArray(f.value);
case "m4":d.uniforms[e].value=(new Q).fromArray(f.value);break;default:d.uniforms[e].value=f.value}}void 0!==a.defines&&(d.defines=a.defines);void 0!==a.vertexShader&&(d.vertexShader=a.vertexShader);void 0!==a.fragmentShader&&(d.fragmentShader=a.fragmentShader);if(void 0!==a.extensions)for(var g in a.extensions)d.extensions[g]=a.extensions[g];void 0!==a.shading&&(d.flatShading=1===a.shading);void 0!==a.size&&(d.size=a.size);void 0!==a.sizeAttenuation&&(d.sizeAttenuation=a.sizeAttenuation);void 0!==
a.map&&(d.map=b(a.map));void 0!==a.matcap&&(d.matcap=b(a.matcap));void 0!==a.alphaMap&&(d.alphaMap=b(a.alphaMap),d.transparent=!0);void 0!==a.bumpMap&&(d.bumpMap=b(a.bumpMap));void 0!==a.bumpScale&&(d.bumpScale=a.bumpScale);void 0!==a.normalMap&&(d.normalMap=b(a.normalMap));void 0!==a.normalMapType&&(d.normalMapType=a.normalMapType);void 0!==a.normalScale&&(e=a.normalScale,!1===Array.isArray(e)&&(e=[e,e]),d.normalScale=(new B).fromArray(e));void 0!==a.displacementMap&&(d.displacementMap=b(a.displacementMap));
void 0!==a.displacementScale&&(d.displacementScale=a.displacementScale);void 0!==a.displacementBias&&(d.displacementBias=a.displacementBias);void 0!==a.roughnessMap&&(d.roughnessMap=b(a.roughnessMap));void 0!==a.metalnessMap&&(d.metalnessMap=b(a.metalnessMap));void 0!==a.emissiveMap&&(d.emissiveMap=b(a.emissiveMap));void 0!==a.emissiveIntensity&&(d.emissiveIntensity=a.emissiveIntensity);void 0!==a.specularMap&&(d.specularMap=b(a.specularMap));void 0!==a.envMap&&(d.envMap=b(a.envMap));void 0!==a.envMapIntensity&&
(d.envMapIntensity=a.envMapIntensity);void 0!==a.reflectivity&&(d.reflectivity=a.reflectivity);void 0!==a.refractionRatio&&(d.refractionRatio=a.refractionRatio);void 0!==a.lightMap&&(d.lightMap=b(a.lightMap));void 0!==a.lightMapIntensity&&(d.lightMapIntensity=a.lightMapIntensity);void 0!==a.aoMap&&(d.aoMap=b(a.aoMap));void 0!==a.aoMapIntensity&&(d.aoMapIntensity=a.aoMapIntensity);void 0!==a.gradientMap&&(d.gradientMap=b(a.gradientMap));void 0!==a.clearcoatNormalMap&&(d.clearcoatNormalMap=b(a.clearcoatNormalMap));
void 0!==a.clearcoatNormalScale&&(d.clearcoatNormalScale=(new B).fromArray(a.clearcoatNormalScale));return d},setTextures:function(a){this.textures=a;return this}});var eh={decodeText:function(a){if("undefined"!==typeof TextDecoder)return(new TextDecoder).decode(a);for(var b="",c=0,d=a.length;c<d;c++)b+=String.fromCharCode(a[c]);try{return decodeURIComponent(escape(b))}catch(e){return b}},extractUrlBase:function(a){var b=a.lastIndexOf("/");return-1===b?"./":a.substr(0,b+1)}};jf.prototype=Object.assign(Object.create(D.prototype),
{constructor:jf,isInstancedBufferGeometry:!0,copy:function(a){D.prototype.copy.call(this,a);this.maxInstancedCount=a.maxInstancedCount;return this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var a=D.prototype.toJSON.call(this);a.maxInstancedCount=this.maxInstancedCount;a.isInstancedBufferGeometry=!0;return a}});kf.prototype=Object.assign(Object.create(N.prototype),{constructor:kf,isInstancedBufferAttribute:!0,copy:function(a){N.prototype.copy.call(this,a);this.meshPerAttribute=
a.meshPerAttribute;return this},toJSON:function(){var a=N.prototype.toJSON.call(this);a.meshPerAttribute=this.meshPerAttribute;a.isInstancedBufferAttribute=!0;return a}});lf.prototype=Object.assign(Object.create(V.prototype),{constructor:lf,load:function(a,b,c,d){var e=this,f=new Na(e.manager);f.setPath(e.path);f.load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},parse:function(a){var b=a.isInstancedBufferGeometry?new jf:new D,c=a.data.index;if(void 0!==c){var d=new fh[c.type](c.array);b.setIndex(new N(d,
1))}c=a.data.attributes;for(var e in c){var f=c[e];d=new fh[f.type](f.array);d=new (f.isInstancedBufferAttribute?kf:N)(d,f.itemSize,f.normalized);void 0!==f.name&&(d.name=f.name);b.setAttribute(e,d)}var g=a.data.morphAttributes;if(g)for(e in g){var h=g[e],l=[];c=0;for(var k=h.length;c<k;c++)f=h[c],d=new fh[f.type](f.array),d=new N(d,f.itemSize,f.normalized),void 0!==f.name&&(d.name=f.name),l.push(d);b.morphAttributes[e]=l}e=a.data.groups||a.data.drawcalls||a.data.offsets;if(void 0!==e)for(c=0,f=e.length;c!==
f;++c)d=e[c],b.addGroup(d.start,d.count,d.materialIndex);c=a.data.boundingSphere;void 0!==c&&(e=new n,void 0!==c.center&&e.fromArray(c.center),b.boundingSphere=new mb(e,c.radius));a.name&&(b.name=a.name);a.userData&&(b.userData=a.userData);return b}});var fh={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!==typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,
Float64Array:Float64Array};mf.prototype=Object.assign(Object.create(V.prototype),{constructor:mf,load:function(a,b,c,d){var e=this,f=""===this.path?eh.extractUrlBase(a):this.path;this.resourcePath=this.resourcePath||f;f=new Na(e.manager);f.setPath(this.path);f.load(a,function(c){var f=null;try{f=JSON.parse(c)}catch(l){void 0!==d&&d(l);console.error("THREE:ObjectLoader: Can't parse "+a+".",l.message);return}c=f.metadata;void 0===c||void 0===c.type||"geometry"===c.type.toLowerCase()?console.error("THREE.ObjectLoader: Can't load "+
a):e.parse(f,b)},c,d)},parse:function(a,b){var c=this.parseShape(a.shapes);c=this.parseGeometries(a.geometries,c);var d=this.parseImages(a.images,function(){void 0!==b&&b(e)});d=this.parseTextures(a.textures,d);d=this.parseMaterials(a.materials,d);var e=this.parseObject(a.object,c,d);a.animations&&(e.animations=this.parseAnimations(a.animations));void 0!==a.images&&0!==a.images.length||void 0===b||b(e);return e},parseShape:function(a){var b={};if(void 0!==a)for(var c=0,d=a.length;c<d;c++){var e=(new Ib).fromJSON(a[c]);
b[e.uuid]=e}return b},parseGeometries:function(a,b){var c={};if(void 0!==a)for(var d=new lf,e=0,f=a.length;e<f;e++){var g=a[e];switch(g.type){case "PlaneGeometry":case "PlaneBufferGeometry":var h=new ja[g.type](g.width,g.height,g.widthSegments,g.heightSegments);break;case "BoxGeometry":case "BoxBufferGeometry":case "CubeGeometry":h=new ja[g.type](g.width,g.height,g.depth,g.widthSegments,g.heightSegments,g.depthSegments);break;case "CircleGeometry":case "CircleBufferGeometry":h=new ja[g.type](g.radius,
g.segments,g.thetaStart,g.thetaLength);break;case "CylinderGeometry":case "CylinderBufferGeometry":h=new ja[g.type](g.radiusTop,g.radiusBottom,g.height,g.radialSegments,g.heightSegments,g.openEnded,g.thetaStart,g.thetaLength);break;case "ConeGeometry":case "ConeBufferGeometry":h=new ja[g.type](g.radius,g.height,g.radialSegments,g.heightSegments,g.openEnded,g.thetaStart,g.thetaLength);break;case "SphereGeometry":case "SphereBufferGeometry":h=new ja[g.type](g.radius,g.widthSegments,g.heightSegments,
g.phiStart,g.phiLength,g.thetaStart,g.thetaLength);break;case "DodecahedronGeometry":case "DodecahedronBufferGeometry":case "IcosahedronGeometry":case "IcosahedronBufferGeometry":case "OctahedronGeometry":case "OctahedronBufferGeometry":case "TetrahedronGeometry":case "TetrahedronBufferGeometry":h=new ja[g.type](g.radius,g.detail);break;case "RingGeometry":case "RingBufferGeometry":h=new ja[g.type](g.innerRadius,g.outerRadius,g.thetaSegments,g.phiSegments,g.thetaStart,g.thetaLength);break;case "TorusGeometry":case "TorusBufferGeometry":h=
new ja[g.type](g.radius,g.tube,g.radialSegments,g.tubularSegments,g.arc);break;case "TorusKnotGeometry":case "TorusKnotBufferGeometry":h=new ja[g.type](g.radius,g.tube,g.tubularSegments,g.radialSegments,g.p,g.q);break;case "TubeGeometry":case "TubeBufferGeometry":h=new ja[g.type]((new dh[g.path.type]).fromJSON(g.path),g.tubularSegments,g.radius,g.radialSegments,g.closed);break;case "LatheGeometry":case "LatheBufferGeometry":h=new ja[g.type](g.points,g.segments,g.phiStart,g.phiLength);break;case "PolyhedronGeometry":case "PolyhedronBufferGeometry":h=
new ja[g.type](g.vertices,g.indices,g.radius,g.details);break;case "ShapeGeometry":case "ShapeBufferGeometry":h=[];for(var l=0,k=g.shapes.length;l<k;l++){var n=b[g.shapes[l]];h.push(n)}h=new ja[g.type](h,g.curveSegments);break;case "ExtrudeGeometry":case "ExtrudeBufferGeometry":h=[];l=0;for(k=g.shapes.length;l<k;l++)n=b[g.shapes[l]],h.push(n);l=g.options.extrudePath;void 0!==l&&(g.options.extrudePath=(new dh[l.type]).fromJSON(l));h=new ja[g.type](h,g.options);break;case "BufferGeometry":case "InstancedBufferGeometry":h=
d.parse(g);break;case "Geometry":"THREE"in window&&"LegacyJSONLoader"in THREE?h=(new THREE.LegacyJSONLoader).parse(g,this.resourcePath).geometry:console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+g.type+'"');continue}h.uuid=g.uuid;void 0!==g.name&&(h.name=g.name);!0===h.isBufferGeometry&&void 0!==g.userData&&(h.userData=g.userData);c[g.uuid]=h}return c},
parseMaterials:function(a,b){var c={},d={};if(void 0!==a){var e=new hf;e.setTextures(b);b=0;for(var f=a.length;b<f;b++){var g=a[b];if("MultiMaterial"===g.type){for(var h=[],l=0;l<g.materials.length;l++){var k=g.materials[l];void 0===c[k.uuid]&&(c[k.uuid]=e.parse(k));h.push(c[k.uuid])}d[g.uuid]=h}else void 0===c[g.uuid]&&(c[g.uuid]=e.parse(g)),d[g.uuid]=c[g.uuid]}}return d},parseAnimations:function(a){for(var b=[],c=0;c<a.length;c++){var d=a[c],e=Ma.parse(d);void 0!==d.uuid&&(e.uuid=d.uuid);b.push(e)}return b},
parseImages:function(a,b){function c(a){d.manager.itemStart(a);return f.load(a,function(){d.manager.itemEnd(a)},void 0,function(){d.manager.itemError(a);d.manager.itemEnd(a)})}var d=this,e={};if(void 0!==a&&0<a.length){b=new og(b);var f=new ad(b);f.setCrossOrigin(this.crossOrigin);b=0;for(var g=a.length;b<g;b++){var h=a[b],l=h.url;if(Array.isArray(l)){e[h.uuid]=[];for(var k=0,n=l.length;k<n;k++){var q=l[k];q=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(q)?q:d.resourcePath+q;e[h.uuid].push(c(q))}}else q=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(h.url)?
h.url:d.resourcePath+h.url,e[h.uuid]=c(q)}}return e},parseTextures:function(a,b){function c(a,b){if("number"===typeof a)return a;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",a);return b[a]}var d={};if(void 0!==a)for(var e=0,f=a.length;e<f;e++){var g=a[e];void 0===g.image&&console.warn('THREE.ObjectLoader: No "image" specified for',g.uuid);void 0===b[g.image]&&console.warn("THREE.ObjectLoader: Undefined image",g.image);var h=Array.isArray(b[g.image])?new nb(b[g.image]):
new Y(b[g.image]);h.needsUpdate=!0;h.uuid=g.uuid;void 0!==g.name&&(h.name=g.name);void 0!==g.mapping&&(h.mapping=c(g.mapping,Gk));void 0!==g.offset&&h.offset.fromArray(g.offset);void 0!==g.repeat&&h.repeat.fromArray(g.repeat);void 0!==g.center&&h.center.fromArray(g.center);void 0!==g.rotation&&(h.rotation=g.rotation);void 0!==g.wrap&&(h.wrapS=c(g.wrap[0],Di),h.wrapT=c(g.wrap[1],Di));void 0!==g.format&&(h.format=g.format);void 0!==g.type&&(h.type=g.type);void 0!==g.encoding&&(h.encoding=g.encoding);
void 0!==g.minFilter&&(h.minFilter=c(g.minFilter,Ei));void 0!==g.magFilter&&(h.magFilter=c(g.magFilter,Ei));void 0!==g.anisotropy&&(h.anisotropy=g.anisotropy);void 0!==g.flipY&&(h.flipY=g.flipY);void 0!==g.premultiplyAlpha&&(h.premultiplyAlpha=g.premultiplyAlpha);void 0!==g.unpackAlignment&&(h.unpackAlignment=g.unpackAlignment);d[g.uuid]=h}return d},parseObject:function(a,b,c){function d(a){void 0===b[a]&&console.warn("THREE.ObjectLoader: Undefined geometry",a);return b[a]}function e(a){if(void 0!==
a){if(Array.isArray(a)){for(var b=[],d=0,e=a.length;d<e;d++){var f=a[d];void 0===c[f]&&console.warn("THREE.ObjectLoader: Undefined material",f);b.push(c[f])}return b}void 0===c[a]&&console.warn("THREE.ObjectLoader: Undefined material",a);return c[a]}}switch(a.type){case "Scene":var f=new vd;void 0!==a.background&&Number.isInteger(a.background)&&(f.background=new J(a.background));void 0!==a.fog&&("Fog"===a.fog.type?f.fog=new Me(a.fog.color,a.fog.near,a.fog.far):"FogExp2"===a.fog.type&&(f.fog=new Le(a.fog.color,
a.fog.density)));break;case "PerspectiveCamera":f=new U(a.fov,a.aspect,a.near,a.far);void 0!==a.focus&&(f.focus=a.focus);void 0!==a.zoom&&(f.zoom=a.zoom);void 0!==a.filmGauge&&(f.filmGauge=a.filmGauge);void 0!==a.filmOffset&&(f.filmOffset=a.filmOffset);void 0!==a.view&&(f.view=Object.assign({},a.view));break;case "OrthographicCamera":f=new oe(a.left,a.right,a.top,a.bottom,a.near,a.far);void 0!==a.zoom&&(f.zoom=a.zoom);void 0!==a.view&&(f.view=Object.assign({},a.view));break;case "AmbientLight":f=
new ff(a.color,a.intensity);break;case "DirectionalLight":f=new ef(a.color,a.intensity);break;case "PointLight":f=new cf(a.color,a.intensity,a.distance,a.decay);break;case "RectAreaLight":f=new gf(a.color,a.intensity,a.width,a.height);break;case "SpotLight":f=new bf(a.color,a.intensity,a.distance,a.angle,a.penumbra,a.decay);break;case "HemisphereLight":f=new $e(a.color,a.groundColor,a.intensity);break;case "SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
case "Mesh":f=d(a.geometry);var g=e(a.material);f=f.bones&&0<f.bones.length?new Od(f,g):new ea(f,g);break;case "InstancedMesh":f=d(a.geometry);g=e(a.material);var h=a.instanceMatrix;f=new Pe(f,g,a.count);f.instanceMatrix=new N(new Float32Array(h.array),16);break;case "LOD":f=new Nd;break;case "Line":f=new ra(d(a.geometry),e(a.material),a.mode);break;case "LineLoop":f=new Qe(d(a.geometry),e(a.material));break;case "LineSegments":f=new X(d(a.geometry),e(a.material));break;case "PointCloud":case "Points":f=
new Jc(d(a.geometry),e(a.material));break;case "Sprite":f=new Ld(e(a.material));break;case "Group":f=new Gc;break;default:f=new E}f.uuid=a.uuid;void 0!==a.name&&(f.name=a.name);void 0!==a.matrix?(f.matrix.fromArray(a.matrix),void 0!==a.matrixAutoUpdate&&(f.matrixAutoUpdate=a.matrixAutoUpdate),f.matrixAutoUpdate&&f.matrix.decompose(f.position,f.quaternion,f.scale)):(void 0!==a.position&&f.position.fromArray(a.position),void 0!==a.rotation&&f.rotation.fromArray(a.rotation),void 0!==a.quaternion&&f.quaternion.fromArray(a.quaternion),
void 0!==a.scale&&f.scale.fromArray(a.scale));void 0!==a.castShadow&&(f.castShadow=a.castShadow);void 0!==a.receiveShadow&&(f.receiveShadow=a.receiveShadow);a.shadow&&(void 0!==a.shadow.bias&&(f.shadow.bias=a.shadow.bias),void 0!==a.shadow.radius&&(f.shadow.radius=a.shadow.radius),void 0!==a.shadow.mapSize&&f.shadow.mapSize.fromArray(a.shadow.mapSize),void 0!==a.shadow.camera&&(f.shadow.camera=this.parseObject(a.shadow.camera)));void 0!==a.visible&&(f.visible=a.visible);void 0!==a.frustumCulled&&
(f.frustumCulled=a.frustumCulled);void 0!==a.renderOrder&&(f.renderOrder=a.renderOrder);void 0!==a.userData&&(f.userData=a.userData);void 0!==a.layers&&(f.layers.mask=a.layers);void 0!==a.drawMode&&f.setDrawMode(a.drawMode);if(void 0!==a.children)for(h=a.children,g=0;g<h.length;g++)f.add(this.parseObject(h[g],b,c));if("LOD"===a.type)for(a=a.levels,h=0;h<a.length;h++){g=a[h];var l=f.getObjectByProperty("uuid",g.object);void 0!==l&&f.addLevel(l,g.distance)}return f}});var Gk={UVMapping:300,CubeReflectionMapping:301,
CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307},Di={RepeatWrapping:1E3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002},Ei={NearestFilter:1003,NearestMipmapNearestFilter:1004,NearestMipmapLinearFilter:1005,LinearFilter:1006,LinearMipmapNearestFilter:1007,LinearMipmapLinearFilter:1008};tg.prototype=Object.assign(Object.create(V.prototype),{constructor:tg,
setOptions:function(a){this.options=a;return this},load:function(a,b,c,d){void 0===a&&(a="");void 0!==this.path&&(a=this.path+a);a=this.manager.resolveURL(a);var e=this,f=sc.get(a);if(void 0!==f)return e.manager.itemStart(a),setTimeout(function(){b&&b(f);e.manager.itemEnd(a)},0),f;fetch(a).then(function(a){return a.blob()}).then(function(a){return void 0===e.options?createImageBitmap(a):createImageBitmap(a,e.options)}).then(function(c){sc.add(a,c);b&&b(c);e.manager.itemEnd(a)}).catch(function(b){d&&
d(b);e.manager.itemError(a);e.manager.itemEnd(a)});e.manager.itemStart(a)}});Object.assign(ug.prototype,{moveTo:function(a,b){this.currentPath=new Wa;this.subPaths.push(this.currentPath);this.currentPath.moveTo(a,b);return this},lineTo:function(a,b){this.currentPath.lineTo(a,b);return this},quadraticCurveTo:function(a,b,c,d){this.currentPath.quadraticCurveTo(a,b,c,d);return this},bezierCurveTo:function(a,b,c,d,e,f){this.currentPath.bezierCurveTo(a,b,c,d,e,f);return this},splineThru:function(a){this.currentPath.splineThru(a);
return this},toShapes:function(a,b){function c(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=a[c],f=new Ib;f.curves=e.curves;b.push(f)}return b}function d(a,b){for(var c=b.length,d=!1,e=c-1,f=0;f<c;e=f++){var g=b[e],h=b[f],l=h.x-g.x,k=h.y-g.y;if(Math.abs(k)>Number.EPSILON){if(0>k&&(g=b[f],l=-l,h=b[e],k=-k),!(a.y<g.y||a.y>h.y))if(a.y===g.y){if(a.x===g.x)return!0}else{e=k*(a.x-g.x)-l*(a.y-g.y);if(0===e)return!0;0>e||(d=!d)}}else if(a.y===g.y&&(h.x<=a.x&&a.x<=g.x||g.x<=a.x&&a.x<=h.x))return!0}return d}
var e=qb.isClockWise,f=this.subPaths;if(0===f.length)return[];if(!0===b)return c(f);b=[];if(1===f.length){var g=f[0];var h=new Ib;h.curves=g.curves;b.push(h);return b}var l=!e(f[0].getPoints());l=a?!l:l;h=[];var k=[],n=[],q=0;k[q]=void 0;n[q]=[];for(var u=0,p=f.length;u<p;u++){g=f[u];var t=g.getPoints();var v=e(t);(v=a?!v:v)?(!l&&k[q]&&q++,k[q]={s:new Ib,p:t},k[q].s.curves=g.curves,l&&q++,n[q]=[]):n[q].push({h:g,p:t[0]})}if(!k[0])return c(f);if(1<k.length){u=!1;a=[];e=0;for(f=k.length;e<f;e++)h[e]=
[];e=0;for(f=k.length;e<f;e++)for(g=n[e],v=0;v<g.length;v++){l=g[v];q=!0;for(t=0;t<k.length;t++)d(l.p,k[t].p)&&(e!==t&&a.push({froms:e,tos:t,hole:v}),q?(q=!1,h[t].push(l)):u=!0);q&&h[e].push(l)}0<a.length&&(u||(n=h))}u=0;for(e=k.length;u<e;u++)for(h=k[u].s,b.push(h),a=n[u],f=0,g=a.length;f<g;f++)h.holes.push(a[f].h);return b}});Object.assign(vg.prototype,{isFont:!0,generateShapes:function(a,b){void 0===b&&(b=100);var c=[],d=b;b=this.data;var e=Array.from?Array.from(a):String(a).split("");d/=b.resolution;
var f=(b.boundingBox.yMax-b.boundingBox.yMin+b.underlineThickness)*d;a=[];for(var g=0,h=0,l=0;l<e.length;l++){var k=e[l];if("\n"===k)g=0,h-=f;else{var n=k;k=d;var q=g,u=h,p=b,t=p.glyphs[n]||p.glyphs["?"];if(t){n=new ug;if(t.o){p=t._cachedOutline||(t._cachedOutline=t.o.split(" "));for(var v=0,y=p.length;v<y;)switch(p[v++]){case "m":var w=p[v++]*k+q;var x=p[v++]*k+u;n.moveTo(w,x);break;case "l":w=p[v++]*k+q;x=p[v++]*k+u;n.lineTo(w,x);break;case "q":var A=p[v++]*k+q;var B=p[v++]*k+u;var z=p[v++]*k+q;
var C=p[v++]*k+u;n.quadraticCurveTo(z,C,A,B);break;case "b":A=p[v++]*k+q,B=p[v++]*k+u,z=p[v++]*k+q,C=p[v++]*k+u,w=p[v++]*k+q,x=p[v++]*k+u,n.bezierCurveTo(z,C,w,x,A,B)}}k={offsetX:t.ha*k,path:n}}else console.error('THREE.Font: character "'+n+'" does not exists in font family '+p.familyName+"."),k=void 0;g+=k.offsetX;a.push(k.path)}}b=0;for(e=a.length;b<e;b++)Array.prototype.push.apply(c,a[b].toShapes());return c}});wg.prototype=Object.assign(Object.create(V.prototype),{constructor:wg,load:function(a,
b,c,d){var e=this,f=new Na(this.manager);f.setPath(this.path);f.load(a,function(a){try{var c=JSON.parse(a)}catch(l){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),c=JSON.parse(a.substring(65,a.length-2))}a=e.parse(c);b&&b(a)},c,d)},parse:function(a){return new vg(a)}});var Mf,Bg={getContext:function(){void 0===Mf&&(Mf=new (window.AudioContext||window.webkitAudioContext));return Mf},setContext:function(a){Mf=a}};nf.prototype=Object.assign(Object.create(V.prototype),
{constructor:nf,load:function(a,b,c,d){var e=new Na(this.manager);e.setResponseType("arraybuffer");e.setPath(this.path);e.load(a,function(a){a=a.slice(0);Bg.getContext().decodeAudioData(a,function(a){b(a)})},c,d)}});Object.assign(of.prototype,{isSphericalHarmonics3:!0,set:function(a){for(var b=0;9>b;b++)this.coefficients[b].copy(a[b]);return this},zero:function(){for(var a=0;9>a;a++)this.coefficients[a].set(0,0,0);return this},getAt:function(a,b){var c=a.x,d=a.y;a=a.z;var e=this.coefficients;b.copy(e[0]).multiplyScalar(.282095);
b.addScale(e[1],.488603*d);b.addScale(e[2],.488603*a);b.addScale(e[3],.488603*c);b.addScale(e[4],1.092548*c*d);b.addScale(e[5],1.092548*d*a);b.addScale(e[6],.315392*(3*a*a-1));b.addScale(e[7],1.092548*c*a);b.addScale(e[8],.546274*(c*c-d*d));return b},getIrradianceAt:function(a,b){var c=a.x,d=a.y;a=a.z;var e=this.coefficients;b.copy(e[0]).multiplyScalar(.886227);b.addScale(e[1],1.023328*d);b.addScale(e[2],1.023328*a);b.addScale(e[3],1.023328*c);b.addScale(e[4],.858086*c*d);b.addScale(e[5],.858086*
d*a);b.addScale(e[6],.743125*a*a-.247708);b.addScale(e[7],.858086*c*a);b.addScale(e[8],.429043*(c*c-d*d));return b},add:function(a){for(var b=0;9>b;b++)this.coefficients[b].add(a.coefficients[b]);return this},scale:function(a){for(var b=0;9>b;b++)this.coefficients[b].multiplyScalar(a);return this},lerp:function(a,b){for(var c=0;9>c;c++)this.coefficients[c].lerp(a.coefficients[c],b);return this},equals:function(a){for(var b=0;9>b;b++)if(!this.coefficients[b].equals(a.coefficients[b]))return!1;return!0},
copy:function(a){return this.set(a.coefficients)},clone:function(){return(new this.constructor).copy(this)},fromArray:function(a,b){void 0===b&&(b=0);for(var c=this.coefficients,d=0;9>d;d++)c[d].fromArray(a,b+3*d);return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);for(var c=this.coefficients,d=0;9>d;d++)c[d].toArray(a,b+3*d);return a}});Object.assign(of,{getBasisAt:function(a,b){var c=a.x,d=a.y;a=a.z;b[0]=.282095;b[1]=.488603*d;b[2]=.488603*a;b[3]=.488603*c;b[4]=1.092548*c*d;
b[5]=1.092548*d*a;b[6]=.315392*(3*a*a-1);b[7]=1.092548*c*a;b[8]=.546274*(c*c-d*d)}});Xa.prototype=Object.assign(Object.create(T.prototype),{constructor:Xa,isLightProbe:!0,copy:function(a){T.prototype.copy.call(this,a);this.sh.copy(a.sh);this.intensity=a.intensity;return this},toJSON:function(a){return T.prototype.toJSON.call(this,a)}});xg.prototype=Object.assign(Object.create(Xa.prototype),{constructor:xg,isHemisphereLightProbe:!0,copy:function(a){Xa.prototype.copy.call(this,a);return this},toJSON:function(a){return Xa.prototype.toJSON.call(this,
a)}});yg.prototype=Object.assign(Object.create(Xa.prototype),{constructor:yg,isAmbientLightProbe:!0,copy:function(a){Xa.prototype.copy.call(this,a);return this},toJSON:function(a){return Xa.prototype.toJSON.call(this,a)}});var Fi=new Q,Gi=new Q;Object.assign(ai.prototype,{update:function(a){var b=this._cache;if(b.focus!==a.focus||b.fov!==a.fov||b.aspect!==a.aspect*this.aspect||b.near!==a.near||b.far!==a.far||b.zoom!==a.zoom||b.eyeSep!==this.eyeSep){b.focus=a.focus;b.fov=a.fov;b.aspect=a.aspect*this.aspect;
b.near=a.near;b.far=a.far;b.zoom=a.zoom;b.eyeSep=this.eyeSep;var c=a.projectionMatrix.clone(),d=b.eyeSep/2,e=d*b.near/b.focus,f=b.near*Math.tan(P.DEG2RAD*b.fov*.5)/b.zoom;Gi.elements[12]=-d;Fi.elements[12]=d;d=-f*b.aspect+e;var g=f*b.aspect+e;c.elements[0]=2*b.near/(g-d);c.elements[8]=(g+d)/(g-d);this.cameraL.projectionMatrix.copy(c);d=-f*b.aspect-e;g=f*b.aspect-e;c.elements[0]=2*b.near/(g-d);c.elements[8]=(g+d)/(g-d);this.cameraR.projectionMatrix.copy(c)}this.cameraL.matrixWorld.copy(a.matrixWorld).multiply(Gi);
this.cameraR.matrixWorld.copy(a.matrixWorld).multiply(Fi)}});Object.assign(zg.prototype,{start:function(){this.oldTime=this.startTime=("undefined"===typeof performance?Date:performance).now();this.elapsedTime=0;this.running=!0},stop:function(){this.getElapsedTime();this.autoStart=this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var b=("undefined"===typeof performance?
Date:performance).now();a=(b-this.oldTime)/1E3;this.oldTime=b;this.elapsedTime+=a}return a}});var tc=new n,Hi=new wa,Hk=new n,uc=new n;Ag.prototype=Object.assign(Object.create(E.prototype),{constructor:Ag,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null);return this},getFilter:function(){return this.filter},setFilter:function(a){null!==
this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination);this.filter=a;this.gain.connect(this.filter);this.filter.connect(this.context.destination);return this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(a){this.gain.gain.setTargetAtTime(a,this.context.currentTime,.01);return this},updateMatrixWorld:function(a){E.prototype.updateMatrixWorld.call(this,a);a=this.context.listener;
var b=this.up;this.timeDelta=this._clock.getDelta();this.matrixWorld.decompose(tc,Hi,Hk);uc.set(0,0,-1).applyQuaternion(Hi);if(a.positionX){var c=this.context.currentTime+this.timeDelta;a.positionX.linearRampToValueAtTime(tc.x,c);a.positionY.linearRampToValueAtTime(tc.y,c);a.positionZ.linearRampToValueAtTime(tc.z,c);a.forwardX.linearRampToValueAtTime(uc.x,c);a.forwardY.linearRampToValueAtTime(uc.y,c);a.forwardZ.linearRampToValueAtTime(uc.z,c);a.upX.linearRampToValueAtTime(b.x,c);a.upY.linearRampToValueAtTime(b.y,
c);a.upZ.linearRampToValueAtTime(b.z,c)}else a.setPosition(tc.x,tc.y,tc.z),a.setOrientation(uc.x,uc.y,uc.z,b.x,b.y,b.z)}});cd.prototype=Object.assign(Object.create(E.prototype),{constructor:cd,getOutput:function(){return this.gain},setNodeSource:function(a){this.hasPlaybackControl=!1;this.sourceType="audioNode";this.source=a;this.connect();return this},setMediaElementSource:function(a){this.hasPlaybackControl=!1;this.sourceType="mediaNode";this.source=this.context.createMediaElementSource(a);this.connect();
return this},setMediaStreamSource:function(a){this.hasPlaybackControl=!1;this.sourceType="mediaStreamNode";this.source=this.context.createMediaStreamSource(a);this.connect();return this},setBuffer:function(a){this.buffer=a;this.sourceType="buffer";this.autoplay&&this.play();return this},play:function(a){void 0===a&&(a=0);if(!0===this.isPlaying)console.warn("THREE.Audio: Audio is already playing.");else if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");
else return this._startedAt=this.context.currentTime+a,a=this.context.createBufferSource(),a.buffer=this.buffer,a.loop=this.loop,a.loopStart=this.loopStart,a.loopEnd=this.loopEnd,a.onended=this.onEnded.bind(this),a.start(this._startedAt,this._pausedAt+this.offset,this.duration),this.isPlaying=!0,this.source=a,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()},pause:function(){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");
else return!0===this.isPlaying&&(this._pausedAt=(this.context.currentTime-this._startedAt)*this.playbackRate,this.source.stop(),this.source.onended=null,this.isPlaying=!1),this},stop:function(){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return this._pausedAt=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this},connect:function(){if(0<this.filters.length){this.source.connect(this.filters[0]);for(var a=1,b=this.filters.length;a<
b;a++)this.filters[a-1].connect(this.filters[a]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(0<this.filters.length){this.source.disconnect(this.filters[0]);for(var a=1,b=this.filters.length;a<b;a++)this.filters[a-1].disconnect(this.filters[a]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},
setFilters:function(a){a||(a=[]);!0===this.isPlaying?(this.disconnect(),this.filters=a,this.connect()):this.filters=a;return this},setDetune:function(a){this.detune=a;if(void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this},getDetune:function(){return this.detune},getFilter:function(){return this.getFilters()[0]},setFilter:function(a){return this.setFilters(a?[a]:[])},setPlaybackRate:function(a){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");
else return this.playbackRate=a,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(a){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return this.loop=
a,!0===this.isPlaying&&(this.source.loop=this.loop),this},setLoopStart:function(a){this.loopStart=a;return this},setLoopEnd:function(a){this.loopEnd=a;return this},getVolume:function(){return this.gain.gain.value},setVolume:function(a){this.gain.gain.setTargetAtTime(a,this.context.currentTime,.01);return this}});var vc=new n,Ii=new wa,Ik=new n,wc=new n;Cg.prototype=Object.assign(Object.create(cd.prototype),{constructor:Cg,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},
setRefDistance:function(a){this.panner.refDistance=a;return this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(a){this.panner.rolloffFactor=a;return this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(a){this.panner.distanceModel=a;return this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(a){this.panner.maxDistance=a;return this},setDirectionalCone:function(a,b,c){this.panner.coneInnerAngle=
a;this.panner.coneOuterAngle=b;this.panner.coneOuterGain=c;return this},updateMatrixWorld:function(a){E.prototype.updateMatrixWorld.call(this,a);if(!0!==this.hasPlaybackControl||!1!==this.isPlaying)if(this.matrixWorld.decompose(vc,Ii,Ik),wc.set(0,0,1).applyQuaternion(Ii),a=this.panner,a.positionX){var b=this.context.currentTime+this.listener.timeDelta;a.positionX.linearRampToValueAtTime(vc.x,b);a.positionY.linearRampToValueAtTime(vc.y,b);a.positionZ.linearRampToValueAtTime(vc.z,b);a.orientationX.linearRampToValueAtTime(wc.x,
b);a.orientationY.linearRampToValueAtTime(wc.y,b);a.orientationZ.linearRampToValueAtTime(wc.z,b)}else a.setPosition(vc.x,vc.y,vc.z),a.setOrientation(wc.x,wc.y,wc.z)}});Object.assign(Dg.prototype,{getFrequencyData:function(){this.analyser.getByteFrequencyData(this.data);return this.data},getAverageFrequency:function(){for(var a=0,b=this.getFrequencyData(),c=0;c<b.length;c++)a+=b[c];return a/b.length}});Object.assign(Eg.prototype,{accumulate:function(a,b){var c=this.buffer,d=this.valueSize;a=a*d+d;
var e=this.cumulativeWeight;if(0===e){for(e=0;e!==d;++e)c[a+e]=c[e];e=b}else e+=b,this._mixBufferRegion(c,a,0,b/e,d);this.cumulativeWeight=e},apply:function(a){var b=this.valueSize,c=this.buffer;a=a*b+b;var d=this.cumulativeWeight,e=this.binding;this.cumulativeWeight=0;1>d&&this._mixBufferRegion(c,a,3*b,1-d,b);d=b;for(var f=b+b;d!==f;++d)if(c[d]!==c[d+b]){e.setValue(c,a);break}},saveOriginalState:function(){var a=this.buffer,b=this.valueSize,c=3*b;this.binding.getValue(a,c);for(var d=b;d!==c;++d)a[d]=
a[c+d%b];this.cumulativeWeight=0},restoreOriginalState:function(){this.binding.setValue(this.buffer,3*this.valueSize)},_select:function(a,b,c,d,e){if(.5<=d)for(d=0;d!==e;++d)a[b+d]=a[c+d]},_slerp:function(a,b,c,d){wa.slerpFlat(a,b,a,b,a,c,d)},_lerp:function(a,b,c,d,e){for(var f=1-d,g=0;g!==e;++g){var h=b+g;a[h]=a[h]*f+a[c+g]*d}}});var Jk=/[\[\]\.:\/]/g,Kk="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",Lk=/((?:WC+[\/:])*)/.source.replace("WC","[^\\[\\]\\.:\\/]"),Mk=/(WCOD+)?/.source.replace("WCOD",Kk),
Nk=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC","[^\\[\\]\\.:\\/]"),Ok=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC","[^\\[\\]\\.:\\/]"),Pk=new RegExp("^"+Lk+Mk+Nk+Ok+"$"),Qk=["material","materials","bones"];Object.assign(bi.prototype,{getValue:function(a,b){this.bind();var c=this._bindings[this._targetGroup.nCachedObjects_];void 0!==c&&c.getValue(a,b)},setValue:function(a,b){for(var c=this._bindings,d=this._targetGroup.nCachedObjects_,e=c.length;d!==e;++d)c[d].setValue(a,b)},bind:function(){for(var a=
this._bindings,b=this._targetGroup.nCachedObjects_,c=a.length;b!==c;++b)a[b].bind()},unbind:function(){for(var a=this._bindings,b=this._targetGroup.nCachedObjects_,c=a.length;b!==c;++b)a[b].unbind()}});Object.assign(ya,{Composite:bi,create:function(a,b,c){return a&&a.isAnimationObjectGroup?new ya.Composite(a,b,c):new ya(a,b,c)},sanitizeNodeName:function(a){return a.replace(/\s/g,"_").replace(Jk,"")},parseTrackName:function(a){var b=Pk.exec(a);if(!b)throw Error("PropertyBinding: Cannot parse trackName: "+
a);b={nodeName:b[2],objectName:b[3],objectIndex:b[4],propertyName:b[5],propertyIndex:b[6]};var c=b.nodeName&&b.nodeName.lastIndexOf(".");if(void 0!==c&&-1!==c){var d=b.nodeName.substring(c+1);-1!==Qk.indexOf(d)&&(b.nodeName=b.nodeName.substring(0,c),b.objectName=d)}if(null===b.propertyName||0===b.propertyName.length)throw Error("PropertyBinding: can not parse propertyName from trackName: "+a);return b},findNode:function(a,b){if(!b||""===b||"root"===b||"."===b||-1===b||b===a.name||b===a.uuid)return a;
if(a.skeleton){var c=a.skeleton.getBoneByName(b);if(void 0!==c)return c}if(a.children){var d=function(a){for(var c=0;c<a.length;c++){var e=a[c];if(e.name===b||e.uuid===b||(e=d(e.children)))return e}return null};if(a=d(a.children))return a}return null}});Object.assign(ya.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(a,
b){a[b]=this.node[this.propertyName]},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)a[b++]=c[d]},function(a,b){a[b]=this.resolvedProperty[this.propertyIndex]},function(a,b){this.resolvedProperty.toArray(a,b)}],SetterByBindingTypeAndVersioning:[[function(a,b){this.targetObject[this.propertyName]=a[b]},function(a,b){this.targetObject[this.propertyName]=a[b];this.targetObject.needsUpdate=!0},function(a,b){this.targetObject[this.propertyName]=a[b];this.targetObject.matrixWorldNeedsUpdate=
!0}],[function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++]},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++];this.targetObject.needsUpdate=!0},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){this.resolvedProperty[this.propertyIndex]=a[b]},function(a,b){this.resolvedProperty[this.propertyIndex]=a[b];this.targetObject.needsUpdate=!0},function(a,
b){this.resolvedProperty[this.propertyIndex]=a[b];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){this.resolvedProperty.fromArray(a,b)},function(a,b){this.resolvedProperty.fromArray(a,b);this.targetObject.needsUpdate=!0},function(a,b){this.resolvedProperty.fromArray(a,b);this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(a,b){this.bind();this.getValue(a,b)},setValue:function(a,b){this.bind();this.setValue(a,b)},bind:function(){var a=this.node,b=this.parsedPath,c=b.objectName,
d=b.propertyName,e=b.propertyIndex;a||(this.node=a=ya.findNode(this.rootNode,b.nodeName)||this.rootNode);this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;if(a){if(c){var f=b.objectIndex;switch(c){case "materials":if(!a.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!a.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",
this);return}a=a.material.materials;break;case "bones":if(!a.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}a=a.skeleton.bones;for(c=0;c<a.length;c++)if(a[c].name===f){f=c;break}break;default:if(void 0===a[c]){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}a=a[c]}if(void 0!==f){if(void 0===a[f]){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",
this,a);return}a=a[f]}}f=a[d];if(void 0===f)console.error("THREE.PropertyBinding: Trying to update property for track: "+b.nodeName+"."+d+" but it wasn't found.",a);else{b=this.Versioning.None;this.targetObject=a;void 0!==a.needsUpdate?b=this.Versioning.NeedsUpdate:void 0!==a.matrixWorldNeedsUpdate&&(b=this.Versioning.MatrixWorldNeedsUpdate);c=this.BindingType.Direct;if(void 0!==e){if("morphTargetInfluences"===d){if(!a.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",
this);return}if(a.geometry.isBufferGeometry){if(!a.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}for(c=0;c<this.node.geometry.morphAttributes.position.length;c++)if(a.geometry.morphAttributes.position[c].name===e){e=c;break}}else{if(!a.geometry.morphTargets){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",
this);return}for(c=0;c<this.node.geometry.morphTargets.length;c++)if(a.geometry.morphTargets[c].name===e){e=c;break}}}c=this.BindingType.ArrayElement;this.resolvedProperty=f;this.propertyIndex=e}else void 0!==f.fromArray&&void 0!==f.toArray?(c=this.BindingType.HasFromToArray,this.resolvedProperty=f):Array.isArray(f)?(c=this.BindingType.EntireArray,this.resolvedProperty=f):this.propertyName=d;this.getValue=this.GetterByBindingType[c];this.setValue=this.SetterByBindingTypeAndVersioning[c][b]}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+
this.path+" but it wasn't found.")},unbind:function(){this.node=null;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}});Object.assign(ya.prototype,{_getValue_unbound:ya.prototype.getValue,_setValue_unbound:ya.prototype.setValue});Object.assign(ci.prototype,{isAnimationObjectGroup:!0,add:function(){for(var a=this._objects,b=a.length,c=this.nCachedObjects_,d=this._indicesByUUID,e=this._paths,f=this._parsedPaths,g=this._bindings,h=g.length,k=void 0,m=0,n=arguments.length;m!==
n;++m){var q=arguments[m],u=q.uuid,p=d[u];if(void 0===p){p=b++;d[u]=p;a.push(q);u=0;for(var t=h;u!==t;++u)g[u].push(new ya(q,e[u],f[u]))}else if(p<c){k=a[p];var v=--c;t=a[v];d[t.uuid]=p;a[p]=t;d[u]=v;a[v]=q;u=0;for(t=h;u!==t;++u){var y=g[u],w=y[p];y[p]=y[v];void 0===w&&(w=new ya(q,e[u],f[u]));y[v]=w}}else a[p]!==k&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=
c},remove:function(){for(var a=this._objects,b=this.nCachedObjects_,c=this._indicesByUUID,d=this._bindings,e=d.length,f=0,g=arguments.length;f!==g;++f){var h=arguments[f],k=h.uuid,m=c[k];if(void 0!==m&&m>=b){var n=b++,q=a[n];c[q.uuid]=m;a[m]=q;c[k]=n;a[n]=h;h=0;for(k=e;h!==k;++h){q=d[h];var u=q[m];q[m]=q[n];q[n]=u}}}this.nCachedObjects_=b},uncache:function(){for(var a=this._objects,b=a.length,c=this.nCachedObjects_,d=this._indicesByUUID,e=this._bindings,f=e.length,g=0,h=arguments.length;g!==h;++g){var k=
arguments[g].uuid,m=d[k];if(void 0!==m)if(delete d[k],m<c){k=--c;var n=a[k],q=--b,u=a[q];d[n.uuid]=m;a[m]=n;d[u.uuid]=k;a[k]=u;a.pop();n=0;for(u=f;n!==u;++n){var p=e[n],t=p[q];p[m]=p[k];p[k]=t;p.pop()}}else for(q=--b,u=a[q],d[u.uuid]=m,a[m]=u,a.pop(),n=0,u=f;n!==u;++n)p=e[n],p[m]=p[q],p.pop()}this.nCachedObjects_=c},subscribe_:function(a,b){var c=this._bindingsIndicesByPath,d=c[a],e=this._bindings;if(void 0!==d)return e[d];var f=this._paths,g=this._parsedPaths,h=this._objects,k=this.nCachedObjects_,
m=Array(h.length);d=e.length;c[a]=d;f.push(a);g.push(b);e.push(m);c=k;for(d=h.length;c!==d;++c)m[c]=new ya(h[c],a,b);return m},unsubscribe_:function(a){var b=this._bindingsIndicesByPath,c=b[a];if(void 0!==c){var d=this._paths,e=this._parsedPaths,f=this._bindings,g=f.length-1,h=f[g];b[a[g]]=c;f[c]=h;f.pop();e[c]=e[g];e.pop();d[c]=d[g];d.pop()}}});Object.assign(di.prototype,{play:function(){this._mixer._activateAction(this);return this},stop:function(){this._mixer._deactivateAction(this);return this.reset()},
reset:function(){this.paused=!1;this.enabled=!0;this.time=0;this._loopCount=-1;this._startTime=null;return this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(a){this._startTime=a;return this},setLoop:function(a,b){this.loop=a;this.repetitions=b;return this},setEffectiveWeight:function(a){this.weight=a;
this._effectiveWeight=this.enabled?a:0;return this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(a){return this._scheduleFading(a,0,1)},fadeOut:function(a){return this._scheduleFading(a,1,0)},crossFadeFrom:function(a,b,c){a.fadeOut(b);this.fadeIn(b);if(c){c=this._clip.duration;var d=a._clip.duration,e=c/d;a.warp(1,d/c,b);this.warp(e,1,b)}return this},crossFadeTo:function(a,b,c){return a.crossFadeFrom(this,b,c)},stopFading:function(){var a=this._weightInterpolant;
null!==a&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(a));return this},setEffectiveTimeScale:function(a){this.timeScale=a;this._effectiveTimeScale=this.paused?0:a;return this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(a){this.timeScale=this._clip.duration/a;return this.stopWarping()},syncWith:function(a){this.time=a.time;this.timeScale=a.timeScale;return this.stopWarping()},halt:function(a){return this.warp(this._effectiveTimeScale,
0,a)},warp:function(a,b,c){var d=this._mixer,e=d.time,f=this._timeScaleInterpolant,g=this.timeScale;null===f&&(this._timeScaleInterpolant=f=d._lendControlInterpolant());d=f.parameterPositions;f=f.sampleValues;d[0]=e;d[1]=e+c;f[0]=a/g;f[1]=b/g;return this},stopWarping:function(){var a=this._timeScaleInterpolant;null!==a&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(a));return this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||
this._mixer._root},_update:function(a,b,c,d){if(this.enabled){var e=this._startTime;if(null!==e){b=(a-e)*c;if(0>b||0===c)return;this._startTime=null;b*=c}b*=this._updateTimeScale(a);c=this._updateTime(b);a=this._updateWeight(a);if(0<a){b=this._interpolants;e=this._propertyBindings;for(var f=0,g=b.length;f!==g;++f)b[f].evaluate(c),e[f].accumulate(d,a)}}else this._updateWeight(a)},_updateWeight:function(a){var b=0;if(this.enabled){b=this.weight;var c=this._weightInterpolant;if(null!==c){var d=c.evaluate(a)[0];
b*=d;a>c.parameterPositions[1]&&(this.stopFading(),0===d&&(this.enabled=!1))}}return this._effectiveWeight=b},_updateTimeScale:function(a){var b=0;if(!this.paused){b=this.timeScale;var c=this._timeScaleInterpolant;if(null!==c){var d=c.evaluate(a)[0];b*=d;a>c.parameterPositions[1]&&(this.stopWarping(),0===b?this.paused=!0:this.timeScale=b)}}return this._effectiveTimeScale=b},_updateTime:function(a){var b=this.time+a,c=this._clip.duration,d=this.loop,e=this._loopCount,f=2202===d;if(0===a)return-1===
e?b:f&&1===(e&1)?c-b:b;if(2200===d)a:{if(-1===e&&(this._loopCount=0,this._setEndings(!0,!0,!1)),b>=c)b=c;else if(0>b)b=0;else{this.time=b;break a}this.clampWhenFinished?this.paused=!0:this.enabled=!1;this.time=b;this._mixer.dispatchEvent({type:"finished",action:this,direction:0>a?-1:1})}else{-1===e&&(0<=a?(e=0,this._setEndings(!0,0===this.repetitions,f)):this._setEndings(0===this.repetitions,!0,f));if(b>=c||0>b){d=Math.floor(b/c);b-=c*d;e+=Math.abs(d);var g=this.repetitions-e;0>=g?(this.clampWhenFinished?
this.paused=!0:this.enabled=!1,this.time=b=0<a?c:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:0<a?1:-1})):(1===g?(a=0>a,this._setEndings(a,!a,f)):this._setEndings(!1,!1,f),this._loopCount=e,this.time=b,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:d}))}else this.time=b;if(f&&1===(e&1))return c-b}return b},_setEndings:function(a,b,c){var d=this._interpolantSettings;c?(d.endingStart=2401,d.endingEnd=2401):(d.endingStart=a?this.zeroSlopeAtStart?2401:2400:2402,d.endingEnd=
b?this.zeroSlopeAtEnd?2401:2400:2402)},_scheduleFading:function(a,b,c){var d=this._mixer,e=d.time,f=this._weightInterpolant;null===f&&(this._weightInterpolant=f=d._lendControlInterpolant());d=f.parameterPositions;f=f.sampleValues;d[0]=e;f[0]=b;d[1]=e+a;f[1]=c;return this}});Fg.prototype=Object.assign(Object.create(Aa.prototype),{constructor:Fg,_bindAction:function(a,b){var c=a._localRoot||this._root,d=a._clip.tracks,e=d.length,f=a._propertyBindings;a=a._interpolants;var g=c.uuid,h=this._bindingsByRootAndName,
k=h[g];void 0===k&&(k={},h[g]=k);for(h=0;h!==e;++h){var m=d[h],n=m.name,q=k[n];if(void 0===q){q=f[h];if(void 0!==q){null===q._cacheIndex&&(++q.referenceCount,this._addInactiveBinding(q,g,n));continue}q=new Eg(ya.create(c,n,b&&b._propertyBindings[h].binding.parsedPath),m.ValueTypeName,m.getValueSize());++q.referenceCount;this._addInactiveBinding(q,g,n)}f[h]=q;a[h].resultBuffer=q.buffer}},_activateAction:function(a){if(!this._isActiveAction(a)){if(null===a._cacheIndex){var b=(a._localRoot||this._root).uuid,
c=a._clip.uuid,d=this._actionsByClip[c];this._bindAction(a,d&&d.knownActions[0]);this._addInactiveAction(a,c,b)}b=a._propertyBindings;c=0;for(d=b.length;c!==d;++c){var e=b[c];0===e.useCount++&&(this._lendBinding(e),e.saveOriginalState())}this._lendAction(a)}},_deactivateAction:function(a){if(this._isActiveAction(a)){for(var b=a._propertyBindings,c=0,d=b.length;c!==d;++c){var e=b[c];0===--e.useCount&&(e.restoreOriginalState(),this._takeBackBinding(e))}this._takeBackAction(a)}},_initMemoryManager:function(){this._actions=
[];this._nActiveActions=0;this._actionsByClip={};this._bindings=[];this._nActiveBindings=0;this._bindingsByRootAndName={};this._controlInterpolants=[];this._nActiveControlInterpolants=0;var a=this;this.stats={actions:{get total(){return a._actions.length},get inUse(){return a._nActiveActions}},bindings:{get total(){return a._bindings.length},get inUse(){return a._nActiveBindings}},controlInterpolants:{get total(){return a._controlInterpolants.length},get inUse(){return a._nActiveControlInterpolants}}}},
_isActiveAction:function(a){a=a._cacheIndex;return null!==a&&a<this._nActiveActions},_addInactiveAction:function(a,b,c){var d=this._actions,e=this._actionsByClip,f=e[b];void 0===f?(f={knownActions:[a],actionByRoot:{}},a._byClipCacheIndex=0,e[b]=f):(b=f.knownActions,a._byClipCacheIndex=b.length,b.push(a));a._cacheIndex=d.length;d.push(a);f.actionByRoot[c]=a},_removeInactiveAction:function(a){var b=this._actions,c=b[b.length-1],d=a._cacheIndex;c._cacheIndex=d;b[d]=c;b.pop();a._cacheIndex=null;b=a._clip.uuid;
c=this._actionsByClip;d=c[b];var e=d.knownActions,f=e[e.length-1],g=a._byClipCacheIndex;f._byClipCacheIndex=g;e[g]=f;e.pop();a._byClipCacheIndex=null;delete d.actionByRoot[(a._localRoot||this._root).uuid];0===e.length&&delete c[b];this._removeInactiveBindingsForAction(a)},_removeInactiveBindingsForAction:function(a){a=a._propertyBindings;for(var b=0,c=a.length;b!==c;++b){var d=a[b];0===--d.referenceCount&&this._removeInactiveBinding(d)}},_lendAction:function(a){var b=this._actions,c=a._cacheIndex,
d=this._nActiveActions++,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_takeBackAction:function(a){var b=this._actions,c=a._cacheIndex,d=--this._nActiveActions,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_addInactiveBinding:function(a,b,c){var d=this._bindingsByRootAndName,e=d[b],f=this._bindings;void 0===e&&(e={},d[b]=e);e[c]=a;a._cacheIndex=f.length;f.push(a)},_removeInactiveBinding:function(a){var b=this._bindings,c=a.binding,d=c.rootNode.uuid;c=c.path;var e=this._bindingsByRootAndName,
f=e[d],g=b[b.length-1];a=a._cacheIndex;g._cacheIndex=a;b[a]=g;b.pop();delete f[c];0===Object.keys(f).length&&delete e[d]},_lendBinding:function(a){var b=this._bindings,c=a._cacheIndex,d=this._nActiveBindings++,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_takeBackBinding:function(a){var b=this._bindings,c=a._cacheIndex,d=--this._nActiveBindings,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_lendControlInterpolant:function(){var a=this._controlInterpolants,b=this._nActiveControlInterpolants++,
c=a[b];void 0===c&&(c=new ke(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),c.__cacheIndex=b,a[b]=c);return c},_takeBackControlInterpolant:function(a){var b=this._controlInterpolants,c=a.__cacheIndex,d=--this._nActiveControlInterpolants,e=b[d];a.__cacheIndex=d;b[d]=a;e.__cacheIndex=c;b[c]=e},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(a,b){var c=b||this._root,d=c.uuid;c="string"===typeof a?Ma.findByName(c,a):a;a=null!==c?c.uuid:a;var e=
this._actionsByClip[a],f=null;if(void 0!==e){f=e.actionByRoot[d];if(void 0!==f)return f;f=e.knownActions[0];null===c&&(c=f._clip)}if(null===c)return null;b=new di(this,c,b);this._bindAction(b,f);this._addInactiveAction(b,a,d);return b},existingAction:function(a,b){var c=b||this._root;b=c.uuid;c="string"===typeof a?Ma.findByName(c,a):a;a=this._actionsByClip[c?c.uuid:a];return void 0!==a?a.actionByRoot[b]||null:null},stopAllAction:function(){for(var a=this._actions,b=this._nActiveActions,c=this._bindings,
d=this._nActiveBindings,e=this._nActiveBindings=this._nActiveActions=0;e!==b;++e)a[e].reset();for(e=0;e!==d;++e)c[e].useCount=0;return this},update:function(a){a*=this.timeScale;for(var b=this._actions,c=this._nActiveActions,d=this.time+=a,e=Math.sign(a),f=this._accuIndex^=1,g=0;g!==c;++g)b[g]._update(d,a,e,f);a=this._bindings;b=this._nActiveBindings;for(g=0;g!==b;++g)a[g].apply(f);return this},setTime:function(a){for(var b=this.time=0;b<this._actions.length;b++)this._actions[b].time=0;return this.update(a)},
getRoot:function(){return this._root},uncacheClip:function(a){var b=this._actions;a=a.uuid;var c=this._actionsByClip,d=c[a];if(void 0!==d){d=d.knownActions;for(var e=0,f=d.length;e!==f;++e){var g=d[e];this._deactivateAction(g);var h=g._cacheIndex,k=b[b.length-1];g._cacheIndex=null;g._byClipCacheIndex=null;k._cacheIndex=h;b[h]=k;b.pop();this._removeInactiveBindingsForAction(g)}delete c[a]}},uncacheRoot:function(a){a=a.uuid;var b=this._actionsByClip;for(d in b){var c=b[d].actionByRoot[a];void 0!==c&&
(this._deactivateAction(c),this._removeInactiveAction(c))}var d=this._bindingsByRootAndName[a];if(void 0!==d)for(var e in d)a=d[e],a.restoreOriginalState(),this._removeInactiveBinding(a)},uncacheAction:function(a,b){a=this.existingAction(a,b);null!==a&&(this._deactivateAction(a),this._removeInactiveAction(a))}});pf.prototype.clone=function(){return new pf(void 0===this.value.clone?this.value:this.value.clone())};Gg.prototype=Object.assign(Object.create(pb.prototype),{constructor:Gg,isInstancedInterleavedBuffer:!0,
copy:function(a){pb.prototype.copy.call(this,a);this.meshPerAttribute=a.meshPerAttribute;return this}});Object.assign(ei.prototype,{linePrecision:1,set:function(a,b){this.ray.set(a,b)},setFromCamera:function(a,b){b&&b.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(b.matrixWorld),this.ray.direction.set(a.x,a.y,.5).unproject(b).sub(this.ray.origin).normalize(),this.camera=b):b&&b.isOrthographicCamera?(this.ray.origin.set(a.x,a.y,(b.near+b.far)/(b.near-b.far)).unproject(b),this.ray.direction.set(0,
0,-1).transformDirection(b.matrixWorld),this.camera=b):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(a,b,c){c=c||[];Hg(a,this,c,b);c.sort(fi);return c},intersectObjects:function(a,b,c){c=c||[];if(!1===Array.isArray(a))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),c;for(var d=0,e=a.length;d<e;d++)Hg(a[d],this,c,b);c.sort(fi);return c}});Object.assign(gi.prototype,{set:function(a,b,c){this.radius=a;this.phi=b;this.theta=c;return this},
clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.radius=a.radius;this.phi=a.phi;this.theta=a.theta;return this},makeSafe:function(){this.phi=Math.max(1E-6,Math.min(Math.PI-1E-6,this.phi));return this},setFromVector3:function(a){return this.setFromCartesianCoords(a.x,a.y,a.z)},setFromCartesianCoords:function(a,b,c){this.radius=Math.sqrt(a*a+b*b+c*c);0===this.radius?this.phi=this.theta=0:(this.theta=Math.atan2(a,c),this.phi=Math.acos(P.clamp(b/this.radius,-1,1)));return this}});
Object.assign(hi.prototype,{set:function(a,b,c){this.radius=a;this.theta=b;this.y=c;return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.radius=a.radius;this.theta=a.theta;this.y=a.y;return this},setFromVector3:function(a){return this.setFromCartesianCoords(a.x,a.y,a.z)},setFromCartesianCoords:function(a,b,c){this.radius=Math.sqrt(a*a+c*c);this.theta=Math.atan2(a,c);this.y=b;return this}});var Ji=new B;Object.assign(Ig.prototype,{set:function(a,b){this.min.copy(a);
this.max.copy(b);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(a,b){b=Ji.copy(b).multiplyScalar(.5);this.min.copy(a).sub(b);this.max.copy(a).add(b);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},isEmpty:function(){return this.max.x<
this.min.x||this.max.y<this.min.y},getCenter:function(a){void 0===a&&(console.warn("THREE.Box2: .getCenter() target is now required"),a=new B);return this.isEmpty()?a.set(0,0):a.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(a){void 0===a&&(console.warn("THREE.Box2: .getSize() target is now required"),a=new B);return this.isEmpty()?a.set(0,0):a.subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);
this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y},getParameter:function(a,b){void 0===b&&(console.warn("THREE.Box2: .getParameter() target is now required"),b=new B);return b.set((a.x-this.min.x)/(this.max.x-this.min.x),
(a.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y?!1:!0},clampPoint:function(a,b){void 0===b&&(console.warn("THREE.Box2: .clampPoint() target is now required"),b=new B);return b.copy(a).clamp(this.min,this.max)},distanceToPoint:function(a){return Ji.copy(a).clamp(this.min,this.max).sub(a).length()},intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);
this.max.max(a.max);return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)}});var Ki=new n,Nf=new n;Object.assign(Jg.prototype,{set:function(a,b){this.start.copy(a);this.end.copy(b);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.start.copy(a.start);this.end.copy(a.end);return this},getCenter:function(a){void 0===a&&(console.warn("THREE.Line3: .getCenter() target is now required"),
a=new n);return a.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(a){void 0===a&&(console.warn("THREE.Line3: .delta() target is now required"),a=new n);return a.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(a,b){void 0===b&&(console.warn("THREE.Line3: .at() target is now required"),b=new n);return this.delta(b).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(a,
b){Ki.subVectors(a,this.start);Nf.subVectors(this.end,this.start);a=Nf.dot(Nf);a=Nf.dot(Ki)/a;b&&(a=P.clamp(a,0,1));return a},closestPointToPoint:function(a,b,c){a=this.closestPointToPointParameter(a,b);void 0===c&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),c=new n);return this.delta(c).multiplyScalar(a).add(this.start)},applyMatrix4:function(a){this.start.applyMatrix4(a);this.end.applyMatrix4(a);return this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)}});
pe.prototype=Object.create(E.prototype);pe.prototype.constructor=pe;pe.prototype.isImmediateRenderObject=!0;var lb=new n,Ab=new n,gh=new Z,Rk=["a","b","c"];qe.prototype=Object.create(X.prototype);qe.prototype.constructor=qe;qe.prototype.update=function(){this.object.updateMatrixWorld(!0);gh.getNormalMatrix(this.object.matrixWorld);var a=this.object.matrixWorld,b=this.geometry.attributes.position,c=this.object.geometry;if(c&&c.isGeometry)for(var d=c.vertices,e=c.faces,f=c=0,g=e.length;f<g;f++)for(var h=
e[f],k=0,m=h.vertexNormals.length;k<m;k++){var n=h.vertexNormals[k];lb.copy(d[h[Rk[k]]]).applyMatrix4(a);Ab.copy(n).applyMatrix3(gh).normalize().multiplyScalar(this.size).add(lb);b.setXYZ(c,lb.x,lb.y,lb.z);c+=1;b.setXYZ(c,Ab.x,Ab.y,Ab.z);c+=1}else if(c&&c.isBufferGeometry)for(d=c.attributes.position,e=c.attributes.normal,k=c=0,m=d.count;k<m;k++)lb.set(d.getX(k),d.getY(k),d.getZ(k)).applyMatrix4(a),Ab.set(e.getX(k),e.getY(k),e.getZ(k)),Ab.applyMatrix3(gh).normalize().multiplyScalar(this.size).add(lb),
b.setXYZ(c,lb.x,lb.y,lb.z),c+=1,b.setXYZ(c,Ab.x,Ab.y,Ab.z),c+=1;b.needsUpdate=!0};var Li=new n;dd.prototype=Object.create(E.prototype);dd.prototype.constructor=dd;dd.prototype.dispose=function(){this.cone.geometry.dispose();this.cone.material.dispose()};dd.prototype.update=function(){this.light.updateMatrixWorld();var a=this.light.distance?this.light.distance:1E3,b=a*Math.tan(this.light.angle);this.cone.scale.set(b,b,a);Li.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(Li);
void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)};var Ob=new n,Of=new Q,hh=new Q;ed.prototype=Object.create(X.prototype);ed.prototype.constructor=ed;ed.prototype.updateMatrixWorld=function(a){var b=this.bones,c=this.geometry,d=c.getAttribute("position");hh.getInverse(this.root.matrixWorld);for(var e=0,f=0;e<b.length;e++){var g=b[e];g.parent&&g.parent.isBone&&(Of.multiplyMatrices(hh,g.matrixWorld),Ob.setFromMatrixPosition(Of),d.setXYZ(f,Ob.x,
Ob.y,Ob.z),Of.multiplyMatrices(hh,g.parent.matrixWorld),Ob.setFromMatrixPosition(Of),d.setXYZ(f+1,Ob.x,Ob.y,Ob.z),f+=2)}c.getAttribute("position").needsUpdate=!0;E.prototype.updateMatrixWorld.call(this,a)};fd.prototype=Object.create(ea.prototype);fd.prototype.constructor=fd;fd.prototype.dispose=function(){this.geometry.dispose();this.material.dispose()};fd.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)};gd.prototype=Object.create(ra.prototype);
gd.prototype.constructor=gd;gd.prototype.update=function(){this.scale.set(.5*this.light.width,.5*this.light.height,1);if(void 0!==this.color)this.material.color.set(this.color),this.children[0].material.color.set(this.color);else{this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);var a=this.material.color,b=Math.max(a.r,a.g,a.b);1<b&&a.multiplyScalar(1/b);this.children[0].material.color.copy(this.material.color)}};gd.prototype.dispose=function(){this.geometry.dispose();
this.material.dispose();this.children[0].geometry.dispose();this.children[0].material.dispose()};var Sk=new n,Mi=new J,Ni=new J;hd.prototype=Object.create(E.prototype);hd.prototype.constructor=hd;hd.prototype.dispose=function(){this.children[0].geometry.dispose();this.children[0].material.dispose()};hd.prototype.update=function(){var a=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var b=a.geometry.getAttribute("color");Mi.copy(this.light.color);Ni.copy(this.light.groundColor);
for(var c=0,d=b.count;c<d;c++){var e=c<d/2?Mi:Ni;b.setXYZ(c,e.r,e.g,e.b)}b.needsUpdate=!0}a.lookAt(Sk.setFromMatrixPosition(this.light.matrixWorld).negate())};id.prototype=Object.create(ea.prototype);id.prototype.constructor=id;id.prototype.dispose=function(){this.geometry.dispose();this.material.dispose()};id.prototype.onBeforeRender=function(){this.position.copy(this.lightProbe.position);this.scale.set(1,1,1).multiplyScalar(this.size);this.material.uniforms.intensity.value=this.lightProbe.intensity};
qf.prototype=Object.assign(Object.create(X.prototype),{constructor:qf,copy:function(a){X.prototype.copy.call(this,a);this.geometry.copy(a.geometry);this.material.copy(a.material);return this},clone:function(){return(new this.constructor).copy(this)}});rf.prototype=Object.create(X.prototype);rf.prototype.constructor=rf;jd.prototype=Object.create(ra.prototype);jd.prototype.constructor=jd;jd.prototype.update=function(){function a(a,b,d,e){d=(b-a)/d;p.setXYZ(k,0,0,0);m++;for(n=a;n<b;n+=d)q=k+m,p.setXYZ(q,
Math.sin(n)*c,0,Math.cos(n)*c),p.setXYZ(q+1,Math.sin(Math.min(n+d,b))*c,0,Math.cos(Math.min(n+d,b))*c),p.setXYZ(q+2,0,0,0),m+=3;u.addGroup(k,m,e);k+=m;m=0}var b=this.audio,c=this.range,d=this.divisionsInnerAngle,e=this.divisionsOuterAngle,f=P.degToRad(b.panner.coneInnerAngle);b=P.degToRad(b.panner.coneOuterAngle);var g=f/2,h=b/2,k=0,m=0,n,q,u=this.geometry,p=u.attributes.position;u.clearGroups();a(-h,-g,e,0);a(-g,g,d,1);a(g,h,e,0);p.needsUpdate=!0;f===b&&(this.material[0].visible=!1)};jd.prototype.dispose=
function(){this.geometry.dispose();this.material[0].dispose();this.material[1].dispose()};var De=new n,Pf=new n,Oi=new Z;re.prototype=Object.create(X.prototype);re.prototype.constructor=re;re.prototype.update=function(){this.object.updateMatrixWorld(!0);Oi.getNormalMatrix(this.object.matrixWorld);var a=this.object.matrixWorld,b=this.geometry.attributes.position,c=this.object.geometry,d=c.vertices;c=c.faces;for(var e=0,f=0,g=c.length;f<g;f++){var h=c[f],k=h.normal;De.copy(d[h.a]).add(d[h.b]).add(d[h.c]).divideScalar(3).applyMatrix4(a);
Pf.copy(k).applyMatrix3(Oi).normalize().multiplyScalar(this.size).add(De);b.setXYZ(e,De.x,De.y,De.z);e+=1;b.setXYZ(e,Pf.x,Pf.y,Pf.z);e+=1}b.needsUpdate=!0};var Pi=new n,Qf=new n,Qi=new n;kd.prototype=Object.create(E.prototype);kd.prototype.constructor=kd;kd.prototype.dispose=function(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose()};kd.prototype.update=function(){Pi.setFromMatrixPosition(this.light.matrixWorld);
Qf.setFromMatrixPosition(this.light.target.matrixWorld);Qi.subVectors(Qf,Pi);this.lightPlane.lookAt(Qf);void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color));this.targetLine.lookAt(Qf);this.targetLine.scale.z=Qi.length()};var sf=new n,ka=new bb;se.prototype=Object.create(X.prototype);se.prototype.constructor=se;se.prototype.update=
function(){var a=this.geometry,b=this.pointMap;ka.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);na("c",b,a,ka,0,0,-1);na("t",b,a,ka,0,0,1);na("n1",b,a,ka,-1,-1,-1);na("n2",b,a,ka,1,-1,-1);na("n3",b,a,ka,-1,1,-1);na("n4",b,a,ka,1,1,-1);na("f1",b,a,ka,-1,-1,1);na("f2",b,a,ka,1,-1,1);na("f3",b,a,ka,-1,1,1);na("f4",b,a,ka,1,1,1);na("u1",b,a,ka,.7,1.1,-1);na("u2",b,a,ka,-.7,1.1,-1);na("u3",b,a,ka,0,2,-1);na("cf1",b,a,ka,-1,0,1);na("cf2",b,a,ka,1,0,1);na("cf3",b,a,ka,0,-1,1);na("cf4",
b,a,ka,0,1,1);na("cn1",b,a,ka,-1,0,-1);na("cn2",b,a,ka,1,0,-1);na("cn3",b,a,ka,0,-1,-1);na("cn4",b,a,ka,0,1,-1);a.getAttribute("position").needsUpdate=!0};var Rf=new ab;tb.prototype=Object.create(X.prototype);tb.prototype.constructor=tb;tb.prototype.update=function(a){void 0!==a&&console.warn("THREE.BoxHelper: .update() has no longer arguments.");void 0!==this.object&&Rf.setFromObject(this.object);if(!Rf.isEmpty()){a=Rf.min;var b=Rf.max,c=this.geometry.attributes.position,d=c.array;d[0]=b.x;d[1]=
b.y;d[2]=b.z;d[3]=a.x;d[4]=b.y;d[5]=b.z;d[6]=a.x;d[7]=a.y;d[8]=b.z;d[9]=b.x;d[10]=a.y;d[11]=b.z;d[12]=b.x;d[13]=b.y;d[14]=a.z;d[15]=a.x;d[16]=b.y;d[17]=a.z;d[18]=a.x;d[19]=a.y;d[20]=a.z;d[21]=b.x;d[22]=a.y;d[23]=a.z;c.needsUpdate=!0;this.geometry.computeBoundingSphere()}};tb.prototype.setFromObject=function(a){this.object=a;this.update();return this};tb.prototype.copy=function(a){X.prototype.copy.call(this,a);this.object=a.object;return this};tb.prototype.clone=function(){return(new this.constructor).copy(this)};
te.prototype=Object.create(X.prototype);te.prototype.constructor=te;te.prototype.updateMatrixWorld=function(a){var b=this.box;b.isEmpty()||(b.getCenter(this.position),b.getSize(this.scale),this.scale.multiplyScalar(.5),E.prototype.updateMatrixWorld.call(this,a))};ue.prototype=Object.create(ra.prototype);ue.prototype.constructor=ue;ue.prototype.updateMatrixWorld=function(a){var b=-this.plane.constant;1E-8>Math.abs(b)&&(b=1E-8);this.scale.set(.5*this.size,.5*this.size,b);this.children[0].material.side=
0>b?1:0;this.lookAt(this.plane.normal);E.prototype.updateMatrixWorld.call(this,a)};var Ri=new n,tf,Kg;ub.prototype=Object.create(E.prototype);ub.prototype.constructor=ub;ub.prototype.setDirection=function(a){.99999<a.y?this.quaternion.set(0,0,0,1):-.99999>a.y?this.quaternion.set(1,0,0,0):(Ri.set(a.z,0,-a.x).normalize(),this.quaternion.setFromAxisAngle(Ri,Math.acos(a.y)))};ub.prototype.setLength=function(a,b,c){void 0===b&&(b=.2*a);void 0===c&&(c=.2*b);this.line.scale.set(1,Math.max(1E-4,a-b),1);this.line.updateMatrix();
this.cone.scale.set(c,b,c);this.cone.position.y=a;this.cone.updateMatrix()};ub.prototype.setColor=function(a){this.line.material.color.set(a);this.cone.material.color.set(a)};ub.prototype.copy=function(a){E.prototype.copy.call(this,a,!1);this.line.copy(a.line);this.cone.copy(a.cone);return this};ub.prototype.clone=function(){return(new this.constructor).copy(this)};ve.prototype=Object.create(X.prototype);ve.prototype.constructor=ve;C.create=function(a,b){console.log("THREE.Curve.create() has been deprecated");
a.prototype=Object.create(C.prototype);a.prototype.constructor=a;a.prototype.getPoint=b;return a};Object.assign(sb.prototype,{createPointsGeometry:function(a){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");a=this.getPoints(a);return this.createGeometry(a)},createSpacedPointsGeometry:function(a){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
a=this.getSpacedPoints(a);return this.createGeometry(a)},createGeometry:function(a){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var b=new G,c=0,d=a.length;c<d;c++){var e=a[c];b.vertices.push(new n(e.x,e.y,e.z||0))}return b}});Object.assign(Wa.prototype,{fromPoints:function(a){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");return this.setFromPoints(a)}});ji.prototype=Object.create(ma.prototype);
ki.prototype=Object.create(ma.prototype);Lg.prototype=Object.create(ma.prototype);Object.assign(Lg.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}});qf.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};
ed.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};Object.assign(V.prototype,{extractUrlBase:function(a){console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");return eh.extractUrlBase(a)}});V.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}};
Object.assign(mf.prototype,{setTexturePath:function(a){console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");return this.setResourcePath(a)}});Object.assign(Ig.prototype,{center:function(a){console.warn("THREE.Box2: .center() has been renamed to .getCenter().");return this.getCenter(a)},empty:function(){console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");return this.isEmpty()},isIntersectionBox:function(a){console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
return this.intersectsBox(a)},size:function(a){console.warn("THREE.Box2: .size() has been renamed to .getSize().");return this.getSize(a)}});Object.assign(ab.prototype,{center:function(a){console.warn("THREE.Box3: .center() has been renamed to .getCenter().");return this.getCenter(a)},empty:function(){console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");return this.isEmpty()},isIntersectionBox:function(a){console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
return this.intersectsBox(a)},isIntersectionSphere:function(a){console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(a)},size:function(a){console.warn("THREE.Box3: .size() has been renamed to .getSize().");return this.getSize(a)}});Jg.prototype.center=function(a){console.warn("THREE.Line3: .center() has been renamed to .getCenter().");return this.getCenter(a)};Object.assign(P,{random16:function(){console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");
return Math.random()},nearestPowerOfTwo:function(a){console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");return P.floorPowerOfTwo(a)},nextPowerOfTwo:function(a){console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");return P.ceilPowerOfTwo(a)}});Object.assign(Z.prototype,{flattenToArrayOffset:function(a,b){console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(a,b)},multiplyVector3:function(a){console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
return a.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(a){console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");return this.applyToBufferAttribute(a)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}});Object.assign(Q.prototype,{extractPosition:function(a){console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
return this.copyPosition(a)},flattenToArrayOffset:function(a,b){console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(a,b)},getPosition:function(){console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");return(new n).setFromMatrixColumn(this,3)},setRotationFromQuaternion:function(a){console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
return this.makeRotationFromQuaternion(a)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(a){console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector4:function(a){console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},
rotateAxis:function(a){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");a.transformDirection(this)},crossVector:function(a){console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},
rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(a){console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");return this.applyToBufferAttribute(a)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(a,b,c,d,e,f){console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
return this.makePerspective(a,b,d,c,e,f)}});Oa.prototype.isIntersectionLine=function(a){console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");return this.intersectsLine(a)};wa.prototype.multiplyVector3=function(a){console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return a.applyQuaternion(this)};Object.assign(Rb.prototype,{isIntersectionBox:function(a){console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
return this.intersectsBox(a)},isIntersectionPlane:function(a){console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");return this.intersectsPlane(a)},isIntersectionSphere:function(a){console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(a)}});Object.assign(ba.prototype,{area:function(){console.warn("THREE.Triangle: .area() has been renamed to .getArea().");return this.getArea()},barycoordFromPoint:function(a,
b){console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");return this.getBarycoord(a,b)},midpoint:function(a){console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");return this.getMidpoint(a)},normal:function(a){console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");return this.getNormal(a)},plane:function(a){console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");return this.getPlane(a)}});Object.assign(ba,
{barycoordFromPoint:function(a,b,c,d,e){console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");return ba.getBarycoord(a,b,c,d,e)},normal:function(a,b,c,d){console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");return ba.getNormal(a,b,c,d)}});Object.assign(Ib.prototype,{extractAllPoints:function(a){console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");return this.extractPoints(a)},extrude:function(a){console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
return new dc(this,a)},makeGeometry:function(a){console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");return new ec(this,a)}});Object.assign(B.prototype,{fromAttribute:function(a,b,c){console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(a,b,c)},distanceToManhattan:function(a){console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");return this.manhattanDistanceTo(a)},
lengthManhattan:function(){console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()}});Object.assign(n.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(a){console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
return this.setFromMatrixPosition(a)},getScaleFromMatrix:function(a){console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(a)},getColumnFromMatrix:function(a,b){console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(b,a)},applyProjection:function(a){console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");return this.applyMatrix4(a)},
fromAttribute:function(a,b,c){console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(a,b,c)},distanceToManhattan:function(a){console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");return this.manhattanDistanceTo(a)},lengthManhattan:function(){console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()}});Object.assign(da.prototype,
{fromAttribute:function(a,b,c){console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(a,b,c)},lengthManhattan:function(){console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()}});Object.assign(G.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")}});
Object.assign(E.prototype,{getChildByName:function(a){console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");return this.getObjectByName(a)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(a,b){console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(b,a)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")}});
Object.defineProperties(E.prototype,{eulerOrder:{get:function(){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");return this.rotation.order},set:function(a){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");this.rotation.order=a}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});
Object.defineProperties(Nd.prototype,{objects:{get:function(){console.warn("THREE.LOD: .objects has been renamed to .levels.");return this.levels}}});Object.defineProperty(Oe.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}});Od.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")};Object.defineProperty(C.prototype,
"__arcLengthDivisions",{get:function(){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");return this.arcLengthDivisions},set:function(a){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");this.arcLengthDivisions=a}});U.prototype.setLens=function(a,b){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");void 0!==b&&(this.filmGauge=b);this.setFocalLength(a)};Object.defineProperties(T.prototype,
{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(a){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");this.shadow.camera.fov=a}},shadowCameraLeft:{set:function(a){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");this.shadow.camera.left=a}},shadowCameraRight:{set:function(a){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");this.shadow.camera.right=a}},shadowCameraTop:{set:function(a){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
this.shadow.camera.top=a}},shadowCameraBottom:{set:function(a){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");this.shadow.camera.bottom=a}},shadowCameraNear:{set:function(a){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");this.shadow.camera.near=a}},shadowCameraFar:{set:function(a){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");this.shadow.camera.far=a}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},
shadowBias:{set:function(a){console.warn("THREE.Light: .shadowBias is now .shadow.bias.");this.shadow.bias=a}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(a){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");this.shadow.mapSize.width=a}},shadowMapHeight:{set:function(a){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");this.shadow.mapSize.height=a}}});Object.defineProperties(N.prototype,
{length:{get:function(){console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");return this.array.length}},dynamic:{get:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");return 35048===this.usage},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");this.setUsage(35048)}}});Object.assign(N.prototype,{setDynamic:function(a){console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");
this.setUsage(!0===a?35048:35044);return this},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},setArray:function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}});Object.assign(D.prototype,{addIndex:function(a){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");this.setIndex(a)},addAttribute:function(a,b,c){console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");
return b&&b.isBufferAttribute||b&&b.isInterleavedBufferAttribute?"index"===a?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(b),this):this.setAttribute(a,b):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(a,new N(b,c)))},addDrawCall:function(a,b,c){void 0!==c&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
this.addGroup(a,b)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},removeAttribute:function(a){console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");return this.deleteAttribute(a)}});
Object.defineProperties(D.prototype,{drawcalls:{get:function(){console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");return this.groups}},offsets:{get:function(){console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");return this.groups}}});Object.defineProperties(pb.prototype,{dynamic:{get:function(){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");return 35048===this.usage},set:function(a){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
this.setUsage(a)}}});Object.assign(pb.prototype,{setDynamic:function(a){console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");this.setUsage(!0===a?35048:35044);return this},setArray:function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}});Object.assign(db.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},
addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}});Object.defineProperties(pf.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");return this}}});
Object.defineProperties(O.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){console.warn("THREE.Material: .wrapRGB has been removed.");return new J}},shading:{get:function(){console.error("THREE."+
this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(a){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.");this.flatShading=1===a}},stencilMask:{get:function(){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead.");return this.stencilFuncMask},set:function(a){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead.");this.stencilFuncMask=
a}}});Object.defineProperties(Ra.prototype,{metal:{get:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");return!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}});Object.defineProperties(va.prototype,{derivatives:{get:function(){console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");return this.extensions.derivatives},
set:function(a){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");this.extensions.derivatives=a}}});Object.assign(hg.prototype,{clearTarget:function(a,b,c,d){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");this.setRenderTarget(a);this.clear(b,c,d)},animate:function(a){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");this.setAnimationLoop(a)},getCurrentRenderTarget:function(){console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
return this.getRenderTarget()},getMaxAnisotropy:function(){console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");return this.capabilities.getMaxAnisotropy()},getPrecision:function(){console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");return this.capabilities.precision},resetGLState:function(){console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");return this.state.reset()},supportsFloatTextures:function(){console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
return this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");return this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");return this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
return this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");return this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");return this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
return this.capabilities.vertexTextures},supportsInstancedArrays:function(){console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");return this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(a){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");this.setScissorTest(a)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},
addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},allocTextureUnit:function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},setTexture:function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},setTexture2D:function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},
setTextureCube:function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},getActiveMipMapLevel:function(){console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");return this.getActiveMipmapLevel()}});Object.defineProperties(hg.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");this.shadowMap.enabled=a}},shadowMapType:{get:function(){return this.shadowMap.type},
set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");this.shadowMap.type=a}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");return this.getContext()}}});
Object.defineProperties(Ih.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},
renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}});Object.defineProperties(Bb.prototype,{activeCubeFace:{set:function(){console.warn("THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().")}},
activeMipMapLevel:{set:function(){console.warn("THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().")}}});Object.defineProperties(Ba.prototype,{wrapS:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");return this.texture.wrapS},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");this.texture.wrapS=a}},wrapT:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
return this.texture.wrapT},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");this.texture.wrapT=a}},magFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");return this.texture.magFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");this.texture.magFilter=a}},minFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");return this.texture.minFilter},
set:function(a){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");this.texture.minFilter=a}},anisotropy:{get:function(){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");return this.texture.anisotropy},set:function(a){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");this.texture.anisotropy=a}},offset:{get:function(){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");return this.texture.offset},
set:function(a){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");this.texture.offset=a}},repeat:{get:function(){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");return this.texture.repeat},set:function(a){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");this.texture.repeat=a}},format:{get:function(){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");return this.texture.format},set:function(a){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
this.texture.format=a}},type:{get:function(){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");return this.texture.type},set:function(a){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");this.texture.type=a}},generateMipmaps:{get:function(){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");return this.texture.generateMipmaps},set:function(a){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
this.texture.generateMipmaps=a}}});Object.defineProperties(gg.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}},userHeight:{set:function(){console.warn("THREE.WebVRManager: .userHeight has been removed.")}}});Object.defineProperties(cd.prototype,{load:{value:function(a){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var b=this;(new nf).load(a,function(a){b.setBuffer(a)});return this}},startTime:{set:function(){console.warn("THREE.Audio: .startTime is now .play( delay ).")}}});
Dg.prototype.getData=function(){console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");return this.getFrequencyData()};Bc.prototype.updateCubeMap=function(a,b){console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");return this.update(a,b)};Jb.crossOrigin=void 0;Jb.loadTexture=function(a,b,c,d){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var e=new Ze;e.setCrossOrigin(this.crossOrigin);a=e.load(a,c,void 0,d);
b&&(a.mapping=b);return a};Jb.loadTextureCube=function(a,b,c,d){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var e=new Ye;e.setCrossOrigin(this.crossOrigin);a=e.load(a,c,void 0,d);b&&(a.mapping=b);return a};Jb.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")};Jb.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};
"undefined"!==typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"110"}}));k.ACESFilmicToneMapping=5;k.AddEquation=100;k.AddOperation=2;k.AdditiveBlending=2;k.AlphaFormat=1021;k.AlwaysDepth=1;k.AlwaysStencilFunc=519;k.AmbientLight=ff;k.AmbientLightProbe=yg;k.AnimationClip=Ma;k.AnimationLoader=pg;k.AnimationMixer=Fg;k.AnimationObjectGroup=ci;k.AnimationUtils=ta;k.ArcCurve=bd;k.ArrayCamera=Jd;k.ArrowHelper=ub;k.Audio=cd;k.AudioAnalyser=Dg;k.AudioContext=
Bg;k.AudioListener=Ag;k.AudioLoader=nf;k.AxesHelper=ve;k.AxisHelper=function(a){console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");return new ve(a)};k.BackSide=1;k.BasicDepthPacking=3200;k.BasicShadowMap=0;k.BinaryTextureLoader=function(a){console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");return new Xe(a)};k.Bone=ig;k.BooleanKeyframeTrack=Te;k.BoundingBoxHelper=function(a,b){console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");
return new tb(a,b)};k.Box2=Ig;k.Box3=ab;k.Box3Helper=te;k.BoxBufferGeometry=Fd;k.BoxGeometry=Zg;k.BoxHelper=tb;k.BufferAttribute=N;k.BufferGeometry=D;k.BufferGeometryLoader=lf;k.ByteType=1010;k.Cache=sc;k.Camera=bb;k.CameraHelper=se;k.CanvasRenderer=function(){console.error("THREE.CanvasRenderer has been removed")};k.CanvasTexture=Pd;k.CatmullRomCurve3=ma;k.CineonToneMapping=4;k.CircleBufferGeometry=Xc;k.CircleGeometry=je;k.ClampToEdgeWrapping=1001;k.Clock=zg;k.ClosedSplineCurve3=ji;k.Color=J;k.ColorKeyframeTrack=
Ue;k.CompressedTexture=Kc;k.CompressedTextureLoader=qg;k.ConeBufferGeometry=ie;k.ConeGeometry=he;k.CubeCamera=Bc;k.CubeGeometry=Zg;k.CubeReflectionMapping=301;k.CubeRefractionMapping=302;k.CubeTexture=nb;k.CubeTextureLoader=Ye;k.CubeUVReflectionMapping=306;k.CubeUVRefractionMapping=307;k.CubicBezierCurve=Sa;k.CubicBezierCurve3=fb;k.CubicInterpolant=Re;k.CullFaceBack=1;k.CullFaceFront=2;k.CullFaceFrontBack=3;k.CullFaceNone=0;k.Curve=C;k.CurvePath=sb;k.CustomBlending=5;k.CylinderBufferGeometry=rb;k.CylinderGeometry=
gc;k.Cylindrical=hi;k.DataTexture=Yb;k.DataTexture2DArray=Cc;k.DataTexture3D=Dc;k.DataTextureLoader=Xe;k.DecrementStencilOp=7683;k.DecrementWrapStencilOp=34056;k.DefaultLoadingManager=Zh;k.DepthFormat=1026;k.DepthStencilFormat=1027;k.DepthTexture=Qd;k.DirectionalLight=ef;k.DirectionalLightHelper=kd;k.DirectionalLightShadow=df;k.DiscreteInterpolant=Se;k.DodecahedronBufferGeometry=Pc;k.DodecahedronGeometry=Wd;k.DoubleSide=2;k.DstAlphaFactor=206;k.DstColorFactor=208;k.DynamicBufferAttribute=function(a,
b){console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");return(new N(a,b)).setDynamic(!0)};k.DynamicCopyUsage=35050;k.DynamicDrawUsage=35048;k.DynamicReadUsage=35049;k.EdgesGeometry=Wc;k.EdgesHelper=function(a,b){console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");return new X(new Wc(a.geometry),new R({color:void 0!==b?b:16777215}))};k.EllipseCurve=Ja;k.EqualDepth=4;k.EqualStencilFunc=514;k.EquirectangularReflectionMapping=
303;k.EquirectangularRefractionMapping=304;k.Euler=Pb;k.EventDispatcher=Aa;k.ExtrudeBufferGeometry=db;k.ExtrudeGeometry=dc;k.Face3=xc;k.Face4=function(a,b,c,d,e,f,g){console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new xc(a,b,c,e,f,g)};k.FaceColors=1;k.FaceNormalsHelper=re;k.FileLoader=Na;k.FlatShading=1;k.Float32Attribute=function(a,b){console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");return new A(a,
b)};k.Float32BufferAttribute=A;k.Float64Attribute=function(a,b){console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");return new Bd(a,b)};k.Float64BufferAttribute=Bd;k.FloatType=1015;k.Fog=Me;k.FogExp2=Le;k.Font=vg;k.FontLoader=wg;k.FrontFaceDirectionCCW=1;k.FrontFaceDirectionCW=0;k.FrontSide=0;k.Frustum=Dd;k.GammaEncoding=3007;k.Geometry=G;k.GeometryUtils={merge:function(a,b,c){console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
if(b.isMesh){b.matrixAutoUpdate&&b.updateMatrix();var d=b.matrix;b=b.geometry}a.merge(b,d,c)},center:function(a){console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");return a.center()}};k.GreaterDepth=6;k.GreaterEqualDepth=5;k.GreaterEqualStencilFunc=518;k.GreaterStencilFunc=516;k.GridHelper=qf;k.Group=Gc;k.HalfFloatType=1016;k.HemisphereLight=$e;k.HemisphereLightHelper=hd;k.HemisphereLightProbe=xg;k.IcosahedronBufferGeometry=Oc;k.IcosahedronGeometry=
Vd;k.ImageBitmapLoader=tg;k.ImageLoader=ad;k.ImageUtils=Jb;k.ImmediateRenderObject=pe;k.IncrementStencilOp=7682;k.IncrementWrapStencilOp=34055;k.InstancedBufferAttribute=kf;k.InstancedBufferGeometry=jf;k.InstancedInterleavedBuffer=Gg;k.InstancedMesh=Pe;k.Int16Attribute=function(a,b){console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");return new zd(a,b)};k.Int16BufferAttribute=zd;k.Int32Attribute=function(a,b){console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");
return new Ad(a,b)};k.Int32BufferAttribute=Ad;k.Int8Attribute=function(a,b){console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");return new wd(a,b)};k.Int8BufferAttribute=wd;k.IntType=1013;k.InterleavedBuffer=pb;k.InterleavedBufferAttribute=Kd;k.Interpolant=Ia;k.InterpolateDiscrete=2300;k.InterpolateLinear=2301;k.InterpolateSmooth=2302;k.InvertStencilOp=5386;k.JSONLoader=function(){console.error("THREE.JSONLoader has been removed.")};k.KeepStencilOp=7680;
k.KeyframeTrack=sa;k.LOD=Nd;k.LatheBufferGeometry=Vc;k.LatheGeometry=ge;k.Layers=Tf;k.LensFlare=function(){console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js")};k.LessDepth=2;k.LessEqualDepth=3;k.LessEqualStencilFunc=515;k.LessStencilFunc=513;k.Light=T;k.LightProbe=Xa;k.LightProbeHelper=id;k.LightShadow=hb;k.Line=ra;k.Line3=Jg;k.LineBasicMaterial=R;k.LineCurve=Da;k.LineCurve3=Ta;k.LineDashedMaterial=nc;k.LineLoop=Qe;k.LinePieces=1;k.LineSegments=X;k.LineStrip=0;k.LinearEncoding=
3E3;k.LinearFilter=1006;k.LinearInterpolant=ke;k.LinearMipMapLinearFilter=1008;k.LinearMipMapNearestFilter=1007;k.LinearMipmapLinearFilter=1008;k.LinearMipmapNearestFilter=1007;k.LinearToneMapping=1;k.Loader=V;k.LoaderUtils=eh;k.LoadingManager=og;k.LogLuvEncoding=3003;k.LoopOnce=2200;k.LoopPingPong=2202;k.LoopRepeat=2201;k.LuminanceAlphaFormat=1025;k.LuminanceFormat=1024;k.MOUSE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2};k.Material=O;k.MaterialLoader=hf;k.Math=P;k.Matrix3=Z;k.Matrix4=Q;k.MaxEquation=
104;k.Mesh=ea;k.MeshBasicMaterial=Ga;k.MeshDepthMaterial=Db;k.MeshDistanceMaterial=Eb;k.MeshFaceMaterial=function(a){console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");return a};k.MeshLambertMaterial=lc;k.MeshMatcapMaterial=mc;k.MeshNormalMaterial=kc;k.MeshPhongMaterial=Ra;k.MeshPhysicalMaterial=ic;k.MeshStandardMaterial=eb;k.MeshToonMaterial=jc;k.MinEquation=103;k.MirroredRepeatWrapping=1002;k.MixOperation=1;k.MultiMaterial=function(a){void 0===a&&(a=[]);console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
a.isMultiMaterial=!0;a.materials=a;a.clone=function(){return a.slice()};return a};k.MultiplyBlending=4;k.MultiplyOperation=0;k.NearestFilter=1003;k.NearestMipMapLinearFilter=1005;k.NearestMipMapNearestFilter=1004;k.NearestMipmapLinearFilter=1005;k.NearestMipmapNearestFilter=1004;k.NeverDepth=0;k.NeverStencilFunc=512;k.NoBlending=0;k.NoColors=0;k.NoToneMapping=0;k.NormalBlending=1;k.NotEqualDepth=7;k.NotEqualStencilFunc=517;k.NumberKeyframeTrack=Zc;k.Object3D=E;k.ObjectLoader=mf;k.ObjectSpaceNormalMap=
1;k.OctahedronBufferGeometry=ac;k.OctahedronGeometry=Ud;k.OneFactor=201;k.OneMinusDstAlphaFactor=207;k.OneMinusDstColorFactor=209;k.OneMinusSrcAlphaFactor=205;k.OneMinusSrcColorFactor=203;k.OrthographicCamera=oe;k.PCFShadowMap=1;k.PCFSoftShadowMap=2;k.ParametricBufferGeometry=Mc;k.ParametricGeometry=Rd;k.Particle=function(a){console.warn("THREE.Particle has been renamed to THREE.Sprite.");return new Ld(a)};k.ParticleBasicMaterial=function(a){console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");
return new Qa(a)};k.ParticleSystem=function(a,b){console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");return new Jc(a,b)};k.ParticleSystemMaterial=function(a){console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");return new Qa(a)};k.Path=Wa;k.PerspectiveCamera=U;k.Plane=Oa;k.PlaneBufferGeometry=Zb;k.PlaneGeometry=Ed;k.PlaneHelper=ue;k.PointCloud=function(a,b){console.warn("THREE.PointCloud has been renamed to THREE.Points.");return new Jc(a,b)};k.PointCloudMaterial=
function(a){console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");return new Qa(a)};k.PointLight=cf;k.PointLightHelper=fd;k.Points=Jc;k.PointsMaterial=Qa;k.PolarGridHelper=rf;k.PolyhedronBufferGeometry=Ea;k.PolyhedronGeometry=Sd;k.PositionalAudio=Cg;k.PositionalAudioHelper=jd;k.PropertyBinding=ya;k.PropertyMixer=Eg;k.QuadraticBezierCurve=Ua;k.QuadraticBezierCurve3=gb;k.Quaternion=wa;k.QuaternionKeyframeTrack=le;k.QuaternionLinearInterpolant=Ve;k.REVISION="110";k.RGBADepthPacking=
3201;k.RGBAFormat=1023;k.RGBA_ASTC_10x10_Format=37819;k.RGBA_ASTC_10x5_Format=37816;k.RGBA_ASTC_10x6_Format=37817;k.RGBA_ASTC_10x8_Format=37818;k.RGBA_ASTC_12x10_Format=37820;k.RGBA_ASTC_12x12_Format=37821;k.RGBA_ASTC_4x4_Format=37808;k.RGBA_ASTC_5x4_Format=37809;k.RGBA_ASTC_5x5_Format=37810;k.RGBA_ASTC_6x5_Format=37811;k.RGBA_ASTC_6x6_Format=37812;k.RGBA_ASTC_8x5_Format=37813;k.RGBA_ASTC_8x6_Format=37814;k.RGBA_ASTC_8x8_Format=37815;k.RGBA_PVRTC_2BPPV1_Format=35843;k.RGBA_PVRTC_4BPPV1_Format=35842;
k.RGBA_S3TC_DXT1_Format=33777;k.RGBA_S3TC_DXT3_Format=33778;k.RGBA_S3TC_DXT5_Format=33779;k.RGBDEncoding=3006;k.RGBEEncoding=3002;k.RGBEFormat=1023;k.RGBFormat=1022;k.RGBM16Encoding=3005;k.RGBM7Encoding=3004;k.RGB_ETC1_Format=36196;k.RGB_PVRTC_2BPPV1_Format=35841;k.RGB_PVRTC_4BPPV1_Format=35840;k.RGB_S3TC_DXT1_Format=33776;k.RawShaderMaterial=Yc;k.Ray=Rb;k.Raycaster=ei;k.RectAreaLight=gf;k.RectAreaLightHelper=gd;k.RedFormat=1028;k.ReinhardToneMapping=2;k.RepeatWrapping=1E3;k.ReplaceStencilOp=7681;
k.ReverseSubtractEquation=102;k.RingBufferGeometry=Uc;k.RingGeometry=fe;k.Scene=vd;k.SceneUtils={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")}};k.ShaderChunk=S;k.ShaderLib=cb;k.ShaderMaterial=va;k.ShadowMaterial=hc;k.Shape=
Ib;k.ShapeBufferGeometry=fc;k.ShapeGeometry=ec;k.ShapePath=ug;k.ShapeUtils=qb;k.ShortType=1011;k.Skeleton=Oe;k.SkeletonHelper=ed;k.SkinnedMesh=Od;k.SmoothShading=2;k.Sphere=mb;k.SphereBufferGeometry=Hb;k.SphereGeometry=ee;k.Spherical=gi;k.SphericalHarmonics3=of;k.SphericalReflectionMapping=305;k.Spline=Lg;k.SplineCurve=Va;k.SplineCurve3=ki;k.SpotLight=bf;k.SpotLightHelper=dd;k.SpotLightShadow=af;k.Sprite=Ld;k.SpriteMaterial=Gb;k.SrcAlphaFactor=204;k.SrcAlphaSaturateFactor=210;k.SrcColorFactor=202;
k.StaticCopyUsage=35046;k.StaticDrawUsage=35044;k.StaticReadUsage=35045;k.StereoCamera=ai;k.StreamCopyUsage=35042;k.StreamDrawUsage=35040;k.StreamReadUsage=35041;k.StringKeyframeTrack=We;k.SubtractEquation=101;k.SubtractiveBlending=3;k.TOUCH={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3};k.TangentSpaceNormalMap=0;k.TetrahedronBufferGeometry=Nc;k.TetrahedronGeometry=Td;k.TextBufferGeometry=Tc;k.TextGeometry=de;k.Texture=Y;k.TextureLoader=Ze;k.TorusBufferGeometry=Rc;k.TorusGeometry=Zd;k.TorusKnotBufferGeometry=
Qc;k.TorusKnotGeometry=Yd;k.Triangle=ba;k.TriangleFanDrawMode=2;k.TriangleStripDrawMode=1;k.TrianglesDrawMode=0;k.TubeBufferGeometry=bc;k.TubeGeometry=Xd;k.UVMapping=300;k.Uint16Attribute=function(a,b){console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");return new Sb(a,b)};k.Uint16BufferAttribute=Sb;k.Uint32Attribute=function(a,b){console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");return new Tb(a,
b)};k.Uint32BufferAttribute=Tb;k.Uint8Attribute=function(a,b){console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");return new xd(a,b)};k.Uint8BufferAttribute=xd;k.Uint8ClampedAttribute=function(a,b){console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");return new yd(a,b)};k.Uint8ClampedBufferAttribute=yd;k.Uncharted2ToneMapping=3;k.Uniform=pf;k.UniformsLib=L;k.UniformsUtils=Ck;k.UnsignedByteType=
1009;k.UnsignedInt248Type=1020;k.UnsignedIntType=1014;k.UnsignedShort4444Type=1017;k.UnsignedShort5551Type=1018;k.UnsignedShort565Type=1019;k.UnsignedShortType=1012;k.VSMShadowMap=3;k.Vector2=B;k.Vector3=n;k.Vector4=da;k.VectorKeyframeTrack=$c;k.Vertex=function(a,b,c){console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");return new n(a,b,c)};k.VertexColors=2;k.VertexNormalsHelper=qe;k.VideoTexture=lg;k.WebGLMultisampleRenderTarget=Sf;k.WebGLRenderTarget=Ba;k.WebGLRenderTargetCube=
Bb;k.WebGLRenderer=hg;k.WebGLUtils=Kh;k.WireframeGeometry=Lc;k.WireframeHelper=function(a,b){console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");return new X(new Lc(a.geometry),new R({color:void 0!==b?b:16777215}))};k.WrapAroundEnding=2402;k.XHRLoader=function(a){console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");return new Na(a)};k.ZeroCurvatureEnding=2400;k.ZeroFactor=200;k.ZeroSlopeEnding=2401;k.ZeroStencilOp=0;k.sRGBEncoding=3001;Object.defineProperty(k,
"__esModule",{value:!0})});